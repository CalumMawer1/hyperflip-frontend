"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@walletconnect";
exports.ids = ["vendor-chunks/@walletconnect"];
exports.modules = {

/***/ "(ssr)/./node_modules/@walletconnect/core/dist/index.es.js":
/*!***********************************************************!*\
  !*** ./node_modules/@walletconnect/core/dist/index.es.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_CONTEXT: () => (/* binding */ he),\n/* harmony export */   CORE_DEFAULT: () => (/* binding */ mt),\n/* harmony export */   CORE_PROTOCOL: () => (/* binding */ xe),\n/* harmony export */   CORE_STORAGE_OPTIONS: () => (/* binding */ vt),\n/* harmony export */   CORE_STORAGE_PREFIX: () => (/* binding */ B),\n/* harmony export */   CORE_VERSION: () => (/* binding */ Oe),\n/* harmony export */   CRYPTO_CLIENT_SEED: () => (/* binding */ Ae),\n/* harmony export */   CRYPTO_CONTEXT: () => (/* binding */ ft),\n/* harmony export */   CRYPTO_JWT_TTL: () => (/* binding */ _t),\n/* harmony export */   Core: () => (/* binding */ co),\n/* harmony export */   Crypto: () => (/* binding */ bi),\n/* harmony export */   ECHO_CONTEXT: () => (/* binding */ Ht),\n/* harmony export */   ECHO_URL: () => (/* binding */ Yt),\n/* harmony export */   EVENTS_CLIENT_API_URL: () => (/* binding */ Zt),\n/* harmony export */   EVENTS_STORAGE_CLEANUP_INTERVAL: () => (/* binding */ Wt),\n/* harmony export */   EVENTS_STORAGE_CONTEXT: () => (/* binding */ Xt),\n/* harmony export */   EVENTS_STORAGE_VERSION: () => (/* binding */ Jt),\n/* harmony export */   EVENT_CLIENT_AUTHENTICATE_ERRORS: () => (/* binding */ Ys),\n/* harmony export */   EVENT_CLIENT_AUTHENTICATE_TRACES: () => (/* binding */ Hs),\n/* harmony export */   EVENT_CLIENT_CONTEXT: () => (/* binding */ Vs),\n/* harmony export */   EVENT_CLIENT_PAIRING_ERRORS: () => (/* binding */ J),\n/* harmony export */   EVENT_CLIENT_PAIRING_TRACES: () => (/* binding */ q),\n/* harmony export */   EVENT_CLIENT_SESSION_ERRORS: () => (/* binding */ Gs),\n/* harmony export */   EVENT_CLIENT_SESSION_TRACES: () => (/* binding */ qs),\n/* harmony export */   EXPIRER_CONTEXT: () => (/* binding */ Kt),\n/* harmony export */   EXPIRER_DEFAULT_TTL: () => (/* binding */ Bs),\n/* harmony export */   EXPIRER_EVENTS: () => (/* binding */ M),\n/* harmony export */   EXPIRER_STORAGE_VERSION: () => (/* binding */ Bt),\n/* harmony export */   EchoClient: () => (/* binding */ Ai),\n/* harmony export */   EventClient: () => (/* binding */ $i),\n/* harmony export */   Expirer: () => (/* binding */ Ri),\n/* harmony export */   HISTORY_CONTEXT: () => (/* binding */ Ft),\n/* harmony export */   HISTORY_EVENTS: () => (/* binding */ F),\n/* harmony export */   HISTORY_STORAGE_VERSION: () => (/* binding */ Mt),\n/* harmony export */   JsonRpcHistory: () => (/* binding */ Si),\n/* harmony export */   KEYCHAIN_CONTEXT: () => (/* binding */ Et),\n/* harmony export */   KEYCHAIN_STORAGE_VERSION: () => (/* binding */ wt),\n/* harmony export */   KeyChain: () => (/* binding */ yi),\n/* harmony export */   MESSAGES_CONTEXT: () => (/* binding */ It),\n/* harmony export */   MESSAGES_STORAGE_VERSION: () => (/* binding */ Tt),\n/* harmony export */   MessageTracker: () => (/* binding */ Di),\n/* harmony export */   PAIRING_CONTEXT: () => (/* binding */ kt),\n/* harmony export */   PAIRING_DEFAULT_TTL: () => (/* binding */ Ks),\n/* harmony export */   PAIRING_EVENTS: () => (/* binding */ se),\n/* harmony export */   PAIRING_RPC_OPTS: () => (/* binding */ ie),\n/* harmony export */   PAIRING_STORAGE_VERSION: () => (/* binding */ Ut),\n/* harmony export */   PENDING_SUB_RESOLUTION_TIMEOUT: () => (/* binding */ Lt),\n/* harmony export */   PUBLISHER_CONTEXT: () => (/* binding */ Ct),\n/* harmony export */   PUBLISHER_DEFAULT_TTL: () => (/* binding */ Ne),\n/* harmony export */   Pairing: () => (/* binding */ Pi),\n/* harmony export */   RELAYER_CONTEXT: () => (/* binding */ Rt),\n/* harmony export */   RELAYER_DEFAULT_LOGGER: () => (/* binding */ St),\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: () => (/* binding */ Pt),\n/* harmony export */   RELAYER_DEFAULT_RELAY_URL: () => (/* binding */ $e),\n/* harmony export */   RELAYER_EVENTS: () => (/* binding */ T),\n/* harmony export */   RELAYER_PROVIDER_EVENTS: () => (/* binding */ L),\n/* harmony export */   RELAYER_RECONNECT_TIMEOUT: () => (/* binding */ Ot),\n/* harmony export */   RELAYER_SDK_VERSION: () => (/* binding */ me),\n/* harmony export */   RELAYER_STORAGE_OPTIONS: () => (/* binding */ Us),\n/* harmony export */   RELAYER_SUBSCRIBER_SUFFIX: () => (/* binding */ xt),\n/* harmony export */   RELAYER_TRANSPORT_CUTOFF: () => (/* binding */ Fs),\n/* harmony export */   Relayer: () => (/* binding */ wi),\n/* harmony export */   STORE_STORAGE_VERSION: () => (/* binding */ At),\n/* harmony export */   SUBSCRIBER_CONTEXT: () => (/* binding */ $t),\n/* harmony export */   SUBSCRIBER_DEFAULT_TTL: () => (/* binding */ Ms),\n/* harmony export */   SUBSCRIBER_EVENTS: () => (/* binding */ $),\n/* harmony export */   SUBSCRIBER_STORAGE_VERSION: () => (/* binding */ zt),\n/* harmony export */   Store: () => (/* binding */ Ci),\n/* harmony export */   Subscriber: () => (/* binding */ fi),\n/* harmony export */   TRANSPORT_TYPES: () => (/* binding */ Q),\n/* harmony export */   TRUSTED_VERIFY_URLS: () => (/* binding */ Gt),\n/* harmony export */   VERIFY_CONTEXT: () => (/* binding */ jt),\n/* harmony export */   VERIFY_SERVER: () => (/* binding */ le),\n/* harmony export */   VERIFY_SERVER_V3: () => (/* binding */ qt),\n/* harmony export */   Verify: () => (/* binding */ xi),\n/* harmony export */   WALLETCONNECT_CLIENT_ID: () => (/* binding */ Nt),\n/* harmony export */   WALLETCONNECT_LINK_MODE_APPS: () => (/* binding */ ze),\n/* harmony export */   \"default\": () => (/* binding */ _e)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/heartbeat */ \"(ssr)/./node_modules/@walletconnect/heartbeat/dist/index.es.js\");\n/* harmony import */ var _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/keyvaluestorage */ \"(ssr)/./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/logger */ \"(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @walletconnect/types */ \"(ssr)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/relay-auth */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uint8arrays */ \"(ssr)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/jsonrpc-ws-connection */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash.isequal */ \"(ssr)/./node_modules/lodash.isequal/index.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_isequal__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @walletconnect/window-getters */ \"(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst xe = \"wc\", Oe = 2, he = \"core\", B = `${xe}@2:${he}:`, mt = {\n    name: he,\n    logger: \"error\"\n}, vt = {\n    database: \":memory:\"\n}, ft = \"crypto\", Ae = \"client_ed25519_seed\", _t = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY, Et = \"keychain\", wt = \"0.3\", It = \"messages\", Tt = \"0.3\", Ne = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.SIX_HOURS, Ct = \"publisher\", Pt = \"irn\", St = \"error\", $e = \"wss://relay.walletconnect.org\", Rt = \"relayer\", T = {\n    message: \"relayer_message\",\n    message_ack: \"relayer_message_ack\",\n    connect: \"relayer_connect\",\n    disconnect: \"relayer_disconnect\",\n    error: \"relayer_error\",\n    connection_stalled: \"relayer_connection_stalled\",\n    transport_closed: \"relayer_transport_closed\",\n    publish: \"relayer_publish\"\n}, xt = \"_subscription\", L = {\n    payload: \"payload\",\n    connect: \"connect\",\n    disconnect: \"disconnect\",\n    error: \"error\"\n}, Ot = .1, Us = {\n    database: \":memory:\"\n}, me = \"2.19.0\", Fs = 1e4, Q = {\n    link_mode: \"link_mode\",\n    relay: \"relay\"\n}, At = \"0.3\", Nt = \"WALLETCONNECT_CLIENT_ID\", ze = \"WALLETCONNECT_LINK_MODE_APPS\", $ = {\n    created: \"subscription_created\",\n    deleted: \"subscription_deleted\",\n    expired: \"subscription_expired\",\n    disabled: \"subscription_disabled\",\n    sync: \"subscription_sync\",\n    resubscribed: \"subscription_resubscribed\"\n}, Ms = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_DAYS, $t = \"subscription\", zt = \"0.3\", Lt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_SECONDS * 1e3, kt = \"pairing\", Ut = \"0.3\", Ks = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_DAYS, ie = {\n    wc_pairingDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 1e3\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 1001\n        }\n    },\n    wc_pairingPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1002\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1003\n        }\n    },\n    unregistered_method: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        }\n    }\n}, se = {\n    create: \"pairing_create\",\n    expire: \"pairing_expire\",\n    delete: \"pairing_delete\",\n    ping: \"pairing_ping\"\n}, F = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, Ft = \"history\", Mt = \"0.3\", Kt = \"expirer\", M = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n}, Bt = \"0.3\", Bs = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY, jt = \"verify-api\", js = \"https://verify.walletconnect.com\", Vt = \"https://verify.walletconnect.org\", le = Vt, qt = `${le}/v3`, Gt = [\n    js,\n    Vt\n], Ht = \"echo\", Yt = \"https://echo.walletconnect.com\", Vs = \"event-client\", q = {\n    pairing_started: \"pairing_started\",\n    pairing_uri_validation_success: \"pairing_uri_validation_success\",\n    pairing_uri_not_expired: \"pairing_uri_not_expired\",\n    store_new_pairing: \"store_new_pairing\",\n    subscribing_pairing_topic: \"subscribing_pairing_topic\",\n    subscribe_pairing_topic_success: \"subscribe_pairing_topic_success\",\n    existing_pairing: \"existing_pairing\",\n    pairing_not_expired: \"pairing_not_expired\",\n    emit_inactive_pairing: \"emit_inactive_pairing\",\n    emit_session_proposal: \"emit_session_proposal\",\n    subscribing_to_pairing_topic: \"subscribing_to_pairing_topic\"\n}, J = {\n    no_wss_connection: \"no_wss_connection\",\n    no_internet_connection: \"no_internet_connection\",\n    malformed_pairing_uri: \"malformed_pairing_uri\",\n    active_pairing_already_exists: \"active_pairing_already_exists\",\n    subscribe_pairing_topic_failure: \"subscribe_pairing_topic_failure\",\n    pairing_expired: \"pairing_expired\",\n    proposal_expired: \"proposal_expired\",\n    proposal_listener_not_found: \"proposal_listener_not_found\"\n}, qs = {\n    session_approve_started: \"session_approve_started\",\n    proposal_not_expired: \"proposal_not_expired\",\n    session_namespaces_validation_success: \"session_namespaces_validation_success\",\n    create_session_topic: \"create_session_topic\",\n    subscribing_session_topic: \"subscribing_session_topic\",\n    subscribe_session_topic_success: \"subscribe_session_topic_success\",\n    publishing_session_approve: \"publishing_session_approve\",\n    session_approve_publish_success: \"session_approve_publish_success\",\n    store_session: \"store_session\",\n    publishing_session_settle: \"publishing_session_settle\",\n    session_settle_publish_success: \"session_settle_publish_success\"\n}, Gs = {\n    no_internet_connection: \"no_internet_connection\",\n    no_wss_connection: \"no_wss_connection\",\n    proposal_expired: \"proposal_expired\",\n    subscribe_session_topic_failure: \"subscribe_session_topic_failure\",\n    session_approve_publish_failure: \"session_approve_publish_failure\",\n    session_settle_publish_failure: \"session_settle_publish_failure\",\n    session_approve_namespace_validation_failure: \"session_approve_namespace_validation_failure\",\n    proposal_not_found: \"proposal_not_found\"\n}, Hs = {\n    authenticated_session_approve_started: \"authenticated_session_approve_started\",\n    authenticated_session_not_expired: \"authenticated_session_not_expired\",\n    chains_caip2_compliant: \"chains_caip2_compliant\",\n    chains_evm_compliant: \"chains_evm_compliant\",\n    create_authenticated_session_topic: \"create_authenticated_session_topic\",\n    cacaos_verified: \"cacaos_verified\",\n    store_authenticated_session: \"store_authenticated_session\",\n    subscribing_authenticated_session_topic: \"subscribing_authenticated_session_topic\",\n    subscribe_authenticated_session_topic_success: \"subscribe_authenticated_session_topic_success\",\n    publishing_authenticated_session_approve: \"publishing_authenticated_session_approve\",\n    authenticated_session_approve_publish_success: \"authenticated_session_approve_publish_success\"\n}, Ys = {\n    no_internet_connection: \"no_internet_connection\",\n    no_wss_connection: \"no_wss_connection\",\n    missing_session_authenticate_request: \"missing_session_authenticate_request\",\n    session_authenticate_request_expired: \"session_authenticate_request_expired\",\n    chains_caip2_compliant_failure: \"chains_caip2_compliant_failure\",\n    chains_evm_compliant_failure: \"chains_evm_compliant_failure\",\n    invalid_cacao: \"invalid_cacao\",\n    subscribe_authenticated_session_topic_failure: \"subscribe_authenticated_session_topic_failure\",\n    authenticated_session_approve_publish_failure: \"authenticated_session_approve_publish_failure\",\n    authenticated_session_pending_request_not_found: \"authenticated_session_pending_request_not_found\"\n}, Jt = .1, Xt = \"event-client\", Wt = 86400, Zt = \"https://pulse.walletconnect.org/batch\";\nfunction Js(n, e) {\n    if (n.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var t = new Uint8Array(256), s = 0; s < t.length; s++)t[s] = 255;\n    for(var i = 0; i < n.length; i++){\n        var r = n.charAt(i), o = r.charCodeAt(0);\n        if (t[o] !== 255) throw new TypeError(r + \" is ambiguous\");\n        t[o] = i;\n    }\n    var a = n.length, c = n.charAt(0), h = Math.log(a) / Math.log(256), u = Math.log(256) / Math.log(a);\n    function g(l) {\n        if (l instanceof Uint8Array || (ArrayBuffer.isView(l) ? l = new Uint8Array(l.buffer, l.byteOffset, l.byteLength) : Array.isArray(l) && (l = Uint8Array.from(l))), !(l instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (l.length === 0) return \"\";\n        for(var y = 0, O = 0, w = 0, v = l.length; w !== v && l[w] === 0;)w++, y++;\n        for(var k = (v - w) * u + 1 >>> 0, I = new Uint8Array(k); w !== v;){\n            for(var V = l[w], X = 0, K = k - 1; (V !== 0 || X < O) && K !== -1; K--, X++)V += 256 * I[K] >>> 0, I[K] = V % a >>> 0, V = V / a >>> 0;\n            if (V !== 0) throw new Error(\"Non-zero carry\");\n            O = X, w++;\n        }\n        for(var Y = k - O; Y !== k && I[Y] === 0;)Y++;\n        for(var ge = c.repeat(y); Y < k; ++Y)ge += n.charAt(I[Y]);\n        return ge;\n    }\n    function m(l) {\n        if (typeof l != \"string\") throw new TypeError(\"Expected String\");\n        if (l.length === 0) return new Uint8Array;\n        var y = 0;\n        if (l[y] !== \" \") {\n            for(var O = 0, w = 0; l[y] === c;)O++, y++;\n            for(var v = (l.length - y) * h + 1 >>> 0, k = new Uint8Array(v); l[y];){\n                var I = t[l.charCodeAt(y)];\n                if (I === 255) return;\n                for(var V = 0, X = v - 1; (I !== 0 || V < w) && X !== -1; X--, V++)I += a * k[X] >>> 0, k[X] = I % 256 >>> 0, I = I / 256 >>> 0;\n                if (I !== 0) throw new Error(\"Non-zero carry\");\n                w = V, y++;\n            }\n            if (l[y] !== \" \") {\n                for(var K = v - w; K !== v && k[K] === 0;)K++;\n                for(var Y = new Uint8Array(O + (v - K)), ge = O; K !== v;)Y[ge++] = k[K++];\n                return Y;\n            }\n        }\n    }\n    function A(l) {\n        var y = m(l);\n        if (y) return y;\n        throw new Error(`Non-${e} character`);\n    }\n    return {\n        encode: g,\n        decodeUnsafe: m,\n        decode: A\n    };\n}\nvar Xs = Js, Ws = Xs;\nconst Qt = (n)=>{\n    if (n instanceof Uint8Array && n.constructor.name === \"Uint8Array\") return n;\n    if (n instanceof ArrayBuffer) return new Uint8Array(n);\n    if (ArrayBuffer.isView(n)) return new Uint8Array(n.buffer, n.byteOffset, n.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, Zs = (n)=>new TextEncoder().encode(n), Qs = (n)=>new TextDecoder().decode(n);\nclass er {\n    constructor(e, t, s){\n        this.name = e, this.prefix = t, this.baseEncode = s;\n    }\n    encode(e) {\n        if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;\n        throw Error(\"Unknown type, must be binary type\");\n    }\n}\nclass tr {\n    constructor(e, t, s){\n        if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;\n    }\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return ei(this, e);\n    }\n}\nclass ir {\n    constructor(e){\n        this.decoders = e;\n    }\n    or(e) {\n        return ei(this, e);\n    }\n    decode(e) {\n        const t = e[0], s = this.decoders[t];\n        if (s) return s.decode(e);\n        throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n}\nconst ei = (n, e)=>new ir({\n        ...n.decoders || {\n            [n.prefix]: n\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nclass sr {\n    constructor(e, t, s, i){\n        this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = i, this.encoder = new er(e, t, s), this.decoder = new tr(e, t, i);\n    }\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n}\nconst ve = ({ name: n, prefix: e, encode: t, decode: s })=>new sr(n, e, t, s), ue = ({ prefix: n, name: e, alphabet: t })=>{\n    const { encode: s, decode: i } = Ws(t, e);\n    return ve({\n        prefix: n,\n        name: e,\n        encode: s,\n        decode: (r)=>Qt(i(r))\n    });\n}, rr = (n, e, t, s)=>{\n    const i = {};\n    for(let u = 0; u < e.length; ++u)i[e[u]] = u;\n    let r = n.length;\n    for(; n[r - 1] === \"=\";)--r;\n    const o = new Uint8Array(r * t / 8 | 0);\n    let a = 0, c = 0, h = 0;\n    for(let u = 0; u < r; ++u){\n        const g = i[n[u]];\n        if (g === void 0) throw new SyntaxError(`Non-${s} character`);\n        c = c << t | g, a += t, a >= 8 && (a -= 8, o[h++] = 255 & c >> a);\n    }\n    if (a >= t || 255 & c << 8 - a) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, nr = (n, e, t)=>{\n    const s = e[e.length - 1] === \"=\", i = (1 << t) - 1;\n    let r = \"\", o = 0, a = 0;\n    for(let c = 0; c < n.length; ++c)for(a = a << 8 | n[c], o += 8; o > t;)o -= t, r += e[i & a >> o];\n    if (o && (r += e[i & a << t - o]), s) for(; r.length * t & 7;)r += \"=\";\n    return r;\n}, C = ({ name: n, prefix: e, bitsPerChar: t, alphabet: s })=>ve({\n        prefix: e,\n        name: n,\n        encode (i) {\n            return nr(i, s, t);\n        },\n        decode (i) {\n            return rr(i, s, t, n);\n        }\n    }), or = ve({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (n)=>Qs(n),\n    decode: (n)=>Zs(n)\n});\nvar ar = Object.freeze({\n    __proto__: null,\n    identity: or\n});\nconst cr = C({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar hr = Object.freeze({\n    __proto__: null,\n    base2: cr\n});\nconst lr = C({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar ur = Object.freeze({\n    __proto__: null,\n    base8: lr\n});\nconst dr = ue({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar pr = Object.freeze({\n    __proto__: null,\n    base10: dr\n});\nconst gr = C({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), yr = C({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar br = Object.freeze({\n    __proto__: null,\n    base16: gr,\n    base16upper: yr\n});\nconst Dr = C({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), mr = C({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), vr = C({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), fr = C({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), _r = C({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), Er = C({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), wr = C({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), Ir = C({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), Tr = C({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar Cr = Object.freeze({\n    __proto__: null,\n    base32: Dr,\n    base32upper: mr,\n    base32pad: vr,\n    base32padupper: fr,\n    base32hex: _r,\n    base32hexupper: Er,\n    base32hexpad: wr,\n    base32hexpadupper: Ir,\n    base32z: Tr\n});\nconst Pr = ue({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), Sr = ue({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar Rr = Object.freeze({\n    __proto__: null,\n    base36: Pr,\n    base36upper: Sr\n});\nconst xr = ue({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Or = ue({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar Ar = Object.freeze({\n    __proto__: null,\n    base58btc: xr,\n    base58flickr: Or\n});\nconst Nr = C({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), $r = C({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), zr = C({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), Lr = C({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar kr = Object.freeze({\n    __proto__: null,\n    base64: Nr,\n    base64pad: $r,\n    base64url: zr,\n    base64urlpad: Lr\n});\nconst ti = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), Ur = ti.reduce((n, e, t)=>(n[t] = e, n), []), Fr = ti.reduce((n, e, t)=>(n[e.codePointAt(0)] = t, n), []);\nfunction Mr(n) {\n    return n.reduce((e, t)=>(e += Ur[t], e), \"\");\n}\nfunction Kr(n) {\n    const e = [];\n    for (const t of n){\n        const s = Fr[t.codePointAt(0)];\n        if (s === void 0) throw new Error(`Non-base256emoji character: ${t}`);\n        e.push(s);\n    }\n    return new Uint8Array(e);\n}\nconst Br = ve({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: Mr,\n    decode: Kr\n});\nvar jr = Object.freeze({\n    __proto__: null,\n    base256emoji: Br\n}), Vr = si, ii = 128, qr = 127, Gr = ~qr, Hr = Math.pow(2, 31);\nfunction si(n, e, t) {\n    e = e || [], t = t || 0;\n    for(var s = t; n >= Hr;)e[t++] = n & 255 | ii, n /= 128;\n    for(; n & Gr;)e[t++] = n & 255 | ii, n >>>= 7;\n    return e[t] = n | 0, si.bytes = t - s + 1, e;\n}\nvar Yr = Le, Jr = 128, ri = 127;\nfunction Le(n, s) {\n    var t = 0, s = s || 0, i = 0, r = s, o, a = n.length;\n    do {\n        if (r >= a) throw Le.bytes = 0, new RangeError(\"Could not decode varint\");\n        o = n[r++], t += i < 28 ? (o & ri) << i : (o & ri) * Math.pow(2, i), i += 7;\n    }while (o >= Jr);\n    return Le.bytes = r - s, t;\n}\nvar Xr = Math.pow(2, 7), Wr = Math.pow(2, 14), Zr = Math.pow(2, 21), Qr = Math.pow(2, 28), en = Math.pow(2, 35), tn = Math.pow(2, 42), sn = Math.pow(2, 49), rn = Math.pow(2, 56), nn = Math.pow(2, 63), on = function(n) {\n    return n < Xr ? 1 : n < Wr ? 2 : n < Zr ? 3 : n < Qr ? 4 : n < en ? 5 : n < tn ? 6 : n < sn ? 7 : n < rn ? 8 : n < nn ? 9 : 10;\n}, an = {\n    encode: Vr,\n    decode: Yr,\n    encodingLength: on\n}, ni = an;\nconst oi = (n, e, t = 0)=>(ni.encode(n, e, t), e), ai = (n)=>ni.encodingLength(n), ke = (n, e)=>{\n    const t = e.byteLength, s = ai(n), i = s + ai(t), r = new Uint8Array(i + t);\n    return oi(n, r, 0), oi(t, r, s), r.set(e, i), new cn(n, t, e, r);\n};\nclass cn {\n    constructor(e, t, s, i){\n        this.code = e, this.size = t, this.digest = s, this.bytes = i;\n    }\n}\nconst ci = ({ name: n, code: e, encode: t })=>new hn(n, e, t);\nclass hn {\n    constructor(e, t, s){\n        this.name = e, this.code = t, this.encode = s;\n    }\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const t = this.encode(e);\n            return t instanceof Uint8Array ? ke(this.code, t) : t.then((s)=>ke(this.code, s));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n}\nconst hi = (n)=>async (e)=>new Uint8Array(await crypto.subtle.digest(n, e)), ln = ci({\n    name: \"sha2-256\",\n    code: 18,\n    encode: hi(\"SHA-256\")\n}), un = ci({\n    name: \"sha2-512\",\n    code: 19,\n    encode: hi(\"SHA-512\")\n});\nvar dn = Object.freeze({\n    __proto__: null,\n    sha256: ln,\n    sha512: un\n});\nconst li = 0, pn = \"identity\", ui = Qt, gn = (n)=>ke(li, ui(n)), yn = {\n    code: li,\n    name: pn,\n    encode: ui,\n    digest: gn\n};\nvar bn = Object.freeze({\n    __proto__: null,\n    identity: yn\n});\nnew TextEncoder, new TextDecoder;\nconst di = {\n    ...ar,\n    ...hr,\n    ...ur,\n    ...pr,\n    ...br,\n    ...Cr,\n    ...Rr,\n    ...Ar,\n    ...kr,\n    ...jr\n};\n({\n    ...dn,\n    ...bn\n});\nfunction Dn(n = 0) {\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(n) : new Uint8Array(n);\n}\nfunction pi(n, e, t, s) {\n    return {\n        name: n,\n        prefix: e,\n        encoder: {\n            name: n,\n            prefix: e,\n            encode: t\n        },\n        decoder: {\n            decode: s\n        }\n    };\n}\nconst gi = pi(\"utf8\", \"u\", (n)=>\"u\" + new TextDecoder(\"utf8\").decode(n), (n)=>new TextEncoder().encode(n.substring(1))), Ue = pi(\"ascii\", \"a\", (n)=>{\n    let e = \"a\";\n    for(let t = 0; t < n.length; t++)e += String.fromCharCode(n[t]);\n    return e;\n}, (n)=>{\n    n = n.substring(1);\n    const e = Dn(n.length);\n    for(let t = 0; t < n.length; t++)e[t] = n.charCodeAt(t);\n    return e;\n}), mn = {\n    utf8: gi,\n    \"utf-8\": gi,\n    hex: di.base16,\n    latin1: Ue,\n    ascii: Ue,\n    binary: Ue,\n    ...di\n};\nfunction vn(n, e = \"utf8\") {\n    const t = mn[e];\n    if (!t) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(n, \"utf8\") : t.decoder.decode(`${t.prefix}${n}`);\n}\nvar fn = Object.defineProperty, _n = (n, e, t)=>e in n ? fn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, G = (n, e, t)=>_n(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass yi {\n    constructor(e, t){\n        this.core = e, this.logger = t, G(this, \"keychain\", new Map), G(this, \"name\", Et), G(this, \"version\", wt), G(this, \"initialized\", !1), G(this, \"storagePrefix\", B), G(this, \"init\", async ()=>{\n            if (!this.initialized) {\n                const s = await this.getKeyChain();\n                typeof s < \"u\" && (this.keychain = s), this.initialized = !0;\n            }\n        }), G(this, \"has\", (s)=>(this.isInitialized(), this.keychain.has(s))), G(this, \"set\", async (s, i)=>{\n            this.isInitialized(), this.keychain.set(s, i), await this.persist();\n        }), G(this, \"get\", (s)=>{\n            this.isInitialized();\n            const i = this.keychain.get(s);\n            if (typeof i > \"u\") {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${s}`);\n                throw new Error(r);\n            }\n            return i;\n        }), G(this, \"del\", async (s)=>{\n            this.isInitialized(), this.keychain.delete(s), await this.persist();\n        }), this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setKeyChain(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.mapToObj)(e));\n    }\n    async getKeyChain() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setKeyChain(this.keychain);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar En = Object.defineProperty, wn = (n, e, t)=>e in n ? En(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, P = (n, e, t)=>wn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass bi {\n    constructor(e, t, s){\n        this.core = e, this.logger = t, P(this, \"name\", ft), P(this, \"keychain\"), P(this, \"randomSessionIdentifier\", (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)()), P(this, \"initialized\", !1), P(this, \"init\", async ()=>{\n            this.initialized || (await this.keychain.init(), this.initialized = !0);\n        }), P(this, \"hasKeys\", (i)=>(this.isInitialized(), this.keychain.has(i))), P(this, \"getClientId\", async ()=>{\n            this.isInitialized();\n            const i = await this.getClientSeed(), r = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.generateKeyPair(i);\n            return _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.encodeIss(r.publicKey);\n        }), P(this, \"generateKeyPair\", ()=>{\n            this.isInitialized();\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateKeyPair)();\n            return this.setPrivateKey(i.publicKey, i.privateKey);\n        }), P(this, \"signJWT\", async (i)=>{\n            this.isInitialized();\n            const r = await this.getClientSeed(), o = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.generateKeyPair(r), a = this.randomSessionIdentifier, c = _t;\n            return await _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.signJWT(a, i, c, o);\n        }), P(this, \"generateSharedKey\", (i, r, o)=>{\n            this.isInitialized();\n            const a = this.getPrivateKey(i), c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deriveSymKey)(a, r);\n            return this.setSymKey(c, o);\n        }), P(this, \"setSymKey\", async (i, r)=>{\n            this.isInitialized();\n            const o = r || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashKey)(i);\n            return await this.keychain.set(o, i), o;\n        }), P(this, \"deleteKeyPair\", async (i)=>{\n            this.isInitialized(), await this.keychain.del(i);\n        }), P(this, \"deleteSymKey\", async (i)=>{\n            this.isInitialized(), await this.keychain.del(i);\n        }), P(this, \"encode\", async (i, r, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.validateEncoding)(o), c = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__.safeJsonStringify)(r);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeTwoEnvelope)(a)) return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.encodeTypeTwoEnvelope)(c, o?.encoding);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeOneEnvelope)(a)) {\n                const m = a.senderPublicKey, A = a.receiverPublicKey;\n                i = await this.generateSharedKey(m, A);\n            }\n            const h = this.getSymKey(i), { type: u, senderPublicKey: g } = a;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.encrypt)({\n                type: u,\n                symKey: h,\n                message: c,\n                senderPublicKey: g,\n                encoding: o?.encoding\n            });\n        }), P(this, \"decode\", async (i, r, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.validateDecoding)(r, o);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeTwoEnvelope)(a)) {\n                const c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.decodeTypeTwoEnvelope)(r, o?.encoding);\n                return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__.safeJsonParse)(c);\n            }\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeOneEnvelope)(a)) {\n                const c = a.receiverPublicKey, h = a.senderPublicKey;\n                i = await this.generateSharedKey(c, h);\n            }\n            try {\n                const c = this.getSymKey(i), h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.decrypt)({\n                    symKey: c,\n                    encoded: r,\n                    encoding: o?.encoding\n                });\n                return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__.safeJsonParse)(h);\n            } catch (c) {\n                this.logger.error(`Failed to decode message from topic: '${i}', clientId: '${await this.getClientId()}'`), this.logger.error(c);\n            }\n        }), P(this, \"getPayloadType\", (i, r = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.BASE64)=>{\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deserialize)({\n                encoded: i,\n                encoding: r\n            });\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.decodeTypeByte)(o.type);\n        }), P(this, \"getPayloadSenderPublicKey\", (i, r = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.BASE64)=>{\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deserialize)({\n                encoded: i,\n                encoding: r\n            });\n            return o.senderPublicKey ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_7__.toString)(o.senderPublicKey, _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.BASE16) : void 0;\n        }), this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.keychain = s || new yi(this.core, this.logger);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async setPrivateKey(e, t) {\n        return await this.keychain.set(e, t), e;\n    }\n    getPrivateKey(e) {\n        return this.keychain.get(e);\n    }\n    async getClientSeed() {\n        let e = \"\";\n        try {\n            e = this.keychain.get(Ae);\n        } catch  {\n            e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)(), await this.keychain.set(Ae, e);\n        }\n        return vn(e, \"base16\");\n    }\n    getSymKey(e) {\n        return this.keychain.get(e);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar In = Object.defineProperty, Tn = (n, e, t)=>e in n ? In(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, H = (n, e, t)=>Tn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Di extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IMessageTracker {\n    constructor(e, t){\n        super(e, t), this.logger = e, this.core = t, H(this, \"messages\", new Map), H(this, \"name\", It), H(this, \"version\", Tt), H(this, \"initialized\", !1), H(this, \"storagePrefix\", B), H(this, \"init\", async ()=>{\n            if (!this.initialized) {\n                this.logger.trace(\"Initialized\");\n                try {\n                    const s = await this.getRelayerMessages();\n                    typeof s < \"u\" && (this.messages = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                        type: \"method\",\n                        method: \"restore\",\n                        size: this.messages.size\n                    });\n                } catch (s) {\n                    this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s);\n                } finally{\n                    this.initialized = !0;\n                }\n            }\n        }), H(this, \"set\", async (s, i)=>{\n            this.isInitialized();\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(i);\n            let o = this.messages.get(s);\n            return typeof o > \"u\" && (o = {}), typeof o[r] < \"u\" || (o[r] = i, this.messages.set(s, o), await this.persist()), r;\n        }), H(this, \"get\", (s)=>{\n            this.isInitialized();\n            let i = this.messages.get(s);\n            return typeof i > \"u\" && (i = {}), i;\n        }), H(this, \"has\", (s, i)=>{\n            this.isInitialized();\n            const r = this.get(s), o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(i);\n            return typeof r[o] < \"u\";\n        }), H(this, \"del\", async (s)=>{\n            this.isInitialized(), this.messages.delete(s), await this.persist();\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e, this.name), this.core = t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setRelayerMessages(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.mapToObj)(e));\n    }\n    async getRelayerMessages() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setRelayerMessages(this.messages);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar Cn = Object.defineProperty, Pn = Object.defineProperties, Sn = Object.getOwnPropertyDescriptors, mi = Object.getOwnPropertySymbols, Rn = Object.prototype.hasOwnProperty, xn = Object.prototype.propertyIsEnumerable, Fe = (n, e, t)=>e in n ? Cn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, fe = (n, e)=>{\n    for(var t in e || (e = {}))Rn.call(e, t) && Fe(n, t, e[t]);\n    if (mi) for (var t of mi(e))xn.call(e, t) && Fe(n, t, e[t]);\n    return n;\n}, Me = (n, e)=>Pn(n, Sn(e)), j = (n, e, t)=>Fe(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass On extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IPublisher {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, j(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), j(this, \"name\", Ct), j(this, \"queue\", new Map), j(this, \"publishTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_MINUTE)), j(this, \"initialPublishTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 15)), j(this, \"needsTransportRestart\", !1), j(this, \"publish\", async (s, i, r)=>{\n            var o;\n            this.logger.debug(\"Publishing Payload\"), this.logger.trace({\n                type: \"method\",\n                method: \"publish\",\n                params: {\n                    topic: s,\n                    message: i,\n                    opts: r\n                }\n            });\n            const a = r?.ttl || Ne, c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(r), h = r?.prompt || !1, u = r?.tag || 0, g = r?.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString(), m = {\n                topic: s,\n                message: i,\n                opts: {\n                    ttl: a,\n                    relay: c,\n                    prompt: h,\n                    tag: u,\n                    id: g,\n                    attestation: r?.attestation,\n                    tvf: r?.tvf\n                }\n            }, A = `Failed to publish payload, please try again. id:${g} tag:${u}`;\n            try {\n                const l = new Promise(async (y)=>{\n                    const O = ({ id: v })=>{\n                        m.opts.id === v && (this.removeRequestFromQueue(v), this.relayer.events.removeListener(T.publish, O), y(m));\n                    };\n                    this.relayer.events.on(T.publish, O);\n                    const w = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(new Promise((v, k)=>{\n                        this.rpcPublish({\n                            topic: s,\n                            message: i,\n                            ttl: a,\n                            prompt: h,\n                            tag: u,\n                            id: g,\n                            attestation: r?.attestation,\n                            tvf: r?.tvf\n                        }).then(v).catch((I)=>{\n                            this.logger.warn(I, I?.message), k(I);\n                        });\n                    }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${g} tag:${u}`);\n                    try {\n                        await w, this.events.removeListener(T.publish, O);\n                    } catch (v) {\n                        this.queue.set(g, Me(fe({}, m), {\n                            attempt: 1\n                        })), this.logger.warn(v, v?.message);\n                    }\n                });\n                this.logger.trace({\n                    type: \"method\",\n                    method: \"publish\",\n                    params: {\n                        id: g,\n                        topic: s,\n                        message: i,\n                        opts: r\n                    }\n                }), await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(l, this.publishTimeout, A);\n            } catch (l) {\n                if (this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(l), (o = r?.internal) != null && o.throwOnFailedPublish) throw l;\n            } finally{\n                this.queue.delete(g);\n            }\n        }), j(this, \"on\", (s, i)=>{\n            this.events.on(s, i);\n        }), j(this, \"once\", (s, i)=>{\n            this.events.once(s, i);\n        }), j(this, \"off\", (s, i)=>{\n            this.events.off(s, i);\n        }), j(this, \"removeListener\", (s, i)=>{\n            this.events.removeListener(s, i);\n        }), this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.registerEventListeners();\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async rpcPublish(e) {\n        var t, s, i, r;\n        const { topic: o, message: a, ttl: c = Ne, prompt: h, tag: u, id: g, attestation: m, tvf: A } = e, l = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)().protocol).publish,\n            params: fe({\n                topic: o,\n                message: a,\n                ttl: c,\n                prompt: h,\n                tag: u,\n                attestation: m\n            }, A),\n            id: g\n        };\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)((t = l.params) == null ? void 0 : t.prompt) && ((s = l.params) == null || delete s.prompt), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)((i = l.params) == null ? void 0 : i.tag) && ((r = l.params) == null || delete r.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"message\",\n            direction: \"outgoing\",\n            request: l\n        });\n        const y = await this.relayer.request(l);\n        return this.relayer.events.emit(T.publish, e), this.logger.debug(\"Successfully Published Payload\"), y;\n    }\n    removeRequestFromQueue(e) {\n        this.queue.delete(e);\n    }\n    checkQueue() {\n        this.queue.forEach(async (e, t)=>{\n            const s = e.attempt + 1;\n            this.queue.set(t, Me(fe({}, e), {\n                attempt: s\n            }));\n            const { topic: i, message: r, opts: o, attestation: a } = e;\n            this.logger.warn({}, `Publisher: queue->publishing: ${e.opts.id}, tag: ${e.opts.tag}, attempt: ${s}`), await this.rpcPublish(Me(fe({}, e), {\n                topic: i,\n                message: r,\n                ttl: o.ttl,\n                prompt: o.prompt,\n                tag: o.tag,\n                id: o.id,\n                attestation: a,\n                tvf: o.tvf\n            })), this.logger.warn({}, `Publisher: queue->published: ${e.opts.id}`);\n        });\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, ()=>{\n            if (this.needsTransportRestart) {\n                this.needsTransportRestart = !1, this.relayer.events.emit(T.connection_stalled);\n                return;\n            }\n            this.checkQueue();\n        }), this.relayer.on(T.message_ack, (e)=>{\n            this.removeRequestFromQueue(e.id.toString());\n        });\n    }\n}\nvar An = Object.defineProperty, Nn = (n, e, t)=>e in n ? An(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, re = (n, e, t)=>Nn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass $n {\n    constructor(){\n        re(this, \"map\", new Map), re(this, \"set\", (e, t)=>{\n            const s = this.get(e);\n            this.exists(e, t) || this.map.set(e, [\n                ...s,\n                t\n            ]);\n        }), re(this, \"get\", (e)=>this.map.get(e) || []), re(this, \"exists\", (e, t)=>this.get(e).includes(t)), re(this, \"delete\", (e, t)=>{\n            if (typeof t > \"u\") {\n                this.map.delete(e);\n                return;\n            }\n            if (!this.map.has(e)) return;\n            const s = this.get(e);\n            if (!this.exists(e, t)) return;\n            const i = s.filter((r)=>r !== t);\n            if (!i.length) {\n                this.map.delete(e);\n                return;\n            }\n            this.map.set(e, i);\n        }), re(this, \"clear\", ()=>{\n            this.map.clear();\n        });\n    }\n    get topics() {\n        return Array.from(this.map.keys());\n    }\n}\nvar zn = Object.defineProperty, Ln = Object.defineProperties, kn = Object.getOwnPropertyDescriptors, vi = Object.getOwnPropertySymbols, Un = Object.prototype.hasOwnProperty, Fn = Object.prototype.propertyIsEnumerable, Ke = (n, e, t)=>e in n ? zn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, de = (n, e)=>{\n    for(var t in e || (e = {}))Un.call(e, t) && Ke(n, t, e[t]);\n    if (vi) for (var t of vi(e))Fn.call(e, t) && Ke(n, t, e[t]);\n    return n;\n}, Be = (n, e)=>Ln(n, kn(e)), D = (n, e, t)=>Ke(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass fi extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.ISubscriber {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, D(this, \"subscriptions\", new Map), D(this, \"topicMap\", new $n), D(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), D(this, \"name\", $t), D(this, \"version\", zt), D(this, \"pending\", new Map), D(this, \"cached\", []), D(this, \"initialized\", !1), D(this, \"pendingSubscriptionWatchLabel\", \"pending_sub_watch_label\"), D(this, \"pollingInterval\", 20), D(this, \"storagePrefix\", B), D(this, \"subscribeTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_MINUTE)), D(this, \"initialSubscribeTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 15)), D(this, \"clientId\"), D(this, \"batchSubscribeTopicsLimit\", 500), D(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), this.registerEventListeners(), await this.restore()), this.initialized = !0;\n        }), D(this, \"subscribe\", async (s, i)=>{\n            this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"subscribe\",\n                params: {\n                    topic: s,\n                    opts: i\n                }\n            });\n            try {\n                const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(i), o = {\n                    topic: s,\n                    relay: r,\n                    transportType: i?.transportType\n                };\n                this.pending.set(s, o);\n                const a = await this.rpcSubscribe(s, r, i);\n                return typeof a == \"string\" && (this.onSubscribe(a, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"subscribe\",\n                    params: {\n                        topic: s,\n                        opts: i\n                    }\n                })), a;\n            } catch (r) {\n                throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(r), r;\n            }\n        }), D(this, \"unsubscribe\", async (s, i)=>{\n            this.isInitialized(), typeof i?.id < \"u\" ? await this.unsubscribeById(s, i.id, i) : await this.unsubscribeByTopic(s, i);\n        }), D(this, \"isSubscribed\", async (s)=>{\n            if (this.topics.includes(s)) return !0;\n            const i = `${this.pendingSubscriptionWatchLabel}_${s}`;\n            return await new Promise((r, o)=>{\n                const a = new _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.Watch;\n                a.start(i);\n                const c = setInterval(()=>{\n                    (!this.pending.has(s) && this.topics.includes(s) || this.cached.some((h)=>h.topic === s)) && (clearInterval(c), a.stop(i), r(!0)), a.elapsed(i) >= Lt && (clearInterval(c), a.stop(i), o(new Error(\"Subscription resolution timeout\")));\n                }, this.pollingInterval);\n            }).catch(()=>!1);\n        }), D(this, \"on\", (s, i)=>{\n            this.events.on(s, i);\n        }), D(this, \"once\", (s, i)=>{\n            this.events.once(s, i);\n        }), D(this, \"off\", (s, i)=>{\n            this.events.off(s, i);\n        }), D(this, \"removeListener\", (s, i)=>{\n            this.events.removeListener(s, i);\n        }), D(this, \"start\", async ()=>{\n            await this.onConnect();\n        }), D(this, \"stop\", async ()=>{\n            await this.onDisconnect();\n        }), D(this, \"restart\", async ()=>{\n            await this.restore(), await this.onRestart();\n        }), D(this, \"checkPending\", async ()=>{\n            if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;\n            const s = [];\n            this.pending.forEach((i)=>{\n                s.push(i);\n            }), await this.batchSubscribe(s);\n        }), D(this, \"registerEventListeners\", ()=>{\n            this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, async ()=>{\n                await this.checkPending();\n            }), this.events.on($.created, async (s)=>{\n                const i = $.created;\n                this.logger.info(`Emitting ${i}`), this.logger.debug({\n                    type: \"event\",\n                    event: i,\n                    data: s\n                }), await this.persist();\n            }), this.events.on($.deleted, async (s)=>{\n                const i = $.deleted;\n                this.logger.info(`Emitting ${i}`), this.logger.debug({\n                    type: \"event\",\n                    event: i,\n                    data: s\n                }), await this.persist();\n            });\n        }), this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.clientId = \"\";\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.subscriptions.size;\n    }\n    get ids() {\n        return Array.from(this.subscriptions.keys());\n    }\n    get values() {\n        return Array.from(this.subscriptions.values());\n    }\n    get topics() {\n        return this.topicMap.topics;\n    }\n    get hasAnyTopics() {\n        return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;\n    }\n    hasSubscription(e, t) {\n        let s = !1;\n        try {\n            s = this.getSubscription(e).topic === t;\n        } catch  {}\n        return s;\n    }\n    reset() {\n        this.cached = [], this.initialized = !0;\n    }\n    onDisable() {\n        this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n    }\n    async unsubscribeByTopic(e, t) {\n        const s = this.topicMap.get(e);\n        await Promise.all(s.map(async (i)=>await this.unsubscribeById(e, i, t)));\n    }\n    async unsubscribeById(e, t, s) {\n        this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({\n            type: \"method\",\n            method: \"unsubscribe\",\n            params: {\n                topic: e,\n                id: t,\n                opts: s\n            }\n        });\n        try {\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(s);\n            await this.restartToComplete({\n                topic: e,\n                id: t,\n                relay: i\n            }), await this.rpcUnsubscribe(e, t, i);\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\", `${this.name}, ${e}`);\n            await this.onUnsubscribe(e, t, r), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"unsubscribe\",\n                params: {\n                    topic: e,\n                    id: t,\n                    opts: s\n                }\n            });\n        } catch (i) {\n            throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(i), i;\n        }\n    }\n    async rpcSubscribe(e, t, s) {\n        var i;\n        (!s || s?.transportType === Q.relay) && await this.restartToComplete({\n            topic: e,\n            id: e,\n            relay: t\n        });\n        const r = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(t.protocol).subscribe,\n            params: {\n                topic: e\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: r\n        });\n        const o = (i = s?.internal) == null ? void 0 : i.throwOnFailedPublish;\n        try {\n            const a = await this.getSubscriptionId(e);\n            if (s?.transportType === Q.link_mode) return setTimeout(()=>{\n                (this.relayer.connected || this.relayer.connecting) && this.relayer.request(r).catch((u)=>this.logger.warn(u));\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND)), a;\n            const c = new Promise(async (u)=>{\n                const g = (m)=>{\n                    m.topic === e && (this.events.removeListener($.created, g), u(m.id));\n                };\n                this.events.on($.created, g);\n                try {\n                    const m = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(new Promise((A, l)=>{\n                        this.relayer.request(r).catch((y)=>{\n                            this.logger.warn(y, y?.message), l(y);\n                        }).then(A);\n                    }), this.initialSubscribeTimeout, `Subscribing to ${e} failed, please try again`);\n                    this.events.removeListener($.created, g), u(m);\n                } catch  {}\n            }), h = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(c, this.subscribeTimeout, `Subscribing to ${e} failed, please try again`);\n            if (!h && o) throw new Error(`Subscribing to ${e} failed, please try again`);\n            return h ? a : null;\n        } catch (a) {\n            if (this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(T.connection_stalled), o) throw a;\n        }\n        return null;\n    }\n    async rpcBatchSubscribe(e) {\n        if (!e.length) return;\n        const t = e[0].relay, s = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(t.protocol).batchSubscribe,\n            params: {\n                topics: e.map((i)=>i.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        });\n        try {\n            await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(new Promise((i)=>{\n                this.relayer.request(s).catch((r)=>this.logger.warn(r)).then(i);\n            }), this.subscribeTimeout, \"rpcBatchSubscribe failed, please try again\");\n        } catch  {\n            this.relayer.events.emit(T.connection_stalled);\n        }\n    }\n    async rpcBatchFetchMessages(e) {\n        if (!e.length) return;\n        const t = e[0].relay, s = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(t.protocol).batchFetchMessages,\n            params: {\n                topics: e.map((r)=>r.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        });\n        let i;\n        try {\n            i = await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(new Promise((r, o)=>{\n                this.relayer.request(s).catch((a)=>{\n                    this.logger.warn(a), o(a);\n                }).then(r);\n            }), this.subscribeTimeout, \"rpcBatchFetchMessages failed, please try again\");\n        } catch  {\n            this.relayer.events.emit(T.connection_stalled);\n        }\n        return i;\n    }\n    rpcUnsubscribe(e, t, s) {\n        const i = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(s.protocol).unsubscribe,\n            params: {\n                topic: e,\n                id: t\n            }\n        };\n        return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: i\n        }), this.relayer.request(i);\n    }\n    onSubscribe(e, t) {\n        this.setSubscription(e, Be(de({}, t), {\n            id: e\n        })), this.pending.delete(t.topic);\n    }\n    onBatchSubscribe(e) {\n        e.length && e.forEach((t)=>{\n            this.setSubscription(t.id, de({}, t)), this.pending.delete(t.topic);\n        });\n    }\n    async onUnsubscribe(e, t, s) {\n        this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, s), await this.relayer.messages.del(e);\n    }\n    async setRelayerSubscriptions(e) {\n        await this.relayer.core.storage.setItem(this.storageKey, e);\n    }\n    async getRelayerSubscriptions() {\n        return await this.relayer.core.storage.getItem(this.storageKey);\n    }\n    setSubscription(e, t) {\n        this.logger.debug(\"Setting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"setSubscription\",\n            id: e,\n            subscription: t\n        }), this.addSubscription(e, t);\n    }\n    addSubscription(e, t) {\n        this.subscriptions.set(e, de({}, t)), this.topicMap.set(t.topic, e), this.events.emit($.created, t);\n    }\n    getSubscription(e) {\n        this.logger.debug(\"Getting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"getSubscription\",\n            id: e\n        });\n        const t = this.subscriptions.get(e);\n        if (!t) {\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(s);\n        }\n        return t;\n    }\n    deleteSubscription(e, t) {\n        this.logger.debug(\"Deleting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"deleteSubscription\",\n            id: e,\n            reason: t\n        });\n        const s = this.getSubscription(e);\n        this.subscriptions.delete(e), this.topicMap.delete(s.topic, e), this.events.emit($.deleted, Be(de({}, s), {\n            reason: t\n        }));\n    }\n    async persist() {\n        await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);\n    }\n    async onRestart() {\n        if (this.cached.length) {\n            const e = [\n                ...this.cached\n            ], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n            for(let s = 0; s < t; s++){\n                const i = e.splice(0, this.batchSubscribeTopicsLimit);\n                await this.batchSubscribe(i);\n            }\n        }\n        this.events.emit($.resubscribed);\n    }\n    async restore() {\n        try {\n            const e = await this.getRelayerSubscriptions();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.subscriptions.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                subscriptions: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);\n        }\n    }\n    async batchSubscribe(e) {\n        e.length && (await this.rpcBatchSubscribe(e), this.onBatchSubscribe(await Promise.all(e.map(async (t)=>Be(de({}, t), {\n                id: await this.getSubscriptionId(t.topic)\n            })))));\n    }\n    async batchFetchMessages(e) {\n        if (!e.length) return;\n        this.logger.trace(`Fetching batch messages for ${e.length} subscriptions`);\n        const t = await this.rpcBatchFetchMessages(e);\n        t && t.messages && (await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.sleep)((0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));\n    }\n    async onConnect() {\n        await this.restart(), this.reset();\n    }\n    onDisconnect() {\n        this.onDisable();\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async restartToComplete(e) {\n        !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e), await this.relayer.transportOpen());\n    }\n    async getClientId() {\n        return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;\n    }\n    async getSubscriptionId(e) {\n        return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(e + await this.getClientId());\n    }\n}\nvar Mn = Object.defineProperty, _i = Object.getOwnPropertySymbols, Kn = Object.prototype.hasOwnProperty, Bn = Object.prototype.propertyIsEnumerable, je = (n, e, t)=>e in n ? Mn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, Ei = (n, e)=>{\n    for(var t in e || (e = {}))Kn.call(e, t) && je(n, t, e[t]);\n    if (_i) for (var t of _i(e))Bn.call(e, t) && je(n, t, e[t]);\n    return n;\n}, p = (n, e, t)=>je(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass wi extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IRelayer {\n    constructor(e){\n        super(e), p(this, \"protocol\", \"wc\"), p(this, \"version\", 2), p(this, \"core\"), p(this, \"logger\"), p(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), p(this, \"provider\"), p(this, \"messages\"), p(this, \"subscriber\"), p(this, \"publisher\"), p(this, \"name\", Rt), p(this, \"transportExplicitlyClosed\", !1), p(this, \"initialized\", !1), p(this, \"connectionAttemptInProgress\", !1), p(this, \"relayUrl\"), p(this, \"projectId\"), p(this, \"packageName\"), p(this, \"bundleId\"), p(this, \"hasExperiencedNetworkDisruption\", !1), p(this, \"pingTimeout\"), p(this, \"heartBeatTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_SECONDS + _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_SECONDS)), p(this, \"reconnectTimeout\"), p(this, \"connectPromise\"), p(this, \"reconnectInProgress\", !1), p(this, \"requestsInFlight\", []), p(this, \"connectTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 15)), p(this, \"request\", async (t)=>{\n            var s, i;\n            this.logger.debug(\"Publishing Request Payload\");\n            const r = t.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString();\n            await this.toEstablishConnection();\n            try {\n                this.logger.trace({\n                    id: r,\n                    method: t.method,\n                    topic: (s = t.params) == null ? void 0 : s.topic\n                }, \"relayer.request - publishing...\");\n                const o = `${r}:${((i = t.params) == null ? void 0 : i.tag) || \"\"}`;\n                this.requestsInFlight.push(o);\n                const a = await this.provider.request(t);\n                return this.requestsInFlight = this.requestsInFlight.filter((c)=>c !== o), a;\n            } catch (o) {\n                throw this.logger.debug(`Failed to Publish Request: ${r}`), o;\n            }\n        }), p(this, \"resetPingTimeout\", ()=>{\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isNode)()) try {\n                clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(()=>{\n                    var t, s, i;\n                    this.logger.debug({}, \"pingTimeout: Connection stalled, terminating...\"), (i = (s = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : s.socket) == null || i.terminate();\n                }, this.heartBeatTimeout);\n            } catch (t) {\n                this.logger.warn(t, t?.message);\n            }\n        }), p(this, \"onPayloadHandler\", (t)=>{\n            this.onProviderPayload(t), this.resetPingTimeout();\n        }), p(this, \"onConnectHandler\", ()=>{\n            this.logger.warn({}, \"Relayer connected \\uD83D\\uDEDC\"), this.startPingTimeout(), this.events.emit(T.connect);\n        }), p(this, \"onDisconnectHandler\", ()=>{\n            this.logger.warn({}, \"Relayer disconnected \\uD83D\\uDED1\"), this.requestsInFlight = [], this.onProviderDisconnect();\n        }), p(this, \"onProviderErrorHandler\", (t)=>{\n            this.logger.fatal(`Fatal socket error: ${t.message}`), this.events.emit(T.error, t), this.logger.fatal(\"Fatal socket error received, closing transport\"), this.transportClose();\n        }), p(this, \"registerProviderListeners\", ()=>{\n            this.provider.on(L.payload, this.onPayloadHandler), this.provider.on(L.connect, this.onConnectHandler), this.provider.on(L.disconnect, this.onDisconnectHandler), this.provider.on(L.error, this.onProviderErrorHandler);\n        }), this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e.logger, this.name) : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: e.logger || St\n        })), this.messages = new Di(this.logger, e.core), this.subscriber = new fi(this, this.logger), this.publisher = new On(this, this.logger), this.relayUrl = e?.relayUrl || $e, this.projectId = e.projectId, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isAndroid)() ? this.packageName = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getAppId)() : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isIos)() && (this.bundleId = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getAppId)()), this.provider = {};\n    }\n    async init() {\n        if (this.logger.trace(\"Initialized\"), this.registerEventListeners(), await Promise.all([\n            this.messages.init(),\n            this.subscriber.init()\n        ]), this.initialized = !0, this.subscriber.hasAnyTopics) try {\n            await this.transportOpen();\n        } catch (e) {\n            this.logger.warn(e, e?.message);\n        }\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get connected() {\n        var e, t, s;\n        return ((s = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : s.readyState) === 1 || !1;\n    }\n    get connecting() {\n        var e, t, s;\n        return ((s = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : s.readyState) === 0 || this.connectPromise !== void 0 || !1;\n    }\n    async publish(e, t, s) {\n        this.isInitialized(), await this.publisher.publish(e, t, s), await this.recordMessageEvent({\n            topic: e,\n            message: t,\n            publishedAt: Date.now(),\n            transportType: Q.relay\n        });\n    }\n    async subscribe(e, t) {\n        var s, i, r;\n        this.isInitialized(), (!(t != null && t.transportType) || t?.transportType === \"relay\") && await this.toEstablishConnection();\n        const o = typeof ((s = t?.internal) == null ? void 0 : s.throwOnFailedPublish) > \"u\" ? !0 : (i = t?.internal) == null ? void 0 : i.throwOnFailedPublish;\n        let a = ((r = this.subscriber.topicMap.get(e)) == null ? void 0 : r[0]) || \"\", c;\n        const h = (u)=>{\n            u.topic === e && (this.subscriber.off($.created, h), c());\n        };\n        return await Promise.all([\n            new Promise((u)=>{\n                c = u, this.subscriber.on($.created, h);\n            }),\n            new Promise(async (u, g)=>{\n                a = await this.subscriber.subscribe(e, Ei({\n                    internal: {\n                        throwOnFailedPublish: o\n                    }\n                }, t)).catch((m)=>{\n                    o && g(m);\n                }) || a, u();\n            })\n        ]), a;\n    }\n    async unsubscribe(e, t) {\n        this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async transportDisconnect() {\n        this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.provider.disconnect(), 2e3, \"provider.disconnect()\").catch(()=>this.onProviderDisconnect()) : this.onProviderDisconnect();\n    }\n    async transportClose() {\n        this.transportExplicitlyClosed = !0, await this.transportDisconnect();\n    }\n    async transportOpen(e) {\n        if (!this.subscriber.hasAnyTopics) {\n            this.logger.warn(\"Starting WS connection skipped because the client has no topics to work with.\");\n            return;\n        }\n        if (this.connectPromise ? (this.logger.debug({}, \"Waiting for existing connection attempt to resolve...\"), await this.connectPromise, this.logger.debug({}, \"Existing connection attempt resolved\")) : (this.connectPromise = new Promise(async (t, s)=>{\n            await this.connect(e).then(t).catch(s).finally(()=>{\n                this.connectPromise = void 0;\n            });\n        }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);\n    }\n    async restartTransport(e) {\n        this.logger.debug({}, \"Restarting transport...\"), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());\n    }\n    async confirmOnlineStateOrThrow() {\n        if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isOnline)()) throw new Error(\"No internet connection detected. Please restart your network and try again.\");\n    }\n    async handleBatchMessageEvents(e) {\n        if (e?.length === 0) {\n            this.logger.trace(\"Batch message events is empty. Ignoring...\");\n            return;\n        }\n        const t = e.sort((s, i)=>s.publishedAt - i.publishedAt);\n        this.logger.debug(`Batch of ${t.length} message events sorted`);\n        for (const s of t)try {\n            await this.onMessageEvent(s);\n        } catch (i) {\n            this.logger.warn(i, \"Error while processing batch message event: \" + i?.message);\n        }\n        this.logger.trace(`Batch of ${t.length} message events processed`);\n    }\n    async onLinkMessageEvent(e, t) {\n        const { topic: s } = e;\n        if (!t.sessionExists) {\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES), r = {\n                topic: s,\n                expiry: i,\n                relay: {\n                    protocol: \"irn\"\n                },\n                active: !1\n            };\n            await this.core.pairing.pairings.set(s, r);\n        }\n        this.events.emit(T.message, e), await this.recordMessageEvent(e);\n    }\n    async connect(e) {\n        await this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, await this.transportDisconnect()), this.connectionAttemptInProgress = !0, this.transportExplicitlyClosed = !1;\n        let t = 1;\n        for(; t < 6;){\n            try {\n                if (this.transportExplicitlyClosed) break;\n                this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (s, i)=>{\n                    const r = ()=>{\n                        i(new Error(\"Connection interrupted while trying to subscribe\"));\n                    };\n                    this.provider.once(L.disconnect, r), await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(new Promise((o, a)=>{\n                        this.provider.connect().then(o).catch(a);\n                    }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o)=>{\n                        i(o);\n                    }).finally(()=>{\n                        this.provider.off(L.disconnect, r), clearTimeout(this.reconnectTimeout);\n                    }), await new Promise(async (o, a)=>{\n                        const c = ()=>{\n                            a(new Error(\"Connection interrupted while trying to subscribe\"));\n                        };\n                        this.provider.once(L.disconnect, c), await this.subscriber.start().then(o).catch(a).finally(()=>{\n                            this.provider.off(L.disconnect, c);\n                        });\n                    }), this.hasExperiencedNetworkDisruption = !1, s();\n                });\n            } catch (s) {\n                await this.subscriber.stop();\n                const i = s;\n                this.logger.warn({}, i.message), this.hasExperiencedNetworkDisruption = !0;\n            } finally{\n                this.connectionAttemptInProgress = !1;\n            }\n            if (this.connected) {\n                this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);\n                break;\n            }\n            await new Promise((s)=>setTimeout(s, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(t * 1))), t++;\n        }\n    }\n    startPingTimeout() {\n        var e, t, s, i, r;\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isNode)()) try {\n            (t = (e = this.provider) == null ? void 0 : e.connection) != null && t.socket && ((r = (i = (s = this.provider) == null ? void 0 : s.connection) == null ? void 0 : i.socket) == null || r.on(\"ping\", ()=>{\n                this.resetPingTimeout();\n            })), this.resetPingTimeout();\n        } catch (o) {\n            this.logger.warn(o, o?.message);\n        }\n    }\n    async createProvider() {\n        this.provider.connection && this.unregisterProviderListeners();\n        const e = await this.core.crypto.signJWT(this.relayUrl);\n        this.provider = new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__.JsonRpcProvider(new _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__[\"default\"]((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatRelayRpcUrl)({\n            sdkVersion: me,\n            protocol: this.protocol,\n            version: this.version,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId,\n            auth: e,\n            useOnCloseEvent: !0,\n            bundleId: this.bundleId,\n            packageName: this.packageName\n        }))), this.registerProviderListeners();\n    }\n    async recordMessageEvent(e) {\n        const { topic: t, message: s } = e;\n        await this.messages.set(t, s);\n    }\n    async shouldIgnoreMessageEvent(e) {\n        const { topic: t, message: s } = e;\n        if (!s || s.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${s}`), !0;\n        if (!await this.subscriber.isSubscribed(t)) return this.logger.warn(`Ignoring message for non-subscribed topic ${t}`), !0;\n        const i = this.messages.has(t, s);\n        return i && this.logger.warn(`Ignoring duplicate message: ${s}`), i;\n    }\n    async onProviderPayload(e) {\n        if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"incoming\",\n            payload: e\n        }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(e)) {\n            if (!e.method.endsWith(xt)) return;\n            const t = e.params, { topic: s, message: i, publishedAt: r, attestation: o } = t.data, a = {\n                topic: s,\n                message: i,\n                publishedAt: r,\n                transportType: Q.relay,\n                attestation: o\n            };\n            this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(Ei({\n                type: \"event\",\n                event: t.id\n            }, a)), this.events.emit(t.id, a), await this.acknowledgePayload(e), await this.onMessageEvent(a);\n        } else (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(e) && this.events.emit(T.message_ack, e);\n    }\n    async onMessageEvent(e) {\n        await this.shouldIgnoreMessageEvent(e) || (this.events.emit(T.message, e), await this.recordMessageEvent(e));\n    }\n    async acknowledgePayload(e) {\n        const t = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(e.id, !0);\n        await this.provider.connection.send(t);\n    }\n    unregisterProviderListeners() {\n        this.provider.off(L.payload, this.onPayloadHandler), this.provider.off(L.connect, this.onConnectHandler), this.provider.off(L.disconnect, this.onDisconnectHandler), this.provider.off(L.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);\n    }\n    async registerEventListeners() {\n        let e = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isOnline)();\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.subscribeToNetworkChange)(async (t)=>{\n            e !== t && (e = t, t ? await this.transportOpen().catch((s)=>this.logger.error(s, s?.message)) : (this.hasExperiencedNetworkDisruption = !0, await this.transportDisconnect(), this.transportExplicitlyClosed = !1));\n        });\n    }\n    async onProviderDisconnect() {\n        clearTimeout(this.pingTimeout), this.events.emit(T.disconnect), this.connectionAttemptInProgress = !1, !this.reconnectInProgress && (this.reconnectInProgress = !0, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async ()=>{\n            await this.transportOpen().catch((e)=>this.logger.error(e, e?.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = !1;\n        }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(Ot)))));\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async toEstablishConnection() {\n        await this.confirmOnlineStateOrThrow(), !this.connected && await this.connect();\n    }\n}\nvar jn = Object.defineProperty, Ii = Object.getOwnPropertySymbols, Vn = Object.prototype.hasOwnProperty, qn = Object.prototype.propertyIsEnumerable, Ve = (n, e, t)=>e in n ? jn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, Ti = (n, e)=>{\n    for(var t in e || (e = {}))Vn.call(e, t) && Ve(n, t, e[t]);\n    if (Ii) for (var t of Ii(e))qn.call(e, t) && Ve(n, t, e[t]);\n    return n;\n}, z = (n, e, t)=>Ve(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Ci extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IStore {\n    constructor(e, t, s, i = B, r = void 0){\n        super(e, t, s, i), this.core = e, this.logger = t, this.name = s, z(this, \"map\", new Map), z(this, \"version\", At), z(this, \"cached\", []), z(this, \"initialized\", !1), z(this, \"getKey\"), z(this, \"storagePrefix\", B), z(this, \"recentlyDeleted\", []), z(this, \"recentlyDeletedLimit\", 200), z(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((o)=>{\n                this.getKey && o !== null && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)(o) ? this.map.set(this.getKey(o), o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isProposalStruct)(o) ? this.map.set(o.id, o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isSessionStruct)(o) && this.map.set(o.topic, o);\n            }), this.cached = [], this.initialized = !0);\n        }), z(this, \"set\", async (o, a)=>{\n            this.isInitialized(), this.map.has(o) ? await this.update(o, a) : (this.logger.debug(\"Setting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                key: o,\n                value: a\n            }), this.map.set(o, a), await this.persist());\n        }), z(this, \"get\", (o)=>(this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                key: o\n            }), this.getData(o))), z(this, \"getAll\", (o)=>(this.isInitialized(), o ? this.values.filter((a)=>Object.keys(o).every((c)=>lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default()(a[c], o[c]))) : this.values)), z(this, \"update\", async (o, a)=>{\n            this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                key: o,\n                update: a\n            });\n            const c = Ti(Ti({}, this.getData(o)), a);\n            this.map.set(o, c), await this.persist();\n        }), z(this, \"delete\", async (o, a)=>{\n            this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                key: o,\n                reason: a\n            }), this.map.delete(o), this.addToRecentlyDeleted(o), await this.persist());\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.storagePrefix = i, this.getKey = r;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.map.size;\n    }\n    get keys() {\n        return Array.from(this.map.keys());\n    }\n    get values() {\n        return Array.from(this.map.values());\n    }\n    addToRecentlyDeleted(e) {\n        this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);\n    }\n    async setDataStore(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getDataStore() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getData(e) {\n        const t = this.map.get(e);\n        if (!t) {\n            if (this.recentlyDeleted.includes(e)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", `Record was recently deleted - ${this.name}: ${e}`);\n                throw this.logger.error(i), new Error(i);\n            }\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.error(s), new Error(s);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setDataStore(this.values);\n    }\n    async restore() {\n        try {\n            const e = await this.getDataStore();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.map.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                value: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar Gn = Object.defineProperty, Hn = (n, e, t)=>e in n ? Gn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, d = (n, e, t)=>Hn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Pi {\n    constructor(e, t){\n        this.core = e, this.logger = t, d(this, \"name\", kt), d(this, \"version\", Ut), d(this, \"events\", new (events__WEBPACK_IMPORTED_MODULE_0___default())), d(this, \"pairings\"), d(this, \"initialized\", !1), d(this, \"storagePrefix\", B), d(this, \"ignoredPayloadTypes\", [\n            _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.TYPE_1\n        ]), d(this, \"registeredMethods\", []), d(this, \"init\", async ()=>{\n            this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n        }), d(this, \"register\", ({ methods: s })=>{\n            this.isInitialized(), this.registeredMethods = [\n                ...new Set([\n                    ...this.registeredMethods,\n                    ...s\n                ])\n            ];\n        }), d(this, \"create\", async (s)=>{\n            this.isInitialized();\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)(), r = await this.core.crypto.setSymKey(i), o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES), a = {\n                protocol: Pt\n            }, c = {\n                topic: r,\n                expiry: o,\n                relay: a,\n                active: !1,\n                methods: s?.methods\n            }, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatUri)({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: r,\n                symKey: i,\n                relay: a,\n                expiryTimestamp: o,\n                methods: s?.methods\n            });\n            return this.events.emit(se.create, c), this.core.expirer.set(r, o), await this.pairings.set(r, c), await this.core.relayer.subscribe(r, {\n                transportType: s?.transportType\n            }), {\n                topic: r,\n                uri: h\n            };\n        }), d(this, \"pair\", async (s)=>{\n            this.isInitialized();\n            const i = this.core.eventClient.createEvent({\n                properties: {\n                    topic: s?.uri,\n                    trace: [\n                        q.pairing_started\n                    ]\n                }\n            });\n            this.isValidPair(s, i);\n            const { topic: r, symKey: o, relay: a, expiryTimestamp: c, methods: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseUri)(s.uri);\n            i.props.properties.topic = r, i.addTrace(q.pairing_uri_validation_success), i.addTrace(q.pairing_uri_not_expired);\n            let u;\n            if (this.pairings.keys.includes(r)) {\n                if (u = this.pairings.get(r), i.addTrace(q.existing_pairing), u.active) throw i.setError(J.active_pairing_already_exists), new Error(`Pairing already exists: ${r}. Please try again with a new connection URI.`);\n                i.addTrace(q.pairing_not_expired);\n            }\n            const g = c || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES), m = {\n                topic: r,\n                relay: a,\n                expiry: g,\n                active: !1,\n                methods: h\n            };\n            this.core.expirer.set(r, g), await this.pairings.set(r, m), i.addTrace(q.store_new_pairing), s.activatePairing && await this.activate({\n                topic: r\n            }), this.events.emit(se.create, m), i.addTrace(q.emit_inactive_pairing), this.core.crypto.keychain.has(r) || await this.core.crypto.setSymKey(o, r), i.addTrace(q.subscribing_pairing_topic);\n            try {\n                await this.core.relayer.confirmOnlineStateOrThrow();\n            } catch  {\n                i.setError(J.no_internet_connection);\n            }\n            try {\n                await this.core.relayer.subscribe(r, {\n                    relay: a\n                });\n            } catch (A) {\n                throw i.setError(J.subscribe_pairing_topic_failure), A;\n            }\n            return i.addTrace(q.subscribe_pairing_topic_success), m;\n        }), d(this, \"activate\", async ({ topic: s })=>{\n            this.isInitialized();\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES);\n            this.core.expirer.set(s, i), await this.pairings.update(s, {\n                active: !0,\n                expiry: i\n            });\n        }), d(this, \"ping\", async (s)=>{\n            this.isInitialized(), await this.isValidPing(s), this.logger.warn(\"ping() is deprecated and will be removed in the next major release.\");\n            const { topic: i } = s;\n            if (this.pairings.keys.includes(i)) {\n                const r = await this.sendRequest(i, \"wc_pairingPing\", {}), { done: o, resolve: a, reject: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", r), ({ error: h })=>{\n                    h ? c(h) : a();\n                }), await o();\n            }\n        }), d(this, \"updateExpiry\", async ({ topic: s, expiry: i })=>{\n            this.isInitialized(), await this.pairings.update(s, {\n                expiry: i\n            });\n        }), d(this, \"updateMetadata\", async ({ topic: s, metadata: i })=>{\n            this.isInitialized(), await this.pairings.update(s, {\n                peerMetadata: i\n            });\n        }), d(this, \"getPairings\", ()=>(this.isInitialized(), this.pairings.values)), d(this, \"disconnect\", async (s)=>{\n            this.isInitialized(), await this.isValidDisconnect(s);\n            const { topic: i } = s;\n            this.pairings.keys.includes(i) && (await this.sendRequest(i, \"wc_pairingDelete\", (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\")), await this.deletePairing(i));\n        }), d(this, \"formatUriFromPairing\", (s)=>{\n            this.isInitialized();\n            const { topic: i, relay: r, expiry: o, methods: a } = s, c = this.core.crypto.keychain.get(i);\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatUri)({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: i,\n                symKey: c,\n                relay: r,\n                expiryTimestamp: o,\n                methods: a\n            });\n        }), d(this, \"sendRequest\", async (s, i, r)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(i, r), a = await this.core.crypto.encode(s, o), c = ie[i].req;\n            return this.core.history.set(s, o), this.core.relayer.publish(s, a, c), o.id;\n        }), d(this, \"sendResult\", async (s, i, r)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(s, r), a = await this.core.crypto.encode(i, o), c = (await this.core.history.get(i, s)).request.method, h = ie[c].res;\n            await this.core.relayer.publish(i, a, h), await this.core.history.resolve(o);\n        }), d(this, \"sendError\", async (s, i, r)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcError)(s, r), a = await this.core.crypto.encode(i, o), c = (await this.core.history.get(i, s)).request.method, h = ie[c] ? ie[c].res : ie.unregistered_method.res;\n            await this.core.relayer.publish(i, a, h), await this.core.history.resolve(o);\n        }), d(this, \"deletePairing\", async (s, i)=>{\n            await this.core.relayer.unsubscribe(s), await Promise.all([\n                this.pairings.delete(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\")),\n                this.core.crypto.deleteSymKey(s),\n                i ? Promise.resolve() : this.core.expirer.del(s)\n            ]);\n        }), d(this, \"cleanup\", async ()=>{\n            const s = this.pairings.getAll().filter((i)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isExpired)(i.expiry));\n            await Promise.all(s.map((i)=>this.deletePairing(i.topic)));\n        }), d(this, \"onRelayEventRequest\", (s)=>{\n            const { topic: i, payload: r } = s;\n            switch(r.method){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingRequest(i, r);\n                case \"wc_pairingDelete\":\n                    return this.onPairingDeleteRequest(i, r);\n                default:\n                    return this.onUnknownRpcMethodRequest(i, r);\n            }\n        }), d(this, \"onRelayEventResponse\", async (s)=>{\n            const { topic: i, payload: r } = s, o = (await this.core.history.get(i, r.id)).request.method;\n            switch(o){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingResponse(i, r);\n                default:\n                    return this.onUnknownRpcMethodResponse(o);\n            }\n        }), d(this, \"onPairingPingRequest\", async (s, i)=>{\n            const { id: r } = i;\n            try {\n                this.isValidPing({\n                    topic: s\n                }), await this.sendResult(r, s, !0), this.events.emit(se.ping, {\n                    id: r,\n                    topic: s\n                });\n            } catch (o) {\n                await this.sendError(r, s, o), this.logger.error(o);\n            }\n        }), d(this, \"onPairingPingResponse\", (s, i)=>{\n            const { id: r } = i;\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResult)(i) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", r), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(i) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", r), {\n                    error: i.error\n                });\n            }, 500);\n        }), d(this, \"onPairingDeleteRequest\", async (s, i)=>{\n            const { id: r } = i;\n            try {\n                this.isValidDisconnect({\n                    topic: s\n                }), await this.deletePairing(s), this.events.emit(se.delete, {\n                    id: r,\n                    topic: s\n                });\n            } catch (o) {\n                await this.sendError(r, s, o), this.logger.error(o);\n            }\n        }), d(this, \"onUnknownRpcMethodRequest\", async (s, i)=>{\n            const { id: r, method: o } = i;\n            try {\n                if (this.registeredMethods.includes(o)) return;\n                const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", o);\n                await this.sendError(r, s, a), this.logger.error(a);\n            } catch (a) {\n                await this.sendError(r, s, a), this.logger.error(a);\n            }\n        }), d(this, \"onUnknownRpcMethodResponse\", (s)=>{\n            this.registeredMethods.includes(s) || this.logger.error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", s));\n        }), d(this, \"isValidPair\", (s, i)=>{\n            var r;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(s)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", `pair() params: ${s}`);\n                throw i.setError(J.malformed_pairing_uri), new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidUrl)(s.uri)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", `pair() uri: ${s.uri}`);\n                throw i.setError(J.malformed_pairing_uri), new Error(a);\n            }\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseUri)(s?.uri);\n            if (!((r = o?.relay) != null && r.protocol)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#relay-protocol\");\n                throw i.setError(J.malformed_pairing_uri), new Error(a);\n            }\n            if (!(o != null && o.symKey)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#symKey\");\n                throw i.setError(J.malformed_pairing_uri), new Error(a);\n            }\n            if (o != null && o.expiryTimestamp && (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(o?.expiryTimestamp) < Date.now()) {\n                i.setError(J.pairing_expired);\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"EXPIRED\", \"pair() URI has expired. Please try again with a new connection URI.\");\n                throw new Error(a);\n            }\n        }), d(this, \"isValidPing\", async (s)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(s)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", `ping() params: ${s}`);\n                throw new Error(r);\n            }\n            const { topic: i } = s;\n            await this.isValidPairingTopic(i);\n        }), d(this, \"isValidDisconnect\", async (s)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(s)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", `disconnect() params: ${s}`);\n                throw new Error(r);\n            }\n            const { topic: i } = s;\n            await this.isValidPairingTopic(i);\n        }), d(this, \"isValidPairingTopic\", async (s)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidString)(s, !1)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${s}`);\n                throw new Error(i);\n            }\n            if (!this.pairings.keys.includes(s)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${s}`);\n                throw new Error(i);\n            }\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isExpired)(this.pairings.get(s).expiry)) {\n                await this.deletePairing(s);\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"EXPIRED\", `pairing topic: ${s}`);\n                throw new Error(i);\n            }\n        }), this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.pairings = new Ci(this.core, this.logger, this.name, this.storagePrefix);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    registerRelayerEvents() {\n        this.core.relayer.on(T.message, async (e)=>{\n            const { topic: t, message: s, transportType: i } = e;\n            if (!this.pairings.keys.includes(t) || i === Q.link_mode || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s))) return;\n            const r = await this.core.crypto.decode(t, s);\n            try {\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(r) ? (this.core.history.set(t, r), this.onRelayEventRequest({\n                    topic: t,\n                    payload: r\n                })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(r) && (await this.core.history.resolve(r), await this.onRelayEventResponse({\n                    topic: t,\n                    payload: r\n                }), this.core.history.delete(t, r.id));\n            } catch (o) {\n                this.logger.error(o);\n            }\n        });\n    }\n    registerExpirerEvents() {\n        this.core.expirer.on(M.expired, async (e)=>{\n            const { topic: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseExpirerTarget)(e.target);\n            t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(se.expire, {\n                topic: t\n            }));\n        });\n    }\n}\nvar Yn = Object.defineProperty, Jn = (n, e, t)=>e in n ? Yn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, S = (n, e, t)=>Jn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Si extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IJsonRpcHistory {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, S(this, \"records\", new Map), S(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), S(this, \"name\", Ft), S(this, \"version\", Mt), S(this, \"cached\", []), S(this, \"initialized\", !1), S(this, \"storagePrefix\", B), S(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s)=>this.records.set(s.id, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }), S(this, \"set\", (s, i, r)=>{\n            if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                topic: s,\n                request: i,\n                chainId: r\n            }), this.records.has(i.id)) return;\n            const o = {\n                id: i.id,\n                topic: s,\n                request: {\n                    method: i.method,\n                    params: i.params || null\n                },\n                chainId: r,\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_DAYS)\n            };\n            this.records.set(o.id, o), this.persist(), this.events.emit(F.created, o);\n        }), S(this, \"resolve\", async (s)=>{\n            if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                response: s\n            }), !this.records.has(s.id)) return;\n            const i = await this.getRecord(s.id);\n            typeof i.response > \"u\" && (i.response = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(s) ? {\n                error: s.error\n            } : {\n                result: s.result\n            }, this.records.set(i.id, i), this.persist(), this.events.emit(F.updated, i));\n        }), S(this, \"get\", async (s, i)=>(this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                topic: s,\n                id: i\n            }), await this.getRecord(i))), S(this, \"delete\", (s, i)=>{\n            this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                id: i\n            }), this.values.forEach((r)=>{\n                if (r.topic === s) {\n                    if (typeof i < \"u\" && r.id !== i) return;\n                    this.records.delete(r.id), this.events.emit(F.deleted, r);\n                }\n            }), this.persist();\n        }), S(this, \"exists\", async (s, i)=>(this.isInitialized(), this.records.has(i) ? (await this.getRecord(i)).topic === s : !1)), S(this, \"on\", (s, i)=>{\n            this.events.on(s, i);\n        }), S(this, \"once\", (s, i)=>{\n            this.events.once(s, i);\n        }), S(this, \"off\", (s, i)=>{\n            this.events.off(s, i);\n        }), S(this, \"removeListener\", (s, i)=>{\n            this.events.removeListener(s, i);\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get size() {\n        return this.records.size;\n    }\n    get keys() {\n        return Array.from(this.records.keys());\n    }\n    get values() {\n        return Array.from(this.records.values());\n    }\n    get pending() {\n        const e = [];\n        return this.values.forEach((t)=>{\n            if (typeof t.response < \"u\") return;\n            const s = {\n                topic: t.topic,\n                request: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(t.request.method, t.request.params, t.id),\n                chainId: t.chainId\n            };\n            return e.push(s);\n        }), e;\n    }\n    async setJsonRpcRecords(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getJsonRpcRecords() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getRecord(e) {\n        this.isInitialized();\n        const t = this.records.get(e);\n        if (!t) {\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(s);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setJsonRpcRecords(this.values), this.events.emit(F.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getJsonRpcRecords();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.records.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                records: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);\n        }\n    }\n    registerEventListeners() {\n        this.events.on(F.created, (e)=>{\n            const t = F.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.events.on(F.updated, (e)=>{\n            const t = F.updated;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.events.on(F.deleted, (e)=>{\n            const t = F.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, ()=>{\n            this.cleanup();\n        });\n    }\n    cleanup() {\n        try {\n            this.isInitialized();\n            let e = !1;\n            this.records.forEach((t)=>{\n                (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(F.deleted, t, !1), e = !0);\n            }), e && this.persist();\n        } catch (e) {\n            this.logger.warn(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar Xn = Object.defineProperty, Wn = (n, e, t)=>e in n ? Xn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, x = (n, e, t)=>Wn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Ri extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IExpirer {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, x(this, \"expirations\", new Map), x(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), x(this, \"name\", Kt), x(this, \"version\", Bt), x(this, \"cached\", []), x(this, \"initialized\", !1), x(this, \"storagePrefix\", B), x(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s)=>this.expirations.set(s.target, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }), x(this, \"has\", (s)=>{\n            try {\n                const i = this.formatTarget(s);\n                return typeof this.getExpiration(i) < \"u\";\n            } catch  {\n                return !1;\n            }\n        }), x(this, \"set\", (s, i)=>{\n            this.isInitialized();\n            const r = this.formatTarget(s), o = {\n                target: r,\n                expiry: i\n            };\n            this.expirations.set(r, o), this.checkExpiry(r, o), this.events.emit(M.created, {\n                target: r,\n                expiration: o\n            });\n        }), x(this, \"get\", (s)=>{\n            this.isInitialized();\n            const i = this.formatTarget(s);\n            return this.getExpiration(i);\n        }), x(this, \"del\", (s)=>{\n            if (this.isInitialized(), this.has(s)) {\n                const i = this.formatTarget(s), r = this.getExpiration(i);\n                this.expirations.delete(i), this.events.emit(M.deleted, {\n                    target: i,\n                    expiration: r\n                });\n            }\n        }), x(this, \"on\", (s, i)=>{\n            this.events.on(s, i);\n        }), x(this, \"once\", (s, i)=>{\n            this.events.once(s, i);\n        }), x(this, \"off\", (s, i)=>{\n            this.events.off(s, i);\n        }), x(this, \"removeListener\", (s, i)=>{\n            this.events.removeListener(s, i);\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.expirations.size;\n    }\n    get keys() {\n        return Array.from(this.expirations.keys());\n    }\n    get values() {\n        return Array.from(this.expirations.values());\n    }\n    formatTarget(e) {\n        if (typeof e == \"string\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatTopicTarget)(e);\n        if (typeof e == \"number\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatIdTarget)(e);\n        const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"UNKNOWN_TYPE\", `Target type: ${typeof e}`);\n        throw new Error(t);\n    }\n    async setExpirations(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getExpirations() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    async persist() {\n        await this.setExpirations(this.values), this.events.emit(M.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getExpirations();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.expirations.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                expirations: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);\n        }\n    }\n    getExpiration(e) {\n        const t = this.expirations.get(e);\n        if (!t) {\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.warn(s), new Error(s);\n        }\n        return t;\n    }\n    checkExpiry(e, t) {\n        const { expiry: s } = t;\n        (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(s) - Date.now() <= 0 && this.expire(e, t);\n    }\n    expire(e, t) {\n        this.expirations.delete(e), this.events.emit(M.expired, {\n            target: e,\n            expiration: t\n        });\n    }\n    checkExpirations() {\n        this.core.relayer.connected && this.expirations.forEach((e, t)=>this.checkExpiry(t, e));\n    }\n    registerEventListeners() {\n        this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, ()=>this.checkExpirations()), this.events.on(M.created, (e)=>{\n            const t = M.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(M.expired, (e)=>{\n            const t = M.expired;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(M.deleted, (e)=>{\n            const t = M.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar Zn = Object.defineProperty, Qn = (n, e, t)=>e in n ? Zn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, _ = (n, e, t)=>Qn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass xi extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IVerify {\n    constructor(e, t, s){\n        super(e, t, s), this.core = e, this.logger = t, this.store = s, _(this, \"name\", jt), _(this, \"abortController\"), _(this, \"isDevEnv\"), _(this, \"verifyUrlV3\", qt), _(this, \"storagePrefix\", B), _(this, \"version\", Oe), _(this, \"publicKey\"), _(this, \"fetchPromise\"), _(this, \"init\", async ()=>{\n            var i;\n            this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)((i = this.publicKey) == null ? void 0 : i.expiresAt) < Date.now() && (this.logger.debug(\"verify v2 public key expired\"), await this.removePublicKey()));\n        }), _(this, \"register\", async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isBrowser)() || this.isDevEnv) return;\n            const r = window.location.origin, { id: o, decryptedId: a } = i, c = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${r}&id=${o}&decryptedId=${a}`;\n            try {\n                const h = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_12__.getDocument)(), u = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 5), g = await new Promise((m, A)=>{\n                    const l = ()=>{\n                        window.removeEventListener(\"message\", O), h.body.removeChild(y), A(\"attestation aborted\");\n                    };\n                    this.abortController.signal.addEventListener(\"abort\", l);\n                    const y = h.createElement(\"iframe\");\n                    y.src = c, y.style.display = \"none\", y.addEventListener(\"error\", l, {\n                        signal: this.abortController.signal\n                    });\n                    const O = (w)=>{\n                        if (w.data && typeof w.data == \"string\") try {\n                            const v = JSON.parse(w.data);\n                            if (v.type === \"verify_attestation\") {\n                                if ((0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.decodeJWT)(v.attestation).payload.id !== o) return;\n                                clearInterval(u), h.body.removeChild(y), this.abortController.signal.removeEventListener(\"abort\", l), window.removeEventListener(\"message\", O), m(v.attestation === null ? \"\" : v.attestation);\n                            }\n                        } catch (v) {\n                            this.logger.warn(v);\n                        }\n                    };\n                    h.body.appendChild(y), window.addEventListener(\"message\", O, {\n                        signal: this.abortController.signal\n                    });\n                });\n                return this.logger.debug(\"jwt attestation\", g), g;\n            } catch (h) {\n                this.logger.warn(h);\n            }\n            return \"\";\n        }), _(this, \"resolve\", async (i)=>{\n            if (this.isDevEnv) return \"\";\n            const { attestationId: r, hash: o, encryptedId: a } = i;\n            if (r === \"\") {\n                this.logger.debug(\"resolve: attestationId is empty, skipping\");\n                return;\n            }\n            if (r) {\n                if ((0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.decodeJWT)(r).payload.id !== a) return;\n                const h = await this.isValidJwtAttestation(r);\n                if (h) {\n                    if (!h.isVerified) {\n                        this.logger.warn(\"resolve: jwt attestation: origin url not verified\");\n                        return;\n                    }\n                    return h;\n                }\n            }\n            if (!o) return;\n            const c = this.getVerifyUrl(i?.verifyUrl);\n            return this.fetchAttestation(o, c);\n        }), _(this, \"fetchAttestation\", async (i, r)=>{\n            this.logger.debug(`resolving attestation: ${i} from url: ${r}`);\n            const o = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 5), a = await fetch(`${r}/attestation/${i}?v2Supported=true`, {\n                signal: this.abortController.signal\n            });\n            return clearTimeout(o), a.status === 200 ? await a.json() : void 0;\n        }), _(this, \"getVerifyUrl\", (i)=>{\n            let r = i || le;\n            return Gt.includes(r) || (this.logger.info(`verify url: ${r}, not included in trusted list, assigning default: ${le}`), r = le), r;\n        }), _(this, \"fetchPublicKey\", async ()=>{\n            try {\n                this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);\n                const i = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_SECONDS), r = await fetch(`${this.verifyUrlV3}/public-key`, {\n                    signal: this.abortController.signal\n                });\n                return clearTimeout(i), await r.json();\n            } catch (i) {\n                this.logger.warn(i);\n            }\n        }), _(this, \"persistPublicKey\", async (i)=>{\n            this.logger.debug(\"persisting public key to local storage\", i), await this.store.setItem(this.storeKey, i), this.publicKey = i;\n        }), _(this, \"removePublicKey\", async ()=>{\n            this.logger.debug(\"removing verify v2 public key from storage\"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;\n        }), _(this, \"isValidJwtAttestation\", async (i)=>{\n            const r = await this.getPublicKey();\n            try {\n                if (r) return this.validateAttestation(i, r);\n            } catch (a) {\n                this.logger.error(a), this.logger.warn(\"error validating attestation\");\n            }\n            const o = await this.fetchAndPersistPublicKey();\n            try {\n                if (o) return this.validateAttestation(i, o);\n            } catch (a) {\n                this.logger.error(a), this.logger.warn(\"error validating attestation\");\n            }\n        }), _(this, \"getPublicKey\", async ()=>this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), _(this, \"fetchAndPersistPublicKey\", async ()=>{\n            if (this.fetchPromise) return await this.fetchPromise, this.publicKey;\n            this.fetchPromise = new Promise(async (r)=>{\n                const o = await this.fetchPublicKey();\n                o && (await this.persistPublicKey(o), r(o));\n            });\n            const i = await this.fetchPromise;\n            return this.fetchPromise = void 0, i;\n        }), _(this, \"validateAttestation\", (i, r)=>{\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.verifyP256Jwt)(i, r.publicKey), a = {\n                hasExpired: (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(o.exp) < Date.now(),\n                payload: o\n            };\n            if (a.hasExpired) throw this.logger.warn(\"resolve: jwt attestation expired\"), new Error(\"JWT attestation expired\");\n            return {\n                origin: a.payload.origin,\n                isScam: a.payload.isScam,\n                isVerified: a.payload.isVerified\n            };\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.abortController = new AbortController, this.isDevEnv = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTestRun)(), this.init();\n    }\n    get storeKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//verify:public:key\";\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    startAbortTimer(e) {\n        return this.abortController = new AbortController, setTimeout(()=>this.abortController.abort(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(e));\n    }\n}\nvar eo = Object.defineProperty, to = (n, e, t)=>e in n ? eo(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, Oi = (n, e, t)=>to(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Ai extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IEchoClient {\n    constructor(e, t){\n        super(e, t), this.projectId = e, this.logger = t, Oi(this, \"context\", Ht), Oi(this, \"registerDeviceToken\", async (s)=>{\n            const { clientId: i, token: r, notificationType: o, enableEncrypted: a = !1 } = s, c = `${Yt}/${this.projectId}/clients`;\n            await fetch(c, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    client_id: i,\n                    type: o,\n                    token: r,\n                    always_raw: a\n                })\n            });\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.context);\n    }\n}\nvar io = Object.defineProperty, Ni = Object.getOwnPropertySymbols, so = Object.prototype.hasOwnProperty, ro = Object.prototype.propertyIsEnumerable, qe = (n, e, t)=>e in n ? io(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, pe = (n, e)=>{\n    for(var t in e || (e = {}))so.call(e, t) && qe(n, t, e[t]);\n    if (Ni) for (var t of Ni(e))ro.call(e, t) && qe(n, t, e[t]);\n    return n;\n}, E = (n, e, t)=>qe(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass $i extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IEventClient {\n    constructor(e, t, s = !0){\n        super(e, t, s), this.core = e, this.logger = t, E(this, \"context\", Xt), E(this, \"storagePrefix\", B), E(this, \"storageVersion\", Jt), E(this, \"events\", new Map), E(this, \"shouldPersist\", !1), E(this, \"init\", async ()=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTestRun)()) try {\n                const i = {\n                    eventId: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.uuidv4)(),\n                    timestamp: Date.now(),\n                    domain: this.getAppDomain(),\n                    props: {\n                        event: \"INIT\",\n                        type: \"\",\n                        properties: {\n                            client_id: await this.core.crypto.getClientId(),\n                            user_agent: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatUA)(this.core.relayer.protocol, this.core.relayer.version, me)\n                        }\n                    }\n                };\n                await this.sendEvent([\n                    i\n                ]);\n            } catch (i) {\n                this.logger.warn(i);\n            }\n        }), E(this, \"createEvent\", (i)=>{\n            const { event: r = \"ERROR\", type: o = \"\", properties: { topic: a, trace: c } } = i, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.uuidv4)(), u = this.core.projectId || \"\", g = Date.now(), m = pe({\n                eventId: h,\n                timestamp: g,\n                props: {\n                    event: r,\n                    type: o,\n                    properties: {\n                        topic: a,\n                        trace: c\n                    }\n                },\n                bundleId: u,\n                domain: this.getAppDomain()\n            }, this.setMethods(h));\n            return this.telemetryEnabled && (this.events.set(h, m), this.shouldPersist = !0), m;\n        }), E(this, \"getEvent\", (i)=>{\n            const { eventId: r, topic: o } = i;\n            if (r) return this.events.get(r);\n            const a = Array.from(this.events.values()).find((c)=>c.props.properties.topic === o);\n            if (a) return pe(pe({}, a), this.setMethods(a.eventId));\n        }), E(this, \"deleteEvent\", (i)=>{\n            const { eventId: r } = i;\n            this.events.delete(r), this.shouldPersist = !0;\n        }), E(this, \"setEventListeners\", ()=>{\n            this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, async ()=>{\n                this.shouldPersist && await this.persist(), this.events.forEach((i)=>{\n                    (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.fromMiliseconds)(Date.now()) - (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.fromMiliseconds)(i.timestamp) > Wt && (this.events.delete(i.eventId), this.shouldPersist = !0);\n                });\n            });\n        }), E(this, \"setMethods\", (i)=>({\n                addTrace: (r)=>this.addTrace(i, r),\n                setError: (r)=>this.setError(i, r)\n            })), E(this, \"addTrace\", (i, r)=>{\n            const o = this.events.get(i);\n            o && (o.props.properties.trace.push(r), this.events.set(i, o), this.shouldPersist = !0);\n        }), E(this, \"setError\", (i, r)=>{\n            const o = this.events.get(i);\n            o && (o.props.type = r, o.timestamp = Date.now(), this.events.set(i, o), this.shouldPersist = !0);\n        }), E(this, \"persist\", async ()=>{\n            await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = !1;\n        }), E(this, \"restore\", async ()=>{\n            try {\n                const i = await this.core.storage.getItem(this.storageKey) || [];\n                if (!i.length) return;\n                i.forEach((r)=>{\n                    this.events.set(r.eventId, pe(pe({}, r), this.setMethods(r.eventId)));\n                });\n            } catch (i) {\n                this.logger.warn(i);\n            }\n        }), E(this, \"submit\", async ()=>{\n            if (!this.telemetryEnabled || this.events.size === 0) return;\n            const i = [];\n            for (const [r, o] of this.events)o.props.type && i.push(o);\n            if (i.length !== 0) try {\n                if ((await this.sendEvent(i)).ok) for (const r of i)this.events.delete(r.eventId), this.shouldPersist = !0;\n            } catch (r) {\n                this.logger.warn(r);\n            }\n        }), E(this, \"sendEvent\", async (i)=>{\n            const r = this.getAppDomain() ? \"\" : \"&sp=desktop\";\n            return await fetch(`${Zt}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${me}${r}`, {\n                method: \"POST\",\n                body: JSON.stringify(i)\n            });\n        }), E(this, \"getAppDomain\", ()=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getAppMetadata)().url), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.context), this.telemetryEnabled = s, s ? this.restore().then(async ()=>{\n            await this.submit(), this.setEventListeners();\n        }) : this.persist();\n    }\n    get storageKey() {\n        return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + \"//\" + this.context;\n    }\n}\nvar no = Object.defineProperty, zi = Object.getOwnPropertySymbols, oo = Object.prototype.hasOwnProperty, ao = Object.prototype.propertyIsEnumerable, Ge = (n, e, t)=>e in n ? no(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, Li = (n, e)=>{\n    for(var t in e || (e = {}))oo.call(e, t) && Ge(n, t, e[t]);\n    if (zi) for (var t of zi(e))ao.call(e, t) && Ge(n, t, e[t]);\n    return n;\n}, f = (n, e, t)=>Ge(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass _e extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.ICore {\n    constructor(e){\n        var t;\n        super(e), f(this, \"protocol\", xe), f(this, \"version\", Oe), f(this, \"name\", he), f(this, \"relayUrl\"), f(this, \"projectId\"), f(this, \"customStoragePrefix\"), f(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), f(this, \"logger\"), f(this, \"heartbeat\"), f(this, \"relayer\"), f(this, \"crypto\"), f(this, \"storage\"), f(this, \"history\"), f(this, \"expirer\"), f(this, \"pairing\"), f(this, \"verify\"), f(this, \"echoClient\"), f(this, \"linkModeSupportedApps\"), f(this, \"eventClient\"), f(this, \"initialized\", !1), f(this, \"logChunkController\"), f(this, \"on\", (o, a)=>this.events.on(o, a)), f(this, \"once\", (o, a)=>this.events.once(o, a)), f(this, \"off\", (o, a)=>this.events.off(o, a)), f(this, \"removeListener\", (o, a)=>this.events.removeListener(o, a)), f(this, \"dispatchEnvelope\", ({ topic: o, message: a, sessionExists: c })=>{\n            if (!o || !a) return;\n            const h = {\n                topic: o,\n                message: a,\n                publishedAt: Date.now(),\n                transportType: Q.link_mode\n            };\n            this.relayer.onLinkMessageEvent(h, {\n                sessionExists: c\n            });\n        }), this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || $e, this.customStoragePrefix = e != null && e.customStoragePrefix ? `:${e.customStoragePrefix}` : \"\";\n        const s = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: typeof e?.logger == \"string\" && e.logger ? e.logger : mt.logger,\n            name: he\n        }), { logger: i, chunkLoggerController: r } = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generatePlatformLogger)({\n            opts: s,\n            maxSizeInBytes: e?.maxLogBlobSizeInBytes,\n            loggerOverride: e?.logger\n        });\n        this.logChunkController = r, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async ()=>{\n            var o, a;\n            (o = this.logChunkController) != null && o.downloadLogsBlobInBrowser && ((a = this.logChunkController) == null || a.downloadLogsBlobInBrowser({\n                clientId: await this.crypto.getClientId()\n            }));\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(i, this.name), this.heartbeat = new _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HeartBeat, this.crypto = new bi(this, this.logger, e?.keychain), this.history = new Si(this, this.logger), this.expirer = new Ri(this, this.logger), this.storage = e != null && e.storage ? e.storage : new _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_2__[\"default\"](Li(Li({}, vt), e?.storageOptions)), this.relayer = new wi({\n            core: this,\n            logger: this.logger,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId\n        }), this.pairing = new Pi(this, this.logger), this.verify = new xi(this, this.logger, this.storage), this.echoClient = new Ai(this.projectId || \"\", this.logger), this.linkModeSupportedApps = [], this.eventClient = new $i(this, this.logger, e?.telemetryEnabled);\n    }\n    static async init(e) {\n        const t = new _e(e);\n        await t.initialize();\n        const s = await t.crypto.getClientId();\n        return await t.storage.setItem(Nt, s), t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async start() {\n        this.initialized || await this.initialize();\n    }\n    async getLogsBlob() {\n        var e;\n        return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({\n            clientId: await this.crypto.getClientId()\n        });\n    }\n    async addLinkModeSupportedApp(e) {\n        this.linkModeSupportedApps.includes(e) || (this.linkModeSupportedApps.push(e), await this.storage.setItem(ze, this.linkModeSupportedApps));\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(ze) || [], this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n        } catch (e) {\n            throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;\n        }\n    }\n}\nconst co = _e;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/core/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyValueStorage: () => (/* binding */ h),\n/* harmony export */   \"default\": () => (/* binding */ h)\n/* harmony export */ });\n/* harmony import */ var unstorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unstorage */ \"(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs\");\n/* harmony import */ var idb_keyval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! idb-keyval */ \"(ssr)/./node_modules/idb-keyval/dist/index.js\");\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\n\nfunction C(i) {\n    return i;\n}\nconst x = \"idb-keyval\";\nvar z = (i = {})=>{\n    const t = i.base && i.base.length > 0 ? `${i.base}:` : \"\", e = (s)=>t + s;\n    let n;\n    return i.dbName && i.storeName && (n = (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.createStore)(i.dbName, i.storeName)), {\n        name: x,\n        options: i,\n        async hasItem (s) {\n            return !(typeof await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get)(e(s), n) > \"u\");\n        },\n        async getItem (s) {\n            return await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get)(e(s), n) ?? null;\n        },\n        setItem (s, a) {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.set)(e(s), a, n);\n        },\n        removeItem (s) {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.del)(e(s), n);\n        },\n        getKeys () {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.keys)(n);\n        },\n        clear () {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.clear)(n);\n        }\n    };\n};\nconst D = \"WALLET_CONNECT_V2_INDEXED_DB\", E = \"keyvaluestorage\";\nclass _ {\n    constructor(){\n        this.indexedDb = (0,unstorage__WEBPACK_IMPORTED_MODULE_2__.createStorage)({\n            driver: z({\n                dbName: D,\n                storeName: E\n            })\n        });\n    }\n    async getKeys() {\n        return this.indexedDb.getKeys();\n    }\n    async getEntries() {\n        return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t)=>[\n                t.key,\n                t.value\n            ]);\n    }\n    async getItem(t) {\n        const e = await this.indexedDb.getItem(t);\n        if (e !== null) return e;\n    }\n    async setItem(t, e) {\n        await this.indexedDb.setItem(t, (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonStringify)(e));\n    }\n    async removeItem(t) {\n        await this.indexedDb.removeItem(t);\n    }\n}\nvar l = typeof globalThis < \"u\" ? globalThis :  false ? 0 : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {}, c = {\n    exports: {}\n};\n(function() {\n    let i;\n    function t() {}\n    i = t, i.prototype.getItem = function(e) {\n        return this.hasOwnProperty(e) ? String(this[e]) : null;\n    }, i.prototype.setItem = function(e, n) {\n        this[e] = String(n);\n    }, i.prototype.removeItem = function(e) {\n        delete this[e];\n    }, i.prototype.clear = function() {\n        const e = this;\n        Object.keys(e).forEach(function(n) {\n            e[n] = void 0, delete e[n];\n        });\n    }, i.prototype.key = function(e) {\n        return e = e || 0, Object.keys(this)[e];\n    }, i.prototype.__defineGetter__(\"length\", function() {\n        return Object.keys(this).length;\n    }), typeof l < \"u\" && l.localStorage ? c.exports = l.localStorage :  false ? 0 : c.exports = new t;\n})();\nfunction k(i) {\n    var t;\n    return [\n        i[0],\n        (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonParse)((t = i[1]) != null ? t : \"\")\n    ];\n}\nclass K {\n    constructor(){\n        this.localStorage = c.exports;\n    }\n    async getKeys() {\n        return Object.keys(this.localStorage);\n    }\n    async getEntries() {\n        return Object.entries(this.localStorage).map(k);\n    }\n    async getItem(t) {\n        const e = this.localStorage.getItem(t);\n        if (e !== null) return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonParse)(e);\n    }\n    async setItem(t, e) {\n        this.localStorage.setItem(t, (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonStringify)(e));\n    }\n    async removeItem(t) {\n        this.localStorage.removeItem(t);\n    }\n}\nconst N = \"wc_storage_version\", y = 1, O = async (i, t, e)=>{\n    const n = N, s = await t.getItem(n);\n    if (s && s >= y) {\n        e(t);\n        return;\n    }\n    const a = await i.getKeys();\n    if (!a.length) {\n        e(t);\n        return;\n    }\n    const m = [];\n    for(; a.length;){\n        const r = a.shift();\n        if (!r) continue;\n        const o = r.toLowerCase();\n        if (o.includes(\"wc@\") || o.includes(\"walletconnect\") || o.includes(\"wc_\") || o.includes(\"wallet_connect\")) {\n            const f = await i.getItem(r);\n            await t.setItem(r, f), m.push(r);\n        }\n    }\n    await t.setItem(n, y), e(t), j(i, m);\n}, j = async (i, t)=>{\n    t.length && t.forEach(async (e)=>{\n        await i.removeItem(e);\n    });\n};\nclass h {\n    constructor(){\n        this.initialized = !1, this.setInitialized = (e)=>{\n            this.storage = e, this.initialized = !0;\n        };\n        const t = new K;\n        this.storage = t;\n        try {\n            const e = new _;\n            O(t, e, this.setInitialized);\n        } catch  {\n            this.initialized = !0;\n        }\n    }\n    async getKeys() {\n        return await this.initialize(), this.storage.getKeys();\n    }\n    async getEntries() {\n        return await this.initialize(), this.storage.getEntries();\n    }\n    async getItem(t) {\n        return await this.initialize(), this.storage.getItem(t);\n    }\n    async setItem(t, e) {\n        return await this.initialize(), this.storage.setItem(t, e);\n    }\n    async removeItem(t) {\n        return await this.initialize(), this.storage.removeItem(t);\n    }\n    async initialize() {\n        this.initialized || await new Promise((t)=>{\n            const e = setInterval(()=>{\n                this.initialized && (clearInterval(e), t());\n            }, 20);\n        });\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/crypto.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;\nfunction getBrowerCrypto() {\n    return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};\n}\nexports.getBrowerCrypto = getBrowerCrypto;\nfunction getSubtleCrypto() {\n    const browserCrypto = getBrowerCrypto();\n    return browserCrypto.subtle || browserCrypto.webkitSubtle;\n}\nexports.getSubtleCrypto = getSubtleCrypto;\nfunction isBrowserCryptoAvailable() {\n    return !!getBrowerCrypto() && !!getSubtleCrypto();\n}\nexports.isBrowserCryptoAvailable = isBrowserCryptoAvailable; //# sourceMappingURL=crypto.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvY3J5cHRvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQ0FBZ0MsR0FBR0EsdUJBQXVCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDNUYsU0FBU0k7SUFDTCxPQUFPLENBQUNDLFdBQVcsUUFBUUEsV0FBVyxLQUFLLElBQUksS0FBSyxJQUFJQSxPQUFPQyxNQUFNLEtBQU1ELENBQUFBLFdBQVcsUUFBUUEsV0FBVyxLQUFLLElBQUksS0FBSyxJQUFJQSxPQUFPRSxRQUFRLEtBQUssQ0FBQztBQUNwSjtBQUNBUCx1QkFBdUIsR0FBR0k7QUFDMUIsU0FBU0Q7SUFDTCxNQUFNSyxnQkFBZ0JKO0lBQ3RCLE9BQU9JLGNBQWNDLE1BQU0sSUFBSUQsY0FBY0UsWUFBWTtBQUM3RDtBQUNBVix1QkFBdUIsR0FBR0c7QUFDMUIsU0FBU0Q7SUFDTCxPQUFPLENBQUMsQ0FBQ0UscUJBQXFCLENBQUMsQ0FBQ0Q7QUFDcEM7QUFDQUgsZ0NBQWdDLEdBQUdFLDBCQUNuQyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvY3J5cHRvLmpzPzZkZDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSA9IGV4cG9ydHMuZ2V0U3VidGxlQ3J5cHRvID0gZXhwb3J0cy5nZXRCcm93ZXJDcnlwdG8gPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXRCcm93ZXJDcnlwdG8oKSB7XG4gICAgcmV0dXJuIChnbG9iYWwgPT09IG51bGwgfHwgZ2xvYmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWwuY3J5cHRvKSB8fCAoZ2xvYmFsID09PSBudWxsIHx8IGdsb2JhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2xvYmFsLm1zQ3J5cHRvKSB8fCB7fTtcbn1cbmV4cG9ydHMuZ2V0QnJvd2VyQ3J5cHRvID0gZ2V0QnJvd2VyQ3J5cHRvO1xuZnVuY3Rpb24gZ2V0U3VidGxlQ3J5cHRvKCkge1xuICAgIGNvbnN0IGJyb3dzZXJDcnlwdG8gPSBnZXRCcm93ZXJDcnlwdG8oKTtcbiAgICByZXR1cm4gYnJvd3NlckNyeXB0by5zdWJ0bGUgfHwgYnJvd3NlckNyeXB0by53ZWJraXRTdWJ0bGU7XG59XG5leHBvcnRzLmdldFN1YnRsZUNyeXB0byA9IGdldFN1YnRsZUNyeXB0bztcbmZ1bmN0aW9uIGlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSgpIHtcbiAgICByZXR1cm4gISFnZXRCcm93ZXJDcnlwdG8oKSAmJiAhIWdldFN1YnRsZUNyeXB0bygpO1xufVxuZXhwb3J0cy5pc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGUgPSBpc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG8uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlIiwiZ2V0U3VidGxlQ3J5cHRvIiwiZ2V0QnJvd2VyQ3J5cHRvIiwiZ2xvYmFsIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJicm93c2VyQ3J5cHRvIiwic3VidGxlIiwid2Via2l0U3VidGxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/dist/cjs/env.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/env.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowser = exports.isNode = exports.isReactNative = void 0;\nfunction isReactNative() {\n    return typeof document === \"undefined\" && typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\";\n}\nexports.isReactNative = isReactNative;\nfunction isNode() {\n    return typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\";\n}\nexports.isNode = isNode;\nfunction isBrowser() {\n    return !isReactNative() && !isNode();\n}\nexports.isBrowser = isBrowser; //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvZW52LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0EsY0FBYyxHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQ2xFLFNBQVNJO0lBQ0wsT0FBUSxPQUFPQyxhQUFhLGVBQ3hCLE9BQU9DLGNBQWMsZUFDckJBLFVBQVVDLE9BQU8sS0FBSztBQUM5QjtBQUNBUCxxQkFBcUIsR0FBR0k7QUFDeEIsU0FBU0Q7SUFDTCxPQUFRLE9BQU9LLFlBQVksZUFDdkIsT0FBT0EsUUFBUUMsUUFBUSxLQUFLLGVBQzVCLE9BQU9ELFFBQVFDLFFBQVEsQ0FBQ0MsSUFBSSxLQUFLO0FBQ3pDO0FBQ0FWLGNBQWMsR0FBR0c7QUFDakIsU0FBU0Q7SUFDTCxPQUFPLENBQUNFLG1CQUFtQixDQUFDRDtBQUNoQztBQUNBSCxpQkFBaUIsR0FBR0UsV0FDcEIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50L2Rpc3QvY2pzL2Vudi5qcz80MzhkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0Jyb3dzZXIgPSBleHBvcnRzLmlzTm9kZSA9IGV4cG9ydHMuaXNSZWFjdE5hdGl2ZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUoKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gXCJSZWFjdE5hdGl2ZVwiKTtcbn1cbmV4cG9ydHMuaXNSZWFjdE5hdGl2ZSA9IGlzUmVhY3ROYXRpdmU7XG5mdW5jdGlvbiBpc05vZGUoKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICE9PSBcInVuZGVmaW5lZFwiKTtcbn1cbmV4cG9ydHMuaXNOb2RlID0gaXNOb2RlO1xuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xuICAgIHJldHVybiAhaXNSZWFjdE5hdGl2ZSgpICYmICFpc05vZGUoKTtcbn1cbmV4cG9ydHMuaXNCcm93c2VyID0gaXNCcm93c2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQnJvd3NlciIsImlzTm9kZSIsImlzUmVhY3ROYXRpdmUiLCJkb2N1bWVudCIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJub2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/dist/cjs/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/dist/cjs/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./crypto */ \"(ssr)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./env */ \"(ssr)/./node_modules/@walletconnect/environment/dist/cjs/env.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsOEZBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsb0ZBQVUsR0FBR0g7QUFDMUNFLFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsOEVBQU8sR0FBR0gsVUFDdkMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50L2Rpc3QvY2pzL2luZGV4LmpzPzVjMjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY3J5cHRvXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudlwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __createBinding(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}\nfunction __exportStar(m, exports) {\n    for(var p in m)if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n;\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result.default = mod;\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js":
/*!************************************************************************!*\
  !*** ./node_modules/@walletconnect/ethereum-provider/dist/index.es.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumProvider: () => (/* binding */ z),\n/* harmony export */   OPTIONAL_EVENTS: () => (/* binding */ O),\n/* harmony export */   OPTIONAL_METHODS: () => (/* binding */ M),\n/* harmony export */   REQUIRED_EVENTS: () => (/* binding */ m),\n/* harmony export */   REQUIRED_METHODS: () => (/* binding */ u),\n/* harmony export */   \"default\": () => (/* binding */ w)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/universal-provider */ \"(ssr)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\");\n\n\n\nconst T = \"wc\", $ = \"ethereum_provider\", j = `${T}@2:${$}:`, q = \"https://rpc.walletconnect.org/v1/\", u = [\n    \"eth_sendTransaction\",\n    \"personal_sign\"\n], M = [\n    \"eth_accounts\",\n    \"eth_requestAccounts\",\n    \"eth_sendRawTransaction\",\n    \"eth_sign\",\n    \"eth_signTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_addEthereumChain\",\n    \"wallet_getPermissions\",\n    \"wallet_requestPermissions\",\n    \"wallet_registerOnboarding\",\n    \"wallet_watchAsset\",\n    \"wallet_scanQRCode\",\n    \"wallet_sendCalls\",\n    \"wallet_getCapabilities\",\n    \"wallet_getCallsStatus\",\n    \"wallet_showCallsStatus\"\n], m = [\n    \"chainChanged\",\n    \"accountsChanged\"\n], O = [\n    \"chainChanged\",\n    \"accountsChanged\",\n    \"message\",\n    \"disconnect\",\n    \"connect\"\n];\nvar N = Object.defineProperty, D = Object.defineProperties, U = Object.getOwnPropertyDescriptors, P = Object.getOwnPropertySymbols, Q = Object.prototype.hasOwnProperty, L = Object.prototype.propertyIsEnumerable, y = (a, t, s)=>t in a ? N(a, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : a[t] = s, g = (a, t)=>{\n    for(var s in t || (t = {}))Q.call(t, s) && y(a, s, t[s]);\n    if (P) for (var s of P(t))L.call(t, s) && y(a, s, t[s]);\n    return a;\n}, _ = (a, t)=>D(a, U(t)), o = (a, t, s)=>y(a, typeof t != \"symbol\" ? t + \"\" : t, s);\nfunction v(a) {\n    return Number(a[0].split(\":\")[1]);\n}\nfunction C(a) {\n    return `0x${a.toString(16)}`;\n}\nfunction x(a) {\n    const { chains: t, optionalChains: s, methods: i, optionalMethods: e, events: n, optionalEvents: h, rpcMap: l } = a;\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(t)) throw new Error(\"Invalid chains\");\n    const r = {\n        chains: t,\n        methods: i || u,\n        events: n || m,\n        rpcMap: g({}, t.length ? {\n            [v(t)]: l[v(t)]\n        } : {})\n    }, c = n?.filter((d)=>!m.includes(d)), p = i?.filter((d)=>!u.includes(d));\n    if (!s && !h && !e && !(c != null && c.length) && !(p != null && p.length)) return {\n        required: t.length ? r : void 0\n    };\n    const I = c?.length && p?.length || !s, f = {\n        chains: [\n            ...new Set(I ? r.chains.concat(s || []) : s)\n        ],\n        methods: [\n            ...new Set(r.methods.concat(e != null && e.length ? e : M))\n        ],\n        events: [\n            ...new Set(r.events.concat(h != null && h.length ? h : O))\n        ],\n        rpcMap: l\n    };\n    return {\n        required: t.length ? r : void 0,\n        optional: s.length ? f : void 0\n    };\n}\nclass w {\n    constructor(){\n        o(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), o(this, \"namespace\", \"eip155\"), o(this, \"accounts\", []), o(this, \"signer\"), o(this, \"chainId\", 1), o(this, \"modal\"), o(this, \"rpc\"), o(this, \"STORAGE_KEY\", j), o(this, \"on\", (t, s)=>(this.events.on(t, s), this)), o(this, \"once\", (t, s)=>(this.events.once(t, s), this)), o(this, \"removeListener\", (t, s)=>(this.events.removeListener(t, s), this)), o(this, \"off\", (t, s)=>(this.events.off(t, s), this)), o(this, \"parseAccount\", (t)=>this.isCompatibleChainId(t) ? this.parseAccountId(t).address : t), this.signer = {}, this.rpc = {};\n    }\n    static async init(t) {\n        const s = new w;\n        return await s.initialize(t), s;\n    }\n    async request(t, s) {\n        return await this.signer.request(t, this.formatChainId(this.chainId), s);\n    }\n    sendAsync(t, s, i) {\n        this.signer.sendAsync(t, s, this.formatChainId(this.chainId), i);\n    }\n    get connected() {\n        return this.signer.client ? this.signer.client.core.relayer.connected : !1;\n    }\n    get connecting() {\n        return this.signer.client ? this.signer.client.core.relayer.connecting : !1;\n    }\n    async enable() {\n        return this.session || await this.connect(), await this.request({\n            method: \"eth_requestAccounts\"\n        });\n    }\n    async connect(t) {\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts(t);\n        const { required: s, optional: i } = x(this.rpc);\n        try {\n            const e = await new Promise(async (h, l)=>{\n                var r;\n                this.rpc.showQrModal && ((r = this.modal) == null || r.subscribeModal((c)=>{\n                    !c.open && !this.signer.session && (this.signer.abortPairingAttempt(), l(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.connect(_(g({\n                    namespaces: g({}, s && {\n                        [this.namespace]: s\n                    })\n                }, i && {\n                    optionalNamespaces: {\n                        [this.namespace]: i\n                    }\n                }), {\n                    pairingTopic: t?.pairingTopic\n                })).then((c)=>{\n                    h(c);\n                }).catch((c)=>{\n                    l(new Error(c.message));\n                });\n            });\n            if (!e) return;\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(e.namespaces, [\n                this.namespace\n            ]);\n            this.setChainIds(this.rpc.chains.length ? this.rpc.chains : n), this.setAccounts(n), this.events.emit(\"connect\", {\n                chainId: C(this.chainId)\n            });\n        } catch (e) {\n            throw this.signer.logger.error(e), e;\n        } finally{\n            this.modal && this.modal.closeModal();\n        }\n    }\n    async authenticate(t, s) {\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts({\n            chains: t?.chains\n        });\n        try {\n            const i = await new Promise(async (n, h)=>{\n                var l;\n                this.rpc.showQrModal && ((l = this.modal) == null || l.subscribeModal((r)=>{\n                    !r.open && !this.signer.session && (this.signer.abortPairingAttempt(), h(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.authenticate(_(g({}, t), {\n                    chains: this.rpc.chains\n                }), s).then((r)=>{\n                    n(r);\n                }).catch((r)=>{\n                    h(new Error(r.message));\n                });\n            }), e = i.session;\n            if (e) {\n                const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(e.namespaces, [\n                    this.namespace\n                ]);\n                this.setChainIds(this.rpc.chains.length ? this.rpc.chains : n), this.setAccounts(n), this.events.emit(\"connect\", {\n                    chainId: C(this.chainId)\n                });\n            }\n            return i;\n        } catch (i) {\n            throw this.signer.logger.error(i), i;\n        } finally{\n            this.modal && this.modal.closeModal();\n        }\n    }\n    async disconnect() {\n        this.session && await this.signer.disconnect(), this.reset();\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    get session() {\n        return this.signer.session;\n    }\n    registerEventListeners() {\n        this.signer.on(\"session_event\", (t)=>{\n            const { params: s } = t, { event: i } = s;\n            i.name === \"accountsChanged\" ? (this.accounts = this.parseAccounts(i.data), this.events.emit(\"accountsChanged\", this.accounts)) : i.name === \"chainChanged\" ? this.setChainId(this.formatChainId(i.data)) : this.events.emit(i.name, i.data), this.events.emit(\"session_event\", t);\n        }), this.signer.on(\"chainChanged\", (t)=>{\n            const s = parseInt(t);\n            this.chainId = s, this.events.emit(\"chainChanged\", C(this.chainId)), this.persist();\n        }), this.signer.on(\"session_update\", (t)=>{\n            this.events.emit(\"session_update\", t);\n        }), this.signer.on(\"session_delete\", (t)=>{\n            this.reset(), this.events.emit(\"session_delete\", t), this.events.emit(\"disconnect\", _(g({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: t.topic,\n                name: \"USER_DISCONNECTED\"\n            }));\n        }), this.signer.on(\"display_uri\", (t)=>{\n            var s, i;\n            this.rpc.showQrModal && ((s = this.modal) == null || s.closeModal(), (i = this.modal) == null || i.openModal({\n                uri: t\n            })), this.events.emit(\"display_uri\", t);\n        });\n    }\n    switchEthereumChain(t) {\n        this.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [\n                {\n                    chainId: t.toString(16)\n                }\n            ]\n        });\n    }\n    isCompatibleChainId(t) {\n        return typeof t == \"string\" ? t.startsWith(`${this.namespace}:`) : !1;\n    }\n    formatChainId(t) {\n        return `${this.namespace}:${t}`;\n    }\n    parseChainId(t) {\n        return Number(t.split(\":\")[1]);\n    }\n    setChainIds(t) {\n        const s = t.filter((i)=>this.isCompatibleChainId(i)).map((i)=>this.parseChainId(i));\n        s.length && (this.chainId = s[0], this.events.emit(\"chainChanged\", C(this.chainId)), this.persist());\n    }\n    setChainId(t) {\n        if (this.isCompatibleChainId(t)) {\n            const s = this.parseChainId(t);\n            this.chainId = s, this.switchEthereumChain(s);\n        }\n    }\n    parseAccountId(t) {\n        const [s, i, e] = t.split(\":\");\n        return {\n            chainId: `${s}:${i}`,\n            address: e\n        };\n    }\n    setAccounts(t) {\n        this.accounts = t.filter((s)=>this.parseChainId(this.parseAccountId(s).chainId) === this.chainId).map((s)=>this.parseAccountId(s).address), this.events.emit(\"accountsChanged\", this.accounts);\n    }\n    getRpcConfig(t) {\n        var s, i;\n        const e = (s = t?.chains) != null ? s : [], n = (i = t?.optionalChains) != null ? i : [], h = e.concat(n);\n        if (!h.length) throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n        const l = e.length ? t?.methods || u : [], r = e.length ? t?.events || m : [], c = t?.optionalMethods || [], p = t?.optionalEvents || [], I = t?.rpcMap || this.buildRpcMap(h, t.projectId), f = t?.qrModalOptions || void 0;\n        return {\n            chains: e?.map((d)=>this.formatChainId(d)),\n            optionalChains: n.map((d)=>this.formatChainId(d)),\n            methods: l,\n            events: r,\n            optionalMethods: c,\n            optionalEvents: p,\n            rpcMap: I,\n            showQrModal: !!(t != null && t.showQrModal),\n            qrModalOptions: f,\n            projectId: t.projectId,\n            metadata: t.metadata\n        };\n    }\n    buildRpcMap(t, s) {\n        const i = {};\n        return t.forEach((e)=>{\n            i[e] = this.getRpcUrl(e, s);\n        }), i;\n    }\n    async initialize(t) {\n        if (this.rpc = this.getRpcConfig(t), this.chainId = this.rpc.chains.length ? v(this.rpc.chains) : v(this.rpc.optionalChains), this.signer = await _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__.UniversalProvider.init({\n            projectId: this.rpc.projectId,\n            metadata: this.rpc.metadata,\n            disableProviderPing: t.disableProviderPing,\n            relayUrl: t.relayUrl,\n            storage: t.storage,\n            storageOptions: t.storageOptions,\n            customStoragePrefix: t.customStoragePrefix,\n            telemetryEnabled: t.telemetryEnabled,\n            logger: t.logger\n        }), this.registerEventListeners(), await this.loadPersistedSession(), this.rpc.showQrModal) {\n            let s;\n            try {\n                const { WalletConnectModal: i } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@walletconnect\"), __webpack_require__.e(\"vendor-chunks/valtio\"), __webpack_require__.e(\"vendor-chunks/proxy-compare\")]).then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/modal */ \"(ssr)/./node_modules/@walletconnect/modal/dist/index.js\"));\n                s = i;\n            } catch  {\n                throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\n            }\n            if (s) try {\n                this.modal = new s(g({\n                    projectId: this.rpc.projectId\n                }, this.rpc.qrModalOptions));\n            } catch (i) {\n                throw this.signer.logger.error(i), new Error(\"Could not generate WalletConnectModal Instance\");\n            }\n        }\n    }\n    loadConnectOpts(t) {\n        if (!t) return;\n        const { chains: s, optionalChains: i, rpcMap: e } = t;\n        s && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(s) && (this.rpc.chains = s.map((n)=>this.formatChainId(n)), s.forEach((n)=>{\n            this.rpc.rpcMap[n] = e?.[n] || this.getRpcUrl(n);\n        })), i && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(i) && (this.rpc.optionalChains = [], this.rpc.optionalChains = i?.map((n)=>this.formatChainId(n)), i.forEach((n)=>{\n            this.rpc.rpcMap[n] = e?.[n] || this.getRpcUrl(n);\n        }));\n    }\n    getRpcUrl(t, s) {\n        var i;\n        return ((i = this.rpc.rpcMap) == null ? void 0 : i[t]) || `${q}?chainId=eip155:${t}&projectId=${s || this.rpc.projectId}`;\n    }\n    async loadPersistedSession() {\n        if (this.session) try {\n            const t = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`), s = this.session.namespaces[`${this.namespace}:${t}`] ? this.session.namespaces[`${this.namespace}:${t}`] : this.session.namespaces[this.namespace];\n            this.setChainIds(t ? [\n                this.formatChainId(t)\n            ] : s?.accounts), this.setAccounts(s?.accounts);\n        } catch (t) {\n            this.signer.logger.error(\"Failed to load persisted session, clearing state...\"), this.signer.logger.error(t), await this.disconnect().catch((s)=>this.signer.logger.warn(s));\n        }\n    }\n    reset() {\n        this.chainId = 1, this.accounts = [];\n    }\n    persist() {\n        this.session && this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);\n    }\n    parseAccounts(t) {\n        return typeof t == \"string\" || t instanceof String ? [\n            this.parseAccount(t)\n        ] : t.map((s)=>this.parseAccount(s));\n    }\n}\nconst z = w;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXRoZXJldW0tcHJvdmlkZXIvZGlzdC9pbmRleC5lcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXNDO0FBQW9HO0FBQXNFO0FBQUEsTUFBTVUsSUFBRSxNQUFLQyxJQUFFLHFCQUFvQkMsSUFBRSxDQUFDLEVBQUVGLEVBQUUsR0FBRyxFQUFFQyxFQUFFLENBQUMsQ0FBQyxFQUFDRSxJQUFFLHFDQUFvQ0MsSUFBRTtJQUFDO0lBQXNCO0NBQWdCLEVBQUNDLElBQUU7SUFBQztJQUFlO0lBQXNCO0lBQXlCO0lBQVc7SUFBc0I7SUFBb0I7SUFBdUI7SUFBdUI7SUFBc0I7SUFBZ0I7SUFBNkI7SUFBMEI7SUFBd0I7SUFBNEI7SUFBNEI7SUFBb0I7SUFBb0I7SUFBbUI7SUFBeUI7SUFBd0I7Q0FBeUIsRUFBQ0MsSUFBRTtJQUFDO0lBQWU7Q0FBa0IsRUFBQ0MsSUFBRTtJQUFDO0lBQWU7SUFBa0I7SUFBVTtJQUFhO0NBQVU7QUFBQyxJQUFJQyxJQUFFQyxPQUFPQyxjQUFjLEVBQUNDLElBQUVGLE9BQU9HLGdCQUFnQixFQUFDQyxJQUFFSixPQUFPSyx5QkFBeUIsRUFBQ0MsSUFBRU4sT0FBT08scUJBQXFCLEVBQUNDLElBQUVSLE9BQU9TLFNBQVMsQ0FBQ0MsY0FBYyxFQUFDQyxJQUFFWCxPQUFPUyxTQUFTLENBQUNHLG9CQUFvQixFQUFDQyxJQUFFLENBQUNDLEdBQUVDLEdBQUVDLElBQUlELEtBQUtELElBQUVmLEVBQUVlLEdBQUVDLEdBQUU7UUFBQ0UsWUFBVyxDQUFDO1FBQUVDLGNBQWEsQ0FBQztRQUFFQyxVQUFTLENBQUM7UUFBRUMsT0FBTUo7SUFBQyxLQUFHRixDQUFDLENBQUNDLEVBQUUsR0FBQ0MsR0FBRUssSUFBRSxDQUFDUCxHQUFFQztJQUFLLElBQUksSUFBSUMsS0FBS0QsS0FBSUEsQ0FBQUEsSUFBRSxDQUFDLEdBQUdQLEVBQUVjLElBQUksQ0FBQ1AsR0FBRUMsTUFBSUgsRUFBRUMsR0FBRUUsR0FBRUQsQ0FBQyxDQUFDQyxFQUFFO0lBQUUsSUFBR1YsR0FBRSxLQUFJLElBQUlVLEtBQUtWLEVBQUVTLEdBQUdKLEVBQUVXLElBQUksQ0FBQ1AsR0FBRUMsTUFBSUgsRUFBRUMsR0FBRUUsR0FBRUQsQ0FBQyxDQUFDQyxFQUFFO0lBQUUsT0FBT0Y7QUFBQyxHQUFFUyxJQUFFLENBQUNULEdBQUVDLElBQUliLEVBQUVZLEdBQUVWLEVBQUVXLEtBQUlTLElBQUUsQ0FBQ1YsR0FBRUMsR0FBRUMsSUFBSUgsRUFBRUMsR0FBRSxPQUFPQyxLQUFHLFdBQVNBLElBQUUsS0FBR0EsR0FBRUM7QUFBRyxTQUFTUyxFQUFFWCxDQUFDO0lBQUUsT0FBT1ksT0FBT1osQ0FBQyxDQUFDLEVBQUUsQ0FBQ2EsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQUM7QUFBQyxTQUFTQyxFQUFFZCxDQUFDO0lBQUUsT0FBTSxDQUFDLEVBQUUsRUFBRUEsRUFBRWUsUUFBUSxDQUFDLElBQUksQ0FBQztBQUFBO0FBQUMsU0FBU0MsRUFBRWhCLENBQUM7SUFBRSxNQUFLLEVBQUNpQixRQUFPaEIsQ0FBQyxFQUFDaUIsZ0JBQWVoQixDQUFDLEVBQUNpQixTQUFRQyxDQUFDLEVBQUNDLGlCQUFnQkMsQ0FBQyxFQUFDQyxRQUFPQyxDQUFDLEVBQUNDLGdCQUFlQyxDQUFDLEVBQUNDLFFBQU9DLENBQUMsRUFBQyxHQUFDNUI7SUFBRSxJQUFHLENBQUMxQixrRUFBQ0EsQ0FBQzJCLElBQUcsTUFBTSxJQUFJNEIsTUFBTTtJQUFrQixNQUFNQyxJQUFFO1FBQUNiLFFBQU9oQjtRQUFFa0IsU0FBUUMsS0FBR3ZDO1FBQUUwQyxRQUFPQyxLQUFHekM7UUFBRTRDLFFBQU9wQixFQUFFLENBQUMsR0FBRU4sRUFBRThCLE1BQU0sR0FBQztZQUFDLENBQUNwQixFQUFFVixHQUFHLEVBQUMyQixDQUFDLENBQUNqQixFQUFFVixHQUFHO1FBQUEsSUFBRSxDQUFDO0lBQUUsR0FBRStCLElBQUVSLEdBQUdTLE9BQU9DLENBQUFBLElBQUcsQ0FBQ25ELEVBQUVvRCxRQUFRLENBQUNELEtBQUlFLElBQUVoQixHQUFHYSxPQUFPQyxDQUFBQSxJQUFHLENBQUNyRCxFQUFFc0QsUUFBUSxDQUFDRDtJQUFJLElBQUcsQ0FBQ2hDLEtBQUcsQ0FBQ3dCLEtBQUcsQ0FBQ0osS0FBRyxDQUFFVSxDQUFBQSxLQUFHLFFBQU1BLEVBQUVELE1BQU0sS0FBRyxDQUFFSyxDQUFBQSxLQUFHLFFBQU1BLEVBQUVMLE1BQU0sR0FBRSxPQUFNO1FBQUNNLFVBQVNwQyxFQUFFOEIsTUFBTSxHQUFDRCxJQUFFLEtBQUs7SUFBQztJQUFFLE1BQU1RLElBQUVOLEdBQUdELFVBQVFLLEdBQUdMLFVBQVEsQ0FBQzdCLEdBQUVxQyxJQUFFO1FBQUN0QixRQUFPO2VBQUksSUFBSXVCLElBQUlGLElBQUVSLEVBQUViLE1BQU0sQ0FBQ3dCLE1BQU0sQ0FBQ3ZDLEtBQUcsRUFBRSxJQUFFQTtTQUFHO1FBQUNpQixTQUFRO2VBQUksSUFBSXFCLElBQUlWLEVBQUVYLE9BQU8sQ0FBQ3NCLE1BQU0sQ0FBQ25CLEtBQUcsUUFBTUEsRUFBRVMsTUFBTSxHQUFDVCxJQUFFeEM7U0FBSTtRQUFDeUMsUUFBTztlQUFJLElBQUlpQixJQUFJVixFQUFFUCxNQUFNLENBQUNrQixNQUFNLENBQUNmLEtBQUcsUUFBTUEsRUFBRUssTUFBTSxHQUFDTCxJQUFFMUM7U0FBSTtRQUFDMkMsUUFBT0M7SUFBQztJQUFFLE9BQU07UUFBQ1MsVUFBU3BDLEVBQUU4QixNQUFNLEdBQUNELElBQUUsS0FBSztRQUFFWSxVQUFTeEMsRUFBRTZCLE1BQU0sR0FBQ1EsSUFBRSxLQUFLO0lBQUM7QUFBQztBQUFDLE1BQU1JO0lBQUVDLGFBQWE7UUFBQ2xDLEVBQUUsSUFBSSxFQUFDLFVBQVMsSUFBSTFDLGdEQUFDQSxHQUFFMEMsRUFBRSxJQUFJLEVBQUMsYUFBWSxXQUFVQSxFQUFFLElBQUksRUFBQyxZQUFXLEVBQUUsR0FBRUEsRUFBRSxJQUFJLEVBQUMsV0FBVUEsRUFBRSxJQUFJLEVBQUMsV0FBVSxJQUFHQSxFQUFFLElBQUksRUFBQyxVQUFTQSxFQUFFLElBQUksRUFBQyxRQUFPQSxFQUFFLElBQUksRUFBQyxlQUFjL0IsSUFBRytCLEVBQUUsSUFBSSxFQUFDLE1BQUssQ0FBQ1QsR0FBRUMsSUFBSyxLQUFJLENBQUNxQixNQUFNLENBQUNzQixFQUFFLENBQUM1QyxHQUFFQyxJQUFHLElBQUksSUFBR1EsRUFBRSxJQUFJLEVBQUMsUUFBTyxDQUFDVCxHQUFFQyxJQUFLLEtBQUksQ0FBQ3FCLE1BQU0sQ0FBQ3VCLElBQUksQ0FBQzdDLEdBQUVDLElBQUcsSUFBSSxJQUFHUSxFQUFFLElBQUksRUFBQyxrQkFBaUIsQ0FBQ1QsR0FBRUMsSUFBSyxLQUFJLENBQUNxQixNQUFNLENBQUN3QixjQUFjLENBQUM5QyxHQUFFQyxJQUFHLElBQUksSUFBR1EsRUFBRSxJQUFJLEVBQUMsT0FBTSxDQUFDVCxHQUFFQyxJQUFLLEtBQUksQ0FBQ3FCLE1BQU0sQ0FBQ3lCLEdBQUcsQ0FBQy9DLEdBQUVDLElBQUcsSUFBSSxJQUFHUSxFQUFFLElBQUksRUFBQyxnQkFBZVQsQ0FBQUEsSUFBRyxJQUFJLENBQUNnRCxtQkFBbUIsQ0FBQ2hELEtBQUcsSUFBSSxDQUFDaUQsY0FBYyxDQUFDakQsR0FBR2tELE9BQU8sR0FBQ2xELElBQUcsSUFBSSxDQUFDbUQsTUFBTSxHQUFDLENBQUMsR0FBRSxJQUFJLENBQUNDLEdBQUcsR0FBQyxDQUFDO0lBQUM7SUFBQyxhQUFhQyxLQUFLckQsQ0FBQyxFQUFDO1FBQUMsTUFBTUMsSUFBRSxJQUFJeUM7UUFBRSxPQUFPLE1BQU16QyxFQUFFcUQsVUFBVSxDQUFDdEQsSUFBR0M7SUFBQztJQUFDLE1BQU1zRCxRQUFRdkQsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxPQUFPLE1BQU0sSUFBSSxDQUFDa0QsTUFBTSxDQUFDSSxPQUFPLENBQUN2RCxHQUFFLElBQUksQ0FBQ3dELGFBQWEsQ0FBQyxJQUFJLENBQUNDLE9BQU8sR0FBRXhEO0lBQUU7SUFBQ3lELFVBQVUxRCxDQUFDLEVBQUNDLENBQUMsRUFBQ2tCLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ2dDLE1BQU0sQ0FBQ08sU0FBUyxDQUFDMUQsR0FBRUMsR0FBRSxJQUFJLENBQUN1RCxhQUFhLENBQUMsSUFBSSxDQUFDQyxPQUFPLEdBQUV0QztJQUFFO0lBQUMsSUFBSXdDLFlBQVc7UUFBQyxPQUFPLElBQUksQ0FBQ1IsTUFBTSxDQUFDUyxNQUFNLEdBQUMsSUFBSSxDQUFDVCxNQUFNLENBQUNTLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxPQUFPLENBQUNILFNBQVMsR0FBQyxDQUFDO0lBQUM7SUFBQyxJQUFJSSxhQUFZO1FBQUMsT0FBTyxJQUFJLENBQUNaLE1BQU0sQ0FBQ1MsTUFBTSxHQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDUyxNQUFNLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxVQUFVLEdBQUMsQ0FBQztJQUFDO0lBQUMsTUFBTUMsU0FBUTtRQUFDLE9BQU8sSUFBSSxDQUFDQyxPQUFPLElBQUUsTUFBTSxJQUFJLENBQUNDLE9BQU8sSUFBRyxNQUFNLElBQUksQ0FBQ1gsT0FBTyxDQUFDO1lBQUNZLFFBQU87UUFBcUI7SUFBRTtJQUFDLE1BQU1ELFFBQVFsRSxDQUFDLEVBQUM7UUFBQyxJQUFHLENBQUMsSUFBSSxDQUFDbUQsTUFBTSxDQUFDUyxNQUFNLEVBQUMsTUFBTSxJQUFJaEMsTUFBTTtRQUErQyxJQUFJLENBQUN3QyxlQUFlLENBQUNwRTtRQUFHLE1BQUssRUFBQ29DLFVBQVNuQyxDQUFDLEVBQUN3QyxVQUFTdEIsQ0FBQyxFQUFDLEdBQUNKLEVBQUUsSUFBSSxDQUFDcUMsR0FBRztRQUFFLElBQUc7WUFBQyxNQUFNL0IsSUFBRSxNQUFNLElBQUlnRCxRQUFRLE9BQU01QyxHQUFFRTtnQkFBSyxJQUFJRTtnQkFBRSxJQUFJLENBQUN1QixHQUFHLENBQUNrQixXQUFXLElBQUcsRUFBQ3pDLElBQUUsSUFBSSxDQUFDMEMsS0FBSyxLQUFHLFFBQU0xQyxFQUFFMkMsY0FBYyxDQUFDekMsQ0FBQUE7b0JBQUksQ0FBQ0EsRUFBRTBDLElBQUksSUFBRSxDQUFDLElBQUksQ0FBQ3RCLE1BQU0sQ0FBQ2MsT0FBTyxJQUFHLEtBQUksQ0FBQ2QsTUFBTSxDQUFDdUIsbUJBQW1CLElBQUcvQyxFQUFFLElBQUlDLE1BQU0sK0NBQThDO2dCQUFFLEVBQUMsR0FBRyxNQUFNLElBQUksQ0FBQ3VCLE1BQU0sQ0FBQ2UsT0FBTyxDQUFDMUQsRUFBRUYsRUFBRTtvQkFBQ3FFLFlBQVdyRSxFQUFFLENBQUMsR0FBRUwsS0FBRzt3QkFBQyxDQUFDLElBQUksQ0FBQzJFLFNBQVMsQ0FBQyxFQUFDM0U7b0JBQUM7Z0JBQUUsR0FBRWtCLEtBQUc7b0JBQUMwRCxvQkFBbUI7d0JBQUMsQ0FBQyxJQUFJLENBQUNELFNBQVMsQ0FBQyxFQUFDekQ7b0JBQUM7Z0JBQUMsSUFBRztvQkFBQzJELGNBQWE5RSxHQUFHOEU7Z0JBQVksSUFBSUMsSUFBSSxDQUFDaEQsQ0FBQUE7b0JBQUlOLEVBQUVNO2dCQUFFLEdBQUdpRCxLQUFLLENBQUNqRCxDQUFBQTtvQkFBSUosRUFBRSxJQUFJQyxNQUFNRyxFQUFFa0QsT0FBTztnQkFBRTtZQUFFO1lBQUcsSUFBRyxDQUFDNUQsR0FBRTtZQUFPLE1BQU1FLElBQUV0RCwrRUFBQ0EsQ0FBQ29ELEVBQUVzRCxVQUFVLEVBQUM7Z0JBQUMsSUFBSSxDQUFDQyxTQUFTO2FBQUM7WUFBRSxJQUFJLENBQUNNLFdBQVcsQ0FBQyxJQUFJLENBQUM5QixHQUFHLENBQUNwQyxNQUFNLENBQUNjLE1BQU0sR0FBQyxJQUFJLENBQUNzQixHQUFHLENBQUNwQyxNQUFNLEdBQUNPLElBQUcsSUFBSSxDQUFDNEQsV0FBVyxDQUFDNUQsSUFBRyxJQUFJLENBQUNELE1BQU0sQ0FBQzhELElBQUksQ0FBQyxXQUFVO2dCQUFDM0IsU0FBUTVDLEVBQUUsSUFBSSxDQUFDNEMsT0FBTztZQUFDO1FBQUUsRUFBQyxPQUFNcEMsR0FBRTtZQUFDLE1BQU0sSUFBSSxDQUFDOEIsTUFBTSxDQUFDa0MsTUFBTSxDQUFDQyxLQUFLLENBQUNqRSxJQUFHQTtRQUFDLFNBQVE7WUFBQyxJQUFJLENBQUNrRCxLQUFLLElBQUUsSUFBSSxDQUFDQSxLQUFLLENBQUNnQixVQUFVO1FBQUU7SUFBQztJQUFDLE1BQU1DLGFBQWF4RixDQUFDLEVBQUNDLENBQUMsRUFBQztRQUFDLElBQUcsQ0FBQyxJQUFJLENBQUNrRCxNQUFNLENBQUNTLE1BQU0sRUFBQyxNQUFNLElBQUloQyxNQUFNO1FBQStDLElBQUksQ0FBQ3dDLGVBQWUsQ0FBQztZQUFDcEQsUUFBT2hCLEdBQUdnQjtRQUFNO1FBQUcsSUFBRztZQUFDLE1BQU1HLElBQUUsTUFBTSxJQUFJa0QsUUFBUSxPQUFNOUMsR0FBRUU7Z0JBQUssSUFBSUU7Z0JBQUUsSUFBSSxDQUFDeUIsR0FBRyxDQUFDa0IsV0FBVyxJQUFHLEVBQUMzQyxJQUFFLElBQUksQ0FBQzRDLEtBQUssS0FBRyxRQUFNNUMsRUFBRTZDLGNBQWMsQ0FBQzNDLENBQUFBO29CQUFJLENBQUNBLEVBQUU0QyxJQUFJLElBQUUsQ0FBQyxJQUFJLENBQUN0QixNQUFNLENBQUNjLE9BQU8sSUFBRyxLQUFJLENBQUNkLE1BQU0sQ0FBQ3VCLG1CQUFtQixJQUFHakQsRUFBRSxJQUFJRyxNQUFNLCtDQUE4QztnQkFBRSxFQUFDLEdBQUcsTUFBTSxJQUFJLENBQUN1QixNQUFNLENBQUNxQyxZQUFZLENBQUNoRixFQUFFRixFQUFFLENBQUMsR0FBRU4sSUFBRztvQkFBQ2dCLFFBQU8sSUFBSSxDQUFDb0MsR0FBRyxDQUFDcEMsTUFBTTtnQkFBQSxJQUFHZixHQUFHOEUsSUFBSSxDQUFDbEQsQ0FBQUE7b0JBQUlOLEVBQUVNO2dCQUFFLEdBQUdtRCxLQUFLLENBQUNuRCxDQUFBQTtvQkFBSUosRUFBRSxJQUFJRyxNQUFNQyxFQUFFb0QsT0FBTztnQkFBRTtZQUFFLElBQUc1RCxJQUFFRixFQUFFOEMsT0FBTztZQUFDLElBQUc1QyxHQUFFO2dCQUFDLE1BQU1FLElBQUV0RCwrRUFBQ0EsQ0FBQ29ELEVBQUVzRCxVQUFVLEVBQUM7b0JBQUMsSUFBSSxDQUFDQyxTQUFTO2lCQUFDO2dCQUFFLElBQUksQ0FBQ00sV0FBVyxDQUFDLElBQUksQ0FBQzlCLEdBQUcsQ0FBQ3BDLE1BQU0sQ0FBQ2MsTUFBTSxHQUFDLElBQUksQ0FBQ3NCLEdBQUcsQ0FBQ3BDLE1BQU0sR0FBQ08sSUFBRyxJQUFJLENBQUM0RCxXQUFXLENBQUM1RCxJQUFHLElBQUksQ0FBQ0QsTUFBTSxDQUFDOEQsSUFBSSxDQUFDLFdBQVU7b0JBQUMzQixTQUFRNUMsRUFBRSxJQUFJLENBQUM0QyxPQUFPO2dCQUFDO1lBQUU7WUFBQyxPQUFPdEM7UUFBQyxFQUFDLE9BQU1BLEdBQUU7WUFBQyxNQUFNLElBQUksQ0FBQ2dDLE1BQU0sQ0FBQ2tDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDbkUsSUFBR0E7UUFBQyxTQUFRO1lBQUMsSUFBSSxDQUFDb0QsS0FBSyxJQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDZ0IsVUFBVTtRQUFFO0lBQUM7SUFBQyxNQUFNRSxhQUFZO1FBQUMsSUFBSSxDQUFDeEIsT0FBTyxJQUFFLE1BQU0sSUFBSSxDQUFDZCxNQUFNLENBQUNzQyxVQUFVLElBQUcsSUFBSSxDQUFDQyxLQUFLO0lBQUU7SUFBQyxJQUFJQyxrQkFBaUI7UUFBQyxPQUFNLENBQUM7SUFBQztJQUFDLElBQUkxQixVQUFTO1FBQUMsT0FBTyxJQUFJLENBQUNkLE1BQU0sQ0FBQ2MsT0FBTztJQUFBO0lBQUMyQix5QkFBd0I7UUFBQyxJQUFJLENBQUN6QyxNQUFNLENBQUNQLEVBQUUsQ0FBQyxpQkFBZ0I1QyxDQUFBQTtZQUFJLE1BQUssRUFBQzZGLFFBQU81RixDQUFDLEVBQUMsR0FBQ0QsR0FBRSxFQUFDOEYsT0FBTTNFLENBQUMsRUFBQyxHQUFDbEI7WUFBRWtCLEVBQUU0RSxJQUFJLEtBQUcsb0JBQW1CLEtBQUksQ0FBQ0MsUUFBUSxHQUFDLElBQUksQ0FBQ0MsYUFBYSxDQUFDOUUsRUFBRStFLElBQUksR0FBRSxJQUFJLENBQUM1RSxNQUFNLENBQUM4RCxJQUFJLENBQUMsbUJBQWtCLElBQUksQ0FBQ1ksUUFBUSxLQUFHN0UsRUFBRTRFLElBQUksS0FBRyxpQkFBZSxJQUFJLENBQUNJLFVBQVUsQ0FBQyxJQUFJLENBQUMzQyxhQUFhLENBQUNyQyxFQUFFK0UsSUFBSSxLQUFHLElBQUksQ0FBQzVFLE1BQU0sQ0FBQzhELElBQUksQ0FBQ2pFLEVBQUU0RSxJQUFJLEVBQUM1RSxFQUFFK0UsSUFBSSxHQUFFLElBQUksQ0FBQzVFLE1BQU0sQ0FBQzhELElBQUksQ0FBQyxpQkFBZ0JwRjtRQUFFLElBQUcsSUFBSSxDQUFDbUQsTUFBTSxDQUFDUCxFQUFFLENBQUMsZ0JBQWU1QyxDQUFBQTtZQUFJLE1BQU1DLElBQUVtRyxTQUFTcEc7WUFBRyxJQUFJLENBQUN5RCxPQUFPLEdBQUN4RCxHQUFFLElBQUksQ0FBQ3FCLE1BQU0sQ0FBQzhELElBQUksQ0FBQyxnQkFBZXZFLEVBQUUsSUFBSSxDQUFDNEMsT0FBTyxJQUFHLElBQUksQ0FBQzRDLE9BQU87UUFBRSxJQUFHLElBQUksQ0FBQ2xELE1BQU0sQ0FBQ1AsRUFBRSxDQUFDLGtCQUFpQjVDLENBQUFBO1lBQUksSUFBSSxDQUFDc0IsTUFBTSxDQUFDOEQsSUFBSSxDQUFDLGtCQUFpQnBGO1FBQUUsSUFBRyxJQUFJLENBQUNtRCxNQUFNLENBQUNQLEVBQUUsQ0FBQyxrQkFBaUI1QyxDQUFBQTtZQUFJLElBQUksQ0FBQzBGLEtBQUssSUFBRyxJQUFJLENBQUNwRSxNQUFNLENBQUM4RCxJQUFJLENBQUMsa0JBQWlCcEYsSUFBRyxJQUFJLENBQUNzQixNQUFNLENBQUM4RCxJQUFJLENBQUMsY0FBYTVFLEVBQUVGLEVBQUUsQ0FBQyxHQUFFbkMsaUVBQUNBLENBQUMsdUJBQXNCO2dCQUFDK0gsTUFBS2xHLEVBQUVzRyxLQUFLO2dCQUFDUCxNQUFLO1lBQW1CO1FBQUcsSUFBRyxJQUFJLENBQUM1QyxNQUFNLENBQUNQLEVBQUUsQ0FBQyxlQUFjNUMsQ0FBQUE7WUFBSSxJQUFJQyxHQUFFa0I7WUFBRSxJQUFJLENBQUNpQyxHQUFHLENBQUNrQixXQUFXLElBQUcsRUFBQ3JFLElBQUUsSUFBSSxDQUFDc0UsS0FBSyxLQUFHLFFBQU10RSxFQUFFc0YsVUFBVSxJQUFHLENBQUNwRSxJQUFFLElBQUksQ0FBQ29ELEtBQUssS0FBRyxRQUFNcEQsRUFBRW9GLFNBQVMsQ0FBQztnQkFBQ0MsS0FBSXhHO1lBQUMsRUFBQyxHQUFHLElBQUksQ0FBQ3NCLE1BQU0sQ0FBQzhELElBQUksQ0FBQyxlQUFjcEY7UUFBRTtJQUFFO0lBQUN5RyxvQkFBb0J6RyxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUN1RCxPQUFPLENBQUM7WUFBQ1ksUUFBTztZQUE2QjBCLFFBQU87Z0JBQUM7b0JBQUNwQyxTQUFRekQsRUFBRWMsUUFBUSxDQUFDO2dCQUFHO2FBQUU7UUFBQTtJQUFFO0lBQUNrQyxvQkFBb0JoRCxDQUFDLEVBQUM7UUFBQyxPQUFPLE9BQU9BLEtBQUcsV0FBU0EsRUFBRTBHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDOUIsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUM7SUFBQztJQUFDcEIsY0FBY3hELENBQUMsRUFBQztRQUFDLE9BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQzRFLFNBQVMsQ0FBQyxDQUFDLEVBQUU1RSxFQUFFLENBQUM7SUFBQTtJQUFDMkcsYUFBYTNHLENBQUMsRUFBQztRQUFDLE9BQU9XLE9BQU9YLEVBQUVZLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUFDO0lBQUNzRSxZQUFZbEYsQ0FBQyxFQUFDO1FBQUMsTUFBTUMsSUFBRUQsRUFBRWdDLE1BQU0sQ0FBQ2IsQ0FBQUEsSUFBRyxJQUFJLENBQUM2QixtQkFBbUIsQ0FBQzdCLElBQUl5RixHQUFHLENBQUN6RixDQUFBQSxJQUFHLElBQUksQ0FBQ3dGLFlBQVksQ0FBQ3hGO1FBQUlsQixFQUFFNkIsTUFBTSxJQUFHLEtBQUksQ0FBQzJCLE9BQU8sR0FBQ3hELENBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDcUIsTUFBTSxDQUFDOEQsSUFBSSxDQUFDLGdCQUFldkUsRUFBRSxJQUFJLENBQUM0QyxPQUFPLElBQUcsSUFBSSxDQUFDNEMsT0FBTyxFQUFDO0lBQUU7SUFBQ0YsV0FBV25HLENBQUMsRUFBQztRQUFDLElBQUcsSUFBSSxDQUFDZ0QsbUJBQW1CLENBQUNoRCxJQUFHO1lBQUMsTUFBTUMsSUFBRSxJQUFJLENBQUMwRyxZQUFZLENBQUMzRztZQUFHLElBQUksQ0FBQ3lELE9BQU8sR0FBQ3hELEdBQUUsSUFBSSxDQUFDd0csbUJBQW1CLENBQUN4RztRQUFFO0lBQUM7SUFBQ2dELGVBQWVqRCxDQUFDLEVBQUM7UUFBQyxNQUFLLENBQUNDLEdBQUVrQixHQUFFRSxFQUFFLEdBQUNyQixFQUFFWSxLQUFLLENBQUM7UUFBSyxPQUFNO1lBQUM2QyxTQUFRLENBQUMsRUFBRXhELEVBQUUsQ0FBQyxFQUFFa0IsRUFBRSxDQUFDO1lBQUMrQixTQUFRN0I7UUFBQztJQUFDO0lBQUM4RCxZQUFZbkYsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDZ0csUUFBUSxHQUFDaEcsRUFBRWdDLE1BQU0sQ0FBQy9CLENBQUFBLElBQUcsSUFBSSxDQUFDMEcsWUFBWSxDQUFDLElBQUksQ0FBQzFELGNBQWMsQ0FBQ2hELEdBQUd3RCxPQUFPLE1BQUksSUFBSSxDQUFDQSxPQUFPLEVBQUVtRCxHQUFHLENBQUMzRyxDQUFBQSxJQUFHLElBQUksQ0FBQ2dELGNBQWMsQ0FBQ2hELEdBQUdpRCxPQUFPLEdBQUUsSUFBSSxDQUFDNUIsTUFBTSxDQUFDOEQsSUFBSSxDQUFDLG1CQUFrQixJQUFJLENBQUNZLFFBQVE7SUFBQztJQUFDYSxhQUFhN0csQ0FBQyxFQUFDO1FBQUMsSUFBSUMsR0FBRWtCO1FBQUUsTUFBTUUsSUFBRSxDQUFDcEIsSUFBRUQsR0FBR2dCLE1BQUssS0FBSSxPQUFLZixJQUFFLEVBQUUsRUFBQ3NCLElBQUUsQ0FBQ0osSUFBRW5CLEdBQUdpQixjQUFhLEtBQUksT0FBS0UsSUFBRSxFQUFFLEVBQUNNLElBQUVKLEVBQUVtQixNQUFNLENBQUNqQjtRQUFHLElBQUcsQ0FBQ0UsRUFBRUssTUFBTSxFQUFDLE1BQU0sSUFBSUYsTUFBTTtRQUE4RCxNQUFNRCxJQUFFTixFQUFFUyxNQUFNLEdBQUM5QixHQUFHa0IsV0FBU3RDLElBQUUsRUFBRSxFQUFDaUQsSUFBRVIsRUFBRVMsTUFBTSxHQUFDOUIsR0FBR3NCLFVBQVF4QyxJQUFFLEVBQUUsRUFBQ2lELElBQUUvQixHQUFHb0IsbUJBQWlCLEVBQUUsRUFBQ2UsSUFBRW5DLEdBQUd3QixrQkFBZ0IsRUFBRSxFQUFDYSxJQUFFckMsR0FBRzBCLFVBQVEsSUFBSSxDQUFDb0YsV0FBVyxDQUFDckYsR0FBRXpCLEVBQUUrRyxTQUFTLEdBQUV6RSxJQUFFdEMsR0FBR2dILGtCQUFnQixLQUFLO1FBQUUsT0FBTTtZQUFDaEcsUUFBT0ssR0FBR3VGLElBQUkzRSxDQUFBQSxJQUFHLElBQUksQ0FBQ3VCLGFBQWEsQ0FBQ3ZCO1lBQUloQixnQkFBZU0sRUFBRXFGLEdBQUcsQ0FBQzNFLENBQUFBLElBQUcsSUFBSSxDQUFDdUIsYUFBYSxDQUFDdkI7WUFBSWYsU0FBUVM7WUFBRUwsUUFBT087WUFBRVQsaUJBQWdCVztZQUFFUCxnQkFBZVc7WUFBRVQsUUFBT1c7WUFBRWlDLGFBQVksQ0FBQyxDQUFFdEUsQ0FBQUEsS0FBRyxRQUFNQSxFQUFFc0UsV0FBVztZQUFFMEMsZ0JBQWUxRTtZQUFFeUUsV0FBVS9HLEVBQUUrRyxTQUFTO1lBQUNFLFVBQVNqSCxFQUFFaUgsUUFBUTtRQUFBO0lBQUM7SUFBQ0gsWUFBWTlHLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO1FBQUMsTUFBTWtCLElBQUUsQ0FBQztRQUFFLE9BQU9uQixFQUFFa0gsT0FBTyxDQUFDN0YsQ0FBQUE7WUFBSUYsQ0FBQyxDQUFDRSxFQUFFLEdBQUMsSUFBSSxDQUFDOEYsU0FBUyxDQUFDOUYsR0FBRXBCO1FBQUUsSUFBR2tCO0lBQUM7SUFBQyxNQUFNbUMsV0FBV3RELENBQUMsRUFBQztRQUFDLElBQUcsSUFBSSxDQUFDb0QsR0FBRyxHQUFDLElBQUksQ0FBQ3lELFlBQVksQ0FBQzdHLElBQUcsSUFBSSxDQUFDeUQsT0FBTyxHQUFDLElBQUksQ0FBQ0wsR0FBRyxDQUFDcEMsTUFBTSxDQUFDYyxNQUFNLEdBQUNwQixFQUFFLElBQUksQ0FBQzBDLEdBQUcsQ0FBQ3BDLE1BQU0sSUFBRU4sRUFBRSxJQUFJLENBQUMwQyxHQUFHLENBQUNuQyxjQUFjLEdBQUUsSUFBSSxDQUFDa0MsTUFBTSxHQUFDLE1BQU01RSxnRkFBQ0EsQ0FBQzhFLElBQUksQ0FBQztZQUFDMEQsV0FBVSxJQUFJLENBQUMzRCxHQUFHLENBQUMyRCxTQUFTO1lBQUNFLFVBQVMsSUFBSSxDQUFDN0QsR0FBRyxDQUFDNkQsUUFBUTtZQUFDRyxxQkFBb0JwSCxFQUFFb0gsbUJBQW1CO1lBQUNDLFVBQVNySCxFQUFFcUgsUUFBUTtZQUFDQyxTQUFRdEgsRUFBRXNILE9BQU87WUFBQ0MsZ0JBQWV2SCxFQUFFdUgsY0FBYztZQUFDQyxxQkFBb0J4SCxFQUFFd0gsbUJBQW1CO1lBQUNDLGtCQUFpQnpILEVBQUV5SCxnQkFBZ0I7WUFBQ3BDLFFBQU9yRixFQUFFcUYsTUFBTTtRQUFBLElBQUcsSUFBSSxDQUFDTyxzQkFBc0IsSUFBRyxNQUFNLElBQUksQ0FBQzhCLG9CQUFvQixJQUFHLElBQUksQ0FBQ3RFLEdBQUcsQ0FBQ2tCLFdBQVcsRUFBQztZQUFDLElBQUlyRTtZQUFFLElBQUc7Z0JBQUMsTUFBSyxFQUFDMEgsb0JBQW1CeEcsQ0FBQyxFQUFDLEdBQUMsTUFBTSxtVUFBOEI7Z0JBQUNsQixJQUFFa0I7WUFBQyxFQUFDLE9BQUs7Z0JBQUMsTUFBTSxJQUFJUyxNQUFNO1lBQStEO1lBQUMsSUFBRzNCLEdBQUUsSUFBRztnQkFBQyxJQUFJLENBQUNzRSxLQUFLLEdBQUMsSUFBSXRFLEVBQUVLLEVBQUU7b0JBQUN5RyxXQUFVLElBQUksQ0FBQzNELEdBQUcsQ0FBQzJELFNBQVM7Z0JBQUEsR0FBRSxJQUFJLENBQUMzRCxHQUFHLENBQUM0RCxjQUFjO1lBQUUsRUFBQyxPQUFNN0YsR0FBRTtnQkFBQyxNQUFNLElBQUksQ0FBQ2dDLE1BQU0sQ0FBQ2tDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDbkUsSUFBRyxJQUFJUyxNQUFNO1lBQWlEO1FBQUM7SUFBQztJQUFDd0MsZ0JBQWdCcEUsQ0FBQyxFQUFDO1FBQUMsSUFBRyxDQUFDQSxHQUFFO1FBQU8sTUFBSyxFQUFDZ0IsUUFBT2YsQ0FBQyxFQUFDZ0IsZ0JBQWVFLENBQUMsRUFBQ08sUUFBT0wsQ0FBQyxFQUFDLEdBQUNyQjtRQUFFQyxLQUFHNUIsa0VBQUNBLENBQUM0QixNQUFLLEtBQUksQ0FBQ21ELEdBQUcsQ0FBQ3BDLE1BQU0sR0FBQ2YsRUFBRTJHLEdBQUcsQ0FBQ3JGLENBQUFBLElBQUcsSUFBSSxDQUFDaUMsYUFBYSxDQUFDakMsS0FBSXRCLEVBQUVpSCxPQUFPLENBQUMzRixDQUFBQTtZQUFJLElBQUksQ0FBQzZCLEdBQUcsQ0FBQzFCLE1BQU0sQ0FBQ0gsRUFBRSxHQUFDRixHQUFHLENBQUNFLEVBQUUsSUFBRSxJQUFJLENBQUM0RixTQUFTLENBQUM1RjtRQUFFLEVBQUMsR0FBR0osS0FBRzlDLGtFQUFDQSxDQUFDOEMsTUFBSyxLQUFJLENBQUNpQyxHQUFHLENBQUNuQyxjQUFjLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQ21DLEdBQUcsQ0FBQ25DLGNBQWMsR0FBQ0UsR0FBR3lGLElBQUlyRixDQUFBQSxJQUFHLElBQUksQ0FBQ2lDLGFBQWEsQ0FBQ2pDLEtBQUlKLEVBQUUrRixPQUFPLENBQUMzRixDQUFBQTtZQUFJLElBQUksQ0FBQzZCLEdBQUcsQ0FBQzFCLE1BQU0sQ0FBQ0gsRUFBRSxHQUFDRixHQUFHLENBQUNFLEVBQUUsSUFBRSxJQUFJLENBQUM0RixTQUFTLENBQUM1RjtRQUFFLEVBQUM7SUFBRTtJQUFDNEYsVUFBVW5ILENBQUMsRUFBQ0MsQ0FBQyxFQUFDO1FBQUMsSUFBSWtCO1FBQUUsT0FBTSxDQUFDLENBQUNBLElBQUUsSUFBSSxDQUFDaUMsR0FBRyxDQUFDMUIsTUFBTSxLQUFHLE9BQUssS0FBSyxJQUFFUCxDQUFDLENBQUNuQixFQUFFLEtBQUcsQ0FBQyxFQUFFckIsRUFBRSxnQkFBZ0IsRUFBRXFCLEVBQUUsV0FBVyxFQUFFQyxLQUFHLElBQUksQ0FBQ21ELEdBQUcsQ0FBQzJELFNBQVMsQ0FBQyxDQUFDO0lBQUE7SUFBQyxNQUFNVyx1QkFBc0I7UUFBQyxJQUFHLElBQUksQ0FBQ3pELE9BQU8sRUFBQyxJQUFHO1lBQUMsTUFBTWpFLElBQUUsTUFBTSxJQUFJLENBQUNtRCxNQUFNLENBQUNTLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDeUQsT0FBTyxDQUFDTSxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0MsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFFNUgsSUFBRSxJQUFJLENBQUNnRSxPQUFPLENBQUNVLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDQyxTQUFTLENBQUMsQ0FBQyxFQUFFNUUsRUFBRSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUNpRSxPQUFPLENBQUNVLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDQyxTQUFTLENBQUMsQ0FBQyxFQUFFNUUsRUFBRSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUNpRSxPQUFPLENBQUNVLFVBQVUsQ0FBQyxJQUFJLENBQUNDLFNBQVMsQ0FBQztZQUFDLElBQUksQ0FBQ00sV0FBVyxDQUFDbEYsSUFBRTtnQkFBQyxJQUFJLENBQUN3RCxhQUFhLENBQUN4RDthQUFHLEdBQUNDLEdBQUcrRixXQUFVLElBQUksQ0FBQ2IsV0FBVyxDQUFDbEYsR0FBRytGO1FBQVMsRUFBQyxPQUFNaEcsR0FBRTtZQUFDLElBQUksQ0FBQ21ELE1BQU0sQ0FBQ2tDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLHdEQUF1RCxJQUFJLENBQUNuQyxNQUFNLENBQUNrQyxNQUFNLENBQUNDLEtBQUssQ0FBQ3RGLElBQUcsTUFBTSxJQUFJLENBQUN5RixVQUFVLEdBQUdULEtBQUssQ0FBQy9FLENBQUFBLElBQUcsSUFBSSxDQUFDa0QsTUFBTSxDQUFDa0MsTUFBTSxDQUFDeUMsSUFBSSxDQUFDN0g7UUFBRztJQUFDO0lBQUN5RixRQUFPO1FBQUMsSUFBSSxDQUFDakMsT0FBTyxHQUFDLEdBQUUsSUFBSSxDQUFDdUMsUUFBUSxHQUFDLEVBQUU7SUFBQTtJQUFDSyxVQUFTO1FBQUMsSUFBSSxDQUFDcEMsT0FBTyxJQUFFLElBQUksQ0FBQ2QsTUFBTSxDQUFDUyxNQUFNLENBQUNDLElBQUksQ0FBQ3lELE9BQU8sQ0FBQ1MsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNGLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBQyxJQUFJLENBQUNwRSxPQUFPO0lBQUM7SUFBQ3dDLGNBQWNqRyxDQUFDLEVBQUM7UUFBQyxPQUFPLE9BQU9BLEtBQUcsWUFBVUEsYUFBYWdJLFNBQU87WUFBQyxJQUFJLENBQUNDLFlBQVksQ0FBQ2pJO1NBQUcsR0FBQ0EsRUFBRTRHLEdBQUcsQ0FBQzNHLENBQUFBLElBQUcsSUFBSSxDQUFDZ0ksWUFBWSxDQUFDaEk7SUFBRztBQUFDO0FBQUMsTUFBTWlJLElBQUV4RjtBQUFtSSxDQUN2blQsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2V0aGVyZXVtLXByb3ZpZGVyL2Rpc3QvaW5kZXguZXMuanM/ZjM2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7RXZlbnRFbWl0dGVyIGFzIEF9ZnJvbVwiZXZlbnRzXCI7aW1wb3J0e2dldEFjY291bnRzRnJvbU5hbWVzcGFjZXMgYXMgYixnZXRTZGtFcnJvciBhcyBTLGlzVmFsaWRBcnJheSBhcyBFfWZyb21cIkB3YWxsZXRjb25uZWN0L3V0aWxzXCI7aW1wb3J0e1VuaXZlcnNhbFByb3ZpZGVyIGFzIFJ9ZnJvbVwiQHdhbGxldGNvbm5lY3QvdW5pdmVyc2FsLXByb3ZpZGVyXCI7Y29uc3QgVD1cIndjXCIsJD1cImV0aGVyZXVtX3Byb3ZpZGVyXCIsaj1gJHtUfUAyOiR7JH06YCxxPVwiaHR0cHM6Ly9ycGMud2FsbGV0Y29ubmVjdC5vcmcvdjEvXCIsdT1bXCJldGhfc2VuZFRyYW5zYWN0aW9uXCIsXCJwZXJzb25hbF9zaWduXCJdLE09W1wiZXRoX2FjY291bnRzXCIsXCJldGhfcmVxdWVzdEFjY291bnRzXCIsXCJldGhfc2VuZFJhd1RyYW5zYWN0aW9uXCIsXCJldGhfc2lnblwiLFwiZXRoX3NpZ25UcmFuc2FjdGlvblwiLFwiZXRoX3NpZ25UeXBlZERhdGFcIixcImV0aF9zaWduVHlwZWREYXRhX3YzXCIsXCJldGhfc2lnblR5cGVkRGF0YV92NFwiLFwiZXRoX3NlbmRUcmFuc2FjdGlvblwiLFwicGVyc29uYWxfc2lnblwiLFwid2FsbGV0X3N3aXRjaEV0aGVyZXVtQ2hhaW5cIixcIndhbGxldF9hZGRFdGhlcmV1bUNoYWluXCIsXCJ3YWxsZXRfZ2V0UGVybWlzc2lvbnNcIixcIndhbGxldF9yZXF1ZXN0UGVybWlzc2lvbnNcIixcIndhbGxldF9yZWdpc3Rlck9uYm9hcmRpbmdcIixcIndhbGxldF93YXRjaEFzc2V0XCIsXCJ3YWxsZXRfc2NhblFSQ29kZVwiLFwid2FsbGV0X3NlbmRDYWxsc1wiLFwid2FsbGV0X2dldENhcGFiaWxpdGllc1wiLFwid2FsbGV0X2dldENhbGxzU3RhdHVzXCIsXCJ3YWxsZXRfc2hvd0NhbGxzU3RhdHVzXCJdLG09W1wiY2hhaW5DaGFuZ2VkXCIsXCJhY2NvdW50c0NoYW5nZWRcIl0sTz1bXCJjaGFpbkNoYW5nZWRcIixcImFjY291bnRzQ2hhbmdlZFwiLFwibWVzc2FnZVwiLFwiZGlzY29ubmVjdFwiLFwiY29ubmVjdFwiXTt2YXIgTj1PYmplY3QuZGVmaW5lUHJvcGVydHksRD1PYmplY3QuZGVmaW5lUHJvcGVydGllcyxVPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzLFA9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxRPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD1PYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLHk9KGEsdCxzKT0+dCBpbiBhP04oYSx0LHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpzfSk6YVt0XT1zLGc9KGEsdCk9Pntmb3IodmFyIHMgaW4gdHx8KHQ9e30pKVEuY2FsbCh0LHMpJiZ5KGEscyx0W3NdKTtpZihQKWZvcih2YXIgcyBvZiBQKHQpKUwuY2FsbCh0LHMpJiZ5KGEscyx0W3NdKTtyZXR1cm4gYX0sXz0oYSx0KT0+RChhLFUodCkpLG89KGEsdCxzKT0+eShhLHR5cGVvZiB0IT1cInN5bWJvbFwiP3QrXCJcIjp0LHMpO2Z1bmN0aW9uIHYoYSl7cmV0dXJuIE51bWJlcihhWzBdLnNwbGl0KFwiOlwiKVsxXSl9ZnVuY3Rpb24gQyhhKXtyZXR1cm5gMHgke2EudG9TdHJpbmcoMTYpfWB9ZnVuY3Rpb24geChhKXtjb25zdHtjaGFpbnM6dCxvcHRpb25hbENoYWluczpzLG1ldGhvZHM6aSxvcHRpb25hbE1ldGhvZHM6ZSxldmVudHM6bixvcHRpb25hbEV2ZW50czpoLHJwY01hcDpsfT1hO2lmKCFFKHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hhaW5zXCIpO2NvbnN0IHI9e2NoYWluczp0LG1ldGhvZHM6aXx8dSxldmVudHM6bnx8bSxycGNNYXA6Zyh7fSx0Lmxlbmd0aD97W3YodCldOmxbdih0KV19Ont9KX0sYz1uPy5maWx0ZXIoZD0+IW0uaW5jbHVkZXMoZCkpLHA9aT8uZmlsdGVyKGQ9PiF1LmluY2x1ZGVzKGQpKTtpZighcyYmIWgmJiFlJiYhKGMhPW51bGwmJmMubGVuZ3RoKSYmIShwIT1udWxsJiZwLmxlbmd0aCkpcmV0dXJue3JlcXVpcmVkOnQubGVuZ3RoP3I6dm9pZCAwfTtjb25zdCBJPWM/Lmxlbmd0aCYmcD8ubGVuZ3RofHwhcyxmPXtjaGFpbnM6Wy4uLm5ldyBTZXQoST9yLmNoYWlucy5jb25jYXQoc3x8W10pOnMpXSxtZXRob2RzOlsuLi5uZXcgU2V0KHIubWV0aG9kcy5jb25jYXQoZSE9bnVsbCYmZS5sZW5ndGg/ZTpNKSldLGV2ZW50czpbLi4ubmV3IFNldChyLmV2ZW50cy5jb25jYXQoaCE9bnVsbCYmaC5sZW5ndGg/aDpPKSldLHJwY01hcDpsfTtyZXR1cm57cmVxdWlyZWQ6dC5sZW5ndGg/cjp2b2lkIDAsb3B0aW9uYWw6cy5sZW5ndGg/Zjp2b2lkIDB9fWNsYXNzIHd7Y29uc3RydWN0b3IoKXtvKHRoaXMsXCJldmVudHNcIixuZXcgQSksbyh0aGlzLFwibmFtZXNwYWNlXCIsXCJlaXAxNTVcIiksbyh0aGlzLFwiYWNjb3VudHNcIixbXSksbyh0aGlzLFwic2lnbmVyXCIpLG8odGhpcyxcImNoYWluSWRcIiwxKSxvKHRoaXMsXCJtb2RhbFwiKSxvKHRoaXMsXCJycGNcIiksbyh0aGlzLFwiU1RPUkFHRV9LRVlcIixqKSxvKHRoaXMsXCJvblwiLCh0LHMpPT4odGhpcy5ldmVudHMub24odCxzKSx0aGlzKSksbyh0aGlzLFwib25jZVwiLCh0LHMpPT4odGhpcy5ldmVudHMub25jZSh0LHMpLHRoaXMpKSxvKHRoaXMsXCJyZW1vdmVMaXN0ZW5lclwiLCh0LHMpPT4odGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIodCxzKSx0aGlzKSksbyh0aGlzLFwib2ZmXCIsKHQscyk9Pih0aGlzLmV2ZW50cy5vZmYodCxzKSx0aGlzKSksbyh0aGlzLFwicGFyc2VBY2NvdW50XCIsdD0+dGhpcy5pc0NvbXBhdGlibGVDaGFpbklkKHQpP3RoaXMucGFyc2VBY2NvdW50SWQodCkuYWRkcmVzczp0KSx0aGlzLnNpZ25lcj17fSx0aGlzLnJwYz17fX1zdGF0aWMgYXN5bmMgaW5pdCh0KXtjb25zdCBzPW5ldyB3O3JldHVybiBhd2FpdCBzLmluaXRpYWxpemUodCksc31hc3luYyByZXF1ZXN0KHQscyl7cmV0dXJuIGF3YWl0IHRoaXMuc2lnbmVyLnJlcXVlc3QodCx0aGlzLmZvcm1hdENoYWluSWQodGhpcy5jaGFpbklkKSxzKX1zZW5kQXN5bmModCxzLGkpe3RoaXMuc2lnbmVyLnNlbmRBc3luYyh0LHMsdGhpcy5mb3JtYXRDaGFpbklkKHRoaXMuY2hhaW5JZCksaSl9Z2V0IGNvbm5lY3RlZCgpe3JldHVybiB0aGlzLnNpZ25lci5jbGllbnQ/dGhpcy5zaWduZXIuY2xpZW50LmNvcmUucmVsYXllci5jb25uZWN0ZWQ6ITF9Z2V0IGNvbm5lY3RpbmcoKXtyZXR1cm4gdGhpcy5zaWduZXIuY2xpZW50P3RoaXMuc2lnbmVyLmNsaWVudC5jb3JlLnJlbGF5ZXIuY29ubmVjdGluZzohMX1hc3luYyBlbmFibGUoKXtyZXR1cm4gdGhpcy5zZXNzaW9ufHxhd2FpdCB0aGlzLmNvbm5lY3QoKSxhd2FpdCB0aGlzLnJlcXVlc3Qoe21ldGhvZDpcImV0aF9yZXF1ZXN0QWNjb3VudHNcIn0pfWFzeW5jIGNvbm5lY3QodCl7aWYoIXRoaXMuc2lnbmVyLmNsaWVudCl0aHJvdyBuZXcgRXJyb3IoXCJQcm92aWRlciBub3QgaW5pdGlhbGl6ZWQuIENhbGwgaW5pdCgpIGZpcnN0XCIpO3RoaXMubG9hZENvbm5lY3RPcHRzKHQpO2NvbnN0e3JlcXVpcmVkOnMsb3B0aW9uYWw6aX09eCh0aGlzLnJwYyk7dHJ5e2NvbnN0IGU9YXdhaXQgbmV3IFByb21pc2UoYXN5bmMoaCxsKT0+e3ZhciByO3RoaXMucnBjLnNob3dRck1vZGFsJiYoKHI9dGhpcy5tb2RhbCk9PW51bGx8fHIuc3Vic2NyaWJlTW9kYWwoYz0+eyFjLm9wZW4mJiF0aGlzLnNpZ25lci5zZXNzaW9uJiYodGhpcy5zaWduZXIuYWJvcnRQYWlyaW5nQXR0ZW1wdCgpLGwobmV3IEVycm9yKFwiQ29ubmVjdGlvbiByZXF1ZXN0IHJlc2V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiKSkpfSkpLGF3YWl0IHRoaXMuc2lnbmVyLmNvbm5lY3QoXyhnKHtuYW1lc3BhY2VzOmcoe30scyYme1t0aGlzLm5hbWVzcGFjZV06c30pfSxpJiZ7b3B0aW9uYWxOYW1lc3BhY2VzOntbdGhpcy5uYW1lc3BhY2VdOml9fSkse3BhaXJpbmdUb3BpYzp0Py5wYWlyaW5nVG9waWN9KSkudGhlbihjPT57aChjKX0pLmNhdGNoKGM9PntsKG5ldyBFcnJvcihjLm1lc3NhZ2UpKX0pfSk7aWYoIWUpcmV0dXJuO2NvbnN0IG49YihlLm5hbWVzcGFjZXMsW3RoaXMubmFtZXNwYWNlXSk7dGhpcy5zZXRDaGFpbklkcyh0aGlzLnJwYy5jaGFpbnMubGVuZ3RoP3RoaXMucnBjLmNoYWluczpuKSx0aGlzLnNldEFjY291bnRzKG4pLHRoaXMuZXZlbnRzLmVtaXQoXCJjb25uZWN0XCIse2NoYWluSWQ6Qyh0aGlzLmNoYWluSWQpfSl9Y2F0Y2goZSl7dGhyb3cgdGhpcy5zaWduZXIubG9nZ2VyLmVycm9yKGUpLGV9ZmluYWxseXt0aGlzLm1vZGFsJiZ0aGlzLm1vZGFsLmNsb3NlTW9kYWwoKX19YXN5bmMgYXV0aGVudGljYXRlKHQscyl7aWYoIXRoaXMuc2lnbmVyLmNsaWVudCl0aHJvdyBuZXcgRXJyb3IoXCJQcm92aWRlciBub3QgaW5pdGlhbGl6ZWQuIENhbGwgaW5pdCgpIGZpcnN0XCIpO3RoaXMubG9hZENvbm5lY3RPcHRzKHtjaGFpbnM6dD8uY2hhaW5zfSk7dHJ5e2NvbnN0IGk9YXdhaXQgbmV3IFByb21pc2UoYXN5bmMobixoKT0+e3ZhciBsO3RoaXMucnBjLnNob3dRck1vZGFsJiYoKGw9dGhpcy5tb2RhbCk9PW51bGx8fGwuc3Vic2NyaWJlTW9kYWwocj0+eyFyLm9wZW4mJiF0aGlzLnNpZ25lci5zZXNzaW9uJiYodGhpcy5zaWduZXIuYWJvcnRQYWlyaW5nQXR0ZW1wdCgpLGgobmV3IEVycm9yKFwiQ29ubmVjdGlvbiByZXF1ZXN0IHJlc2V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiKSkpfSkpLGF3YWl0IHRoaXMuc2lnbmVyLmF1dGhlbnRpY2F0ZShfKGcoe30sdCkse2NoYWluczp0aGlzLnJwYy5jaGFpbnN9KSxzKS50aGVuKHI9PntuKHIpfSkuY2F0Y2gocj0+e2gobmV3IEVycm9yKHIubWVzc2FnZSkpfSl9KSxlPWkuc2Vzc2lvbjtpZihlKXtjb25zdCBuPWIoZS5uYW1lc3BhY2VzLFt0aGlzLm5hbWVzcGFjZV0pO3RoaXMuc2V0Q2hhaW5JZHModGhpcy5ycGMuY2hhaW5zLmxlbmd0aD90aGlzLnJwYy5jaGFpbnM6biksdGhpcy5zZXRBY2NvdW50cyhuKSx0aGlzLmV2ZW50cy5lbWl0KFwiY29ubmVjdFwiLHtjaGFpbklkOkModGhpcy5jaGFpbklkKX0pfXJldHVybiBpfWNhdGNoKGkpe3Rocm93IHRoaXMuc2lnbmVyLmxvZ2dlci5lcnJvcihpKSxpfWZpbmFsbHl7dGhpcy5tb2RhbCYmdGhpcy5tb2RhbC5jbG9zZU1vZGFsKCl9fWFzeW5jIGRpc2Nvbm5lY3QoKXt0aGlzLnNlc3Npb24mJmF3YWl0IHRoaXMuc2lnbmVyLmRpc2Nvbm5lY3QoKSx0aGlzLnJlc2V0KCl9Z2V0IGlzV2FsbGV0Q29ubmVjdCgpe3JldHVybiEwfWdldCBzZXNzaW9uKCl7cmV0dXJuIHRoaXMuc2lnbmVyLnNlc3Npb259cmVnaXN0ZXJFdmVudExpc3RlbmVycygpe3RoaXMuc2lnbmVyLm9uKFwic2Vzc2lvbl9ldmVudFwiLHQ9Pntjb25zdHtwYXJhbXM6c309dCx7ZXZlbnQ6aX09cztpLm5hbWU9PT1cImFjY291bnRzQ2hhbmdlZFwiPyh0aGlzLmFjY291bnRzPXRoaXMucGFyc2VBY2NvdW50cyhpLmRhdGEpLHRoaXMuZXZlbnRzLmVtaXQoXCJhY2NvdW50c0NoYW5nZWRcIix0aGlzLmFjY291bnRzKSk6aS5uYW1lPT09XCJjaGFpbkNoYW5nZWRcIj90aGlzLnNldENoYWluSWQodGhpcy5mb3JtYXRDaGFpbklkKGkuZGF0YSkpOnRoaXMuZXZlbnRzLmVtaXQoaS5uYW1lLGkuZGF0YSksdGhpcy5ldmVudHMuZW1pdChcInNlc3Npb25fZXZlbnRcIix0KX0pLHRoaXMuc2lnbmVyLm9uKFwiY2hhaW5DaGFuZ2VkXCIsdD0+e2NvbnN0IHM9cGFyc2VJbnQodCk7dGhpcy5jaGFpbklkPXMsdGhpcy5ldmVudHMuZW1pdChcImNoYWluQ2hhbmdlZFwiLEModGhpcy5jaGFpbklkKSksdGhpcy5wZXJzaXN0KCl9KSx0aGlzLnNpZ25lci5vbihcInNlc3Npb25fdXBkYXRlXCIsdD0+e3RoaXMuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX3VwZGF0ZVwiLHQpfSksdGhpcy5zaWduZXIub24oXCJzZXNzaW9uX2RlbGV0ZVwiLHQ9Pnt0aGlzLnJlc2V0KCksdGhpcy5ldmVudHMuZW1pdChcInNlc3Npb25fZGVsZXRlXCIsdCksdGhpcy5ldmVudHMuZW1pdChcImRpc2Nvbm5lY3RcIixfKGcoe30sUyhcIlVTRVJfRElTQ09OTkVDVEVEXCIpKSx7ZGF0YTp0LnRvcGljLG5hbWU6XCJVU0VSX0RJU0NPTk5FQ1RFRFwifSkpfSksdGhpcy5zaWduZXIub24oXCJkaXNwbGF5X3VyaVwiLHQ9Pnt2YXIgcyxpO3RoaXMucnBjLnNob3dRck1vZGFsJiYoKHM9dGhpcy5tb2RhbCk9PW51bGx8fHMuY2xvc2VNb2RhbCgpLChpPXRoaXMubW9kYWwpPT1udWxsfHxpLm9wZW5Nb2RhbCh7dXJpOnR9KSksdGhpcy5ldmVudHMuZW1pdChcImRpc3BsYXlfdXJpXCIsdCl9KX1zd2l0Y2hFdGhlcmV1bUNoYWluKHQpe3RoaXMucmVxdWVzdCh7bWV0aG9kOlwid2FsbGV0X3N3aXRjaEV0aGVyZXVtQ2hhaW5cIixwYXJhbXM6W3tjaGFpbklkOnQudG9TdHJpbmcoMTYpfV19KX1pc0NvbXBhdGlibGVDaGFpbklkKHQpe3JldHVybiB0eXBlb2YgdD09XCJzdHJpbmdcIj90LnN0YXJ0c1dpdGgoYCR7dGhpcy5uYW1lc3BhY2V9OmApOiExfWZvcm1hdENoYWluSWQodCl7cmV0dXJuYCR7dGhpcy5uYW1lc3BhY2V9OiR7dH1gfXBhcnNlQ2hhaW5JZCh0KXtyZXR1cm4gTnVtYmVyKHQuc3BsaXQoXCI6XCIpWzFdKX1zZXRDaGFpbklkcyh0KXtjb25zdCBzPXQuZmlsdGVyKGk9PnRoaXMuaXNDb21wYXRpYmxlQ2hhaW5JZChpKSkubWFwKGk9PnRoaXMucGFyc2VDaGFpbklkKGkpKTtzLmxlbmd0aCYmKHRoaXMuY2hhaW5JZD1zWzBdLHRoaXMuZXZlbnRzLmVtaXQoXCJjaGFpbkNoYW5nZWRcIixDKHRoaXMuY2hhaW5JZCkpLHRoaXMucGVyc2lzdCgpKX1zZXRDaGFpbklkKHQpe2lmKHRoaXMuaXNDb21wYXRpYmxlQ2hhaW5JZCh0KSl7Y29uc3Qgcz10aGlzLnBhcnNlQ2hhaW5JZCh0KTt0aGlzLmNoYWluSWQ9cyx0aGlzLnN3aXRjaEV0aGVyZXVtQ2hhaW4ocyl9fXBhcnNlQWNjb3VudElkKHQpe2NvbnN0W3MsaSxlXT10LnNwbGl0KFwiOlwiKTtyZXR1cm57Y2hhaW5JZDpgJHtzfToke2l9YCxhZGRyZXNzOmV9fXNldEFjY291bnRzKHQpe3RoaXMuYWNjb3VudHM9dC5maWx0ZXIocz0+dGhpcy5wYXJzZUNoYWluSWQodGhpcy5wYXJzZUFjY291bnRJZChzKS5jaGFpbklkKT09PXRoaXMuY2hhaW5JZCkubWFwKHM9PnRoaXMucGFyc2VBY2NvdW50SWQocykuYWRkcmVzcyksdGhpcy5ldmVudHMuZW1pdChcImFjY291bnRzQ2hhbmdlZFwiLHRoaXMuYWNjb3VudHMpfWdldFJwY0NvbmZpZyh0KXt2YXIgcyxpO2NvbnN0IGU9KHM9dD8uY2hhaW5zKSE9bnVsbD9zOltdLG49KGk9dD8ub3B0aW9uYWxDaGFpbnMpIT1udWxsP2k6W10saD1lLmNvbmNhdChuKTtpZighaC5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiTm8gY2hhaW5zIHNwZWNpZmllZCBpbiBlaXRoZXIgYGNoYWluc2Agb3IgYG9wdGlvbmFsQ2hhaW5zYFwiKTtjb25zdCBsPWUubGVuZ3RoP3Q/Lm1ldGhvZHN8fHU6W10scj1lLmxlbmd0aD90Py5ldmVudHN8fG06W10sYz10Py5vcHRpb25hbE1ldGhvZHN8fFtdLHA9dD8ub3B0aW9uYWxFdmVudHN8fFtdLEk9dD8ucnBjTWFwfHx0aGlzLmJ1aWxkUnBjTWFwKGgsdC5wcm9qZWN0SWQpLGY9dD8ucXJNb2RhbE9wdGlvbnN8fHZvaWQgMDtyZXR1cm57Y2hhaW5zOmU/Lm1hcChkPT50aGlzLmZvcm1hdENoYWluSWQoZCkpLG9wdGlvbmFsQ2hhaW5zOm4ubWFwKGQ9PnRoaXMuZm9ybWF0Q2hhaW5JZChkKSksbWV0aG9kczpsLGV2ZW50czpyLG9wdGlvbmFsTWV0aG9kczpjLG9wdGlvbmFsRXZlbnRzOnAscnBjTWFwOkksc2hvd1FyTW9kYWw6ISEodCE9bnVsbCYmdC5zaG93UXJNb2RhbCkscXJNb2RhbE9wdGlvbnM6Zixwcm9qZWN0SWQ6dC5wcm9qZWN0SWQsbWV0YWRhdGE6dC5tZXRhZGF0YX19YnVpbGRScGNNYXAodCxzKXtjb25zdCBpPXt9O3JldHVybiB0LmZvckVhY2goZT0+e2lbZV09dGhpcy5nZXRScGNVcmwoZSxzKX0pLGl9YXN5bmMgaW5pdGlhbGl6ZSh0KXtpZih0aGlzLnJwYz10aGlzLmdldFJwY0NvbmZpZyh0KSx0aGlzLmNoYWluSWQ9dGhpcy5ycGMuY2hhaW5zLmxlbmd0aD92KHRoaXMucnBjLmNoYWlucyk6dih0aGlzLnJwYy5vcHRpb25hbENoYWlucyksdGhpcy5zaWduZXI9YXdhaXQgUi5pbml0KHtwcm9qZWN0SWQ6dGhpcy5ycGMucHJvamVjdElkLG1ldGFkYXRhOnRoaXMucnBjLm1ldGFkYXRhLGRpc2FibGVQcm92aWRlclBpbmc6dC5kaXNhYmxlUHJvdmlkZXJQaW5nLHJlbGF5VXJsOnQucmVsYXlVcmwsc3RvcmFnZTp0LnN0b3JhZ2Usc3RvcmFnZU9wdGlvbnM6dC5zdG9yYWdlT3B0aW9ucyxjdXN0b21TdG9yYWdlUHJlZml4OnQuY3VzdG9tU3RvcmFnZVByZWZpeCx0ZWxlbWV0cnlFbmFibGVkOnQudGVsZW1ldHJ5RW5hYmxlZCxsb2dnZXI6dC5sb2dnZXJ9KSx0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKSxhd2FpdCB0aGlzLmxvYWRQZXJzaXN0ZWRTZXNzaW9uKCksdGhpcy5ycGMuc2hvd1FyTW9kYWwpe2xldCBzO3RyeXtjb25zdHtXYWxsZXRDb25uZWN0TW9kYWw6aX09YXdhaXQgaW1wb3J0KFwiQHdhbGxldGNvbm5lY3QvbW9kYWxcIik7cz1pfWNhdGNoe3Rocm93IG5ldyBFcnJvcihcIlRvIHVzZSBRUiBtb2RhbCwgcGxlYXNlIGluc3RhbGwgQHdhbGxldGNvbm5lY3QvbW9kYWwgcGFja2FnZVwiKX1pZihzKXRyeXt0aGlzLm1vZGFsPW5ldyBzKGcoe3Byb2plY3RJZDp0aGlzLnJwYy5wcm9qZWN0SWR9LHRoaXMucnBjLnFyTW9kYWxPcHRpb25zKSl9Y2F0Y2goaSl7dGhyb3cgdGhpcy5zaWduZXIubG9nZ2VyLmVycm9yKGkpLG5ldyBFcnJvcihcIkNvdWxkIG5vdCBnZW5lcmF0ZSBXYWxsZXRDb25uZWN0TW9kYWwgSW5zdGFuY2VcIil9fX1sb2FkQ29ubmVjdE9wdHModCl7aWYoIXQpcmV0dXJuO2NvbnN0e2NoYWluczpzLG9wdGlvbmFsQ2hhaW5zOmkscnBjTWFwOmV9PXQ7cyYmRShzKSYmKHRoaXMucnBjLmNoYWlucz1zLm1hcChuPT50aGlzLmZvcm1hdENoYWluSWQobikpLHMuZm9yRWFjaChuPT57dGhpcy5ycGMucnBjTWFwW25dPWU/LltuXXx8dGhpcy5nZXRScGNVcmwobil9KSksaSYmRShpKSYmKHRoaXMucnBjLm9wdGlvbmFsQ2hhaW5zPVtdLHRoaXMucnBjLm9wdGlvbmFsQ2hhaW5zPWk/Lm1hcChuPT50aGlzLmZvcm1hdENoYWluSWQobikpLGkuZm9yRWFjaChuPT57dGhpcy5ycGMucnBjTWFwW25dPWU/LltuXXx8dGhpcy5nZXRScGNVcmwobil9KSl9Z2V0UnBjVXJsKHQscyl7dmFyIGk7cmV0dXJuKChpPXRoaXMucnBjLnJwY01hcCk9PW51bGw/dm9pZCAwOmlbdF0pfHxgJHtxfT9jaGFpbklkPWVpcDE1NToke3R9JnByb2plY3RJZD0ke3N8fHRoaXMucnBjLnByb2plY3RJZH1gfWFzeW5jIGxvYWRQZXJzaXN0ZWRTZXNzaW9uKCl7aWYodGhpcy5zZXNzaW9uKXRyeXtjb25zdCB0PWF3YWl0IHRoaXMuc2lnbmVyLmNsaWVudC5jb3JlLnN0b3JhZ2UuZ2V0SXRlbShgJHt0aGlzLlNUT1JBR0VfS0VZfS9jaGFpbklkYCkscz10aGlzLnNlc3Npb24ubmFtZXNwYWNlc1tgJHt0aGlzLm5hbWVzcGFjZX06JHt0fWBdP3RoaXMuc2Vzc2lvbi5uYW1lc3BhY2VzW2Ake3RoaXMubmFtZXNwYWNlfToke3R9YF06dGhpcy5zZXNzaW9uLm5hbWVzcGFjZXNbdGhpcy5uYW1lc3BhY2VdO3RoaXMuc2V0Q2hhaW5JZHModD9bdGhpcy5mb3JtYXRDaGFpbklkKHQpXTpzPy5hY2NvdW50cyksdGhpcy5zZXRBY2NvdW50cyhzPy5hY2NvdW50cyl9Y2F0Y2godCl7dGhpcy5zaWduZXIubG9nZ2VyLmVycm9yKFwiRmFpbGVkIHRvIGxvYWQgcGVyc2lzdGVkIHNlc3Npb24sIGNsZWFyaW5nIHN0YXRlLi4uXCIpLHRoaXMuc2lnbmVyLmxvZ2dlci5lcnJvcih0KSxhd2FpdCB0aGlzLmRpc2Nvbm5lY3QoKS5jYXRjaChzPT50aGlzLnNpZ25lci5sb2dnZXIud2FybihzKSl9fXJlc2V0KCl7dGhpcy5jaGFpbklkPTEsdGhpcy5hY2NvdW50cz1bXX1wZXJzaXN0KCl7dGhpcy5zZXNzaW9uJiZ0aGlzLnNpZ25lci5jbGllbnQuY29yZS5zdG9yYWdlLnNldEl0ZW0oYCR7dGhpcy5TVE9SQUdFX0tFWX0vY2hhaW5JZGAsdGhpcy5jaGFpbklkKX1wYXJzZUFjY291bnRzKHQpe3JldHVybiB0eXBlb2YgdD09XCJzdHJpbmdcInx8dCBpbnN0YW5jZW9mIFN0cmluZz9bdGhpcy5wYXJzZUFjY291bnQodCldOnQubWFwKHM9PnRoaXMucGFyc2VBY2NvdW50KHMpKX19Y29uc3Qgej13O2V4cG9ydHt6IGFzIEV0aGVyZXVtUHJvdmlkZXIsTyBhcyBPUFRJT05BTF9FVkVOVFMsTSBhcyBPUFRJT05BTF9NRVRIT0RTLG0gYXMgUkVRVUlSRURfRVZFTlRTLHUgYXMgUkVRVUlSRURfTUVUSE9EUyx3IGFzIGRlZmF1bHR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwiQSIsImdldEFjY291bnRzRnJvbU5hbWVzcGFjZXMiLCJiIiwiZ2V0U2RrRXJyb3IiLCJTIiwiaXNWYWxpZEFycmF5IiwiRSIsIlVuaXZlcnNhbFByb3ZpZGVyIiwiUiIsIlQiLCIkIiwiaiIsInEiLCJ1IiwiTSIsIm0iLCJPIiwiTiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiRCIsImRlZmluZVByb3BlcnRpZXMiLCJVIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIlAiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJRIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJMIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ5IiwiYSIsInQiLCJzIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJnIiwiY2FsbCIsIl8iLCJvIiwidiIsIk51bWJlciIsInNwbGl0IiwiQyIsInRvU3RyaW5nIiwieCIsImNoYWlucyIsIm9wdGlvbmFsQ2hhaW5zIiwibWV0aG9kcyIsImkiLCJvcHRpb25hbE1ldGhvZHMiLCJlIiwiZXZlbnRzIiwibiIsIm9wdGlvbmFsRXZlbnRzIiwiaCIsInJwY01hcCIsImwiLCJFcnJvciIsInIiLCJsZW5ndGgiLCJjIiwiZmlsdGVyIiwiZCIsImluY2x1ZGVzIiwicCIsInJlcXVpcmVkIiwiSSIsImYiLCJTZXQiLCJjb25jYXQiLCJvcHRpb25hbCIsInciLCJjb25zdHJ1Y3RvciIsIm9uIiwib25jZSIsInJlbW92ZUxpc3RlbmVyIiwib2ZmIiwiaXNDb21wYXRpYmxlQ2hhaW5JZCIsInBhcnNlQWNjb3VudElkIiwiYWRkcmVzcyIsInNpZ25lciIsInJwYyIsImluaXQiLCJpbml0aWFsaXplIiwicmVxdWVzdCIsImZvcm1hdENoYWluSWQiLCJjaGFpbklkIiwic2VuZEFzeW5jIiwiY29ubmVjdGVkIiwiY2xpZW50IiwiY29yZSIsInJlbGF5ZXIiLCJjb25uZWN0aW5nIiwiZW5hYmxlIiwic2Vzc2lvbiIsImNvbm5lY3QiLCJtZXRob2QiLCJsb2FkQ29ubmVjdE9wdHMiLCJQcm9taXNlIiwic2hvd1FyTW9kYWwiLCJtb2RhbCIsInN1YnNjcmliZU1vZGFsIiwib3BlbiIsImFib3J0UGFpcmluZ0F0dGVtcHQiLCJuYW1lc3BhY2VzIiwibmFtZXNwYWNlIiwib3B0aW9uYWxOYW1lc3BhY2VzIiwicGFpcmluZ1RvcGljIiwidGhlbiIsImNhdGNoIiwibWVzc2FnZSIsInNldENoYWluSWRzIiwic2V0QWNjb3VudHMiLCJlbWl0IiwibG9nZ2VyIiwiZXJyb3IiLCJjbG9zZU1vZGFsIiwiYXV0aGVudGljYXRlIiwiZGlzY29ubmVjdCIsInJlc2V0IiwiaXNXYWxsZXRDb25uZWN0IiwicmVnaXN0ZXJFdmVudExpc3RlbmVycyIsInBhcmFtcyIsImV2ZW50IiwibmFtZSIsImFjY291bnRzIiwicGFyc2VBY2NvdW50cyIsImRhdGEiLCJzZXRDaGFpbklkIiwicGFyc2VJbnQiLCJwZXJzaXN0IiwidG9waWMiLCJvcGVuTW9kYWwiLCJ1cmkiLCJzd2l0Y2hFdGhlcmV1bUNoYWluIiwic3RhcnRzV2l0aCIsInBhcnNlQ2hhaW5JZCIsIm1hcCIsImdldFJwY0NvbmZpZyIsImJ1aWxkUnBjTWFwIiwicHJvamVjdElkIiwicXJNb2RhbE9wdGlvbnMiLCJtZXRhZGF0YSIsImZvckVhY2giLCJnZXRScGNVcmwiLCJkaXNhYmxlUHJvdmlkZXJQaW5nIiwicmVsYXlVcmwiLCJzdG9yYWdlIiwic3RvcmFnZU9wdGlvbnMiLCJjdXN0b21TdG9yYWdlUHJlZml4IiwidGVsZW1ldHJ5RW5hYmxlZCIsImxvYWRQZXJzaXN0ZWRTZXNzaW9uIiwiV2FsbGV0Q29ubmVjdE1vZGFsIiwiZ2V0SXRlbSIsIlNUT1JBR0VfS0VZIiwid2FybiIsInNldEl0ZW0iLCJTdHJpbmciLCJwYXJzZUFjY291bnQiLCJ6IiwiRXRoZXJldW1Qcm92aWRlciIsIk9QVElPTkFMX0VWRU5UUyIsIk9QVElPTkFMX01FVEhPRFMiLCJSRVFVSVJFRF9FVkVOVFMiLCJSRVFVSVJFRF9NRVRIT0RTIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/events/dist/esm/events.js":
/*!***************************************************************!*\
  !*** ./node_modules/@walletconnect/events/dist/esm/events.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: () => (/* binding */ IEvents)\n/* harmony export */ });\nclass IEvents {\n} //# sourceMappingURL=events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXZlbnRzL2Rpc3QvZXNtL2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUE7QUFDYixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vZXZlbnRzLmpzPzEwNTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIElFdmVudHMge1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJJRXZlbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/events/dist/esm/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@walletconnect/events/dist/esm/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: () => (/* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_0__.IEvents)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@walletconnect/events/dist/esm/events.js\");\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXZlbnRzL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlCLENBQ3pCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vaW5kZXguanM/ZDMwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9ldmVudHNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/heartbeat/dist/index.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/heartbeat/dist/index.es.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HEARTBEAT_EVENTS: () => (/* binding */ r),\n/* harmony export */   HEARTBEAT_INTERVAL: () => (/* binding */ s),\n/* harmony export */   HeartBeat: () => (/* binding */ i),\n/* harmony export */   IHeartBeat: () => (/* binding */ n)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/events */ \"(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js\");\n\n\n\nclass n extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_2__.IEvents {\n    constructor(e){\n        super();\n    }\n}\nconst s = _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_SECONDS, r = {\n    pulse: \"heartbeat_pulse\"\n};\nclass i extends n {\n    constructor(e){\n        super(e), this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.interval = s, this.interval = e?.interval || s;\n    }\n    static async init(e) {\n        const t = new i(e);\n        return await t.init(), t;\n    }\n    async init() {\n        await this.initialize();\n    }\n    stop() {\n        clearInterval(this.intervalRef);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async initialize() {\n        this.intervalRef = setInterval(()=>this.pulse(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(this.interval));\n    }\n    pulse() {\n        this.events.emit(r.pulse);\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaGVhcnRiZWF0L2Rpc3QvaW5kZXguZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXNDO0FBQXNFO0FBQWdEO0FBQUEsTUFBTVEsVUFBVUQsMERBQUNBO0lBQUNFLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUs7SUFBRTtBQUFDO0FBQUMsTUFBTUMsSUFBRVIsNkRBQUNBLEVBQUNTLElBQUU7SUFBQ0MsT0FBTTtBQUFpQjtBQUFFLE1BQU1DLFVBQVVOO0lBQUVDLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUssQ0FBQ0EsSUFBRyxJQUFJLENBQUNLLE1BQU0sR0FBQyxJQUFJZCxnREFBQ0EsRUFBQyxJQUFJLENBQUNlLFFBQVEsR0FBQ0wsR0FBRSxJQUFJLENBQUNLLFFBQVEsR0FBQ04sR0FBR00sWUFBVUw7SUFBQztJQUFDLGFBQWFNLEtBQUtQLENBQUMsRUFBQztRQUFDLE1BQU1RLElBQUUsSUFBSUosRUFBRUo7UUFBRyxPQUFPLE1BQU1RLEVBQUVELElBQUksSUFBR0M7SUFBQztJQUFDLE1BQU1ELE9BQU07UUFBQyxNQUFNLElBQUksQ0FBQ0UsVUFBVTtJQUFFO0lBQUNDLE9BQU07UUFBQ0MsY0FBYyxJQUFJLENBQUNDLFdBQVc7SUFBQztJQUFDQyxHQUFHYixDQUFDLEVBQUNRLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ0gsTUFBTSxDQUFDUSxFQUFFLENBQUNiLEdBQUVRO0lBQUU7SUFBQ00sS0FBS2QsQ0FBQyxFQUFDUSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNILE1BQU0sQ0FBQ1MsSUFBSSxDQUFDZCxHQUFFUTtJQUFFO0lBQUNPLElBQUlmLENBQUMsRUFBQ1EsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDSCxNQUFNLENBQUNVLEdBQUcsQ0FBQ2YsR0FBRVE7SUFBRTtJQUFDUSxlQUFlaEIsQ0FBQyxFQUFDUSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNILE1BQU0sQ0FBQ1csY0FBYyxDQUFDaEIsR0FBRVE7SUFBRTtJQUFDLE1BQU1DLGFBQVk7UUFBQyxJQUFJLENBQUNHLFdBQVcsR0FBQ0ssWUFBWSxJQUFJLElBQUksQ0FBQ2QsS0FBSyxJQUFHUixrRUFBQ0EsQ0FBQyxJQUFJLENBQUNXLFFBQVE7SUFBRTtJQUFDSCxRQUFPO1FBQUMsSUFBSSxDQUFDRSxNQUFNLENBQUNhLElBQUksQ0FBQ2hCLEVBQUVDLEtBQUs7SUFBQztBQUFDO0FBQXNGLENBQ3h6QixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaGVhcnRiZWF0L2Rpc3QvaW5kZXguZXMuanM/ZDMwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7RXZlbnRFbWl0dGVyIGFzIGF9ZnJvbVwiZXZlbnRzXCI7aW1wb3J0e0ZJVkVfU0VDT05EUyBhcyBvLHRvTWlsaXNlY29uZHMgYXMgbH1mcm9tXCJAd2FsbGV0Y29ubmVjdC90aW1lXCI7aW1wb3J0e0lFdmVudHMgYXMgdn1mcm9tXCJAd2FsbGV0Y29ubmVjdC9ldmVudHNcIjtjbGFzcyBuIGV4dGVuZHMgdntjb25zdHJ1Y3RvcihlKXtzdXBlcigpfX1jb25zdCBzPW8scj17cHVsc2U6XCJoZWFydGJlYXRfcHVsc2VcIn07Y2xhc3MgaSBleHRlbmRzIG57Y29uc3RydWN0b3IoZSl7c3VwZXIoZSksdGhpcy5ldmVudHM9bmV3IGEsdGhpcy5pbnRlcnZhbD1zLHRoaXMuaW50ZXJ2YWw9ZT8uaW50ZXJ2YWx8fHN9c3RhdGljIGFzeW5jIGluaXQoZSl7Y29uc3QgdD1uZXcgaShlKTtyZXR1cm4gYXdhaXQgdC5pbml0KCksdH1hc3luYyBpbml0KCl7YXdhaXQgdGhpcy5pbml0aWFsaXplKCl9c3RvcCgpe2NsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbFJlZil9b24oZSx0KXt0aGlzLmV2ZW50cy5vbihlLHQpfW9uY2UoZSx0KXt0aGlzLmV2ZW50cy5vbmNlKGUsdCl9b2ZmKGUsdCl7dGhpcy5ldmVudHMub2ZmKGUsdCl9cmVtb3ZlTGlzdGVuZXIoZSx0KXt0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihlLHQpfWFzeW5jIGluaXRpYWxpemUoKXt0aGlzLmludGVydmFsUmVmPXNldEludGVydmFsKCgpPT50aGlzLnB1bHNlKCksbCh0aGlzLmludGVydmFsKSl9cHVsc2UoKXt0aGlzLmV2ZW50cy5lbWl0KHIucHVsc2UpfX1leHBvcnR7ciBhcyBIRUFSVEJFQVRfRVZFTlRTLHMgYXMgSEVBUlRCRUFUX0lOVEVSVkFMLGkgYXMgSGVhcnRCZWF0LG4gYXMgSUhlYXJ0QmVhdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJhIiwiRklWRV9TRUNPTkRTIiwibyIsInRvTWlsaXNlY29uZHMiLCJsIiwiSUV2ZW50cyIsInYiLCJuIiwiY29uc3RydWN0b3IiLCJlIiwicyIsInIiLCJwdWxzZSIsImkiLCJldmVudHMiLCJpbnRlcnZhbCIsImluaXQiLCJ0IiwiaW5pdGlhbGl6ZSIsInN0b3AiLCJjbGVhckludGVydmFsIiwiaW50ZXJ2YWxSZWYiLCJvbiIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInNldEludGVydmFsIiwiZW1pdCIsIkhFQVJUQkVBVF9FVkVOVFMiLCJIRUFSVEJFQVRfSU5URVJWQUwiLCJIZWFydEJlYXQiLCJJSGVhcnRCZWF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/heartbeat/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpConnection: () => (/* binding */ f),\n/* harmony export */   \"default\": () => (/* binding */ f)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\nvar P = Object.defineProperty, w = Object.defineProperties, E = Object.getOwnPropertyDescriptors, c = Object.getOwnPropertySymbols, L = Object.prototype.hasOwnProperty, O = Object.prototype.propertyIsEnumerable, l = (r, t, e)=>t in r ? P(r, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : r[t] = e, p = (r, t)=>{\n    for(var e in t || (t = {}))L.call(t, e) && l(r, e, t[e]);\n    if (c) for (var e of c(t))O.call(t, e) && l(r, e, t[e]);\n    return r;\n}, v = (r, t)=>w(r, E(t));\nconst j = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n}, T = \"POST\", d = {\n    headers: j,\n    method: T\n}, g = 10;\nclass f {\n    constructor(t, e = !1){\n        if (this.url = t, this.disableProviderPing = e, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.isAvailable = !1, this.registering = !1, !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);\n        this.url = t, this.disableProviderPing = e;\n    }\n    get connected() {\n        return this.isAvailable;\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(t, e) {\n        this.events.on(t, e);\n    }\n    once(t, e) {\n        this.events.once(t, e);\n    }\n    off(t, e) {\n        this.events.off(t, e);\n    }\n    removeListener(t, e) {\n        this.events.removeListener(t, e);\n    }\n    async open(t = this.url) {\n        await this.register(t);\n    }\n    async close() {\n        if (!this.isAvailable) throw new Error(\"Connection already closed\");\n        this.onClose();\n    }\n    async send(t) {\n        this.isAvailable || await this.register();\n        try {\n            const e = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)(t), s = await (await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(this.url, v(p({}, d), {\n                body: e\n            }))).json();\n            this.onPayload({\n                data: s\n            });\n        } catch (e) {\n            this.onError(t.id, e);\n        }\n    }\n    async register(t = this.url) {\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);\n        if (this.registering) {\n            const e = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= e || this.events.listenerCount(\"open\") >= e) && this.events.setMaxListeners(e + 1), new Promise((s, i)=>{\n                this.events.once(\"register_error\", (n)=>{\n                    this.resetMaxListeners(), i(n);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.isAvailable > \"u\") return i(new Error(\"HTTP connection is missing or invalid\"));\n                    s();\n                });\n            });\n        }\n        this.url = t, this.registering = !0;\n        try {\n            if (!this.disableProviderPing) {\n                const e = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)({\n                    id: 1,\n                    jsonrpc: \"2.0\",\n                    method: \"test\",\n                    params: []\n                });\n                await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(t, v(p({}, d), {\n                    body: e\n                }));\n            }\n            this.onOpen();\n        } catch (e) {\n            const s = this.parseError(e);\n            throw this.events.emit(\"register_error\", s), this.onClose(), s;\n        }\n    }\n    onOpen() {\n        this.isAvailable = !0, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose() {\n        this.isAvailable = !1, this.registering = !1, this.events.emit(\"close\");\n    }\n    onPayload(t) {\n        if (typeof t.data > \"u\") return;\n        const e = typeof t.data == \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonParse)(t.data) : t.data;\n        this.events.emit(\"payload\", e);\n    }\n    onError(t, e) {\n        const s = this.parseError(e), i = s.message || s.toString(), n = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(t, i);\n        this.events.emit(\"payload\", n);\n    }\n    parseError(t, e = this.url) {\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.parseConnectionError)(t, e, \"HTTP\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > g && this.events.setMaxListeners(g);\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js ***!
  \************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nconst nodeFetch = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\");\nconst realFetch = nodeFetch.default || nodeFetch;\nconst fetch = function(url, options) {\n    // Support schemaless URIs on the server for parity with the browser.\n    // Ex: //github.com/ -> https://github.com/\n    if (/^\\/\\//.test(url)) {\n        url = \"https:\" + url;\n    }\n    return realFetch.call(this, url, options);\n};\nfetch.ponyfill = true;\nmodule.exports = exports = fetch;\nexports.fetch = fetch;\nexports.Headers = nodeFetch.Headers;\nexports.Request = nodeFetch.Request;\nexports.Response = nodeFetch.Response;\n// Needed for TypeScript consumers without esModuleInterop.\nexports[\"default\"] = fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1odHRwLWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL2Nyb3NzLWZldGNoL2Rpc3Qvbm9kZS1wb255ZmlsbC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsWUFBWUMsbUJBQU9BLENBQUM7QUFDMUIsTUFBTUMsWUFBWUYsVUFBVUcsT0FBTyxJQUFJSDtBQUV2QyxNQUFNSSxRQUFRLFNBQVVDLEdBQUcsRUFBRUMsT0FBTztJQUNsQyxxRUFBcUU7SUFDckUsMkNBQTJDO0lBQzNDLElBQUksUUFBUUMsSUFBSSxDQUFDRixNQUFNO1FBQ3JCQSxNQUFNLFdBQVdBO0lBQ25CO0lBQ0EsT0FBT0gsVUFBVU0sSUFBSSxDQUFDLElBQUksRUFBRUgsS0FBS0M7QUFDbkM7QUFFQUYsTUFBTUssUUFBUSxHQUFHO0FBRWpCQyxPQUFPQyxPQUFPLEdBQUdBLFVBQVVQO0FBQzNCTyxhQUFhLEdBQUdQO0FBQ2hCTyxlQUFlLEdBQUdYLFVBQVVZLE9BQU87QUFDbkNELGVBQWUsR0FBR1gsVUFBVWEsT0FBTztBQUNuQ0YsZ0JBQWdCLEdBQUdYLFVBQVVjLFFBQVE7QUFFckMsMkRBQTJEO0FBQzNESCxrQkFBZSxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLWh0dHAtY29ubmVjdGlvbi9ub2RlX21vZHVsZXMvY3Jvc3MtZmV0Y2gvZGlzdC9ub2RlLXBvbnlmaWxsLmpzP2I2OTAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgbm9kZUZldGNoID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpXG5jb25zdCByZWFsRmV0Y2ggPSBub2RlRmV0Y2guZGVmYXVsdCB8fCBub2RlRmV0Y2hcblxuY29uc3QgZmV0Y2ggPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIC8vIFN1cHBvcnQgc2NoZW1hbGVzcyBVUklzIG9uIHRoZSBzZXJ2ZXIgZm9yIHBhcml0eSB3aXRoIHRoZSBicm93c2VyLlxuICAvLyBFeDogLy9naXRodWIuY29tLyAtPiBodHRwczovL2dpdGh1Yi5jb20vXG4gIGlmICgvXlxcL1xcLy8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gJ2h0dHBzOicgKyB1cmxcbiAgfVxuICByZXR1cm4gcmVhbEZldGNoLmNhbGwodGhpcywgdXJsLCBvcHRpb25zKVxufVxuXG5mZXRjaC5wb255ZmlsbCA9IHRydWVcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmV0Y2hcbmV4cG9ydHMuZmV0Y2ggPSBmZXRjaFxuZXhwb3J0cy5IZWFkZXJzID0gbm9kZUZldGNoLkhlYWRlcnNcbmV4cG9ydHMuUmVxdWVzdCA9IG5vZGVGZXRjaC5SZXF1ZXN0XG5leHBvcnRzLlJlc3BvbnNlID0gbm9kZUZldGNoLlJlc3BvbnNlXG5cbi8vIE5lZWRlZCBmb3IgVHlwZVNjcmlwdCBjb25zdW1lcnMgd2l0aG91dCBlc01vZHVsZUludGVyb3AuXG5leHBvcnRzLmRlZmF1bHQgPSBmZXRjaFxuIl0sIm5hbWVzIjpbIm5vZGVGZXRjaCIsInJlcXVpcmUiLCJyZWFsRmV0Y2giLCJkZWZhdWx0IiwiZmV0Y2giLCJ1cmwiLCJvcHRpb25zIiwidGVzdCIsImNhbGwiLCJwb255ZmlsbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJIZWFkZXJzIiwiUmVxdWVzdCIsIlJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcProvider: () => (/* binding */ o),\n/* harmony export */   \"default\": () => (/* binding */ o)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\nclass o extends _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.IJsonRpcProvider {\n    constructor(t){\n        super(t), this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.hasRegisteredEventListeners = !1, this.connection = this.setConnection(t), this.connection.connected && this.registerEventListeners();\n    }\n    async connect(t = this.connection) {\n        await this.open(t);\n    }\n    async disconnect() {\n        await this.close();\n    }\n    on(t, e) {\n        this.events.on(t, e);\n    }\n    once(t, e) {\n        this.events.once(t, e);\n    }\n    off(t, e) {\n        this.events.off(t, e);\n    }\n    removeListener(t, e) {\n        this.events.removeListener(t, e);\n    }\n    async request(t, e) {\n        return this.requestStrict((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.formatJsonRpcRequest)(t.method, t.params || [], t.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.getBigIntRpcId)().toString()), e);\n    }\n    async requestStrict(t, e) {\n        return new Promise(async (i, s)=>{\n            if (!this.connection.connected) try {\n                await this.open();\n            } catch (n) {\n                s(n);\n            }\n            this.events.on(`${t.id}`, (n)=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcError)(n) ? s(n.error) : i(n.result);\n            });\n            try {\n                await this.connection.send(t, e);\n            } catch (n) {\n                s(n);\n            }\n        });\n    }\n    setConnection(t = this.connection) {\n        return t;\n    }\n    onPayload(t) {\n        this.events.emit(\"payload\", t), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcResponse)(t) ? this.events.emit(`${t.id}`, t) : this.events.emit(\"message\", {\n            type: t.method,\n            data: t.params\n        });\n    }\n    onClose(t) {\n        t && t.code === 3e3 && this.events.emit(\"error\", new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason ? `(${t.reason})` : \"\"}`)), this.events.emit(\"disconnect\");\n    }\n    async open(t = this.connection) {\n        this.connection === t && this.connection.connected || (this.connection.connected && this.close(), typeof t == \"string\" && (await this.connection.open(t), t = this.connection), this.connection = this.setConnection(t), await this.connection.open(), this.registerEventListeners(), this.events.emit(\"connect\"));\n    }\n    async close() {\n        await this.connection.close();\n    }\n    registerEventListeners() {\n        this.hasRegisteredEventListeners || (this.connection.on(\"payload\", (t)=>this.onPayload(t)), this.connection.on(\"close\", (t)=>this.onClose(t)), this.connection.on(\"error\", (t)=>this.events.emit(\"error\", t)), this.connection.on(\"register_error\", (t)=>this.onClose()), this.hasRegisteredEventListeners = !0);\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1wcm92aWRlci9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNDO0FBQXlKO0FBQUEsTUFBTVksVUFBVVQsMEVBQUNBO0lBQUNVLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUssQ0FBQ0EsSUFBRyxJQUFJLENBQUNDLE1BQU0sR0FBQyxJQUFJZCxnREFBQ0EsRUFBQyxJQUFJLENBQUNlLDJCQUEyQixHQUFDLENBQUMsR0FBRSxJQUFJLENBQUNDLFVBQVUsR0FBQyxJQUFJLENBQUNDLGFBQWEsQ0FBQ0osSUFBRyxJQUFJLENBQUNHLFVBQVUsQ0FBQ0UsU0FBUyxJQUFFLElBQUksQ0FBQ0Msc0JBQXNCO0lBQUU7SUFBQyxNQUFNQyxRQUFRUCxJQUFFLElBQUksQ0FBQ0csVUFBVSxFQUFDO1FBQUMsTUFBTSxJQUFJLENBQUNLLElBQUksQ0FBQ1I7SUFBRTtJQUFDLE1BQU1TLGFBQVk7UUFBQyxNQUFNLElBQUksQ0FBQ0MsS0FBSztJQUFFO0lBQUNDLEdBQUdYLENBQUMsRUFBQ1ksQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDWCxNQUFNLENBQUNVLEVBQUUsQ0FBQ1gsR0FBRVk7SUFBRTtJQUFDQyxLQUFLYixDQUFDLEVBQUNZLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJLENBQUNiLEdBQUVZO0lBQUU7SUFBQ0UsSUFBSWQsQ0FBQyxFQUFDWSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNYLE1BQU0sQ0FBQ2EsR0FBRyxDQUFDZCxHQUFFWTtJQUFFO0lBQUNHLGVBQWVmLENBQUMsRUFBQ1ksQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDWCxNQUFNLENBQUNjLGNBQWMsQ0FBQ2YsR0FBRVk7SUFBRTtJQUFDLE1BQU1JLFFBQVFoQixDQUFDLEVBQUNZLENBQUMsRUFBQztRQUFDLE9BQU8sSUFBSSxDQUFDSyxhQUFhLENBQUMxQixrRkFBQ0EsQ0FBQ1MsRUFBRWtCLE1BQU0sRUFBQ2xCLEVBQUVtQixNQUFNLElBQUUsRUFBRSxFQUFDbkIsRUFBRW9CLEVBQUUsSUFBRTNCLDRFQUFDQSxHQUFHNEIsUUFBUSxLQUFJVDtJQUFFO0lBQUMsTUFBTUssY0FBY2pCLENBQUMsRUFBQ1ksQ0FBQyxFQUFDO1FBQUMsT0FBTyxJQUFJVSxRQUFRLE9BQU1DLEdBQUVDO1lBQUssSUFBRyxDQUFDLElBQUksQ0FBQ3JCLFVBQVUsQ0FBQ0UsU0FBUyxFQUFDLElBQUc7Z0JBQUMsTUFBTSxJQUFJLENBQUNHLElBQUk7WUFBRSxFQUFDLE9BQU1pQixHQUFFO2dCQUFDRCxFQUFFQztZQUFFO1lBQUMsSUFBSSxDQUFDeEIsTUFBTSxDQUFDVSxFQUFFLENBQUMsQ0FBQyxFQUFFWCxFQUFFb0IsRUFBRSxDQUFDLENBQUMsRUFBQ0ssQ0FBQUE7Z0JBQUk5Qiw0RUFBQ0EsQ0FBQzhCLEtBQUdELEVBQUVDLEVBQUVDLEtBQUssSUFBRUgsRUFBRUUsRUFBRUUsTUFBTTtZQUFDO1lBQUcsSUFBRztnQkFBQyxNQUFNLElBQUksQ0FBQ3hCLFVBQVUsQ0FBQ3lCLElBQUksQ0FBQzVCLEdBQUVZO1lBQUUsRUFBQyxPQUFNYSxHQUFFO2dCQUFDRCxFQUFFQztZQUFFO1FBQUM7SUFBRTtJQUFDckIsY0FBY0osSUFBRSxJQUFJLENBQUNHLFVBQVUsRUFBQztRQUFDLE9BQU9IO0lBQUM7SUFBQzZCLFVBQVU3QixDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNDLE1BQU0sQ0FBQzZCLElBQUksQ0FBQyxXQUFVOUIsSUFBR0gsK0VBQUNBLENBQUNHLEtBQUcsSUFBSSxDQUFDQyxNQUFNLENBQUM2QixJQUFJLENBQUMsQ0FBQyxFQUFFOUIsRUFBRW9CLEVBQUUsQ0FBQyxDQUFDLEVBQUNwQixLQUFHLElBQUksQ0FBQ0MsTUFBTSxDQUFDNkIsSUFBSSxDQUFDLFdBQVU7WUFBQ0MsTUFBSy9CLEVBQUVrQixNQUFNO1lBQUNjLE1BQUtoQyxFQUFFbUIsTUFBTTtRQUFBO0lBQUU7SUFBQ2MsUUFBUWpDLENBQUMsRUFBQztRQUFDQSxLQUFHQSxFQUFFa0MsSUFBSSxLQUFHLE9BQUssSUFBSSxDQUFDakMsTUFBTSxDQUFDNkIsSUFBSSxDQUFDLFNBQVEsSUFBSUssTUFBTSxDQUFDLGtEQUFrRCxFQUFFbkMsRUFBRWtDLElBQUksQ0FBQyxDQUFDLEVBQUVsQyxFQUFFb0MsTUFBTSxHQUFDLENBQUMsQ0FBQyxFQUFFcEMsRUFBRW9DLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsSUFBRyxJQUFJLENBQUNuQyxNQUFNLENBQUM2QixJQUFJLENBQUM7SUFBYTtJQUFDLE1BQU10QixLQUFLUixJQUFFLElBQUksQ0FBQ0csVUFBVSxFQUFDO1FBQUMsSUFBSSxDQUFDQSxVQUFVLEtBQUdILEtBQUcsSUFBSSxDQUFDRyxVQUFVLENBQUNFLFNBQVMsSUFBRyxLQUFJLENBQUNGLFVBQVUsQ0FBQ0UsU0FBUyxJQUFFLElBQUksQ0FBQ0ssS0FBSyxJQUFHLE9BQU9WLEtBQUcsWUFBVyxPQUFNLElBQUksQ0FBQ0csVUFBVSxDQUFDSyxJQUFJLENBQUNSLElBQUdBLElBQUUsSUFBSSxDQUFDRyxVQUFVLEdBQUUsSUFBSSxDQUFDQSxVQUFVLEdBQUMsSUFBSSxDQUFDQyxhQUFhLENBQUNKLElBQUcsTUFBTSxJQUFJLENBQUNHLFVBQVUsQ0FBQ0ssSUFBSSxJQUFHLElBQUksQ0FBQ0Ysc0JBQXNCLElBQUcsSUFBSSxDQUFDTCxNQUFNLENBQUM2QixJQUFJLENBQUMsVUFBUztJQUFFO0lBQUMsTUFBTXBCLFFBQU87UUFBQyxNQUFNLElBQUksQ0FBQ1AsVUFBVSxDQUFDTyxLQUFLO0lBQUU7SUFBQ0oseUJBQXdCO1FBQUMsSUFBSSxDQUFDSiwyQkFBMkIsSUFBRyxLQUFJLENBQUNDLFVBQVUsQ0FBQ1EsRUFBRSxDQUFDLFdBQVVYLENBQUFBLElBQUcsSUFBSSxDQUFDNkIsU0FBUyxDQUFDN0IsS0FBSSxJQUFJLENBQUNHLFVBQVUsQ0FBQ1EsRUFBRSxDQUFDLFNBQVFYLENBQUFBLElBQUcsSUFBSSxDQUFDaUMsT0FBTyxDQUFDakMsS0FBSSxJQUFJLENBQUNHLFVBQVUsQ0FBQ1EsRUFBRSxDQUFDLFNBQVFYLENBQUFBLElBQUcsSUFBSSxDQUFDQyxNQUFNLENBQUM2QixJQUFJLENBQUMsU0FBUTlCLEtBQUksSUFBSSxDQUFDRyxVQUFVLENBQUNRLEVBQUUsQ0FBQyxrQkFBaUJYLENBQUFBLElBQUcsSUFBSSxDQUFDaUMsT0FBTyxLQUFJLElBQUksQ0FBQy9CLDJCQUEyQixHQUFDLENBQUM7SUFBRTtBQUFDO0FBQTJDLENBQ3IrRCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1wcm92aWRlci9kaXN0L2luZGV4LmVzLmpzPzdlZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e0V2ZW50RW1pdHRlciBhcyBjfWZyb21cImV2ZW50c1wiO2ltcG9ydHtJSnNvblJwY1Byb3ZpZGVyIGFzIHIsZm9ybWF0SnNvblJwY1JlcXVlc3QgYXMgaCxnZXRCaWdJbnRScGNJZCBhcyBhLGlzSnNvblJwY0Vycm9yIGFzIGQsaXNKc29uUnBjUmVzcG9uc2UgYXMgdn1mcm9tXCJAd2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzXCI7Y2xhc3MgbyBleHRlbmRzIHJ7Y29uc3RydWN0b3IodCl7c3VwZXIodCksdGhpcy5ldmVudHM9bmV3IGMsdGhpcy5oYXNSZWdpc3RlcmVkRXZlbnRMaXN0ZW5lcnM9ITEsdGhpcy5jb25uZWN0aW9uPXRoaXMuc2V0Q29ubmVjdGlvbih0KSx0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGVkJiZ0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKX1hc3luYyBjb25uZWN0KHQ9dGhpcy5jb25uZWN0aW9uKXthd2FpdCB0aGlzLm9wZW4odCl9YXN5bmMgZGlzY29ubmVjdCgpe2F3YWl0IHRoaXMuY2xvc2UoKX1vbih0LGUpe3RoaXMuZXZlbnRzLm9uKHQsZSl9b25jZSh0LGUpe3RoaXMuZXZlbnRzLm9uY2UodCxlKX1vZmYodCxlKXt0aGlzLmV2ZW50cy5vZmYodCxlKX1yZW1vdmVMaXN0ZW5lcih0LGUpe3RoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKHQsZSl9YXN5bmMgcmVxdWVzdCh0LGUpe3JldHVybiB0aGlzLnJlcXVlc3RTdHJpY3QoaCh0Lm1ldGhvZCx0LnBhcmFtc3x8W10sdC5pZHx8YSgpLnRvU3RyaW5nKCkpLGUpfWFzeW5jIHJlcXVlc3RTdHJpY3QodCxlKXtyZXR1cm4gbmV3IFByb21pc2UoYXN5bmMoaSxzKT0+e2lmKCF0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGVkKXRyeXthd2FpdCB0aGlzLm9wZW4oKX1jYXRjaChuKXtzKG4pfXRoaXMuZXZlbnRzLm9uKGAke3QuaWR9YCxuPT57ZChuKT9zKG4uZXJyb3IpOmkobi5yZXN1bHQpfSk7dHJ5e2F3YWl0IHRoaXMuY29ubmVjdGlvbi5zZW5kKHQsZSl9Y2F0Y2gobil7cyhuKX19KX1zZXRDb25uZWN0aW9uKHQ9dGhpcy5jb25uZWN0aW9uKXtyZXR1cm4gdH1vblBheWxvYWQodCl7dGhpcy5ldmVudHMuZW1pdChcInBheWxvYWRcIix0KSx2KHQpP3RoaXMuZXZlbnRzLmVtaXQoYCR7dC5pZH1gLHQpOnRoaXMuZXZlbnRzLmVtaXQoXCJtZXNzYWdlXCIse3R5cGU6dC5tZXRob2QsZGF0YTp0LnBhcmFtc30pfW9uQ2xvc2UodCl7dCYmdC5jb2RlPT09M2UzJiZ0aGlzLmV2ZW50cy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoYFdlYlNvY2tldCBjb25uZWN0aW9uIGNsb3NlZCBhYm5vcm1hbGx5IHdpdGggY29kZTogJHt0LmNvZGV9ICR7dC5yZWFzb24/YCgke3QucmVhc29ufSlgOlwiXCJ9YCkpLHRoaXMuZXZlbnRzLmVtaXQoXCJkaXNjb25uZWN0XCIpfWFzeW5jIG9wZW4odD10aGlzLmNvbm5lY3Rpb24pe3RoaXMuY29ubmVjdGlvbj09PXQmJnRoaXMuY29ubmVjdGlvbi5jb25uZWN0ZWR8fCh0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGVkJiZ0aGlzLmNsb3NlKCksdHlwZW9mIHQ9PVwic3RyaW5nXCImJihhd2FpdCB0aGlzLmNvbm5lY3Rpb24ub3Blbih0KSx0PXRoaXMuY29ubmVjdGlvbiksdGhpcy5jb25uZWN0aW9uPXRoaXMuc2V0Q29ubmVjdGlvbih0KSxhd2FpdCB0aGlzLmNvbm5lY3Rpb24ub3BlbigpLHRoaXMucmVnaXN0ZXJFdmVudExpc3RlbmVycygpLHRoaXMuZXZlbnRzLmVtaXQoXCJjb25uZWN0XCIpKX1hc3luYyBjbG9zZSgpe2F3YWl0IHRoaXMuY29ubmVjdGlvbi5jbG9zZSgpfXJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKXt0aGlzLmhhc1JlZ2lzdGVyZWRFdmVudExpc3RlbmVyc3x8KHRoaXMuY29ubmVjdGlvbi5vbihcInBheWxvYWRcIix0PT50aGlzLm9uUGF5bG9hZCh0KSksdGhpcy5jb25uZWN0aW9uLm9uKFwiY2xvc2VcIix0PT50aGlzLm9uQ2xvc2UodCkpLHRoaXMuY29ubmVjdGlvbi5vbihcImVycm9yXCIsdD0+dGhpcy5ldmVudHMuZW1pdChcImVycm9yXCIsdCkpLHRoaXMuY29ubmVjdGlvbi5vbihcInJlZ2lzdGVyX2Vycm9yXCIsdD0+dGhpcy5vbkNsb3NlKCkpLHRoaXMuaGFzUmVnaXN0ZXJlZEV2ZW50TGlzdGVuZXJzPSEwKX19ZXhwb3J0e28gYXMgSnNvblJwY1Byb3ZpZGVyLG8gYXMgZGVmYXVsdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJjIiwiSUpzb25ScGNQcm92aWRlciIsInIiLCJmb3JtYXRKc29uUnBjUmVxdWVzdCIsImgiLCJnZXRCaWdJbnRScGNJZCIsImEiLCJpc0pzb25ScGNFcnJvciIsImQiLCJpc0pzb25ScGNSZXNwb25zZSIsInYiLCJvIiwiY29uc3RydWN0b3IiLCJ0IiwiZXZlbnRzIiwiaGFzUmVnaXN0ZXJlZEV2ZW50TGlzdGVuZXJzIiwiY29ubmVjdGlvbiIsInNldENvbm5lY3Rpb24iLCJjb25uZWN0ZWQiLCJyZWdpc3RlckV2ZW50TGlzdGVuZXJzIiwiY29ubmVjdCIsIm9wZW4iLCJkaXNjb25uZWN0IiwiY2xvc2UiLCJvbiIsImUiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZXF1ZXN0IiwicmVxdWVzdFN0cmljdCIsIm1ldGhvZCIsInBhcmFtcyIsImlkIiwidG9TdHJpbmciLCJQcm9taXNlIiwiaSIsInMiLCJuIiwiZXJyb3IiLCJyZXN1bHQiLCJzZW5kIiwib25QYXlsb2FkIiwiZW1pdCIsInR5cGUiLCJkYXRhIiwib25DbG9zZSIsImNvZGUiLCJFcnJvciIsInJlYXNvbiIsIkpzb25ScGNQcm92aWRlciIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IBaseJsonRpcProvider: () => (/* binding */ n),\n/* harmony export */   IEvents: () => (/* binding */ e),\n/* harmony export */   IJsonRpcConnection: () => (/* binding */ o),\n/* harmony export */   IJsonRpcProvider: () => (/* binding */ r)\n/* harmony export */ });\nclass e {\n}\nclass o extends e {\n    constructor(c){\n        super();\n    }\n}\nclass n extends e {\n    constructor(){\n        super();\n    }\n}\nclass r extends n {\n    constructor(c){\n        super();\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy10eXBlcy9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxNQUFNQTtBQUFFO0FBQUMsTUFBTUMsVUFBVUQ7SUFBRUUsWUFBWUMsQ0FBQyxDQUFDO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNQyxVQUFVSjtJQUFFRSxhQUFhO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNRyxVQUFVRDtJQUFFRixZQUFZQyxDQUFDLENBQUM7UUFBQyxLQUFLO0lBQUU7QUFBQztBQUE4RixDQUNuTyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy10eXBlcy9kaXN0L2luZGV4LmVzLmpzP2IxMjkiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgZXt9Y2xhc3MgbyBleHRlbmRzIGV7Y29uc3RydWN0b3IoYyl7c3VwZXIoKX19Y2xhc3MgbiBleHRlbmRzIGV7Y29uc3RydWN0b3IoKXtzdXBlcigpfX1jbGFzcyByIGV4dGVuZHMgbntjb25zdHJ1Y3RvcihjKXtzdXBlcigpfX1leHBvcnR7biBhcyBJQmFzZUpzb25ScGNQcm92aWRlcixlIGFzIElFdmVudHMsbyBhcyBJSnNvblJwY0Nvbm5lY3Rpb24sciBhcyBJSnNvblJwY1Byb3ZpZGVyfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbImUiLCJvIiwiY29uc3RydWN0b3IiLCJjIiwibiIsInIiLCJJQmFzZUpzb25ScGNQcm92aWRlciIsIklFdmVudHMiLCJJSnNvblJwY0Nvbm5lY3Rpb24iLCJJSnNvblJwY1Byb3ZpZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ERROR: () => (/* binding */ DEFAULT_ERROR),\n/* harmony export */   INTERNAL_ERROR: () => (/* binding */ INTERNAL_ERROR),\n/* harmony export */   INVALID_PARAMS: () => (/* binding */ INVALID_PARAMS),\n/* harmony export */   INVALID_REQUEST: () => (/* binding */ INVALID_REQUEST),\n/* harmony export */   METHOD_NOT_FOUND: () => (/* binding */ METHOD_NOT_FOUND),\n/* harmony export */   PARSE_ERROR: () => (/* binding */ PARSE_ERROR),\n/* harmony export */   RESERVED_ERROR_CODES: () => (/* binding */ RESERVED_ERROR_CODES),\n/* harmony export */   SERVER_ERROR: () => (/* binding */ SERVER_ERROR),\n/* harmony export */   SERVER_ERROR_CODE_RANGE: () => (/* binding */ SERVER_ERROR_CODE_RANGE),\n/* harmony export */   STANDARD_ERROR_MAP: () => (/* binding */ STANDARD_ERROR_MAP)\n/* harmony export */ });\nconst PARSE_ERROR = \"PARSE_ERROR\";\nconst INVALID_REQUEST = \"INVALID_REQUEST\";\nconst METHOD_NOT_FOUND = \"METHOD_NOT_FOUND\";\nconst INVALID_PARAMS = \"INVALID_PARAMS\";\nconst INTERNAL_ERROR = \"INTERNAL_ERROR\";\nconst SERVER_ERROR = \"SERVER_ERROR\";\nconst RESERVED_ERROR_CODES = [\n    -32700,\n    -32600,\n    -32601,\n    -32602,\n    -32603\n];\nconst SERVER_ERROR_CODE_RANGE = [\n    -32000,\n    -32099\n];\nconst STANDARD_ERROR_MAP = {\n    [PARSE_ERROR]: {\n        code: -32700,\n        message: \"Parse error\"\n    },\n    [INVALID_REQUEST]: {\n        code: -32600,\n        message: \"Invalid Request\"\n    },\n    [METHOD_NOT_FOUND]: {\n        code: -32601,\n        message: \"Method not found\"\n    },\n    [INVALID_PARAMS]: {\n        code: -32602,\n        message: \"Invalid params\"\n    },\n    [INTERNAL_ERROR]: {\n        code: -32603,\n        message: \"Internal error\"\n    },\n    [SERVER_ERROR]: {\n        code: -32000,\n        message: \"Server error\"\n    }\n};\nconst DEFAULT_ERROR = SERVER_ERROR; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFPLE1BQU1BLGNBQWMsY0FBYztBQUNsQyxNQUFNQyxrQkFBa0Isa0JBQWtCO0FBQzFDLE1BQU1DLG1CQUFtQixtQkFBbUI7QUFDNUMsTUFBTUMsaUJBQWlCLGlCQUFpQjtBQUN4QyxNQUFNQyxpQkFBaUIsaUJBQWlCO0FBQ3hDLE1BQU1DLGVBQWUsZUFBZTtBQUNwQyxNQUFNQyx1QkFBdUI7SUFBQyxDQUFDO0lBQU8sQ0FBQztJQUFPLENBQUM7SUFBTyxDQUFDO0lBQU8sQ0FBQztDQUFNLENBQUM7QUFDdEUsTUFBTUMsMEJBQTBCO0lBQUMsQ0FBQztJQUFPLENBQUM7Q0FBTSxDQUFDO0FBQ2pELE1BQU1DLHFCQUFxQjtJQUM5QixDQUFDUixZQUFZLEVBQUU7UUFBRVMsTUFBTSxDQUFDO1FBQU9DLFNBQVM7SUFBYztJQUN0RCxDQUFDVCxnQkFBZ0IsRUFBRTtRQUFFUSxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFrQjtJQUM5RCxDQUFDUixpQkFBaUIsRUFBRTtRQUFFTyxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFtQjtJQUNoRSxDQUFDUCxlQUFlLEVBQUU7UUFBRU0sTUFBTSxDQUFDO1FBQU9DLFNBQVM7SUFBaUI7SUFDNUQsQ0FBQ04sZUFBZSxFQUFFO1FBQUVLLE1BQU0sQ0FBQztRQUFPQyxTQUFTO0lBQWlCO0lBQzVELENBQUNMLGFBQWEsRUFBRTtRQUFFSSxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFlO0FBQzVELEVBQUU7QUFDSyxNQUFNQyxnQkFBZ0JOLGFBQWEsQ0FDMUMscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vY29uc3RhbnRzLmpzPzljMDUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFBBUlNFX0VSUk9SID0gXCJQQVJTRV9FUlJPUlwiO1xuZXhwb3J0IGNvbnN0IElOVkFMSURfUkVRVUVTVCA9IFwiSU5WQUxJRF9SRVFVRVNUXCI7XG5leHBvcnQgY29uc3QgTUVUSE9EX05PVF9GT1VORCA9IFwiTUVUSE9EX05PVF9GT1VORFwiO1xuZXhwb3J0IGNvbnN0IElOVkFMSURfUEFSQU1TID0gXCJJTlZBTElEX1BBUkFNU1wiO1xuZXhwb3J0IGNvbnN0IElOVEVSTkFMX0VSUk9SID0gXCJJTlRFUk5BTF9FUlJPUlwiO1xuZXhwb3J0IGNvbnN0IFNFUlZFUl9FUlJPUiA9IFwiU0VSVkVSX0VSUk9SXCI7XG5leHBvcnQgY29uc3QgUkVTRVJWRURfRVJST1JfQ09ERVMgPSBbLTMyNzAwLCAtMzI2MDAsIC0zMjYwMSwgLTMyNjAyLCAtMzI2MDNdO1xuZXhwb3J0IGNvbnN0IFNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFID0gWy0zMjAwMCwgLTMyMDk5XTtcbmV4cG9ydCBjb25zdCBTVEFOREFSRF9FUlJPUl9NQVAgPSB7XG4gICAgW1BBUlNFX0VSUk9SXTogeyBjb2RlOiAtMzI3MDAsIG1lc3NhZ2U6IFwiUGFyc2UgZXJyb3JcIiB9LFxuICAgIFtJTlZBTElEX1JFUVVFU1RdOiB7IGNvZGU6IC0zMjYwMCwgbWVzc2FnZTogXCJJbnZhbGlkIFJlcXVlc3RcIiB9LFxuICAgIFtNRVRIT0RfTk9UX0ZPVU5EXTogeyBjb2RlOiAtMzI2MDEsIG1lc3NhZ2U6IFwiTWV0aG9kIG5vdCBmb3VuZFwiIH0sXG4gICAgW0lOVkFMSURfUEFSQU1TXTogeyBjb2RlOiAtMzI2MDIsIG1lc3NhZ2U6IFwiSW52YWxpZCBwYXJhbXNcIiB9LFxuICAgIFtJTlRFUk5BTF9FUlJPUl06IHsgY29kZTogLTMyNjAzLCBtZXNzYWdlOiBcIkludGVybmFsIGVycm9yXCIgfSxcbiAgICBbU0VSVkVSX0VSUk9SXTogeyBjb2RlOiAtMzIwMDAsIG1lc3NhZ2U6IFwiU2VydmVyIGVycm9yXCIgfSxcbn07XG5leHBvcnQgY29uc3QgREVGQVVMVF9FUlJPUiA9IFNFUlZFUl9FUlJPUjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOlsiUEFSU0VfRVJST1IiLCJJTlZBTElEX1JFUVVFU1QiLCJNRVRIT0RfTk9UX0ZPVU5EIiwiSU5WQUxJRF9QQVJBTVMiLCJJTlRFUk5BTF9FUlJPUiIsIlNFUlZFUl9FUlJPUiIsIlJFU0VSVkVEX0VSUk9SX0NPREVTIiwiU0VSVkVSX0VSUk9SX0NPREVfUkFOR0UiLCJTVEFOREFSRF9FUlJPUl9NQVAiLCJjb2RlIiwibWVzc2FnZSIsIkRFRkFVTFRfRVJST1IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNodeJs: () => (/* binding */ isNodeJs)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/environment */ \"(ssr)/./node_modules/@walletconnect/environment/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"isNodeJs\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\nconst isNodeJs = _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__.isNode;\n //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW9EO0FBQzdDLE1BQU1DLFdBQVdELDhEQUFNQSxDQUFDO0FBQ1ksQ0FDM0MsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vZW52LmpzPzY4NGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50XCI7XG5leHBvcnQgY29uc3QgaXNOb2RlSnMgPSBpc05vZGU7XG5leHBvcnQgKiBmcm9tIFwiQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnRcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXAiXSwibmFtZXMiOlsiaXNOb2RlIiwiaXNOb2RlSnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getError: () => (/* binding */ getError),\n/* harmony export */   getErrorByCode: () => (/* binding */ getErrorByCode),\n/* harmony export */   isReservedErrorCode: () => (/* binding */ isReservedErrorCode),\n/* harmony export */   isServerErrorCode: () => (/* binding */ isServerErrorCode),\n/* harmony export */   isValidErrorCode: () => (/* binding */ isValidErrorCode),\n/* harmony export */   parseConnectionError: () => (/* binding */ parseConnectionError),\n/* harmony export */   validateJsonRpcError: () => (/* binding */ validateJsonRpcError)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n\nfunction isServerErrorCode(code) {\n    return code <= _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE[0] && code >= _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE[1];\n}\nfunction isReservedErrorCode(code) {\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.RESERVED_ERROR_CODES.includes(code);\n}\nfunction isValidErrorCode(code) {\n    return typeof code === \"number\";\n}\nfunction getError(type) {\n    if (!Object.keys(_constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP).includes(type)) {\n        return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR];\n    }\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[type];\n}\nfunction getErrorByCode(code) {\n    const match = Object.values(_constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP).find((e)=>e.code === code);\n    if (!match) {\n        return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR];\n    }\n    return match;\n}\nfunction validateJsonRpcError(response) {\n    if (typeof response.error.code === \"undefined\") {\n        return {\n            valid: false,\n            error: \"Missing code for JSON-RPC error\"\n        };\n    }\n    if (typeof response.error.message === \"undefined\") {\n        return {\n            valid: false,\n            error: \"Missing message for JSON-RPC error\"\n        };\n    }\n    if (!isValidErrorCode(response.error.code)) {\n        return {\n            valid: false,\n            error: `Invalid error code type for JSON-RPC: ${response.error.code}`\n        };\n    }\n    if (isReservedErrorCode(response.error.code)) {\n        const error = getErrorByCode(response.error.code);\n        if (error.message !== _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR].message && response.error.message === error.message) {\n            return {\n                valid: false,\n                error: `Invalid error code message for JSON-RPC: ${response.error.code}`\n            };\n        }\n    }\n    return {\n        valid: true\n    };\n}\nfunction parseConnectionError(e, url, type) {\n    return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e;\n} //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFnSDtBQUN6RyxTQUFTSSxrQkFBa0JDLElBQUk7SUFDbEMsT0FBT0EsUUFBUUwsK0RBQXVCLENBQUMsRUFBRSxJQUFJSyxRQUFRTCwrREFBdUIsQ0FBQyxFQUFFO0FBQ25GO0FBQ08sU0FBU00sb0JBQW9CRCxJQUFJO0lBQ3BDLE9BQU9KLDREQUFvQkEsQ0FBQ00sUUFBUSxDQUFDRjtBQUN6QztBQUNPLFNBQVNHLGlCQUFpQkgsSUFBSTtJQUNqQyxPQUFPLE9BQU9BLFNBQVM7QUFDM0I7QUFDTyxTQUFTSSxTQUFTQyxJQUFJO0lBQ3pCLElBQUksQ0FBQ0MsT0FBT0MsSUFBSSxDQUFDViwwREFBa0JBLEVBQUVLLFFBQVEsQ0FBQ0csT0FBTztRQUNqRCxPQUFPUiwwREFBa0IsQ0FBQ0MscURBQWFBLENBQUM7SUFDNUM7SUFDQSxPQUFPRCwwREFBa0IsQ0FBQ1EsS0FBSztBQUNuQztBQUNPLFNBQVNHLGVBQWVSLElBQUk7SUFDL0IsTUFBTVMsUUFBUUgsT0FBT0ksTUFBTSxDQUFDYiwwREFBa0JBLEVBQUVjLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRVosSUFBSSxLQUFLQTtJQUNyRSxJQUFJLENBQUNTLE9BQU87UUFDUixPQUFPWiwwREFBa0IsQ0FBQ0MscURBQWFBLENBQUM7SUFDNUM7SUFDQSxPQUFPVztBQUNYO0FBQ08sU0FBU0kscUJBQXFCQyxRQUFRO0lBQ3pDLElBQUksT0FBT0EsU0FBU0MsS0FBSyxDQUFDZixJQUFJLEtBQUssYUFBYTtRQUM1QyxPQUFPO1lBQUVnQixPQUFPO1lBQU9ELE9BQU87UUFBa0M7SUFDcEU7SUFDQSxJQUFJLE9BQU9ELFNBQVNDLEtBQUssQ0FBQ0UsT0FBTyxLQUFLLGFBQWE7UUFDL0MsT0FBTztZQUFFRCxPQUFPO1lBQU9ELE9BQU87UUFBcUM7SUFDdkU7SUFDQSxJQUFJLENBQUNaLGlCQUFpQlcsU0FBU0MsS0FBSyxDQUFDZixJQUFJLEdBQUc7UUFDeEMsT0FBTztZQUNIZ0IsT0FBTztZQUNQRCxPQUFPLENBQUMsc0NBQXNDLEVBQUVELFNBQVNDLEtBQUssQ0FBQ2YsSUFBSSxDQUFDLENBQUM7UUFDekU7SUFDSjtJQUNBLElBQUlDLG9CQUFvQmEsU0FBU0MsS0FBSyxDQUFDZixJQUFJLEdBQUc7UUFDMUMsTUFBTWUsUUFBUVAsZUFBZU0sU0FBU0MsS0FBSyxDQUFDZixJQUFJO1FBQ2hELElBQUllLE1BQU1FLE9BQU8sS0FBS3BCLDBEQUFrQixDQUFDQyxxREFBYUEsQ0FBQyxDQUFDbUIsT0FBTyxJQUMzREgsU0FBU0MsS0FBSyxDQUFDRSxPQUFPLEtBQUtGLE1BQU1FLE9BQU8sRUFBRTtZQUMxQyxPQUFPO2dCQUNIRCxPQUFPO2dCQUNQRCxPQUFPLENBQUMseUNBQXlDLEVBQUVELFNBQVNDLEtBQUssQ0FBQ2YsSUFBSSxDQUFDLENBQUM7WUFDNUU7UUFDSjtJQUNKO0lBQ0EsT0FBTztRQUFFZ0IsT0FBTztJQUFLO0FBQ3pCO0FBQ08sU0FBU0UscUJBQXFCTixDQUFDLEVBQUVPLEdBQUcsRUFBRWQsSUFBSTtJQUM3QyxPQUFPTyxFQUFFSyxPQUFPLENBQUNmLFFBQVEsQ0FBQyw0QkFBNEJVLEVBQUVLLE9BQU8sQ0FBQ2YsUUFBUSxDQUFDLDBCQUNuRSxJQUFJa0IsTUFBTSxDQUFDLFlBQVksRUFBRWYsS0FBSyxZQUFZLEVBQUVjLElBQUksQ0FBQyxJQUNqRFA7QUFDVixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2Vycm9yLmpzPzU5NTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU0VSVkVSX0VSUk9SX0NPREVfUkFOR0UsIFJFU0VSVkVEX0VSUk9SX0NPREVTLCBTVEFOREFSRF9FUlJPUl9NQVAsIERFRkFVTFRfRVJST1IsIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNTZXJ2ZXJFcnJvckNvZGUoY29kZSkge1xuICAgIHJldHVybiBjb2RlIDw9IFNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFWzBdICYmIGNvZGUgPj0gU0VSVkVSX0VSUk9SX0NPREVfUkFOR0VbMV07XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZXNlcnZlZEVycm9yQ29kZShjb2RlKSB7XG4gICAgcmV0dXJuIFJFU0VSVkVEX0VSUk9SX0NPREVTLmluY2x1ZGVzKGNvZGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRFcnJvckNvZGUoY29kZSkge1xuICAgIHJldHVybiB0eXBlb2YgY29kZSA9PT0gXCJudW1iZXJcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcnJvcih0eXBlKSB7XG4gICAgaWYgKCFPYmplY3Qua2V5cyhTVEFOREFSRF9FUlJPUl9NQVApLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgICAgIHJldHVybiBTVEFOREFSRF9FUlJPUl9NQVBbREVGQVVMVF9FUlJPUl07XG4gICAgfVxuICAgIHJldHVybiBTVEFOREFSRF9FUlJPUl9NQVBbdHlwZV07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JCeUNvZGUoY29kZSkge1xuICAgIGNvbnN0IG1hdGNoID0gT2JqZWN0LnZhbHVlcyhTVEFOREFSRF9FUlJPUl9NQVApLmZpbmQoZSA9PiBlLmNvZGUgPT09IGNvZGUpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIFNUQU5EQVJEX0VSUk9SX01BUFtERUZBVUxUX0VSUk9SXTtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSnNvblJwY0Vycm9yKHJlc3BvbnNlKSB7XG4gICAgaWYgKHR5cGVvZiByZXNwb25zZS5lcnJvci5jb2RlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSwgZXJyb3I6IFwiTWlzc2luZyBjb2RlIGZvciBKU09OLVJQQyBlcnJvclwiIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuZXJyb3IubWVzc2FnZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UsIGVycm9yOiBcIk1pc3NpbmcgbWVzc2FnZSBmb3IgSlNPTi1SUEMgZXJyb3JcIiB9O1xuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRFcnJvckNvZGUocmVzcG9uc2UuZXJyb3IuY29kZSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiBgSW52YWxpZCBlcnJvciBjb2RlIHR5cGUgZm9yIEpTT04tUlBDOiAke3Jlc3BvbnNlLmVycm9yLmNvZGV9YCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzUmVzZXJ2ZWRFcnJvckNvZGUocmVzcG9uc2UuZXJyb3IuY29kZSkpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBnZXRFcnJvckJ5Q29kZShyZXNwb25zZS5lcnJvci5jb2RlKTtcbiAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UgIT09IFNUQU5EQVJEX0VSUk9SX01BUFtERUZBVUxUX0VSUk9SXS5tZXNzYWdlICYmXG4gICAgICAgICAgICByZXNwb25zZS5lcnJvci5tZXNzYWdlID09PSBlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogYEludmFsaWQgZXJyb3IgY29kZSBtZXNzYWdlIGZvciBKU09OLVJQQzogJHtyZXNwb25zZS5lcnJvci5jb2RlfWAsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHZhbGlkOiB0cnVlIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDb25uZWN0aW9uRXJyb3IoZSwgdXJsLCB0eXBlKSB7XG4gICAgcmV0dXJuIGUubWVzc2FnZS5pbmNsdWRlcyhcImdldGFkZHJpbmZvIEVOT1RGT1VORFwiKSB8fCBlLm1lc3NhZ2UuaW5jbHVkZXMoXCJjb25uZWN0IEVDT05OUkVGVVNFRFwiKVxuICAgICAgICA/IG5ldyBFcnJvcihgVW5hdmFpbGFibGUgJHt0eXBlfSBSUEMgdXJsIGF0ICR7dXJsfWApXG4gICAgICAgIDogZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6WyJTRVJWRVJfRVJST1JfQ09ERV9SQU5HRSIsIlJFU0VSVkVEX0VSUk9SX0NPREVTIiwiU1RBTkRBUkRfRVJST1JfTUFQIiwiREVGQVVMVF9FUlJPUiIsImlzU2VydmVyRXJyb3JDb2RlIiwiY29kZSIsImlzUmVzZXJ2ZWRFcnJvckNvZGUiLCJpbmNsdWRlcyIsImlzVmFsaWRFcnJvckNvZGUiLCJnZXRFcnJvciIsInR5cGUiLCJPYmplY3QiLCJrZXlzIiwiZ2V0RXJyb3JCeUNvZGUiLCJtYXRjaCIsInZhbHVlcyIsImZpbmQiLCJlIiwidmFsaWRhdGVKc29uUnBjRXJyb3IiLCJyZXNwb25zZSIsImVycm9yIiwidmFsaWQiLCJtZXNzYWdlIiwicGFyc2VDb25uZWN0aW9uRXJyb3IiLCJ1cmwiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatErrorMessage: () => (/* binding */ formatErrorMessage),\n/* harmony export */   formatJsonRpcError: () => (/* binding */ formatJsonRpcError),\n/* harmony export */   formatJsonRpcRequest: () => (/* binding */ formatJsonRpcRequest),\n/* harmony export */   formatJsonRpcResult: () => (/* binding */ formatJsonRpcResult),\n/* harmony export */   getBigIntRpcId: () => (/* binding */ getBigIntRpcId),\n/* harmony export */   payloadId: () => (/* binding */ payloadId)\n/* harmony export */ });\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n\n\nfunction payloadId(entropy = 3) {\n    const date = Date.now() * Math.pow(10, entropy);\n    const extra = Math.floor(Math.random() * Math.pow(10, entropy));\n    return date + extra;\n}\nfunction getBigIntRpcId(entropy = 6) {\n    return BigInt(payloadId(entropy));\n}\nfunction formatJsonRpcRequest(method, params, id) {\n    return {\n        id: id || payloadId(),\n        jsonrpc: \"2.0\",\n        method,\n        params\n    };\n}\nfunction formatJsonRpcResult(id, result) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        result\n    };\n}\nfunction formatJsonRpcError(id, error, data) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        error: formatErrorMessage(error, data)\n    };\n}\nfunction formatErrorMessage(error, data) {\n    if (typeof error === \"undefined\") {\n        return (0,_error__WEBPACK_IMPORTED_MODULE_0__.getError)(_constants__WEBPACK_IMPORTED_MODULE_1__.INTERNAL_ERROR);\n    }\n    if (typeof error === \"string\") {\n        error = Object.assign(Object.assign({}, (0,_error__WEBPACK_IMPORTED_MODULE_0__.getError)(_constants__WEBPACK_IMPORTED_MODULE_1__.SERVER_ERROR)), {\n            message: error\n        });\n    }\n    if (typeof data !== \"undefined\") {\n        error.data = data;\n    }\n    if ((0,_error__WEBPACK_IMPORTED_MODULE_0__.isReservedErrorCode)(error.code)) {\n        error = (0,_error__WEBPACK_IMPORTED_MODULE_0__.getErrorByCode)(error.code);\n    }\n    return error;\n} //# sourceMappingURL=format.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9mb3JtYXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBd0U7QUFDYjtBQUNwRCxTQUFTSyxVQUFVQyxVQUFVLENBQUM7SUFDakMsTUFBTUMsT0FBT0MsS0FBS0MsR0FBRyxLQUFLQyxLQUFLQyxHQUFHLENBQUMsSUFBSUw7SUFDdkMsTUFBTU0sUUFBUUYsS0FBS0csS0FBSyxDQUFDSCxLQUFLSSxNQUFNLEtBQUtKLEtBQUtDLEdBQUcsQ0FBQyxJQUFJTDtJQUN0RCxPQUFPQyxPQUFPSztBQUNsQjtBQUNPLFNBQVNHLGVBQWVULFVBQVUsQ0FBQztJQUN0QyxPQUFPVSxPQUFPWCxVQUFVQztBQUM1QjtBQUNPLFNBQVNXLHFCQUFxQkMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLEVBQUU7SUFDbkQsT0FBTztRQUNIQSxJQUFJQSxNQUFNZjtRQUNWZ0IsU0FBUztRQUNUSDtRQUNBQztJQUNKO0FBQ0o7QUFDTyxTQUFTRyxvQkFBb0JGLEVBQUUsRUFBRUcsTUFBTTtJQUMxQyxPQUFPO1FBQ0hIO1FBQ0FDLFNBQVM7UUFDVEU7SUFDSjtBQUNKO0FBQ08sU0FBU0MsbUJBQW1CSixFQUFFLEVBQUVLLEtBQUssRUFBRUMsSUFBSTtJQUM5QyxPQUFPO1FBQ0hOO1FBQ0FDLFNBQVM7UUFDVEksT0FBT0UsbUJBQW1CRixPQUFPQztJQUNyQztBQUNKO0FBQ08sU0FBU0MsbUJBQW1CRixLQUFLLEVBQUVDLElBQUk7SUFDMUMsSUFBSSxPQUFPRCxVQUFVLGFBQWE7UUFDOUIsT0FBT3pCLGdEQUFRQSxDQUFDRyxzREFBY0E7SUFDbEM7SUFDQSxJQUFJLE9BQU9zQixVQUFVLFVBQVU7UUFDM0JBLFFBQVFHLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBRzdCLGdEQUFRQSxDQUFDSSxvREFBWUEsSUFBSTtZQUFFMEIsU0FBU0w7UUFBTTtJQUN0RjtJQUNBLElBQUksT0FBT0MsU0FBUyxhQUFhO1FBQzdCRCxNQUFNQyxJQUFJLEdBQUdBO0lBQ2pCO0lBQ0EsSUFBSXhCLDJEQUFtQkEsQ0FBQ3VCLE1BQU1NLElBQUksR0FBRztRQUNqQ04sUUFBUXhCLHNEQUFjQSxDQUFDd0IsTUFBTU0sSUFBSTtJQUNyQztJQUNBLE9BQU9OO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9mb3JtYXQuanM/MjUwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRFcnJvciwgZ2V0RXJyb3JCeUNvZGUsIGlzUmVzZXJ2ZWRFcnJvckNvZGUgfSBmcm9tIFwiLi9lcnJvclwiO1xuaW1wb3J0IHsgSU5URVJOQUxfRVJST1IsIFNFUlZFUl9FUlJPUiB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBheWxvYWRJZChlbnRyb3B5ID0gMykge1xuICAgIGNvbnN0IGRhdGUgPSBEYXRlLm5vdygpICogTWF0aC5wb3coMTAsIGVudHJvcHkpO1xuICAgIGNvbnN0IGV4dHJhID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMTAsIGVudHJvcHkpKTtcbiAgICByZXR1cm4gZGF0ZSArIGV4dHJhO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEJpZ0ludFJwY0lkKGVudHJvcHkgPSA2KSB7XG4gICAgcmV0dXJuIEJpZ0ludChwYXlsb2FkSWQoZW50cm9weSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEpzb25ScGNSZXF1ZXN0KG1ldGhvZCwgcGFyYW1zLCBpZCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBpZCB8fCBwYXlsb2FkSWQoKSxcbiAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBwYXJhbXMsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRKc29uUnBjUmVzdWx0KGlkLCByZXN1bHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZCxcbiAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgcmVzdWx0LFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0SnNvblJwY0Vycm9yKGlkLCBlcnJvciwgZGF0YSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkLFxuICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICBlcnJvcjogZm9ybWF0RXJyb3JNZXNzYWdlKGVycm9yLCBkYXRhKSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEVycm9yTWVzc2FnZShlcnJvciwgZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZXJyb3IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdldEVycm9yKElOVEVSTkFMX0VSUk9SKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBlcnJvciA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZ2V0RXJyb3IoU0VSVkVSX0VSUk9SKSksIHsgbWVzc2FnZTogZXJyb3IgfSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBlcnJvci5kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgaWYgKGlzUmVzZXJ2ZWRFcnJvckNvZGUoZXJyb3IuY29kZSkpIHtcbiAgICAgICAgZXJyb3IgPSBnZXRFcnJvckJ5Q29kZShlcnJvci5jb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRFcnJvciIsImdldEVycm9yQnlDb2RlIiwiaXNSZXNlcnZlZEVycm9yQ29kZSIsIklOVEVSTkFMX0VSUk9SIiwiU0VSVkVSX0VSUk9SIiwicGF5bG9hZElkIiwiZW50cm9weSIsImRhdGUiLCJEYXRlIiwibm93IiwiTWF0aCIsInBvdyIsImV4dHJhIiwiZmxvb3IiLCJyYW5kb20iLCJnZXRCaWdJbnRScGNJZCIsIkJpZ0ludCIsImZvcm1hdEpzb25ScGNSZXF1ZXN0IiwibWV0aG9kIiwicGFyYW1zIiwiaWQiLCJqc29ucnBjIiwiZm9ybWF0SnNvblJwY1Jlc3VsdCIsInJlc3VsdCIsImZvcm1hdEpzb25ScGNFcnJvciIsImVycm9yIiwiZGF0YSIsImZvcm1hdEVycm9yTWVzc2FnZSIsIk9iamVjdCIsImFzc2lnbiIsIm1lc3NhZ2UiLCJjb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR),\n/* harmony export */   IBaseJsonRpcProvider: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IBaseJsonRpcProvider),\n/* harmony export */   IEvents: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IEvents),\n/* harmony export */   IJsonRpcConnection: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IJsonRpcConnection),\n/* harmony export */   IJsonRpcProvider: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IJsonRpcProvider),\n/* harmony export */   INTERNAL_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INTERNAL_ERROR),\n/* harmony export */   INVALID_PARAMS: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_PARAMS),\n/* harmony export */   INVALID_REQUEST: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_REQUEST),\n/* harmony export */   METHOD_NOT_FOUND: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.METHOD_NOT_FOUND),\n/* harmony export */   PARSE_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.PARSE_ERROR),\n/* harmony export */   RESERVED_ERROR_CODES: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.RESERVED_ERROR_CODES),\n/* harmony export */   SERVER_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR),\n/* harmony export */   SERVER_ERROR_CODE_RANGE: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE),\n/* harmony export */   STANDARD_ERROR_MAP: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP),\n/* harmony export */   formatErrorMessage: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatErrorMessage),\n/* harmony export */   formatJsonRpcError: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError),\n/* harmony export */   formatJsonRpcRequest: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest),\n/* harmony export */   formatJsonRpcResult: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult),\n/* harmony export */   getBigIntRpcId: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId),\n/* harmony export */   getError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.getError),\n/* harmony export */   getErrorByCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.getErrorByCode),\n/* harmony export */   isHttpUrl: () => (/* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isHttpUrl),\n/* harmony export */   isJsonRpcError: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcError),\n/* harmony export */   isJsonRpcPayload: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcPayload),\n/* harmony export */   isJsonRpcRequest: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcRequest),\n/* harmony export */   isJsonRpcResponse: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcResponse),\n/* harmony export */   isJsonRpcResult: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcResult),\n/* harmony export */   isJsonRpcValidationInvalid: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcValidationInvalid),\n/* harmony export */   isLocalhostUrl: () => (/* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isLocalhostUrl),\n/* harmony export */   isReservedErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isReservedErrorCode),\n/* harmony export */   isServerErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isServerErrorCode),\n/* harmony export */   isValidDefaultRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidDefaultRoute),\n/* harmony export */   isValidErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isValidErrorCode),\n/* harmony export */   isValidLeadingWildcardRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidLeadingWildcardRoute),\n/* harmony export */   isValidRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidRoute),\n/* harmony export */   isValidTrailingWildcardRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidTrailingWildcardRoute),\n/* harmony export */   isValidWildcardRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidWildcardRoute),\n/* harmony export */   isWsUrl: () => (/* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isWsUrl),\n/* harmony export */   parseConnectionError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.parseConnectionError),\n/* harmony export */   payloadId: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.payloadId),\n/* harmony export */   validateJsonRpcError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.validateJsonRpcError)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\");\n/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./env */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _env__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"DEFAULT_ERROR\",\"INTERNAL_ERROR\",\"INVALID_PARAMS\",\"INVALID_REQUEST\",\"METHOD_NOT_FOUND\",\"PARSE_ERROR\",\"RESERVED_ERROR_CODES\",\"SERVER_ERROR\",\"SERVER_ERROR_CODE_RANGE\",\"STANDARD_ERROR_MAP\",\"getError\",\"getErrorByCode\",\"isReservedErrorCode\",\"isServerErrorCode\",\"isValidErrorCode\",\"parseConnectionError\",\"validateJsonRpcError\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _env__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _format__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./format */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js\");\n/* harmony import */ var _routing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./routing */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js\");\n/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./url */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js\");\n/* harmony import */ var _validators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validators */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ0o7QUFDRjtBQUNHO0FBQ0M7QUFDRjtBQUNGO0FBQ08sQ0FDN0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vaW5kZXguanM/NjgwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Vycm9yXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9lbnZcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Zvcm1hdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcm91dGluZ1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3VybFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdmFsaWRhdG9yc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidDefaultRoute: () => (/* binding */ isValidDefaultRoute),\n/* harmony export */   isValidLeadingWildcardRoute: () => (/* binding */ isValidLeadingWildcardRoute),\n/* harmony export */   isValidRoute: () => (/* binding */ isValidRoute),\n/* harmony export */   isValidTrailingWildcardRoute: () => (/* binding */ isValidTrailingWildcardRoute),\n/* harmony export */   isValidWildcardRoute: () => (/* binding */ isValidWildcardRoute)\n/* harmony export */ });\nfunction isValidRoute(route) {\n    if (route.includes(\"*\")) {\n        return isValidWildcardRoute(route);\n    }\n    if (/\\W/g.test(route)) {\n        return false;\n    }\n    return true;\n}\nfunction isValidDefaultRoute(route) {\n    return route === \"*\";\n}\nfunction isValidWildcardRoute(route) {\n    if (isValidDefaultRoute(route)) {\n        return true;\n    }\n    if (!route.includes(\"*\")) {\n        return false;\n    }\n    if (route.split(\"*\").length !== 2) {\n        return false;\n    }\n    if (route.split(\"*\").filter((x)=>x.trim() === \"\").length !== 1) {\n        return false;\n    }\n    return true;\n}\nfunction isValidLeadingWildcardRoute(route) {\n    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split(\"*\")[0].trim();\n}\nfunction isValidTrailingWildcardRoute(route) {\n    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split(\"*\")[1].trim();\n} //# sourceMappingURL=routing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9yb3V0aW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQU8sU0FBU0EsYUFBYUMsS0FBSztJQUM5QixJQUFJQSxNQUFNQyxRQUFRLENBQUMsTUFBTTtRQUNyQixPQUFPQyxxQkFBcUJGO0lBQ2hDO0lBQ0EsSUFBSSxNQUFNRyxJQUFJLENBQUNILFFBQVE7UUFDbkIsT0FBTztJQUNYO0lBQ0EsT0FBTztBQUNYO0FBQ08sU0FBU0ksb0JBQW9CSixLQUFLO0lBQ3JDLE9BQU9BLFVBQVU7QUFDckI7QUFDTyxTQUFTRSxxQkFBcUJGLEtBQUs7SUFDdEMsSUFBSUksb0JBQW9CSixRQUFRO1FBQzVCLE9BQU87SUFDWDtJQUNBLElBQUksQ0FBQ0EsTUFBTUMsUUFBUSxDQUFDLE1BQU07UUFDdEIsT0FBTztJQUNYO0lBQ0EsSUFBSUQsTUFBTUssS0FBSyxDQUFDLEtBQUtDLE1BQU0sS0FBSyxHQUFHO1FBQy9CLE9BQU87SUFDWDtJQUNBLElBQUlOLE1BQU1LLEtBQUssQ0FBQyxLQUFLRSxNQUFNLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLElBQUksT0FBTyxJQUFJSCxNQUFNLEtBQUssR0FBRztRQUM1RCxPQUFPO0lBQ1g7SUFDQSxPQUFPO0FBQ1g7QUFDTyxTQUFTSSw0QkFBNEJWLEtBQUs7SUFDN0MsT0FBTyxDQUFDSSxvQkFBb0JKLFVBQVVFLHFCQUFxQkYsVUFBVSxDQUFDQSxNQUFNSyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQ0ksSUFBSTtBQUNsRztBQUNPLFNBQVNFLDZCQUE2QlgsS0FBSztJQUM5QyxPQUFPLENBQUNJLG9CQUFvQkosVUFBVUUscUJBQXFCRixVQUFVLENBQUNBLE1BQU1LLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDSSxJQUFJO0FBQ2xHLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vcm91dGluZy5qcz85NjBkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkUm91dGUocm91dGUpIHtcbiAgICBpZiAocm91dGUuaW5jbHVkZXMoXCIqXCIpKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkV2lsZGNhcmRSb3V0ZShyb3V0ZSk7XG4gICAgfVxuICAgIGlmICgvXFxXL2cudGVzdChyb3V0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGVmYXVsdFJvdXRlKHJvdXRlKSB7XG4gICAgcmV0dXJuIHJvdXRlID09PSBcIipcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkV2lsZGNhcmRSb3V0ZShyb3V0ZSkge1xuICAgIGlmIChpc1ZhbGlkRGVmYXVsdFJvdXRlKHJvdXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFyb3V0ZS5pbmNsdWRlcyhcIipcIikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocm91dGUuc3BsaXQoXCIqXCIpLmxlbmd0aCAhPT0gMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyb3V0ZS5zcGxpdChcIipcIikuZmlsdGVyKHggPT4geC50cmltKCkgPT09IFwiXCIpLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRMZWFkaW5nV2lsZGNhcmRSb3V0ZShyb3V0ZSkge1xuICAgIHJldHVybiAhaXNWYWxpZERlZmF1bHRSb3V0ZShyb3V0ZSkgJiYgaXNWYWxpZFdpbGRjYXJkUm91dGUocm91dGUpICYmICFyb3V0ZS5zcGxpdChcIipcIilbMF0udHJpbSgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRUcmFpbGluZ1dpbGRjYXJkUm91dGUocm91dGUpIHtcbiAgICByZXR1cm4gIWlzVmFsaWREZWZhdWx0Um91dGUocm91dGUpICYmIGlzVmFsaWRXaWxkY2FyZFJvdXRlKHJvdXRlKSAmJiAhcm91dGUuc3BsaXQoXCIqXCIpWzFdLnRyaW0oKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRpbmcuanMubWFwIl0sIm5hbWVzIjpbImlzVmFsaWRSb3V0ZSIsInJvdXRlIiwiaW5jbHVkZXMiLCJpc1ZhbGlkV2lsZGNhcmRSb3V0ZSIsInRlc3QiLCJpc1ZhbGlkRGVmYXVsdFJvdXRlIiwic3BsaXQiLCJsZW5ndGgiLCJmaWx0ZXIiLCJ4IiwidHJpbSIsImlzVmFsaWRMZWFkaW5nV2lsZGNhcmRSb3V0ZSIsImlzVmFsaWRUcmFpbGluZ1dpbGRjYXJkUm91dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IBaseJsonRpcProvider: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IBaseJsonRpcProvider),\n/* harmony export */   IEvents: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IEvents),\n/* harmony export */   IJsonRpcConnection: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IJsonRpcConnection),\n/* harmony export */   IJsonRpcProvider: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IJsonRpcProvider)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/jsonrpc-types */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js\");\n //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2QyxDQUM3QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS90eXBlcy5qcz8yNjI0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHttpUrl: () => (/* binding */ isHttpUrl),\n/* harmony export */   isLocalhostUrl: () => (/* binding */ isLocalhostUrl),\n/* harmony export */   isWsUrl: () => (/* binding */ isWsUrl)\n/* harmony export */ });\nconst HTTP_REGEX = \"^https?:\";\nconst WS_REGEX = \"^wss?:\";\nfunction getUrlProtocol(url) {\n    const matches = url.match(new RegExp(/^\\w+:/, \"gi\"));\n    if (!matches || !matches.length) return;\n    return matches[0];\n}\nfunction matchRegexProtocol(url, regex) {\n    const protocol = getUrlProtocol(url);\n    if (typeof protocol === \"undefined\") return false;\n    return new RegExp(regex).test(protocol);\n}\nfunction isHttpUrl(url) {\n    return matchRegexProtocol(url, HTTP_REGEX);\n}\nfunction isWsUrl(url) {\n    return matchRegexProtocol(url, WS_REGEX);\n}\nfunction isLocalhostUrl(url) {\n    return new RegExp(\"wss?://localhost(:d{2,5})?\").test(url);\n} //# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS91cmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsYUFBYTtBQUNuQixNQUFNQyxXQUFXO0FBQ2pCLFNBQVNDLGVBQWVDLEdBQUc7SUFDdkIsTUFBTUMsVUFBVUQsSUFBSUUsS0FBSyxDQUFDLElBQUlDLE9BQU8sU0FBUztJQUM5QyxJQUFJLENBQUNGLFdBQVcsQ0FBQ0EsUUFBUUcsTUFBTSxFQUMzQjtJQUNKLE9BQU9ILE9BQU8sQ0FBQyxFQUFFO0FBQ3JCO0FBQ0EsU0FBU0ksbUJBQW1CTCxHQUFHLEVBQUVNLEtBQUs7SUFDbEMsTUFBTUMsV0FBV1IsZUFBZUM7SUFDaEMsSUFBSSxPQUFPTyxhQUFhLGFBQ3BCLE9BQU87SUFDWCxPQUFPLElBQUlKLE9BQU9HLE9BQU9FLElBQUksQ0FBQ0Q7QUFDbEM7QUFDTyxTQUFTRSxVQUFVVCxHQUFHO0lBQ3pCLE9BQU9LLG1CQUFtQkwsS0FBS0g7QUFDbkM7QUFDTyxTQUFTYSxRQUFRVixHQUFHO0lBQ3ZCLE9BQU9LLG1CQUFtQkwsS0FBS0Y7QUFDbkM7QUFDTyxTQUFTYSxlQUFlWCxHQUFHO0lBQzlCLE9BQU8sSUFBSUcsT0FBTyw4QkFBOEJLLElBQUksQ0FBQ1I7QUFDekQsRUFDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS91cmwuanM/ODMyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBIVFRQX1JFR0VYID0gXCJeaHR0cHM/OlwiO1xuY29uc3QgV1NfUkVHRVggPSBcIl53c3M/OlwiO1xuZnVuY3Rpb24gZ2V0VXJsUHJvdG9jb2wodXJsKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHVybC5tYXRjaChuZXcgUmVnRXhwKC9eXFx3KzovLCBcImdpXCIpKTtcbiAgICBpZiAoIW1hdGNoZXMgfHwgIW1hdGNoZXMubGVuZ3RoKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIG1hdGNoZXNbMF07XG59XG5mdW5jdGlvbiBtYXRjaFJlZ2V4UHJvdG9jb2wodXJsLCByZWdleCkge1xuICAgIGNvbnN0IHByb3RvY29sID0gZ2V0VXJsUHJvdG9jb2wodXJsKTtcbiAgICBpZiAodHlwZW9mIHByb3RvY29sID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgpLnRlc3QocHJvdG9jb2wpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSHR0cFVybCh1cmwpIHtcbiAgICByZXR1cm4gbWF0Y2hSZWdleFByb3RvY29sKHVybCwgSFRUUF9SRUdFWCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNXc1VybCh1cmwpIHtcbiAgICByZXR1cm4gbWF0Y2hSZWdleFByb3RvY29sKHVybCwgV1NfUkVHRVgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYWxob3N0VXJsKHVybCkge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwid3NzPzovL2xvY2FsaG9zdCg6ZHsyLDV9KT9cIikudGVzdCh1cmwpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJsLmpzLm1hcCJdLCJuYW1lcyI6WyJIVFRQX1JFR0VYIiwiV1NfUkVHRVgiLCJnZXRVcmxQcm90b2NvbCIsInVybCIsIm1hdGNoZXMiLCJtYXRjaCIsIlJlZ0V4cCIsImxlbmd0aCIsIm1hdGNoUmVnZXhQcm90b2NvbCIsInJlZ2V4IiwicHJvdG9jb2wiLCJ0ZXN0IiwiaXNIdHRwVXJsIiwiaXNXc1VybCIsImlzTG9jYWxob3N0VXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isJsonRpcError: () => (/* binding */ isJsonRpcError),\n/* harmony export */   isJsonRpcPayload: () => (/* binding */ isJsonRpcPayload),\n/* harmony export */   isJsonRpcRequest: () => (/* binding */ isJsonRpcRequest),\n/* harmony export */   isJsonRpcResponse: () => (/* binding */ isJsonRpcResponse),\n/* harmony export */   isJsonRpcResult: () => (/* binding */ isJsonRpcResult),\n/* harmony export */   isJsonRpcValidationInvalid: () => (/* binding */ isJsonRpcValidationInvalid)\n/* harmony export */ });\nfunction isJsonRpcPayload(payload) {\n    return typeof payload === \"object\" && \"id\" in payload && \"jsonrpc\" in payload && payload.jsonrpc === \"2.0\";\n}\nfunction isJsonRpcRequest(payload) {\n    return isJsonRpcPayload(payload) && \"method\" in payload;\n}\nfunction isJsonRpcResponse(payload) {\n    return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));\n}\nfunction isJsonRpcResult(payload) {\n    return \"result\" in payload;\n}\nfunction isJsonRpcError(payload) {\n    return \"error\" in payload;\n}\nfunction isJsonRpcValidationInvalid(validation) {\n    return \"error\" in validation && validation.valid === false;\n} //# sourceMappingURL=validators.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS92YWxpZGF0b3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFPLFNBQVNBLGlCQUFpQkMsT0FBTztJQUNwQyxPQUFRLE9BQU9BLFlBQVksWUFDdkIsUUFBUUEsV0FDUixhQUFhQSxXQUNiQSxRQUFRQyxPQUFPLEtBQUs7QUFDNUI7QUFDTyxTQUFTQyxpQkFBaUJGLE9BQU87SUFDcEMsT0FBT0QsaUJBQWlCQyxZQUFZLFlBQVlBO0FBQ3BEO0FBQ08sU0FBU0csa0JBQWtCSCxPQUFPO0lBQ3JDLE9BQU9ELGlCQUFpQkMsWUFBYUksQ0FBQUEsZ0JBQWdCSixZQUFZSyxlQUFlTCxRQUFPO0FBQzNGO0FBQ08sU0FBU0ksZ0JBQWdCSixPQUFPO0lBQ25DLE9BQU8sWUFBWUE7QUFDdkI7QUFDTyxTQUFTSyxlQUFlTCxPQUFPO0lBQ2xDLE9BQU8sV0FBV0E7QUFDdEI7QUFDTyxTQUFTTSwyQkFBMkJDLFVBQVU7SUFDakQsT0FBTyxXQUFXQSxjQUFjQSxXQUFXQyxLQUFLLEtBQUs7QUFDekQsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS92YWxpZGF0b3JzLmpzPzQ3NGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1BheWxvYWQocGF5bG9hZCkge1xuICAgIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgXCJpZFwiIGluIHBheWxvYWQgJiZcbiAgICAgICAgXCJqc29ucnBjXCIgaW4gcGF5bG9hZCAmJlxuICAgICAgICBwYXlsb2FkLmpzb25ycGMgPT09IFwiMi4wXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1JlcXVlc3QocGF5bG9hZCkge1xuICAgIHJldHVybiBpc0pzb25ScGNQYXlsb2FkKHBheWxvYWQpICYmIFwibWV0aG9kXCIgaW4gcGF5bG9hZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNSZXNwb25zZShwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGlzSnNvblJwY1BheWxvYWQocGF5bG9hZCkgJiYgKGlzSnNvblJwY1Jlc3VsdChwYXlsb2FkKSB8fCBpc0pzb25ScGNFcnJvcihwYXlsb2FkKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjUmVzdWx0KHBheWxvYWQpIHtcbiAgICByZXR1cm4gXCJyZXN1bHRcIiBpbiBwYXlsb2FkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY0Vycm9yKHBheWxvYWQpIHtcbiAgICByZXR1cm4gXCJlcnJvclwiIGluIHBheWxvYWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjVmFsaWRhdGlvbkludmFsaWQodmFsaWRhdGlvbikge1xuICAgIHJldHVybiBcImVycm9yXCIgaW4gdmFsaWRhdGlvbiAmJiB2YWxpZGF0aW9uLnZhbGlkID09PSBmYWxzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRvcnMuanMubWFwIl0sIm5hbWVzIjpbImlzSnNvblJwY1BheWxvYWQiLCJwYXlsb2FkIiwianNvbnJwYyIsImlzSnNvblJwY1JlcXVlc3QiLCJpc0pzb25ScGNSZXNwb25zZSIsImlzSnNvblJwY1Jlc3VsdCIsImlzSnNvblJwY0Vycm9yIiwiaXNKc29uUnBjVmFsaWRhdGlvbkludmFsaWQiLCJ2YWxpZGF0aW9uIiwidmFsaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WsConnection: () => (/* binding */ f),\n/* harmony export */   \"default\": () => (/* binding */ f)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\nconst v = ()=>typeof WebSocket < \"u\" ? WebSocket : typeof global < \"u\" && typeof global.WebSocket < \"u\" ? global.WebSocket :  false ? 0 : typeof self < \"u\" && typeof self.WebSocket < \"u\" ? self.WebSocket : __webpack_require__(/*! ws */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js\"), w = ()=>typeof WebSocket < \"u\" || typeof global < \"u\" && typeof global.WebSocket < \"u\" ||  false && 0 || typeof self < \"u\" && typeof self.WebSocket < \"u\", d = (r)=>r.split(\"?\")[0], h = 10, b = v();\nclass f {\n    constructor(e){\n        if (this.url = e, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.registering = !1, !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isWsUrl)(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n        this.url = e;\n    }\n    get connected() {\n        return typeof this.socket < \"u\";\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async open(e = this.url) {\n        await this.register(e);\n    }\n    async close() {\n        return new Promise((e, t)=>{\n            if (typeof this.socket > \"u\") {\n                t(new Error(\"Connection already closed\"));\n                return;\n            }\n            this.socket.onclose = (n)=>{\n                this.onClose(n), e();\n            }, this.socket.close();\n        });\n    }\n    async send(e) {\n        typeof this.socket > \"u\" && (this.socket = await this.register());\n        try {\n            this.socket.send((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)(e));\n        } catch (t) {\n            this.onError(e.id, t);\n        }\n    }\n    register(e = this.url) {\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isWsUrl)(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n        if (this.registering) {\n            const t = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= t || this.events.listenerCount(\"open\") >= t) && this.events.setMaxListeners(t + 1), new Promise((n, s)=>{\n                this.events.once(\"register_error\", (o)=>{\n                    this.resetMaxListeners(), s(o);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.socket > \"u\") return s(new Error(\"WebSocket connection is missing or invalid\"));\n                    n(this.socket);\n                });\n            });\n        }\n        return this.url = e, this.registering = !0, new Promise((t, n)=>{\n            const s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isReactNative)() ? void 0 : {\n                rejectUnauthorized: !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isLocalhostUrl)(e)\n            }, o = new b(e, [], s);\n            w() ? o.onerror = (i)=>{\n                const a = i;\n                n(this.emitError(a.error));\n            } : o.on(\"error\", (i)=>{\n                n(this.emitError(i));\n            }), o.onopen = ()=>{\n                this.onOpen(o), t(o);\n            };\n        });\n    }\n    onOpen(e) {\n        e.onmessage = (t)=>this.onPayload(t), e.onclose = (t)=>this.onClose(t), this.socket = e, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose(e) {\n        this.socket = void 0, this.registering = !1, this.events.emit(\"close\", e);\n    }\n    onPayload(e) {\n        if (typeof e.data > \"u\") return;\n        const t = typeof e.data == \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonParse)(e.data) : e.data;\n        this.events.emit(\"payload\", t);\n    }\n    onError(e, t) {\n        const n = this.parseError(t), s = n.message || n.toString(), o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcError)(e, s);\n        this.events.emit(\"payload\", o);\n    }\n    parseError(e, t = this.url) {\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.parseConnectionError)(e, d(t), \"WS\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > h && this.events.setMaxListeners(h);\n    }\n    emitError(e) {\n        const t = this.parseError(new Error(e?.message || `WebSocket connection failed for host: ${d(this.url)}`));\n        return this.events.emit(\"register_error\", t), t;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst WebSocket = __webpack_require__(/*! ./lib/websocket */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js\");\nWebSocket.createWebSocketStream = __webpack_require__(/*! ./lib/stream */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js\");\nWebSocket.Server = __webpack_require__(/*! ./lib/websocket-server */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js\");\nWebSocket.Receiver = __webpack_require__(/*! ./lib/receiver */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js\");\nWebSocket.Sender = __webpack_require__(/*! ./lib/sender */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js\");\nmodule.exports = WebSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDO0FBRTFCRCxVQUFVRSxxQkFBcUIsR0FBR0QsbUJBQU9BLENBQUM7QUFDMUNELFVBQVVHLE1BQU0sR0FBR0YsbUJBQU9BLENBQUM7QUFDM0JELFVBQVVJLFFBQVEsR0FBR0gsbUJBQU9BLENBQUM7QUFDN0JELFVBQVVLLE1BQU0sR0FBR0osbUJBQU9BLENBQUM7QUFFM0JLLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9pbmRleC5qcz9lNGJhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgV2ViU29ja2V0ID0gcmVxdWlyZSgnLi9saWIvd2Vic29ja2V0Jyk7XG5cbldlYlNvY2tldC5jcmVhdGVXZWJTb2NrZXRTdHJlYW0gPSByZXF1aXJlKCcuL2xpYi9zdHJlYW0nKTtcbldlYlNvY2tldC5TZXJ2ZXIgPSByZXF1aXJlKCcuL2xpYi93ZWJzb2NrZXQtc2VydmVyJyk7XG5XZWJTb2NrZXQuUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2xpYi9yZWNlaXZlcicpO1xuV2ViU29ja2V0LlNlbmRlciA9IHJlcXVpcmUoJy4vbGliL3NlbmRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlNvY2tldDtcbiJdLCJuYW1lcyI6WyJXZWJTb2NrZXQiLCJyZXF1aXJlIiwiY3JlYXRlV2ViU29ja2V0U3RyZWFtIiwiU2VydmVyIiwiUmVjZWl2ZXIiLCJTZW5kZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */ function concat(list, totalLength) {\n    if (list.length === 0) return EMPTY_BUFFER;\n    if (list.length === 1) return list[0];\n    const target = Buffer.allocUnsafe(totalLength);\n    let offset = 0;\n    for(let i = 0; i < list.length; i++){\n        const buf = list[i];\n        target.set(buf, offset);\n        offset += buf.length;\n    }\n    if (offset < totalLength) return target.slice(0, offset);\n    return target;\n}\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */ function _mask(source, mask, output, offset, length) {\n    for(let i = 0; i < length; i++){\n        output[offset + i] = source[i] ^ mask[i & 3];\n    }\n}\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */ function _unmask(buffer, mask) {\n    // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n    const length = buffer.length;\n    for(let i = 0; i < length; i++){\n        buffer[i] ^= mask[i & 3];\n    }\n}\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */ function toArrayBuffer(buf) {\n    if (buf.byteLength === buf.buffer.byteLength) {\n        return buf.buffer;\n    }\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */ function toBuffer(data) {\n    toBuffer.readOnly = true;\n    if (Buffer.isBuffer(data)) return data;\n    let buf;\n    if (data instanceof ArrayBuffer) {\n        buf = Buffer.from(data);\n    } else if (ArrayBuffer.isView(data)) {\n        buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n    } else {\n        buf = Buffer.from(data);\n        toBuffer.readOnly = false;\n    }\n    return buf;\n}\ntry {\n    const bufferUtil = __webpack_require__(/*! bufferutil */ \"(ssr)/./node_modules/bufferutil/index.js\");\n    const bu = bufferUtil.BufferUtil || bufferUtil;\n    module.exports = {\n        concat,\n        mask (source, mask, output, offset, length) {\n            if (length < 48) _mask(source, mask, output, offset, length);\n            else bu.mask(source, mask, output, offset, length);\n        },\n        toArrayBuffer,\n        toBuffer,\n        unmask (buffer, mask) {\n            if (buffer.length < 32) _unmask(buffer, mask);\n            else bu.unmask(buffer, mask);\n        }\n    };\n} catch (e) /* istanbul ignore next */ {\n    module.exports = {\n        concat,\n        mask: _mask,\n        toArrayBuffer,\n        toBuffer,\n        unmask: _unmask\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvYnVmZmVyLXV0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLFlBQVksRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUVqQzs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsT0FBT0MsSUFBSSxFQUFFQyxXQUFXO0lBQy9CLElBQUlELEtBQUtFLE1BQU0sS0FBSyxHQUFHLE9BQU9MO0lBQzlCLElBQUlHLEtBQUtFLE1BQU0sS0FBSyxHQUFHLE9BQU9GLElBQUksQ0FBQyxFQUFFO0lBRXJDLE1BQU1HLFNBQVNDLE9BQU9DLFdBQVcsQ0FBQ0o7SUFDbEMsSUFBSUssU0FBUztJQUViLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJUCxLQUFLRSxNQUFNLEVBQUVLLElBQUs7UUFDcEMsTUFBTUMsTUFBTVIsSUFBSSxDQUFDTyxFQUFFO1FBQ25CSixPQUFPTSxHQUFHLENBQUNELEtBQUtGO1FBQ2hCQSxVQUFVRSxJQUFJTixNQUFNO0lBQ3RCO0lBRUEsSUFBSUksU0FBU0wsYUFBYSxPQUFPRSxPQUFPTyxLQUFLLENBQUMsR0FBR0o7SUFFakQsT0FBT0g7QUFDVDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNRLE1BQU1DLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVSLE1BQU0sRUFBRUosTUFBTTtJQUNqRCxJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSUwsUUFBUUssSUFBSztRQUMvQk8sTUFBTSxDQUFDUixTQUFTQyxFQUFFLEdBQUdLLE1BQU0sQ0FBQ0wsRUFBRSxHQUFHTSxJQUFJLENBQUNOLElBQUksRUFBRTtJQUM5QztBQUNGO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU1EsUUFBUUMsTUFBTSxFQUFFSCxJQUFJO0lBQzNCLHlFQUF5RTtJQUN6RSxNQUFNWCxTQUFTYyxPQUFPZCxNQUFNO0lBQzVCLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJTCxRQUFRSyxJQUFLO1FBQy9CUyxNQUFNLENBQUNULEVBQUUsSUFBSU0sSUFBSSxDQUFDTixJQUFJLEVBQUU7SUFDMUI7QUFDRjtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNVLGNBQWNULEdBQUc7SUFDeEIsSUFBSUEsSUFBSVUsVUFBVSxLQUFLVixJQUFJUSxNQUFNLENBQUNFLFVBQVUsRUFBRTtRQUM1QyxPQUFPVixJQUFJUSxNQUFNO0lBQ25CO0lBRUEsT0FBT1IsSUFBSVEsTUFBTSxDQUFDTixLQUFLLENBQUNGLElBQUlXLFVBQVUsRUFBRVgsSUFBSVcsVUFBVSxHQUFHWCxJQUFJVSxVQUFVO0FBQ3pFO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNFLFNBQVNDLElBQUk7SUFDcEJELFNBQVNFLFFBQVEsR0FBRztJQUVwQixJQUFJbEIsT0FBT21CLFFBQVEsQ0FBQ0YsT0FBTyxPQUFPQTtJQUVsQyxJQUFJYjtJQUVKLElBQUlhLGdCQUFnQkcsYUFBYTtRQUMvQmhCLE1BQU1KLE9BQU9xQixJQUFJLENBQUNKO0lBQ3BCLE9BQU8sSUFBSUcsWUFBWUUsTUFBTSxDQUFDTCxPQUFPO1FBQ25DYixNQUFNSixPQUFPcUIsSUFBSSxDQUFDSixLQUFLTCxNQUFNLEVBQUVLLEtBQUtGLFVBQVUsRUFBRUUsS0FBS0gsVUFBVTtJQUNqRSxPQUFPO1FBQ0xWLE1BQU1KLE9BQU9xQixJQUFJLENBQUNKO1FBQ2xCRCxTQUFTRSxRQUFRLEdBQUc7SUFDdEI7SUFFQSxPQUFPZDtBQUNUO0FBRUEsSUFBSTtJQUNGLE1BQU1tQixhQUFhN0IsbUJBQU9BLENBQUM7SUFDM0IsTUFBTThCLEtBQUtELFdBQVdFLFVBQVUsSUFBSUY7SUFFcENHLE9BQU9DLE9BQU8sR0FBRztRQUNmaEM7UUFDQWMsTUFBS0QsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRVIsTUFBTSxFQUFFSixNQUFNO1lBQ3ZDLElBQUlBLFNBQVMsSUFBSVMsTUFBTUMsUUFBUUMsTUFBTUMsUUFBUVIsUUFBUUo7aUJBQ2hEMEIsR0FBR2YsSUFBSSxDQUFDRCxRQUFRQyxNQUFNQyxRQUFRUixRQUFRSjtRQUM3QztRQUNBZTtRQUNBRztRQUNBWSxRQUFPaEIsTUFBTSxFQUFFSCxJQUFJO1lBQ2pCLElBQUlHLE9BQU9kLE1BQU0sR0FBRyxJQUFJYSxRQUFRQyxRQUFRSDtpQkFDbkNlLEdBQUdJLE1BQU0sQ0FBQ2hCLFFBQVFIO1FBQ3pCO0lBQ0Y7QUFDRixFQUFFLE9BQU9vQixHQUFHLHdCQUF3QixHQUFHO0lBQ3JDSCxPQUFPQyxPQUFPLEdBQUc7UUFDZmhDO1FBQ0FjLE1BQU1GO1FBQ05NO1FBQ0FHO1FBQ0FZLFFBQVFqQjtJQUNWO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvYnVmZmVyLXV0aWwuanM/NTg4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgRU1QVFlfQlVGRkVSIH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG4vKipcbiAqIE1lcmdlcyBhbiBhcnJheSBvZiBidWZmZXJzIGludG8gYSBuZXcgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyW119IGxpc3QgVGhlIGFycmF5IG9mIGJ1ZmZlcnMgdG8gY29uY2F0XG4gKiBAcGFyYW0ge051bWJlcn0gdG90YWxMZW5ndGggVGhlIHRvdGFsIGxlbmd0aCBvZiBidWZmZXJzIGluIHRoZSBsaXN0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9IFRoZSByZXN1bHRpbmcgYnVmZmVyXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdChsaXN0LCB0b3RhbExlbmd0aCkge1xuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHJldHVybiBFTVBUWV9CVUZGRVI7XG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkgcmV0dXJuIGxpc3RbMF07XG5cbiAgY29uc3QgdGFyZ2V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKHRvdGFsTGVuZ3RoKTtcbiAgbGV0IG9mZnNldCA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYnVmID0gbGlzdFtpXTtcbiAgICB0YXJnZXQuc2V0KGJ1Ziwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYnVmLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChvZmZzZXQgPCB0b3RhbExlbmd0aCkgcmV0dXJuIHRhcmdldC5zbGljZSgwLCBvZmZzZXQpO1xuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogTWFza3MgYSBidWZmZXIgdXNpbmcgdGhlIGdpdmVuIG1hc2suXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IHNvdXJjZSBUaGUgYnVmZmVyIHRvIG1hc2tcbiAqIEBwYXJhbSB7QnVmZmVyfSBtYXNrIFRoZSBtYXNrIHRvIHVzZVxuICogQHBhcmFtIHtCdWZmZXJ9IG91dHB1dCBUaGUgYnVmZmVyIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCBhdCB3aGljaCB0byBzdGFydCB3cml0aW5nXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIFRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gbWFzay5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gX21hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRbb2Zmc2V0ICsgaV0gPSBzb3VyY2VbaV0gXiBtYXNrW2kgJiAzXTtcbiAgfVxufVxuXG4vKipcbiAqIFVubWFza3MgYSBidWZmZXIgdXNpbmcgdGhlIGdpdmVuIG1hc2suXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIHVubWFza1xuICogQHBhcmFtIHtCdWZmZXJ9IG1hc2sgVGhlIG1hc2sgdG8gdXNlXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIF91bm1hc2soYnVmZmVyLCBtYXNrKSB7XG4gIC8vIFJlcXVpcmVkIHVudGlsIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvOTAwNiBpcyByZXNvbHZlZC5cbiAgY29uc3QgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGJ1ZmZlcltpXSBePSBtYXNrW2kgJiAzXTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgYnVmZmVyIHRvIGFuIGBBcnJheUJ1ZmZlcmAuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZiBUaGUgYnVmZmVyIHRvIGNvbnZlcnRcbiAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBDb252ZXJ0ZWQgYnVmZmVyXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoYnVmKSB7XG4gIGlmIChidWYuYnl0ZUxlbmd0aCA9PT0gYnVmLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJ1Zi5idWZmZXI7XG4gIH1cblxuICByZXR1cm4gYnVmLmJ1ZmZlci5zbGljZShidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVPZmZzZXQgKyBidWYuYnl0ZUxlbmd0aCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYGRhdGFgIHRvIGEgYEJ1ZmZlcmAuXG4gKlxuICogQHBhcmFtIHsqfSBkYXRhIFRoZSBkYXRhIHRvIGNvbnZlcnRcbiAqIEByZXR1cm4ge0J1ZmZlcn0gVGhlIGJ1ZmZlclxuICogQHRocm93cyB7VHlwZUVycm9yfVxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB0b0J1ZmZlcihkYXRhKSB7XG4gIHRvQnVmZmVyLnJlYWRPbmx5ID0gdHJ1ZTtcblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSByZXR1cm4gZGF0YTtcblxuICBsZXQgYnVmO1xuXG4gIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICBidWYgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICBidWYgPSBCdWZmZXIuZnJvbShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xuICAgIHRvQnVmZmVyLnJlYWRPbmx5ID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gYnVmO1xufVxuXG50cnkge1xuICBjb25zdCBidWZmZXJVdGlsID0gcmVxdWlyZSgnYnVmZmVydXRpbCcpO1xuICBjb25zdCBidSA9IGJ1ZmZlclV0aWwuQnVmZmVyVXRpbCB8fCBidWZmZXJVdGlsO1xuXG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNvbmNhdCxcbiAgICBtYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgaWYgKGxlbmd0aCA8IDQ4KSBfbWFzayhzb3VyY2UsIG1hc2ssIG91dHB1dCwgb2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgZWxzZSBidS5tYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgfSxcbiAgICB0b0FycmF5QnVmZmVyLFxuICAgIHRvQnVmZmVyLFxuICAgIHVubWFzayhidWZmZXIsIG1hc2spIHtcbiAgICAgIGlmIChidWZmZXIubGVuZ3RoIDwgMzIpIF91bm1hc2soYnVmZmVyLCBtYXNrKTtcbiAgICAgIGVsc2UgYnUudW5tYXNrKGJ1ZmZlciwgbWFzayk7XG4gICAgfVxuICB9O1xufSBjYXRjaCAoZSkgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8ge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjb25jYXQsXG4gICAgbWFzazogX21hc2ssXG4gICAgdG9BcnJheUJ1ZmZlcixcbiAgICB0b0J1ZmZlcixcbiAgICB1bm1hc2s6IF91bm1hc2tcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJFTVBUWV9CVUZGRVIiLCJyZXF1aXJlIiwiY29uY2F0IiwibGlzdCIsInRvdGFsTGVuZ3RoIiwibGVuZ3RoIiwidGFyZ2V0IiwiQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJvZmZzZXQiLCJpIiwiYnVmIiwic2V0Iiwic2xpY2UiLCJfbWFzayIsInNvdXJjZSIsIm1hc2siLCJvdXRwdXQiLCJfdW5tYXNrIiwiYnVmZmVyIiwidG9BcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJieXRlT2Zmc2V0IiwidG9CdWZmZXIiLCJkYXRhIiwicmVhZE9ubHkiLCJpc0J1ZmZlciIsIkFycmF5QnVmZmVyIiwiZnJvbSIsImlzVmlldyIsImJ1ZmZlclV0aWwiLCJidSIsIkJ1ZmZlclV0aWwiLCJtb2R1bGUiLCJleHBvcnRzIiwidW5tYXNrIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js ***!
  \********************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    BINARY_TYPES: [\n        \"nodebuffer\",\n        \"arraybuffer\",\n        \"fragments\"\n    ],\n    GUID: \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\",\n    kStatusCode: Symbol(\"status-code\"),\n    kWebSocket: Symbol(\"websocket\"),\n    EMPTY_BUFFER: Buffer.alloc(0),\n    NOOP: ()=>{}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxjQUFjO1FBQUM7UUFBYztRQUFlO0tBQVk7SUFDeERDLE1BQU07SUFDTkMsYUFBYUMsT0FBTztJQUNwQkMsWUFBWUQsT0FBTztJQUNuQkUsY0FBY0MsT0FBT0MsS0FBSyxDQUFDO0lBQzNCQyxNQUFNLEtBQU87QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXdzLWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL3dzL2xpYi9jb25zdGFudHMuanM/YWFkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCSU5BUllfVFlQRVM6IFsnbm9kZWJ1ZmZlcicsICdhcnJheWJ1ZmZlcicsICdmcmFnbWVudHMnXSxcbiAgR1VJRDogJzI1OEVBRkE1LUU5MTQtNDdEQS05NUNBLUM1QUIwREM4NUIxMScsXG4gIGtTdGF0dXNDb2RlOiBTeW1ib2woJ3N0YXR1cy1jb2RlJyksXG4gIGtXZWJTb2NrZXQ6IFN5bWJvbCgnd2Vic29ja2V0JyksXG4gIEVNUFRZX0JVRkZFUjogQnVmZmVyLmFsbG9jKDApLFxuICBOT09QOiAoKSA9PiB7fVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQklOQVJZX1RZUEVTIiwiR1VJRCIsImtTdGF0dXNDb2RlIiwiU3ltYm9sIiwia1dlYlNvY2tldCIsIkVNUFRZX0JVRkZFUiIsIkJ1ZmZlciIsImFsbG9jIiwiTk9PUCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js ***!
  \***********************************************************************************************/
/***/ ((module) => {

eval("\n/**\n * Class representing an event.\n *\n * @private\n */ class Event {\n    /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(type, target){\n        this.target = target;\n        this.type = type;\n    }\n}\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */ class MessageEvent extends Event {\n    /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(data, target){\n        super(\"message\", target);\n        this.data = data;\n    }\n}\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */ class CloseEvent extends Event {\n    /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being\n   *     closed\n   * @param {String} reason A human-readable string explaining why the\n   *     connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(code, reason, target){\n        super(\"close\", target);\n        this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n        this.reason = reason;\n        this.code = code;\n    }\n}\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */ class OpenEvent extends Event {\n    /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(target){\n        super(\"open\", target);\n    }\n}\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */ class ErrorEvent extends Event {\n    /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(error, target){\n        super(\"error\", target);\n        this.message = error.message;\n        this.error = error;\n    }\n}\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */ const EventTarget = {\n    /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean`` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */ addEventListener (type, listener, options) {\n        if (typeof listener !== \"function\") return;\n        function onMessage(data) {\n            listener.call(this, new MessageEvent(data, this));\n        }\n        function onClose(code, message) {\n            listener.call(this, new CloseEvent(code, message, this));\n        }\n        function onError(error) {\n            listener.call(this, new ErrorEvent(error, this));\n        }\n        function onOpen() {\n            listener.call(this, new OpenEvent(this));\n        }\n        const method = options && options.once ? \"once\" : \"on\";\n        if (type === \"message\") {\n            onMessage._listener = listener;\n            this[method](type, onMessage);\n        } else if (type === \"close\") {\n            onClose._listener = listener;\n            this[method](type, onClose);\n        } else if (type === \"error\") {\n            onError._listener = listener;\n            this[method](type, onError);\n        } else if (type === \"open\") {\n            onOpen._listener = listener;\n            this[method](type, onOpen);\n        } else {\n            this[method](type, listener);\n        }\n    },\n    /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */ removeEventListener (type, listener) {\n        const listeners = this.listeners(type);\n        for(let i = 0; i < listeners.length; i++){\n            if (listeners[i] === listener || listeners[i]._listener === listener) {\n                this.removeListener(type, listeners[i]);\n            }\n        }\n    }\n};\nmodule.exports = EventTarget;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js ***!
  \********************************************************************************************/
/***/ ((module) => {

eval("\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    1,\n    1,\n    0,\n    1,\n    1,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    1,\n    0,\n    1,\n    0 // 112 - 127\n];\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */ function push(dest, name, elem) {\n    if (dest[name] === undefined) dest[name] = [\n        elem\n    ];\n    else dest[name].push(elem);\n}\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */ function parse(header) {\n    const offers = Object.create(null);\n    if (header === undefined || header === \"\") return offers;\n    let params = Object.create(null);\n    let mustUnescape = false;\n    let isEscaping = false;\n    let inQuotes = false;\n    let extensionName;\n    let paramName;\n    let start = -1;\n    let end = -1;\n    let i = 0;\n    for(; i < header.length; i++){\n        const code = header.charCodeAt(i);\n        if (extensionName === undefined) {\n            if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (code === 0x20 /* ' ' */  || code === 0x09 /* '\\t' */ ) {\n                if (end === -1 && start !== -1) end = i;\n            } else if (code === 0x3b /* ';' */  || code === 0x2c /* ',' */ ) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                const name = header.slice(start, end);\n                if (code === 0x2c) {\n                    push(offers, name, params);\n                    params = Object.create(null);\n                } else {\n                    extensionName = name;\n                }\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        } else if (paramName === undefined) {\n            if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (code === 0x20 || code === 0x09) {\n                if (end === -1 && start !== -1) end = i;\n            } else if (code === 0x3b || code === 0x2c) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                push(params, header.slice(start, end), true);\n                if (code === 0x2c) {\n                    push(offers, extensionName, params);\n                    params = Object.create(null);\n                    extensionName = undefined;\n                }\n                start = end = -1;\n            } else if (code === 0x3d /* '=' */  && start !== -1 && end === -1) {\n                paramName = header.slice(start, i);\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        } else {\n            //\n            // The value of a quoted-string after unescaping must conform to the\n            // token ABNF, so only token characters are valid.\n            // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n            //\n            if (isEscaping) {\n                if (tokenChars[code] !== 1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (start === -1) start = i;\n                else if (!mustUnescape) mustUnescape = true;\n                isEscaping = false;\n            } else if (inQuotes) {\n                if (tokenChars[code] === 1) {\n                    if (start === -1) start = i;\n                } else if (code === 0x22 /* '\"' */  && start !== -1) {\n                    inQuotes = false;\n                    end = i;\n                } else if (code === 0x5c /* '\\' */ ) {\n                    isEscaping = true;\n                } else {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n            } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n                inQuotes = true;\n            } else if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n                if (end === -1) end = i;\n            } else if (code === 0x3b || code === 0x2c) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                let value = header.slice(start, end);\n                if (mustUnescape) {\n                    value = value.replace(/\\\\/g, \"\");\n                    mustUnescape = false;\n                }\n                push(params, paramName, value);\n                if (code === 0x2c) {\n                    push(offers, extensionName, params);\n                    params = Object.create(null);\n                    extensionName = undefined;\n                }\n                paramName = undefined;\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        }\n    }\n    if (start === -1 || inQuotes) {\n        throw new SyntaxError(\"Unexpected end of input\");\n    }\n    if (end === -1) end = i;\n    const token = header.slice(start, end);\n    if (extensionName === undefined) {\n        push(offers, token, params);\n    } else {\n        if (paramName === undefined) {\n            push(params, token, true);\n        } else if (mustUnescape) {\n            push(params, paramName, token.replace(/\\\\/g, \"\"));\n        } else {\n            push(params, paramName, token);\n        }\n        push(offers, extensionName, params);\n    }\n    return offers;\n}\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */ function format(extensions) {\n    return Object.keys(extensions).map((extension)=>{\n        let configurations = extensions[extension];\n        if (!Array.isArray(configurations)) configurations = [\n            configurations\n        ];\n        return configurations.map((params)=>{\n            return [\n                extension\n            ].concat(Object.keys(params).map((k)=>{\n                let values = params[k];\n                if (!Array.isArray(values)) values = [\n                    values\n                ];\n                return values.map((v)=>v === true ? k : `${k}=${v}`).join(\"; \");\n            })).join(\"; \");\n        }).join(\", \");\n    }).join(\", \");\n}\nmodule.exports = {\n    format,\n    parse\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js ***!
  \******************************************************************************************/
/***/ ((module) => {

eval("\nconst kDone = Symbol(\"kDone\");\nconst kRun = Symbol(\"kRun\");\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */ class Limiter {\n    /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */ constructor(concurrency){\n        this[kDone] = ()=>{\n            this.pending--;\n            this[kRun]();\n        };\n        this.concurrency = concurrency || Infinity;\n        this.jobs = [];\n        this.pending = 0;\n    }\n    /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */ add(job) {\n        this.jobs.push(job);\n        this[kRun]();\n    }\n    /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */ [kRun]() {\n        if (this.pending === this.concurrency) return;\n        if (this.jobs.length) {\n            const job = this.jobs.shift();\n            this.pending++;\n            job(this[kDone]);\n        }\n    }\n}\nmodule.exports = Limiter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvbGltaXRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFFBQVFDLE9BQU87QUFDckIsTUFBTUMsT0FBT0QsT0FBTztBQUVwQjs7O0NBR0MsR0FDRCxNQUFNRTtJQUNKOzs7OztHQUtDLEdBQ0RDLFlBQVlDLFdBQVcsQ0FBRTtRQUN2QixJQUFJLENBQUNMLE1BQU0sR0FBRztZQUNaLElBQUksQ0FBQ00sT0FBTztZQUNaLElBQUksQ0FBQ0osS0FBSztRQUNaO1FBQ0EsSUFBSSxDQUFDRyxXQUFXLEdBQUdBLGVBQWVFO1FBQ2xDLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUNGLE9BQU8sR0FBRztJQUNqQjtJQUVBOzs7OztHQUtDLEdBQ0RHLElBQUlDLEdBQUcsRUFBRTtRQUNQLElBQUksQ0FBQ0YsSUFBSSxDQUFDRyxJQUFJLENBQUNEO1FBQ2YsSUFBSSxDQUFDUixLQUFLO0lBQ1o7SUFFQTs7OztHQUlDLEdBQ0QsQ0FBQ0EsS0FBSyxHQUFHO1FBQ1AsSUFBSSxJQUFJLENBQUNJLE9BQU8sS0FBSyxJQUFJLENBQUNELFdBQVcsRUFBRTtRQUV2QyxJQUFJLElBQUksQ0FBQ0csSUFBSSxDQUFDSSxNQUFNLEVBQUU7WUFDcEIsTUFBTUYsTUFBTSxJQUFJLENBQUNGLElBQUksQ0FBQ0ssS0FBSztZQUUzQixJQUFJLENBQUNQLE9BQU87WUFDWkksSUFBSSxJQUFJLENBQUNWLE1BQU07UUFDakI7SUFDRjtBQUNGO0FBRUFjLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvbGltaXRlci5qcz80M2FhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qga0RvbmUgPSBTeW1ib2woJ2tEb25lJyk7XG5jb25zdCBrUnVuID0gU3ltYm9sKCdrUnVuJyk7XG5cbi8qKlxuICogQSB2ZXJ5IHNpbXBsZSBqb2IgcXVldWUgd2l0aCBhZGp1c3RhYmxlIGNvbmN1cnJlbmN5LiBBZGFwdGVkIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9TVFJNTC9hc3luYy1saW1pdGVyXG4gKi9cbmNsYXNzIExpbWl0ZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBgTGltaXRlcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uY3VycmVuY3k9SW5maW5pdHldIFRoZSBtYXhpbXVtIG51bWJlciBvZiBqb2JzIGFsbG93ZWRcbiAgICogICAgIHRvIHJ1biBjb25jdXJyZW50bHlcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmN1cnJlbmN5KSB7XG4gICAgdGhpc1trRG9uZV0gPSAoKSA9PiB7XG4gICAgICB0aGlzLnBlbmRpbmctLTtcbiAgICAgIHRoaXNba1J1bl0oKTtcbiAgICB9O1xuICAgIHRoaXMuY29uY3VycmVuY3kgPSBjb25jdXJyZW5jeSB8fCBJbmZpbml0eTtcbiAgICB0aGlzLmpvYnMgPSBbXTtcbiAgICB0aGlzLnBlbmRpbmcgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBqb2IgdG8gdGhlIHF1ZXVlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBqb2IgVGhlIGpvYiB0byBydW5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYWRkKGpvYikge1xuICAgIHRoaXMuam9icy5wdXNoKGpvYik7XG4gICAgdGhpc1trUnVuXSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBqb2IgZnJvbSB0aGUgcXVldWUgYW5kIHJ1bnMgaXQgaWYgcG9zc2libGUuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBba1J1bl0oKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZyA9PT0gdGhpcy5jb25jdXJyZW5jeSkgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMuam9icy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGpvYiA9IHRoaXMuam9icy5zaGlmdCgpO1xuXG4gICAgICB0aGlzLnBlbmRpbmcrKztcbiAgICAgIGpvYih0aGlzW2tEb25lXSk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGltaXRlcjtcbiJdLCJuYW1lcyI6WyJrRG9uZSIsIlN5bWJvbCIsImtSdW4iLCJMaW1pdGVyIiwiY29uc3RydWN0b3IiLCJjb25jdXJyZW5jeSIsInBlbmRpbmciLCJJbmZpbml0eSIsImpvYnMiLCJhZGQiLCJqb2IiLCJwdXNoIiwibGVuZ3RoIiwic2hpZnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst Limiter = __webpack_require__(/*! ./limiter */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js\");\nconst { kStatusCode, NOOP } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst TRAILER = Buffer.from([\n    0x00,\n    0x00,\n    0xff,\n    0xff\n]);\nconst kPerMessageDeflate = Symbol(\"permessage-deflate\");\nconst kTotalLength = Symbol(\"total-length\");\nconst kCallback = Symbol(\"callback\");\nconst kBuffers = Symbol(\"buffers\");\nconst kError = Symbol(\"error\");\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n/**\n * permessage-deflate implementation.\n */ class PerMessageDeflate {\n    /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */ constructor(options, isServer, maxPayload){\n        this._maxPayload = maxPayload | 0;\n        this._options = options || {};\n        this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;\n        this._isServer = !!isServer;\n        this._deflate = null;\n        this._inflate = null;\n        this.params = null;\n        if (!zlibLimiter) {\n            const concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;\n            zlibLimiter = new Limiter(concurrency);\n        }\n    }\n    /**\n   * @type {String}\n   */ static get extensionName() {\n        return \"permessage-deflate\";\n    }\n    /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */ offer() {\n        const params = {};\n        if (this._options.serverNoContextTakeover) {\n            params.server_no_context_takeover = true;\n        }\n        if (this._options.clientNoContextTakeover) {\n            params.client_no_context_takeover = true;\n        }\n        if (this._options.serverMaxWindowBits) {\n            params.server_max_window_bits = this._options.serverMaxWindowBits;\n        }\n        if (this._options.clientMaxWindowBits) {\n            params.client_max_window_bits = this._options.clientMaxWindowBits;\n        } else if (this._options.clientMaxWindowBits == null) {\n            params.client_max_window_bits = true;\n        }\n        return params;\n    }\n    /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */ accept(configurations) {\n        configurations = this.normalizeParams(configurations);\n        this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);\n        return this.params;\n    }\n    /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */ cleanup() {\n        if (this._inflate) {\n            this._inflate.close();\n            this._inflate = null;\n        }\n        if (this._deflate) {\n            const callback = this._deflate[kCallback];\n            this._deflate.close();\n            this._deflate = null;\n            if (callback) {\n                callback(new Error(\"The deflate stream was closed while data was being processed\"));\n            }\n        }\n    }\n    /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */ acceptAsServer(offers) {\n        const opts = this._options;\n        const accepted = offers.find((params)=>{\n            if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === \"number\" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === \"number\" && !params.client_max_window_bits) {\n                return false;\n            }\n            return true;\n        });\n        if (!accepted) {\n            throw new Error(\"None of the extension offers can be accepted\");\n        }\n        if (opts.serverNoContextTakeover) {\n            accepted.server_no_context_takeover = true;\n        }\n        if (opts.clientNoContextTakeover) {\n            accepted.client_no_context_takeover = true;\n        }\n        if (typeof opts.serverMaxWindowBits === \"number\") {\n            accepted.server_max_window_bits = opts.serverMaxWindowBits;\n        }\n        if (typeof opts.clientMaxWindowBits === \"number\") {\n            accepted.client_max_window_bits = opts.clientMaxWindowBits;\n        } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {\n            delete accepted.client_max_window_bits;\n        }\n        return accepted;\n    }\n    /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */ acceptAsClient(response) {\n        const params = response[0];\n        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {\n            throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n        }\n        if (!params.client_max_window_bits) {\n            if (typeof this._options.clientMaxWindowBits === \"number\") {\n                params.client_max_window_bits = this._options.clientMaxWindowBits;\n            }\n        } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === \"number\" && params.client_max_window_bits > this._options.clientMaxWindowBits) {\n            throw new Error('Unexpected or invalid parameter \"client_max_window_bits\"');\n        }\n        return params;\n    }\n    /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */ normalizeParams(configurations) {\n        configurations.forEach((params)=>{\n            Object.keys(params).forEach((key)=>{\n                let value = params[key];\n                if (value.length > 1) {\n                    throw new Error(`Parameter \"${key}\" must have only a single value`);\n                }\n                value = value[0];\n                if (key === \"client_max_window_bits\") {\n                    if (value !== true) {\n                        const num = +value;\n                        if (!Number.isInteger(num) || num < 8 || num > 15) {\n                            throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                        }\n                        value = num;\n                    } else if (!this._isServer) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                } else if (key === \"server_max_window_bits\") {\n                    const num = +value;\n                    if (!Number.isInteger(num) || num < 8 || num > 15) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                    value = num;\n                } else if (key === \"client_no_context_takeover\" || key === \"server_no_context_takeover\") {\n                    if (value !== true) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                } else {\n                    throw new Error(`Unknown parameter \"${key}\"`);\n                }\n                params[key] = value;\n            });\n        });\n        return configurations;\n    }\n    /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */ decompress(data, fin, callback) {\n        zlibLimiter.add((done)=>{\n            this._decompress(data, fin, (err, result)=>{\n                done();\n                callback(err, result);\n            });\n        });\n    }\n    /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */ compress(data, fin, callback) {\n        zlibLimiter.add((done)=>{\n            this._compress(data, fin, (err, result)=>{\n                done();\n                callback(err, result);\n            });\n        });\n    }\n    /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */ _decompress(data, fin, callback) {\n        const endpoint = this._isServer ? \"client\" : \"server\";\n        if (!this._inflate) {\n            const key = `${endpoint}_max_window_bits`;\n            const windowBits = typeof this.params[key] !== \"number\" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n            this._inflate = zlib.createInflateRaw({\n                ...this._options.zlibInflateOptions,\n                windowBits\n            });\n            this._inflate[kPerMessageDeflate] = this;\n            this._inflate[kTotalLength] = 0;\n            this._inflate[kBuffers] = [];\n            this._inflate.on(\"error\", inflateOnError);\n            this._inflate.on(\"data\", inflateOnData);\n        }\n        this._inflate[kCallback] = callback;\n        this._inflate.write(data);\n        if (fin) this._inflate.write(TRAILER);\n        this._inflate.flush(()=>{\n            const err = this._inflate[kError];\n            if (err) {\n                this._inflate.close();\n                this._inflate = null;\n                callback(err);\n                return;\n            }\n            const data = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);\n            if (this._inflate._readableState.endEmitted) {\n                this._inflate.close();\n                this._inflate = null;\n            } else {\n                this._inflate[kTotalLength] = 0;\n                this._inflate[kBuffers] = [];\n                if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n                    this._inflate.reset();\n                }\n            }\n            callback(null, data);\n        });\n    }\n    /**\n   * Compress data.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */ _compress(data, fin, callback) {\n        const endpoint = this._isServer ? \"server\" : \"client\";\n        if (!this._deflate) {\n            const key = `${endpoint}_max_window_bits`;\n            const windowBits = typeof this.params[key] !== \"number\" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n            this._deflate = zlib.createDeflateRaw({\n                ...this._options.zlibDeflateOptions,\n                windowBits\n            });\n            this._deflate[kTotalLength] = 0;\n            this._deflate[kBuffers] = [];\n            //\n            // An `'error'` event is emitted, only on Node.js < 10.0.0, if the\n            // `zlib.DeflateRaw` instance is closed while data is being processed.\n            // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong\n            // time due to an abnormal WebSocket closure.\n            //\n            this._deflate.on(\"error\", NOOP);\n            this._deflate.on(\"data\", deflateOnData);\n        }\n        this._deflate[kCallback] = callback;\n        this._deflate.write(data);\n        this._deflate.flush(zlib.Z_SYNC_FLUSH, ()=>{\n            if (!this._deflate) {\n                //\n                // The deflate stream was closed while data was being processed.\n                //\n                return;\n            }\n            let data = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);\n            if (fin) data = data.slice(0, data.length - 4);\n            //\n            // Ensure that the callback will not be called again in\n            // `PerMessageDeflate#cleanup()`.\n            //\n            this._deflate[kCallback] = null;\n            this._deflate[kTotalLength] = 0;\n            this._deflate[kBuffers] = [];\n            if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n                this._deflate.reset();\n            }\n            callback(null, data);\n        });\n    }\n}\nmodule.exports = PerMessageDeflate;\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function deflateOnData(chunk) {\n    this[kBuffers].push(chunk);\n    this[kTotalLength] += chunk.length;\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function inflateOnData(chunk) {\n    this[kTotalLength] += chunk.length;\n    if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {\n        this[kBuffers].push(chunk);\n        return;\n    }\n    this[kError] = new RangeError(\"Max payload size exceeded\");\n    this[kError].code = \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\";\n    this[kError][kStatusCode] = 1009;\n    this.removeListener(\"data\", inflateOnData);\n    this.reset();\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */ function inflateOnError(err) {\n    //\n    // There is no need to call `Zlib#close()` as the handle is automatically\n    // closed when an error is emitted.\n    //\n    this[kPerMessageDeflate]._inflate = null;\n    err[kStatusCode] = 1007;\n    this[kCallback](err);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst { BINARY_TYPES, EMPTY_BUFFER, kStatusCode, kWebSocket } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst { concat, toArrayBuffer, unmask } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst { isValidStatusCode, isValidUTF8 } = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js\");\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */ class Receiver extends Writable {\n    /**\n   * Creates a Receiver instance.\n   *\n   * @param {String} [binaryType=nodebuffer] The type for binary data\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Boolean} [isServer=false] Specifies whether to operate in client or\n   *     server mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */ constructor(binaryType, extensions, isServer, maxPayload){\n        super();\n        this._binaryType = binaryType || BINARY_TYPES[0];\n        this[kWebSocket] = undefined;\n        this._extensions = extensions || {};\n        this._isServer = !!isServer;\n        this._maxPayload = maxPayload | 0;\n        this._bufferedBytes = 0;\n        this._buffers = [];\n        this._compressed = false;\n        this._payloadLength = 0;\n        this._mask = undefined;\n        this._fragmented = 0;\n        this._masked = false;\n        this._fin = false;\n        this._opcode = 0;\n        this._totalPayloadLength = 0;\n        this._messageLength = 0;\n        this._fragments = [];\n        this._state = GET_INFO;\n        this._loop = false;\n    }\n    /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */ _write(chunk, encoding, cb) {\n        if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n        this._bufferedBytes += chunk.length;\n        this._buffers.push(chunk);\n        this.startLoop(cb);\n    }\n    /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */ consume(n) {\n        this._bufferedBytes -= n;\n        if (n === this._buffers[0].length) return this._buffers.shift();\n        if (n < this._buffers[0].length) {\n            const buf = this._buffers[0];\n            this._buffers[0] = buf.slice(n);\n            return buf.slice(0, n);\n        }\n        const dst = Buffer.allocUnsafe(n);\n        do {\n            const buf = this._buffers[0];\n            const offset = dst.length - n;\n            if (n >= buf.length) {\n                dst.set(this._buffers.shift(), offset);\n            } else {\n                dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n                this._buffers[0] = buf.slice(n);\n            }\n            n -= buf.length;\n        }while (n > 0);\n        return dst;\n    }\n    /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */ startLoop(cb) {\n        let err;\n        this._loop = true;\n        do {\n            switch(this._state){\n                case GET_INFO:\n                    err = this.getInfo();\n                    break;\n                case GET_PAYLOAD_LENGTH_16:\n                    err = this.getPayloadLength16();\n                    break;\n                case GET_PAYLOAD_LENGTH_64:\n                    err = this.getPayloadLength64();\n                    break;\n                case GET_MASK:\n                    this.getMask();\n                    break;\n                case GET_DATA:\n                    err = this.getData(cb);\n                    break;\n                default:\n                    // `INFLATING`\n                    this._loop = false;\n                    return;\n            }\n        }while (this._loop);\n        cb(err);\n    }\n    /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getInfo() {\n        if (this._bufferedBytes < 2) {\n            this._loop = false;\n            return;\n        }\n        const buf = this.consume(2);\n        if ((buf[0] & 0x30) !== 0x00) {\n            this._loop = false;\n            return error(RangeError, \"RSV2 and RSV3 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_2_3\");\n        }\n        const compressed = (buf[0] & 0x40) === 0x40;\n        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n            this._loop = false;\n            return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n        }\n        this._fin = (buf[0] & 0x80) === 0x80;\n        this._opcode = buf[0] & 0x0f;\n        this._payloadLength = buf[1] & 0x7f;\n        if (this._opcode === 0x00) {\n            if (compressed) {\n                this._loop = false;\n                return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n            }\n            if (!this._fragmented) {\n                this._loop = false;\n                return error(RangeError, \"invalid opcode 0\", true, 1002, \"WS_ERR_INVALID_OPCODE\");\n            }\n            this._opcode = this._fragmented;\n        } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n            if (this._fragmented) {\n                this._loop = false;\n                return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, \"WS_ERR_INVALID_OPCODE\");\n            }\n            this._compressed = compressed;\n        } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n            if (!this._fin) {\n                this._loop = false;\n                return error(RangeError, \"FIN must be set\", true, 1002, \"WS_ERR_EXPECTED_FIN\");\n            }\n            if (compressed) {\n                this._loop = false;\n                return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n            }\n            if (this._payloadLength > 0x7d) {\n                this._loop = false;\n                return error(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, \"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH\");\n            }\n        } else {\n            this._loop = false;\n            return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, \"WS_ERR_INVALID_OPCODE\");\n        }\n        if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n        this._masked = (buf[1] & 0x80) === 0x80;\n        if (this._isServer) {\n            if (!this._masked) {\n                this._loop = false;\n                return error(RangeError, \"MASK must be set\", true, 1002, \"WS_ERR_EXPECTED_MASK\");\n            }\n        } else if (this._masked) {\n            this._loop = false;\n            return error(RangeError, \"MASK must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_MASK\");\n        }\n        if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n        else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n        else return this.haveLength();\n    }\n    /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getPayloadLength16() {\n        if (this._bufferedBytes < 2) {\n            this._loop = false;\n            return;\n        }\n        this._payloadLength = this.consume(2).readUInt16BE(0);\n        return this.haveLength();\n    }\n    /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getPayloadLength64() {\n        if (this._bufferedBytes < 8) {\n            this._loop = false;\n            return;\n        }\n        const buf = this.consume(8);\n        const num = buf.readUInt32BE(0);\n        //\n        // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n        // if payload length is greater than this number.\n        //\n        if (num > Math.pow(2, 53 - 32) - 1) {\n            this._loop = false;\n            return error(RangeError, \"Unsupported WebSocket frame: payload length > 2^53 - 1\", false, 1009, \"WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH\");\n        }\n        this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n        return this.haveLength();\n    }\n    /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ haveLength() {\n        if (this._payloadLength && this._opcode < 0x08) {\n            this._totalPayloadLength += this._payloadLength;\n            if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n                this._loop = false;\n                return error(RangeError, \"Max payload size exceeded\", false, 1009, \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\");\n            }\n        }\n        if (this._masked) this._state = GET_MASK;\n        else this._state = GET_DATA;\n    }\n    /**\n   * Reads mask bytes.\n   *\n   * @private\n   */ getMask() {\n        if (this._bufferedBytes < 4) {\n            this._loop = false;\n            return;\n        }\n        this._mask = this.consume(4);\n        this._state = GET_DATA;\n    }\n    /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */ getData(cb) {\n        let data = EMPTY_BUFFER;\n        if (this._payloadLength) {\n            if (this._bufferedBytes < this._payloadLength) {\n                this._loop = false;\n                return;\n            }\n            data = this.consume(this._payloadLength);\n            if (this._masked) unmask(data, this._mask);\n        }\n        if (this._opcode > 0x07) return this.controlMessage(data);\n        if (this._compressed) {\n            this._state = INFLATING;\n            this.decompress(data, cb);\n            return;\n        }\n        if (data.length) {\n            //\n            // This message is not compressed so its lenght is the sum of the payload\n            // length of all fragments.\n            //\n            this._messageLength = this._totalPayloadLength;\n            this._fragments.push(data);\n        }\n        return this.dataMessage();\n    }\n    /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */ decompress(data, cb) {\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        perMessageDeflate.decompress(data, this._fin, (err, buf)=>{\n            if (err) return cb(err);\n            if (buf.length) {\n                this._messageLength += buf.length;\n                if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n                    return cb(error(RangeError, \"Max payload size exceeded\", false, 1009, \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\"));\n                }\n                this._fragments.push(buf);\n            }\n            const er = this.dataMessage();\n            if (er) return cb(er);\n            this.startLoop(cb);\n        });\n    }\n    /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */ dataMessage() {\n        if (this._fin) {\n            const messageLength = this._messageLength;\n            const fragments = this._fragments;\n            this._totalPayloadLength = 0;\n            this._messageLength = 0;\n            this._fragmented = 0;\n            this._fragments = [];\n            if (this._opcode === 2) {\n                let data;\n                if (this._binaryType === \"nodebuffer\") {\n                    data = concat(fragments, messageLength);\n                } else if (this._binaryType === \"arraybuffer\") {\n                    data = toArrayBuffer(concat(fragments, messageLength));\n                } else {\n                    data = fragments;\n                }\n                this.emit(\"message\", data);\n            } else {\n                const buf = concat(fragments, messageLength);\n                if (!isValidUTF8(buf)) {\n                    this._loop = false;\n                    return error(Error, \"invalid UTF-8 sequence\", true, 1007, \"WS_ERR_INVALID_UTF8\");\n                }\n                this.emit(\"message\", buf.toString());\n            }\n        }\n        this._state = GET_INFO;\n    }\n    /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */ controlMessage(data) {\n        if (this._opcode === 0x08) {\n            this._loop = false;\n            if (data.length === 0) {\n                this.emit(\"conclude\", 1005, \"\");\n                this.end();\n            } else if (data.length === 1) {\n                return error(RangeError, \"invalid payload length 1\", true, 1002, \"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH\");\n            } else {\n                const code = data.readUInt16BE(0);\n                if (!isValidStatusCode(code)) {\n                    return error(RangeError, `invalid status code ${code}`, true, 1002, \"WS_ERR_INVALID_CLOSE_CODE\");\n                }\n                const buf = data.slice(2);\n                if (!isValidUTF8(buf)) {\n                    return error(Error, \"invalid UTF-8 sequence\", true, 1007, \"WS_ERR_INVALID_UTF8\");\n                }\n                this.emit(\"conclude\", code, buf.toString());\n                this.end();\n            }\n        } else if (this._opcode === 0x09) {\n            this.emit(\"ping\", data);\n        } else {\n            this.emit(\"pong\", data);\n        }\n        this._state = GET_INFO;\n    }\n}\nmodule.exports = Receiver;\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */ function error(ErrorCtor, message, prefix, statusCode, errorCode) {\n    const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);\n    Error.captureStackTrace(err, error);\n    err.code = errorCode;\n    err[kStatusCode] = statusCode;\n    return err;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */ \nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomFillSync } = __webpack_require__(/*! crypto */ \"crypto\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst { isValidStatusCode } = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js\");\nconst { mask: applyMask, toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst mask = Buffer.alloc(4);\n/**\n * HyBi Sender implementation.\n */ class Sender {\n    /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   */ constructor(socket, extensions){\n        this._extensions = extensions || {};\n        this._socket = socket;\n        this._firstFragment = true;\n        this._compress = false;\n        this._bufferedBytes = 0;\n        this._deflating = false;\n        this._queue = [];\n    }\n    /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */ static frame(data, options) {\n        const merge = options.mask && options.readOnly;\n        let offset = options.mask ? 6 : 2;\n        let payloadLength = data.length;\n        if (data.length >= 65536) {\n            offset += 8;\n            payloadLength = 127;\n        } else if (data.length > 125) {\n            offset += 2;\n            payloadLength = 126;\n        }\n        const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n        target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n        if (options.rsv1) target[0] |= 0x40;\n        target[1] = payloadLength;\n        if (payloadLength === 126) {\n            target.writeUInt16BE(data.length, 2);\n        } else if (payloadLength === 127) {\n            target.writeUInt32BE(0, 2);\n            target.writeUInt32BE(data.length, 6);\n        }\n        if (!options.mask) return [\n            target,\n            data\n        ];\n        randomFillSync(mask, 0, 4);\n        target[1] |= 0x80;\n        target[offset - 4] = mask[0];\n        target[offset - 3] = mask[1];\n        target[offset - 2] = mask[2];\n        target[offset - 1] = mask[3];\n        if (merge) {\n            applyMask(data, mask, target, offset, data.length);\n            return [\n                target\n            ];\n        }\n        applyMask(data, mask, data, 0, data.length);\n        return [\n            target,\n            data\n        ];\n    }\n    /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {String} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */ close(code, data, mask, cb) {\n        let buf;\n        if (code === undefined) {\n            buf = EMPTY_BUFFER;\n        } else if (typeof code !== \"number\" || !isValidStatusCode(code)) {\n            throw new TypeError(\"First argument must be a valid error code number\");\n        } else if (data === undefined || data === \"\") {\n            buf = Buffer.allocUnsafe(2);\n            buf.writeUInt16BE(code, 0);\n        } else {\n            const length = Buffer.byteLength(data);\n            if (length > 123) {\n                throw new RangeError(\"The message must not be greater than 123 bytes\");\n            }\n            buf = Buffer.allocUnsafe(2 + length);\n            buf.writeUInt16BE(code, 0);\n            buf.write(data, 2);\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doClose,\n                buf,\n                mask,\n                cb\n            ]);\n        } else {\n            this.doClose(buf, mask, cb);\n        }\n    }\n    /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @private\n   */ doClose(data, mask, cb) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x08,\n            mask,\n            readOnly: false\n        }), cb);\n    }\n    /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ ping(data, mask, cb) {\n        const buf = toBuffer(data);\n        if (buf.length > 125) {\n            throw new RangeError(\"The data size must not be greater than 125 bytes\");\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doPing,\n                buf,\n                mask,\n                toBuffer.readOnly,\n                cb\n            ]);\n        } else {\n            this.doPing(buf, mask, toBuffer.readOnly, cb);\n        }\n    }\n    /**\n   * Frames and sends a ping message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */ doPing(data, mask, readOnly, cb) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x09,\n            mask,\n            readOnly\n        }), cb);\n    }\n    /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ pong(data, mask, cb) {\n        const buf = toBuffer(data);\n        if (buf.length > 125) {\n            throw new RangeError(\"The data size must not be greater than 125 bytes\");\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doPong,\n                buf,\n                mask,\n                toBuffer.readOnly,\n                cb\n            ]);\n        } else {\n            this.doPong(buf, mask, toBuffer.readOnly, cb);\n        }\n    }\n    /**\n   * Frames and sends a pong message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */ doPong(data, mask, readOnly, cb) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x0a,\n            mask,\n            readOnly\n        }), cb);\n    }\n    /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ send(data, options, cb) {\n        const buf = toBuffer(data);\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        let opcode = options.binary ? 2 : 1;\n        let rsv1 = options.compress;\n        if (this._firstFragment) {\n            this._firstFragment = false;\n            if (rsv1 && perMessageDeflate) {\n                rsv1 = buf.length >= perMessageDeflate._threshold;\n            }\n            this._compress = rsv1;\n        } else {\n            rsv1 = false;\n            opcode = 0;\n        }\n        if (options.fin) this._firstFragment = true;\n        if (perMessageDeflate) {\n            const opts = {\n                fin: options.fin,\n                rsv1,\n                opcode,\n                mask: options.mask,\n                readOnly: toBuffer.readOnly\n            };\n            if (this._deflating) {\n                this.enqueue([\n                    this.dispatch,\n                    buf,\n                    this._compress,\n                    opts,\n                    cb\n                ]);\n            } else {\n                this.dispatch(buf, this._compress, opts, cb);\n            }\n        } else {\n            this.sendFrame(Sender.frame(buf, {\n                fin: options.fin,\n                rsv1: false,\n                opcode,\n                mask: options.mask,\n                readOnly: toBuffer.readOnly\n            }), cb);\n        }\n    }\n    /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */ dispatch(data, compress, options, cb) {\n        if (!compress) {\n            this.sendFrame(Sender.frame(data, options), cb);\n            return;\n        }\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        this._bufferedBytes += data.length;\n        this._deflating = true;\n        perMessageDeflate.compress(data, options.fin, (_, buf)=>{\n            if (this._socket.destroyed) {\n                const err = new Error(\"The socket was closed while data was being compressed\");\n                if (typeof cb === \"function\") cb(err);\n                for(let i = 0; i < this._queue.length; i++){\n                    const callback = this._queue[i][4];\n                    if (typeof callback === \"function\") callback(err);\n                }\n                return;\n            }\n            this._bufferedBytes -= data.length;\n            this._deflating = false;\n            options.readOnly = false;\n            this.sendFrame(Sender.frame(buf, options), cb);\n            this.dequeue();\n        });\n    }\n    /**\n   * Executes queued send operations.\n   *\n   * @private\n   */ dequeue() {\n        while(!this._deflating && this._queue.length){\n            const params = this._queue.shift();\n            this._bufferedBytes -= params[1].length;\n            Reflect.apply(params[0], this, params.slice(1));\n        }\n    }\n    /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */ enqueue(params) {\n        this._bufferedBytes += params[1].length;\n        this._queue.push(params);\n    }\n    /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */ sendFrame(list, cb) {\n        if (list.length === 2) {\n            this._socket.cork();\n            this._socket.write(list[0]);\n            this._socket.write(list[1], cb);\n            this._socket.uncork();\n        } else {\n            this._socket.write(list[0], cb);\n        }\n    }\n}\nmodule.exports = Sender;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */ function emitClose(stream) {\n    stream.emit(\"close\");\n}\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */ function duplexOnEnd() {\n    if (!this.destroyed && this._writableState.finished) {\n        this.destroy();\n    }\n}\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */ function duplexOnError(err) {\n    this.removeListener(\"error\", duplexOnError);\n    this.destroy();\n    if (this.listenerCount(\"error\") === 0) {\n        // Do not suppress the throwing behavior.\n        this.emit(\"error\", err);\n    }\n}\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */ function createWebSocketStream(ws, options) {\n    let resumeOnReceiverDrain = true;\n    let terminateOnDestroy = true;\n    function receiverOnDrain() {\n        if (resumeOnReceiverDrain) ws._socket.resume();\n    }\n    if (ws.readyState === ws.CONNECTING) {\n        ws.once(\"open\", function open() {\n            ws._receiver.removeAllListeners(\"drain\");\n            ws._receiver.on(\"drain\", receiverOnDrain);\n        });\n    } else {\n        ws._receiver.removeAllListeners(\"drain\");\n        ws._receiver.on(\"drain\", receiverOnDrain);\n    }\n    const duplex = new Duplex({\n        ...options,\n        autoDestroy: false,\n        emitClose: false,\n        objectMode: false,\n        writableObjectMode: false\n    });\n    ws.on(\"message\", function message(msg) {\n        if (!duplex.push(msg)) {\n            resumeOnReceiverDrain = false;\n            ws._socket.pause();\n        }\n    });\n    ws.once(\"error\", function error(err) {\n        if (duplex.destroyed) return;\n        // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n        //\n        // - If the `'error'` event is emitted before the `'open'` event, then\n        //   `ws.terminate()` is a noop as no socket is assigned.\n        // - Otherwise, the error is re-emitted by the listener of the `'error'`\n        //   event of the `Receiver` object. The listener already closes the\n        //   connection by calling `ws.close()`. This allows a close frame to be\n        //   sent to the other peer. If `ws.terminate()` is called right after this,\n        //   then the close frame might not be sent.\n        terminateOnDestroy = false;\n        duplex.destroy(err);\n    });\n    ws.once(\"close\", function close() {\n        if (duplex.destroyed) return;\n        duplex.push(null);\n    });\n    duplex._destroy = function(err, callback) {\n        if (ws.readyState === ws.CLOSED) {\n            callback(err);\n            process.nextTick(emitClose, duplex);\n            return;\n        }\n        let called = false;\n        ws.once(\"error\", function error(err) {\n            called = true;\n            callback(err);\n        });\n        ws.once(\"close\", function close() {\n            if (!called) callback(err);\n            process.nextTick(emitClose, duplex);\n        });\n        if (terminateOnDestroy) ws.terminate();\n    };\n    duplex._final = function(callback) {\n        if (ws.readyState === ws.CONNECTING) {\n            ws.once(\"open\", function open() {\n                duplex._final(callback);\n            });\n            return;\n        }\n        // If the value of the `_socket` property is `null` it means that `ws` is a\n        // client websocket and the handshake failed. In fact, when this happens, a\n        // socket is never assigned to the websocket. Wait for the `'error'` event\n        // that will be emitted by the websocket.\n        if (ws._socket === null) return;\n        if (ws._socket._writableState.finished) {\n            callback();\n            if (duplex._readableState.endEmitted) duplex.destroy();\n        } else {\n            ws._socket.once(\"finish\", function finish() {\n                // `duplex` is not destroyed here because the `'end'` event will be\n                // emitted on `duplex` after this `'finish'` event. The EOF signaling\n                // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n                callback();\n            });\n            ws.close();\n        }\n    };\n    duplex._read = function() {\n        if ((ws.readyState === ws.OPEN || ws.readyState === ws.CLOSING) && !resumeOnReceiverDrain) {\n            resumeOnReceiverDrain = true;\n            if (!ws._receiver._writableState.needDrain) ws._socket.resume();\n        }\n    };\n    duplex._write = function(chunk, encoding, callback) {\n        if (ws.readyState === ws.CONNECTING) {\n            ws.once(\"open\", function open() {\n                duplex._write(chunk, encoding, callback);\n            });\n            return;\n        }\n        ws.send(chunk, callback);\n    };\n    duplex.on(\"end\", duplexOnEnd);\n    duplex.on(\"error\", duplexOnError);\n    return duplex;\n}\nmodule.exports = createWebSocketStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */ function isValidStatusCode(code) {\n    return code >= 1000 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3000 && code <= 4999;\n}\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */ function _isValidUTF8(buf) {\n    const len = buf.length;\n    let i = 0;\n    while(i < len){\n        if ((buf[i] & 0x80) === 0) {\n            // 0xxxxxxx\n            i++;\n        } else if ((buf[i] & 0xe0) === 0xc0) {\n            // 110xxxxx 10xxxxxx\n            if (i + 1 === len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i] & 0xfe) === 0xc0 // Overlong\n            ) {\n                return false;\n            }\n            i += 2;\n        } else if ((buf[i] & 0xf0) === 0xe0) {\n            // 1110xxxx 10xxxxxx 10xxxxxx\n            if (i + 2 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 || // Overlong\n            buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0 // Surrogate (U+D800 - U+DFFF)\n            ) {\n                return false;\n            }\n            i += 3;\n        } else if ((buf[i] & 0xf8) === 0xf0) {\n            // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n            if (i + 3 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || (buf[i + 3] & 0xc0) !== 0x80 || buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 || // Overlong\n            buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4 // > U+10FFFF\n            ) {\n                return false;\n            }\n            i += 4;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\ntry {\n    let isValidUTF8 = __webpack_require__(/*! utf-8-validate */ \"(ssr)/./node_modules/utf-8-validate/index.js\");\n    /* istanbul ignore if */ if (typeof isValidUTF8 === \"object\") {\n        isValidUTF8 = isValidUTF8.Validation.isValidUTF8; // utf-8-validate@<3.0.0\n    }\n    module.exports = {\n        isValidStatusCode,\n        isValidUTF8 (buf) {\n            return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\n        }\n    };\n} catch (e) /* istanbul ignore next */ {\n    module.exports = {\n        isValidStatusCode,\n        isValidUTF8: _isValidUTF8\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvdmFsaWRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNBLGtCQUFrQkMsSUFBSTtJQUM3QixPQUNFLFFBQVMsUUFDUEEsUUFBUSxRQUNSQSxTQUFTLFFBQ1RBLFNBQVMsUUFDVEEsU0FBUyxRQUNWQSxRQUFRLFFBQVFBLFFBQVE7QUFFN0I7QUFFQTs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNDLGFBQWFDLEdBQUc7SUFDdkIsTUFBTUMsTUFBTUQsSUFBSUUsTUFBTTtJQUN0QixJQUFJQyxJQUFJO0lBRVIsTUFBT0EsSUFBSUYsSUFBSztRQUNkLElBQUksQ0FBQ0QsR0FBRyxDQUFDRyxFQUFFLEdBQUcsSUFBRyxNQUFPLEdBQUc7WUFDekIsV0FBVztZQUNYQTtRQUNGLE9BQU8sSUFBSSxDQUFDSCxHQUFHLENBQUNHLEVBQUUsR0FBRyxJQUFHLE1BQU8sTUFBTTtZQUNuQyxvQkFBb0I7WUFDcEIsSUFDRUEsSUFBSSxNQUFNRixPQUNWLENBQUNELEdBQUcsQ0FBQ0csSUFBSSxFQUFFLEdBQUcsSUFBRyxNQUFPLFFBQ3hCLENBQUNILEdBQUcsQ0FBQ0csRUFBRSxHQUFHLElBQUcsTUFBTyxLQUFLLFdBQVc7Y0FDcEM7Z0JBQ0EsT0FBTztZQUNUO1lBRUFBLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDRyxFQUFFLEdBQUcsSUFBRyxNQUFPLE1BQU07WUFDbkMsNkJBQTZCO1lBQzdCLElBQ0VBLElBQUksS0FBS0YsT0FDVCxDQUFDRCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN4QixDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN2QkgsR0FBRyxDQUFDRyxFQUFFLEtBQUssUUFBUSxDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUFTLFdBQVc7WUFDL0RILEdBQUcsQ0FBQ0csRUFBRSxLQUFLLFFBQVEsQ0FBQ0gsR0FBRyxDQUFDRyxJQUFJLEVBQUUsR0FBRyxJQUFHLE1BQU8sS0FBTSw4QkFBOEI7Y0FDaEY7Z0JBQ0EsT0FBTztZQUNUO1lBRUFBLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDRyxFQUFFLEdBQUcsSUFBRyxNQUFPLE1BQU07WUFDbkMsc0NBQXNDO1lBQ3RDLElBQ0VBLElBQUksS0FBS0YsT0FDVCxDQUFDRCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN4QixDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN4QixDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN2QkgsR0FBRyxDQUFDRyxFQUFFLEtBQUssUUFBUSxDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUFTLFdBQVc7WUFDL0RILEdBQUcsQ0FBQ0csRUFBRSxLQUFLLFFBQVFILEdBQUcsQ0FBQ0csSUFBSSxFQUFFLEdBQUcsUUFDakNILEdBQUcsQ0FBQ0csRUFBRSxHQUFHLEtBQUssYUFBYTtjQUMzQjtnQkFDQSxPQUFPO1lBQ1Q7WUFFQUEsS0FBSztRQUNQLE9BQU87WUFDTCxPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU87QUFDVDtBQUVBLElBQUk7SUFDRixJQUFJQyxjQUFjQyxtQkFBT0EsQ0FBQztJQUUxQixzQkFBc0IsR0FDdEIsSUFBSSxPQUFPRCxnQkFBZ0IsVUFBVTtRQUNuQ0EsY0FBY0EsWUFBWUUsVUFBVSxDQUFDRixXQUFXLEVBQUUsd0JBQXdCO0lBQzVFO0lBRUFHLE9BQU9DLE9BQU8sR0FBRztRQUNmWDtRQUNBTyxhQUFZSixHQUFHO1lBQ2IsT0FBT0EsSUFBSUUsTUFBTSxHQUFHLE1BQU1ILGFBQWFDLE9BQU9JLFlBQVlKO1FBQzVEO0lBQ0Y7QUFDRixFQUFFLE9BQU9TLEdBQUcsd0JBQXdCLEdBQUc7SUFDckNGLE9BQU9DLE9BQU8sR0FBRztRQUNmWDtRQUNBTyxhQUFhTDtJQUNmO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvdmFsaWRhdGlvbi5qcz8xMTcxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdGF0dXMgY29kZSBpcyBhbGxvd2VkIGluIGEgY2xvc2UgZnJhbWUuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGNvZGUgVGhlIHN0YXR1cyBjb2RlXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIHN0YXR1cyBjb2RlIGlzIHZhbGlkLCBlbHNlIGBmYWxzZWBcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gaXNWYWxpZFN0YXR1c0NvZGUoY29kZSkge1xuICByZXR1cm4gKFxuICAgIChjb2RlID49IDEwMDAgJiZcbiAgICAgIGNvZGUgPD0gMTAxNCAmJlxuICAgICAgY29kZSAhPT0gMTAwNCAmJlxuICAgICAgY29kZSAhPT0gMTAwNSAmJlxuICAgICAgY29kZSAhPT0gMTAwNikgfHxcbiAgICAoY29kZSA+PSAzMDAwICYmIGNvZGUgPD0gNDk5OSlcbiAgKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBidWZmZXIgY29udGFpbnMgb25seSBjb3JyZWN0IFVURi04LlxuICogUG9ydGVkIGZyb20gaHR0cHM6Ly93d3cuY2wuY2FtLmFjLnVrLyU3RW1nazI1L3Vjcy91dGY4X2NoZWNrLmMgYnlcbiAqIE1hcmt1cyBLdWhuLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWYgVGhlIGJ1ZmZlciB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIGBidWZgIGNvbnRhaW5zIG9ubHkgY29ycmVjdCBVVEYtOCwgZWxzZSBgZmFsc2VgXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIF9pc1ZhbGlkVVRGOChidWYpIHtcbiAgY29uc3QgbGVuID0gYnVmLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgaWYgKChidWZbaV0gJiAweDgwKSA9PT0gMCkge1xuICAgICAgLy8gMHh4eHh4eHhcbiAgICAgIGkrKztcbiAgICB9IGVsc2UgaWYgKChidWZbaV0gJiAweGUwKSA9PT0gMHhjMCkge1xuICAgICAgLy8gMTEweHh4eHggMTB4eHh4eHhcbiAgICAgIGlmIChcbiAgICAgICAgaSArIDEgPT09IGxlbiB8fFxuICAgICAgICAoYnVmW2kgKyAxXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaV0gJiAweGZlKSA9PT0gMHhjMCAvLyBPdmVybG9uZ1xuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaSArPSAyO1xuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZjApID09PSAweGUwKSB7XG4gICAgICAvLyAxMTEweHh4eCAxMHh4eHh4eCAxMHh4eHh4eFxuICAgICAgaWYgKFxuICAgICAgICBpICsgMiA+PSBsZW4gfHxcbiAgICAgICAgKGJ1ZltpICsgMV0gJiAweGMwKSAhPT0gMHg4MCB8fFxuICAgICAgICAoYnVmW2kgKyAyXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaV0gPT09IDB4ZTAgJiYgKGJ1ZltpICsgMV0gJiAweGUwKSA9PT0gMHg4MCkgfHwgLy8gT3ZlcmxvbmdcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhlZCAmJiAoYnVmW2kgKyAxXSAmIDB4ZTApID09PSAweGEwKSAvLyBTdXJyb2dhdGUgKFUrRDgwMCAtIFUrREZGRilcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMztcbiAgICB9IGVsc2UgaWYgKChidWZbaV0gJiAweGY4KSA9PT0gMHhmMCkge1xuICAgICAgLy8gMTExMTB4eHggMTB4eHh4eHggMTB4eHh4eHggMTB4eHh4eHhcbiAgICAgIGlmIChcbiAgICAgICAgaSArIDMgPj0gbGVuIHx8XG4gICAgICAgIChidWZbaSArIDFdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpICsgMl0gJiAweGMwKSAhPT0gMHg4MCB8fFxuICAgICAgICAoYnVmW2kgKyAzXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaV0gPT09IDB4ZjAgJiYgKGJ1ZltpICsgMV0gJiAweGYwKSA9PT0gMHg4MCkgfHwgLy8gT3ZlcmxvbmdcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhmNCAmJiBidWZbaSArIDFdID4gMHg4ZikgfHxcbiAgICAgICAgYnVmW2ldID4gMHhmNCAvLyA+IFUrMTBGRkZGXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpICs9IDQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxudHJ5IHtcbiAgbGV0IGlzVmFsaWRVVEY4ID0gcmVxdWlyZSgndXRmLTgtdmFsaWRhdGUnKTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpc1ZhbGlkVVRGOCA9PT0gJ29iamVjdCcpIHtcbiAgICBpc1ZhbGlkVVRGOCA9IGlzVmFsaWRVVEY4LlZhbGlkYXRpb24uaXNWYWxpZFVURjg7IC8vIHV0Zi04LXZhbGlkYXRlQDwzLjAuMFxuICB9XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNWYWxpZFN0YXR1c0NvZGUsXG4gICAgaXNWYWxpZFVURjgoYnVmKSB7XG4gICAgICByZXR1cm4gYnVmLmxlbmd0aCA8IDE1MCA/IF9pc1ZhbGlkVVRGOChidWYpIDogaXNWYWxpZFVURjgoYnVmKTtcbiAgICB9XG4gIH07XG59IGNhdGNoIChlKSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGlzVmFsaWRTdGF0dXNDb2RlLFxuICAgIGlzVmFsaWRVVEY4OiBfaXNWYWxpZFVURjhcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJpc1ZhbGlkU3RhdHVzQ29kZSIsImNvZGUiLCJfaXNWYWxpZFVURjgiLCJidWYiLCJsZW4iLCJsZW5ndGgiLCJpIiwiaXNWYWxpZFVURjgiLCJyZXF1aXJlIiwiVmFsaWRhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */ \nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst WebSocket = __webpack_require__(/*! ./websocket */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js\");\nconst { GUID, kWebSocket } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */ class WebSocketServer extends EventEmitter {\n    /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [callback] A listener for the `listening` event\n   */ constructor(options, callback){\n        super();\n        options = {\n            maxPayload: 100 * 1024 * 1024,\n            perMessageDeflate: false,\n            handleProtocols: null,\n            clientTracking: true,\n            verifyClient: null,\n            noServer: false,\n            backlog: null,\n            server: null,\n            host: null,\n            path: null,\n            port: null,\n            ...options\n        };\n        if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {\n            throw new TypeError('One and only one of the \"port\", \"server\", or \"noServer\" options ' + \"must be specified\");\n        }\n        if (options.port != null) {\n            this._server = http.createServer((req, res)=>{\n                const body = http.STATUS_CODES[426];\n                res.writeHead(426, {\n                    \"Content-Length\": body.length,\n                    \"Content-Type\": \"text/plain\"\n                });\n                res.end(body);\n            });\n            this._server.listen(options.port, options.host, options.backlog, callback);\n        } else if (options.server) {\n            this._server = options.server;\n        }\n        if (this._server) {\n            const emitConnection = this.emit.bind(this, \"connection\");\n            this._removeListeners = addListeners(this._server, {\n                listening: this.emit.bind(this, \"listening\"),\n                error: this.emit.bind(this, \"error\"),\n                upgrade: (req, socket, head)=>{\n                    this.handleUpgrade(req, socket, head, emitConnection);\n                }\n            });\n        }\n        if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n        if (options.clientTracking) this.clients = new Set();\n        this.options = options;\n        this._state = RUNNING;\n    }\n    /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */ address() {\n        if (this.options.noServer) {\n            throw new Error('The server is operating in \"noServer\" mode');\n        }\n        if (!this._server) return null;\n        return this._server.address();\n    }\n    /**\n   * Close the server.\n   *\n   * @param {Function} [cb] Callback\n   * @public\n   */ close(cb) {\n        if (cb) this.once(\"close\", cb);\n        if (this._state === CLOSED) {\n            process.nextTick(emitClose, this);\n            return;\n        }\n        if (this._state === CLOSING) return;\n        this._state = CLOSING;\n        //\n        // Terminate all associated clients.\n        //\n        if (this.clients) {\n            for (const client of this.clients)client.terminate();\n        }\n        const server = this._server;\n        if (server) {\n            this._removeListeners();\n            this._removeListeners = this._server = null;\n            //\n            // Close the http server if it was internally created.\n            //\n            if (this.options.port != null) {\n                server.close(emitClose.bind(undefined, this));\n                return;\n            }\n        }\n        process.nextTick(emitClose, this);\n    }\n    /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */ shouldHandle(req) {\n        if (this.options.path) {\n            const index = req.url.indexOf(\"?\");\n            const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n            if (pathname !== this.options.path) return false;\n        }\n        return true;\n    }\n    /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */ handleUpgrade(req, socket, head, cb) {\n        socket.on(\"error\", socketOnError);\n        const key = req.headers[\"sec-websocket-key\"] !== undefined ? req.headers[\"sec-websocket-key\"].trim() : false;\n        const upgrade = req.headers.upgrade;\n        const version = +req.headers[\"sec-websocket-version\"];\n        const extensions = {};\n        if (req.method !== \"GET\" || upgrade === undefined || upgrade.toLowerCase() !== \"websocket\" || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {\n            return abortHandshake(socket, 400);\n        }\n        if (this.options.perMessageDeflate) {\n            const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);\n            try {\n                const offers = parse(req.headers[\"sec-websocket-extensions\"]);\n                if (offers[PerMessageDeflate.extensionName]) {\n                    perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n                    extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n                }\n            } catch (err) {\n                return abortHandshake(socket, 400);\n            }\n        }\n        //\n        // Optionally call external client verification handler.\n        //\n        if (this.options.verifyClient) {\n            const info = {\n                origin: req.headers[`${version === 8 ? \"sec-websocket-origin\" : \"origin\"}`],\n                secure: !!(req.socket.authorized || req.socket.encrypted),\n                req\n            };\n            if (this.options.verifyClient.length === 2) {\n                this.options.verifyClient(info, (verified, code, message, headers)=>{\n                    if (!verified) {\n                        return abortHandshake(socket, code || 401, message, headers);\n                    }\n                    this.completeUpgrade(key, extensions, req, socket, head, cb);\n                });\n                return;\n            }\n            if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n        }\n        this.completeUpgrade(key, extensions, req, socket, head, cb);\n    }\n    /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */ completeUpgrade(key, extensions, req, socket, head, cb) {\n        //\n        // Destroy the socket if the client has already sent a FIN packet.\n        //\n        if (!socket.readable || !socket.writable) return socket.destroy();\n        if (socket[kWebSocket]) {\n            throw new Error(\"server.handleUpgrade() was called more than once with the same \" + \"socket, possibly due to a misconfiguration\");\n        }\n        if (this._state > RUNNING) return abortHandshake(socket, 503);\n        const digest = createHash(\"sha1\").update(key + GUID).digest(\"base64\");\n        const headers = [\n            \"HTTP/1.1 101 Switching Protocols\",\n            \"Upgrade: websocket\",\n            \"Connection: Upgrade\",\n            `Sec-WebSocket-Accept: ${digest}`\n        ];\n        const ws = new WebSocket(null);\n        let protocol = req.headers[\"sec-websocket-protocol\"];\n        if (protocol) {\n            protocol = protocol.split(\",\").map(trim);\n            //\n            // Optionally call external protocol selection handler.\n            //\n            if (this.options.handleProtocols) {\n                protocol = this.options.handleProtocols(protocol, req);\n            } else {\n                protocol = protocol[0];\n            }\n            if (protocol) {\n                headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n                ws._protocol = protocol;\n            }\n        }\n        if (extensions[PerMessageDeflate.extensionName]) {\n            const params = extensions[PerMessageDeflate.extensionName].params;\n            const value = format({\n                [PerMessageDeflate.extensionName]: [\n                    params\n                ]\n            });\n            headers.push(`Sec-WebSocket-Extensions: ${value}`);\n            ws._extensions = extensions;\n        }\n        //\n        // Allow external modification/inspection of handshake headers.\n        //\n        this.emit(\"headers\", headers, req);\n        socket.write(headers.concat(\"\\r\\n\").join(\"\\r\\n\"));\n        socket.removeListener(\"error\", socketOnError);\n        ws.setSocket(socket, head, this.options.maxPayload);\n        if (this.clients) {\n            this.clients.add(ws);\n            ws.on(\"close\", ()=>this.clients.delete(ws));\n        }\n        cb(ws, req);\n    }\n}\nmodule.exports = WebSocketServer;\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */ function addListeners(server, map) {\n    for (const event of Object.keys(map))server.on(event, map[event]);\n    return function removeListeners() {\n        for (const event of Object.keys(map)){\n            server.removeListener(event, map[event]);\n        }\n    };\n}\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */ function emitClose(server) {\n    server._state = CLOSED;\n    server.emit(\"close\");\n}\n/**\n * Handle premature socket errors.\n *\n * @private\n */ function socketOnError() {\n    this.destroy();\n}\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */ function abortHandshake(socket, code, message, headers) {\n    if (socket.writable) {\n        message = message || http.STATUS_CODES[code];\n        headers = {\n            Connection: \"close\",\n            \"Content-Type\": \"text/html\",\n            \"Content-Length\": Buffer.byteLength(message),\n            ...headers\n        };\n        socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` + Object.keys(headers).map((h)=>`${h}: ${headers[h]}`).join(\"\\r\\n\") + \"\\r\\n\\r\\n\" + message);\n    }\n    socket.removeListener(\"error\", socketOnError);\n    socket.destroy();\n}\n/**\n * Remove whitespace characters from both ends of a string.\n *\n * @param {String} str The string\n * @return {String} A new string representing `str` stripped of whitespace\n *     characters from both its beginning and end\n * @private\n */ function trim(str) {\n    return str.trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */ \nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomBytes, createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst Receiver = __webpack_require__(/*! ./receiver */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js\");\nconst Sender = __webpack_require__(/*! ./sender */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js\");\nconst { BINARY_TYPES, EMPTY_BUFFER, GUID, kStatusCode, kWebSocket, NOOP } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst { addEventListener, removeEventListener } = __webpack_require__(/*! ./event-target */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js\");\nconst { toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst readyStates = [\n    \"CONNECTING\",\n    \"OPEN\",\n    \"CLOSING\",\n    \"CLOSED\"\n];\nconst protocolVersions = [\n    8,\n    13\n];\nconst closeTimeout = 30 * 1000;\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */ class WebSocket extends EventEmitter {\n    /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */ constructor(address, protocols, options){\n        super();\n        this._binaryType = BINARY_TYPES[0];\n        this._closeCode = 1006;\n        this._closeFrameReceived = false;\n        this._closeFrameSent = false;\n        this._closeMessage = \"\";\n        this._closeTimer = null;\n        this._extensions = {};\n        this._protocol = \"\";\n        this._readyState = WebSocket.CONNECTING;\n        this._receiver = null;\n        this._sender = null;\n        this._socket = null;\n        if (address !== null) {\n            this._bufferedAmount = 0;\n            this._isServer = false;\n            this._redirects = 0;\n            if (Array.isArray(protocols)) {\n                protocols = protocols.join(\", \");\n            } else if (typeof protocols === \"object\" && protocols !== null) {\n                options = protocols;\n                protocols = undefined;\n            }\n            initAsClient(this, address, protocols, options);\n        } else {\n            this._isServer = true;\n        }\n    }\n    /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */ get binaryType() {\n        return this._binaryType;\n    }\n    set binaryType(type) {\n        if (!BINARY_TYPES.includes(type)) return;\n        this._binaryType = type;\n        //\n        // Allow to change `binaryType` on the fly.\n        //\n        if (this._receiver) this._receiver._binaryType = type;\n    }\n    /**\n   * @type {Number}\n   */ get bufferedAmount() {\n        if (!this._socket) return this._bufferedAmount;\n        return this._socket._writableState.length + this._sender._bufferedBytes;\n    }\n    /**\n   * @type {String}\n   */ get extensions() {\n        return Object.keys(this._extensions).join();\n    }\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onclose() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onclose(listener) {}\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onerror() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onerror(listener) {}\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onopen() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onopen(listener) {}\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onmessage() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onmessage(listener) {}\n    /**\n   * @type {String}\n   */ get protocol() {\n        return this._protocol;\n    }\n    /**\n   * @type {Number}\n   */ get readyState() {\n        return this._readyState;\n    }\n    /**\n   * @type {String}\n   */ get url() {\n        return this._url;\n    }\n    /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Number} [maxPayload=0] The maximum allowed message size\n   * @private\n   */ setSocket(socket, head, maxPayload) {\n        const receiver = new Receiver(this.binaryType, this._extensions, this._isServer, maxPayload);\n        this._sender = new Sender(socket, this._extensions);\n        this._receiver = receiver;\n        this._socket = socket;\n        receiver[kWebSocket] = this;\n        socket[kWebSocket] = this;\n        receiver.on(\"conclude\", receiverOnConclude);\n        receiver.on(\"drain\", receiverOnDrain);\n        receiver.on(\"error\", receiverOnError);\n        receiver.on(\"message\", receiverOnMessage);\n        receiver.on(\"ping\", receiverOnPing);\n        receiver.on(\"pong\", receiverOnPong);\n        socket.setTimeout(0);\n        socket.setNoDelay();\n        if (head.length > 0) socket.unshift(head);\n        socket.on(\"close\", socketOnClose);\n        socket.on(\"data\", socketOnData);\n        socket.on(\"end\", socketOnEnd);\n        socket.on(\"error\", socketOnError);\n        this._readyState = WebSocket.OPEN;\n        this.emit(\"open\");\n    }\n    /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */ emitClose() {\n        if (!this._socket) {\n            this._readyState = WebSocket.CLOSED;\n            this.emit(\"close\", this._closeCode, this._closeMessage);\n            return;\n        }\n        if (this._extensions[PerMessageDeflate.extensionName]) {\n            this._extensions[PerMessageDeflate.extensionName].cleanup();\n        }\n        this._receiver.removeAllListeners();\n        this._readyState = WebSocket.CLOSED;\n        this.emit(\"close\", this._closeCode, this._closeMessage);\n    }\n    /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {String} [data] A string explaining why the connection is closing\n   * @public\n   */ close(code, data) {\n        if (this.readyState === WebSocket.CLOSED) return;\n        if (this.readyState === WebSocket.CONNECTING) {\n            const msg = \"WebSocket was closed before the connection was established\";\n            return abortHandshake(this, this._req, msg);\n        }\n        if (this.readyState === WebSocket.CLOSING) {\n            if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {\n                this._socket.end();\n            }\n            return;\n        }\n        this._readyState = WebSocket.CLOSING;\n        this._sender.close(code, data, !this._isServer, (err)=>{\n            //\n            // This error is handled by the `'error'` listener on the socket. We only\n            // want to know if the close frame has been sent here.\n            //\n            if (err) return;\n            this._closeFrameSent = true;\n            if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {\n                this._socket.end();\n            }\n        });\n        //\n        // Specify a timeout for the closing handshake to complete.\n        //\n        this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);\n    }\n    /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */ ping(data, mask, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof data === \"function\") {\n            cb = data;\n            data = mask = undefined;\n        } else if (typeof mask === \"function\") {\n            cb = mask;\n            mask = undefined;\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        if (mask === undefined) mask = !this._isServer;\n        this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n    }\n    /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */ pong(data, mask, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof data === \"function\") {\n            cb = data;\n            data = mask = undefined;\n        } else if (typeof mask === \"function\") {\n            cb = mask;\n            mask = undefined;\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        if (mask === undefined) mask = !this._isServer;\n        this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n    }\n    /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */ send(data, options, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof options === \"function\") {\n            cb = options;\n            options = {};\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        const opts = {\n            binary: typeof data !== \"string\",\n            mask: !this._isServer,\n            compress: true,\n            fin: true,\n            ...options\n        };\n        if (!this._extensions[PerMessageDeflate.extensionName]) {\n            opts.compress = false;\n        }\n        this._sender.send(data || EMPTY_BUFFER, opts, cb);\n    }\n    /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */ terminate() {\n        if (this.readyState === WebSocket.CLOSED) return;\n        if (this.readyState === WebSocket.CONNECTING) {\n            const msg = \"WebSocket was closed before the connection was established\";\n            return abortHandshake(this, this._req, msg);\n        }\n        if (this._socket) {\n            this._readyState = WebSocket.CLOSING;\n            this._socket.destroy();\n        }\n    }\n}\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CONNECTING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CONNECTING\")\n});\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CONNECTING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CONNECTING\")\n});\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"OPEN\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"OPEN\")\n});\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"OPEN\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"OPEN\")\n});\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CLOSING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSING\")\n});\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CLOSING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSING\")\n});\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CLOSED\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSED\")\n});\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CLOSED\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSED\")\n});\n[\n    \"binaryType\",\n    \"bufferedAmount\",\n    \"extensions\",\n    \"protocol\",\n    \"readyState\",\n    \"url\"\n].forEach((property)=>{\n    Object.defineProperty(WebSocket.prototype, property, {\n        enumerable: true\n    });\n});\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n[\n    \"open\",\n    \"error\",\n    \"close\",\n    \"message\"\n].forEach((method)=>{\n    Object.defineProperty(WebSocket.prototype, `on${method}`, {\n        enumerable: true,\n        get () {\n            const listeners = this.listeners(method);\n            for(let i = 0; i < listeners.length; i++){\n                if (listeners[i]._listener) return listeners[i]._listener;\n            }\n            return undefined;\n        },\n        set (listener) {\n            const listeners = this.listeners(method);\n            for(let i = 0; i < listeners.length; i++){\n                //\n                // Remove only the listeners added via `addEventListener`.\n                //\n                if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n            }\n            this.addEventListener(method, listener);\n        }\n    });\n});\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\nmodule.exports = WebSocket;\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {String} [protocols] The subprotocols\n * @param {Object} [options] Connection options\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @private\n */ function initAsClient(websocket, address, protocols, options) {\n    const opts = {\n        protocolVersion: protocolVersions[1],\n        maxPayload: 100 * 1024 * 1024,\n        perMessageDeflate: true,\n        followRedirects: false,\n        maxRedirects: 10,\n        ...options,\n        createConnection: undefined,\n        socketPath: undefined,\n        hostname: undefined,\n        protocol: undefined,\n        timeout: undefined,\n        method: undefined,\n        host: undefined,\n        path: undefined,\n        port: undefined\n    };\n    if (!protocolVersions.includes(opts.protocolVersion)) {\n        throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} ` + `(supported versions: ${protocolVersions.join(\", \")})`);\n    }\n    let parsedUrl;\n    if (address instanceof URL) {\n        parsedUrl = address;\n        websocket._url = address.href;\n    } else {\n        parsedUrl = new URL(address);\n        websocket._url = address;\n    }\n    const isUnixSocket = parsedUrl.protocol === \"ws+unix:\";\n    if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {\n        const err = new Error(`Invalid URL: ${websocket.url}`);\n        if (websocket._redirects === 0) {\n            throw err;\n        } else {\n            emitErrorAndClose(websocket, err);\n            return;\n        }\n    }\n    const isSecure = parsedUrl.protocol === \"wss:\" || parsedUrl.protocol === \"https:\";\n    const defaultPort = isSecure ? 443 : 80;\n    const key = randomBytes(16).toString(\"base64\");\n    const get = isSecure ? https.get : http.get;\n    let perMessageDeflate;\n    opts.createConnection = isSecure ? tlsConnect : netConnect;\n    opts.defaultPort = opts.defaultPort || defaultPort;\n    opts.port = parsedUrl.port || defaultPort;\n    opts.host = parsedUrl.hostname.startsWith(\"[\") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;\n    opts.headers = {\n        \"Sec-WebSocket-Version\": opts.protocolVersion,\n        \"Sec-WebSocket-Key\": key,\n        Connection: \"Upgrade\",\n        Upgrade: \"websocket\",\n        ...opts.headers\n    };\n    opts.path = parsedUrl.pathname + parsedUrl.search;\n    opts.timeout = opts.handshakeTimeout;\n    if (opts.perMessageDeflate) {\n        perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);\n        opts.headers[\"Sec-WebSocket-Extensions\"] = format({\n            [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n        });\n    }\n    if (protocols) {\n        opts.headers[\"Sec-WebSocket-Protocol\"] = protocols;\n    }\n    if (opts.origin) {\n        if (opts.protocolVersion < 13) {\n            opts.headers[\"Sec-WebSocket-Origin\"] = opts.origin;\n        } else {\n            opts.headers.Origin = opts.origin;\n        }\n    }\n    if (parsedUrl.username || parsedUrl.password) {\n        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n    }\n    if (isUnixSocket) {\n        const parts = opts.path.split(\":\");\n        opts.socketPath = parts[0];\n        opts.path = parts[1];\n    }\n    if (opts.followRedirects) {\n        if (websocket._redirects === 0) {\n            websocket._originalUnixSocket = isUnixSocket;\n            websocket._originalSecure = isSecure;\n            websocket._originalHostOrSocketPath = isUnixSocket ? opts.socketPath : parsedUrl.host;\n            const headers = options && options.headers;\n            //\n            // Shallow copy the user provided options so that headers can be changed\n            // without mutating the original object.\n            //\n            options = {\n                ...options,\n                headers: {}\n            };\n            if (headers) {\n                for (const [key, value] of Object.entries(headers)){\n                    options.headers[key.toLowerCase()] = value;\n                }\n            }\n        } else {\n            const isSameHost = isUnixSocket ? websocket._originalUnixSocket ? opts.socketPath === websocket._originalHostOrSocketPath : false : websocket._originalUnixSocket ? false : parsedUrl.host === websocket._originalHostOrSocketPath;\n            if (!isSameHost || websocket._originalSecure && !isSecure) {\n                //\n                // Match curl 7.77.0 behavior and drop the following headers. These\n                // headers are also dropped when following a redirect to a subdomain.\n                //\n                delete opts.headers.authorization;\n                delete opts.headers.cookie;\n                if (!isSameHost) delete opts.headers.host;\n                opts.auth = undefined;\n            }\n        }\n        //\n        // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n        // If the `Authorization` header is set, then there is nothing to do as it\n        // will take precedence.\n        //\n        if (opts.auth && !options.headers.authorization) {\n            options.headers.authorization = \"Basic \" + Buffer.from(opts.auth).toString(\"base64\");\n        }\n    }\n    let req = websocket._req = get(opts);\n    if (opts.timeout) {\n        req.on(\"timeout\", ()=>{\n            abortHandshake(websocket, req, \"Opening handshake has timed out\");\n        });\n    }\n    req.on(\"error\", (err)=>{\n        if (req === null || req.aborted) return;\n        req = websocket._req = null;\n        emitErrorAndClose(websocket, err);\n    });\n    req.on(\"response\", (res)=>{\n        const location = res.headers.location;\n        const statusCode = res.statusCode;\n        if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {\n            if (++websocket._redirects > opts.maxRedirects) {\n                abortHandshake(websocket, req, \"Maximum redirects exceeded\");\n                return;\n            }\n            req.abort();\n            let addr;\n            try {\n                addr = new URL(location, address);\n            } catch (err) {\n                emitErrorAndClose(websocket, err);\n                return;\n            }\n            initAsClient(websocket, addr, protocols, options);\n        } else if (!websocket.emit(\"unexpected-response\", req, res)) {\n            abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);\n        }\n    });\n    req.on(\"upgrade\", (res, socket, head)=>{\n        websocket.emit(\"upgrade\", res);\n        //\n        // The user may have closed the connection from a listener of the `upgrade`\n        // event.\n        //\n        if (websocket.readyState !== WebSocket.CONNECTING) return;\n        req = websocket._req = null;\n        const upgrade = res.headers.upgrade;\n        if (upgrade === undefined || upgrade.toLowerCase() !== \"websocket\") {\n            abortHandshake(websocket, socket, \"Invalid Upgrade header\");\n            return;\n        }\n        const digest = createHash(\"sha1\").update(key + GUID).digest(\"base64\");\n        if (res.headers[\"sec-websocket-accept\"] !== digest) {\n            abortHandshake(websocket, socket, \"Invalid Sec-WebSocket-Accept header\");\n            return;\n        }\n        const serverProt = res.headers[\"sec-websocket-protocol\"];\n        const protList = (protocols || \"\").split(/, */);\n        let protError;\n        if (!protocols && serverProt) {\n            protError = \"Server sent a subprotocol but none was requested\";\n        } else if (protocols && !serverProt) {\n            protError = \"Server sent no subprotocol\";\n        } else if (serverProt && !protList.includes(serverProt)) {\n            protError = \"Server sent an invalid subprotocol\";\n        }\n        if (protError) {\n            abortHandshake(websocket, socket, protError);\n            return;\n        }\n        if (serverProt) websocket._protocol = serverProt;\n        const secWebSocketExtensions = res.headers[\"sec-websocket-extensions\"];\n        if (secWebSocketExtensions !== undefined) {\n            if (!perMessageDeflate) {\n                const message = \"Server sent a Sec-WebSocket-Extensions header but no extension \" + \"was requested\";\n                abortHandshake(websocket, socket, message);\n                return;\n            }\n            let extensions;\n            try {\n                extensions = parse(secWebSocketExtensions);\n            } catch (err) {\n                const message = \"Invalid Sec-WebSocket-Extensions header\";\n                abortHandshake(websocket, socket, message);\n                return;\n            }\n            const extensionNames = Object.keys(extensions);\n            if (extensionNames.length) {\n                if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {\n                    const message = \"Server indicated an extension that was not requested\";\n                    abortHandshake(websocket, socket, message);\n                    return;\n                }\n                try {\n                    perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n                } catch (err) {\n                    const message = \"Invalid Sec-WebSocket-Extensions header\";\n                    abortHandshake(websocket, socket, message);\n                    return;\n                }\n                websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n            }\n        }\n        websocket.setSocket(socket, head, opts.maxPayload);\n    });\n}\n/**\n * Emit the `'error'` and `'close'` event.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */ function emitErrorAndClose(websocket, err) {\n    websocket._readyState = WebSocket.CLOSING;\n    websocket.emit(\"error\", err);\n    websocket.emitClose();\n}\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */ function netConnect(options) {\n    options.path = options.socketPath;\n    return net.connect(options);\n}\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */ function tlsConnect(options) {\n    options.path = undefined;\n    if (!options.servername && options.servername !== \"\") {\n        options.servername = net.isIP(options.host) ? \"\" : options.host;\n    }\n    return tls.connect(options);\n}\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */ function abortHandshake(websocket, stream, message) {\n    websocket._readyState = WebSocket.CLOSING;\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshake);\n    if (stream.setHeader) {\n        stream.abort();\n        if (stream.socket && !stream.socket.destroyed) {\n            //\n            // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n            // called after the request completed. See\n            // https://github.com/websockets/ws/issues/1869.\n            //\n            stream.socket.destroy();\n        }\n        stream.once(\"abort\", websocket.emitClose.bind(websocket));\n        websocket.emit(\"error\", err);\n    } else {\n        stream.destroy(err);\n        stream.once(\"error\", websocket.emit.bind(websocket, \"error\"));\n        stream.once(\"close\", websocket.emitClose.bind(websocket));\n    }\n}\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */ function sendAfterClose(websocket, data, cb) {\n    if (data) {\n        const length = toBuffer(data).length;\n        //\n        // The `_bufferedAmount` property is used only when the peer is a client and\n        // the opening handshake fails. Under these circumstances, in fact, the\n        // `setSocket()` method is not called, so the `_socket` and `_sender`\n        // properties are set to `null`.\n        //\n        if (websocket._socket) websocket._sender._bufferedBytes += length;\n        else websocket._bufferedAmount += length;\n    }\n    if (cb) {\n        const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} ` + `(${readyStates[websocket.readyState]})`);\n        cb(err);\n    }\n}\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {String} reason The reason for closing\n * @private\n */ function receiverOnConclude(code, reason) {\n    const websocket = this[kWebSocket];\n    websocket._closeFrameReceived = true;\n    websocket._closeMessage = reason;\n    websocket._closeCode = code;\n    if (websocket._socket[kWebSocket] === undefined) return;\n    websocket._socket.removeListener(\"data\", socketOnData);\n    process.nextTick(resume, websocket._socket);\n    if (code === 1005) websocket.close();\n    else websocket.close(code, reason);\n}\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */ function receiverOnDrain() {\n    this[kWebSocket]._socket.resume();\n}\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */ function receiverOnError(err) {\n    const websocket = this[kWebSocket];\n    if (websocket._socket[kWebSocket] !== undefined) {\n        websocket._socket.removeListener(\"data\", socketOnData);\n        //\n        // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n        // https://github.com/websockets/ws/issues/1940.\n        //\n        process.nextTick(resume, websocket._socket);\n        websocket.close(err[kStatusCode]);\n    }\n    websocket.emit(\"error\", err);\n}\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */ function receiverOnFinish() {\n    this[kWebSocket].emitClose();\n}\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message\n * @private\n */ function receiverOnMessage(data) {\n    this[kWebSocket].emit(\"message\", data);\n}\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */ function receiverOnPing(data) {\n    const websocket = this[kWebSocket];\n    websocket.pong(data, !websocket._isServer, NOOP);\n    websocket.emit(\"ping\", data);\n}\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */ function receiverOnPong(data) {\n    this[kWebSocket].emit(\"pong\", data);\n}\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */ function resume(stream) {\n    stream.resume();\n}\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */ function socketOnClose() {\n    const websocket = this[kWebSocket];\n    this.removeListener(\"close\", socketOnClose);\n    this.removeListener(\"data\", socketOnData);\n    this.removeListener(\"end\", socketOnEnd);\n    websocket._readyState = WebSocket.CLOSING;\n    let chunk;\n    //\n    // The close frame might not have been received or the `'end'` event emitted,\n    // for example, if the socket was destroyed due to an error. Ensure that the\n    // `receiver` stream is closed after writing any remaining buffered data to\n    // it. If the readable side of the socket is in flowing mode then there is no\n    // buffered data as everything has been already written and `readable.read()`\n    // will return `null`. If instead, the socket is paused, any possible buffered\n    // data will be read as a single chunk.\n    //\n    if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {\n        websocket._receiver.write(chunk);\n    }\n    websocket._receiver.end();\n    this[kWebSocket] = undefined;\n    clearTimeout(websocket._closeTimer);\n    if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {\n        websocket.emitClose();\n    } else {\n        websocket._receiver.on(\"error\", receiverOnFinish);\n        websocket._receiver.on(\"finish\", receiverOnFinish);\n    }\n}\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function socketOnData(chunk) {\n    if (!this[kWebSocket]._receiver.write(chunk)) {\n        this.pause();\n    }\n}\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */ function socketOnEnd() {\n    const websocket = this[kWebSocket];\n    websocket._readyState = WebSocket.CLOSING;\n    websocket._receiver.end();\n    this.end();\n}\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */ function socketOnError() {\n    const websocket = this[kWebSocket];\n    this.removeListener(\"error\", socketOnError);\n    this.on(\"error\", NOOP);\n    if (websocket) {\n        websocket._readyState = WebSocket.CLOSING;\n        this.destroy();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js":
/*!*************************************************************!*\
  !*** ./node_modules/@walletconnect/logger/dist/index.es.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_LOG_SIZE_IN_BYTES_DEFAULT: () => (/* binding */ l),\n/* harmony export */   PINO_CUSTOM_CONTEXT_KEY: () => (/* binding */ n),\n/* harmony export */   PINO_LOGGER_DEFAULTS: () => (/* binding */ c),\n/* harmony export */   formatChildLoggerContext: () => (/* binding */ w),\n/* harmony export */   generateChildLogger: () => (/* binding */ E),\n/* harmony export */   generateClientLogger: () => (/* binding */ C),\n/* harmony export */   generatePlatformLogger: () => (/* binding */ A),\n/* harmony export */   generateServerLogger: () => (/* binding */ I),\n/* harmony export */   getBrowserLoggerContext: () => (/* binding */ v),\n/* harmony export */   getDefaultLoggerOptions: () => (/* binding */ k),\n/* harmony export */   getLoggerContext: () => (/* binding */ y),\n/* harmony export */   pino: () => (/* reexport default from dynamic */ pino__WEBPACK_IMPORTED_MODULE_0___default.a),\n/* harmony export */   setBrowserLoggerContext: () => (/* binding */ b)\n/* harmony export */ });\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pino */ \"(ssr)/./node_modules/pino/pino.js\");\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pino__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\n\nconst c = {\n    level: \"info\"\n}, n = \"custom_context\", l = 1e3 * 1024;\nclass O {\n    constructor(e){\n        this.nodeValue = e, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;\n    }\n    get value() {\n        return this.nodeValue;\n    }\n    get size() {\n        return this.sizeInBytes;\n    }\n}\nclass d {\n    constructor(e){\n        this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e, this.sizeInBytes = 0;\n    }\n    append(e) {\n        const t = new O(e);\n        if (t.size > this.maxSizeInBytes) throw new Error(`[LinkedList] Value too big to insert into list: ${e} with size ${t.size}`);\n        for(; this.size + t.size > this.maxSizeInBytes;)this.shift();\n        this.head ? (this.tail && (this.tail.next = t), this.tail = t) : (this.head = t, this.tail = t), this.lengthInNodes++, this.sizeInBytes += t.size;\n    }\n    shift() {\n        if (!this.head) return;\n        const e = this.head;\n        this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e.size;\n    }\n    toArray() {\n        const e = [];\n        let t = this.head;\n        for(; t !== null;)e.push(t.value), t = t.next;\n        return e;\n    }\n    get length() {\n        return this.lengthInNodes;\n    }\n    get size() {\n        return this.sizeInBytes;\n    }\n    toOrderedArray() {\n        return Array.from(this);\n    }\n    [Symbol.iterator]() {\n        let e = this.head;\n        return {\n            next: ()=>{\n                if (!e) return {\n                    done: !0,\n                    value: null\n                };\n                const t = e.value;\n                return e = e.next, {\n                    done: !1,\n                    value: t\n                };\n            }\n        };\n    }\n}\nclass L {\n    constructor(e, t = l){\n        this.level = e ?? \"error\", this.levelValue = pino__WEBPACK_IMPORTED_MODULE_0__.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t, this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);\n    }\n    forwardToConsole(e, t) {\n        t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.error ? console.error(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.warn ? console.warn(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.debug ? console.debug(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.trace ? console.trace(e) : console.log(e);\n    }\n    appendToLogs(e) {\n        this.logs.append((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)({\n            timestamp: new Date().toISOString(),\n            log: e\n        }));\n        const t = typeof e == \"string\" ? JSON.parse(e).level : e.level;\n        t >= this.levelValue && this.forwardToConsole(e, t);\n    }\n    getLogs() {\n        return this.logs;\n    }\n    clearLogs() {\n        this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);\n    }\n    getLogArray() {\n        return Array.from(this.logs);\n    }\n    logsToBlob(e) {\n        const t = this.getLogArray();\n        return t.push((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)({\n            extraMetadata: e\n        })), new Blob(t, {\n            type: \"application/json\"\n        });\n    }\n}\nclass m {\n    constructor(e, t = l){\n        this.baseChunkLogger = new L(e, t);\n    }\n    write(e) {\n        this.baseChunkLogger.appendToLogs(e);\n    }\n    getLogs() {\n        return this.baseChunkLogger.getLogs();\n    }\n    clearLogs() {\n        this.baseChunkLogger.clearLogs();\n    }\n    getLogArray() {\n        return this.baseChunkLogger.getLogArray();\n    }\n    logsToBlob(e) {\n        return this.baseChunkLogger.logsToBlob(e);\n    }\n    downloadLogsBlobInBrowser(e) {\n        const t = URL.createObjectURL(this.logsToBlob(e)), o = document.createElement(\"a\");\n        o.href = t, o.download = `walletconnect-logs-${new Date().toISOString()}.txt`, document.body.appendChild(o), o.click(), document.body.removeChild(o), URL.revokeObjectURL(t);\n    }\n}\nclass B {\n    constructor(e, t = l){\n        this.baseChunkLogger = new L(e, t);\n    }\n    write(e) {\n        this.baseChunkLogger.appendToLogs(e);\n    }\n    getLogs() {\n        return this.baseChunkLogger.getLogs();\n    }\n    clearLogs() {\n        this.baseChunkLogger.clearLogs();\n    }\n    getLogArray() {\n        return this.baseChunkLogger.getLogArray();\n    }\n    logsToBlob(e) {\n        return this.baseChunkLogger.logsToBlob(e);\n    }\n}\nvar x = Object.defineProperty, S = Object.defineProperties, _ = Object.getOwnPropertyDescriptors, p = Object.getOwnPropertySymbols, T = Object.prototype.hasOwnProperty, z = Object.prototype.propertyIsEnumerable, f = (r, e, t)=>e in r ? x(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, i = (r, e)=>{\n    for(var t in e || (e = {}))T.call(e, t) && f(r, t, e[t]);\n    if (p) for (var t of p(e))z.call(e, t) && f(r, t, e[t]);\n    return r;\n}, g = (r, e)=>S(r, _(e));\nfunction k(r) {\n    return g(i({}, r), {\n        level: r?.level || c.level\n    });\n}\nfunction v(r, e = n) {\n    return r[e] || \"\";\n}\nfunction b(r, e, t = n) {\n    return r[t] = e, r;\n}\nfunction y(r, e = n) {\n    let t = \"\";\n    return typeof r.bindings > \"u\" ? t = v(r, e) : t = r.bindings().context || \"\", t;\n}\nfunction w(r, e, t = n) {\n    const o = y(r, t);\n    return o.trim() ? `${o}/${e}` : e;\n}\nfunction E(r, e, t = n) {\n    const o = w(r, e, t), a = r.child({\n        context: o\n    });\n    return b(a, o, t);\n}\nfunction C(r) {\n    var e, t;\n    const o = new m((e = r.opts) == null ? void 0 : e.level, r.maxSizeInBytes);\n    return {\n        logger: pino__WEBPACK_IMPORTED_MODULE_0___default()(g(i({}, r.opts), {\n            level: \"trace\",\n            browser: g(i({}, (t = r.opts) == null ? void 0 : t.browser), {\n                write: (a)=>o.write(a)\n            })\n        })),\n        chunkLoggerController: o\n    };\n}\nfunction I(r) {\n    var e;\n    const t = new B((e = r.opts) == null ? void 0 : e.level, r.maxSizeInBytes);\n    return {\n        logger: pino__WEBPACK_IMPORTED_MODULE_0___default()(g(i({}, r.opts), {\n            level: \"trace\"\n        }), t),\n        chunkLoggerController: t\n    };\n}\nfunction A(r) {\n    return typeof r.loggerOverride < \"u\" && typeof r.loggerOverride != \"string\" ? {\n        logger: r.loggerOverride,\n        chunkLoggerController: null\n    } :  false ? 0 : I(r);\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-api/dist/index.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-api/dist/index.es.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RELAY_JSONRPC: () => (/* binding */ C),\n/* harmony export */   isPublishMethod: () => (/* binding */ c),\n/* harmony export */   isPublishParams: () => (/* binding */ h),\n/* harmony export */   isPublishRequest: () => (/* binding */ P),\n/* harmony export */   isSubscribeMethod: () => (/* binding */ b),\n/* harmony export */   isSubscribeParams: () => (/* binding */ a),\n/* harmony export */   isSubscribeRequest: () => (/* binding */ R),\n/* harmony export */   isSubscriptionMethod: () => (/* binding */ m),\n/* harmony export */   isSubscriptionParams: () => (/* binding */ d),\n/* harmony export */   isSubscriptionRequest: () => (/* binding */ S),\n/* harmony export */   isUnsubscribeMethod: () => (/* binding */ o),\n/* harmony export */   isUnsubscribeParams: () => (/* binding */ p),\n/* harmony export */   isUnsubscribeRequest: () => (/* binding */ _),\n/* harmony export */   parsePublishRequest: () => (/* binding */ q),\n/* harmony export */   parseSubscribeRequest: () => (/* binding */ g),\n/* harmony export */   parseSubscriptionRequest: () => (/* binding */ k),\n/* harmony export */   parseUnsubscribeRequest: () => (/* binding */ E)\n/* harmony export */ });\nfunction e(s, r, i = \"string\") {\n    if (!s[r] || typeof s[r] !== i) throw new Error(`Missing or invalid \"${r}\" param`);\n}\nfunction l(s, r) {\n    let i = !0;\n    return r.forEach((t)=>{\n        t in s || (i = !1);\n    }), i;\n}\nfunction f(s, r) {\n    return Array.isArray(s) ? s.length === r : Object.keys(s).length === r;\n}\nfunction w(s, r) {\n    return Array.isArray(s) ? s.length >= r : Object.keys(s).length >= r;\n}\nfunction u(s, r, i) {\n    return (i.length ? w(s, r.length) : f(s, r.length)) ? l(s, r) : !1;\n}\nfunction n(s, r, i = \"_\") {\n    const t = s.split(i);\n    return t[t.length - 1].trim().toLowerCase() === r.trim().toLowerCase();\n}\nfunction R(s) {\n    return b(s.method) && a(s.params);\n}\nfunction b(s) {\n    return n(s, \"subscribe\");\n}\nfunction a(s) {\n    return u(s, [\n        \"topic\"\n    ], []);\n}\nfunction P(s) {\n    return c(s.method) && h(s.params);\n}\nfunction c(s) {\n    return n(s, \"publish\");\n}\nfunction h(s) {\n    return u(s, [\n        \"message\",\n        \"topic\",\n        \"ttl\"\n    ], [\n        \"prompt\",\n        \"tag\"\n    ]);\n}\nfunction _(s) {\n    return o(s.method) && p(s.params);\n}\nfunction o(s) {\n    return n(s, \"unsubscribe\");\n}\nfunction p(s) {\n    return u(s, [\n        \"id\",\n        \"topic\"\n    ], []);\n}\nfunction S(s) {\n    return m(s.method) && d(s.params);\n}\nfunction m(s) {\n    return n(s, \"subscription\");\n}\nfunction d(s) {\n    return u(s, [\n        \"id\",\n        \"data\"\n    ], []);\n}\nfunction g(s) {\n    if (!b(s.method)) throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n    if (!a(s.params)) throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n    const r = s.params;\n    return e(r, \"topic\"), r;\n}\nfunction q(s) {\n    if (!c(s.method)) throw new Error(\"JSON-RPC Request has invalid publish method\");\n    if (!h(s.params)) throw new Error(\"JSON-RPC Request has invalid publish params\");\n    const r = s.params;\n    return e(r, \"topic\"), e(r, \"message\"), e(r, \"ttl\", \"number\"), r;\n}\nfunction E(s) {\n    if (!o(s.method)) throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n    if (!p(s.params)) throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n    const r = s.params;\n    return e(r, \"id\"), r;\n}\nfunction k(s) {\n    if (!m(s.method)) throw new Error(\"JSON-RPC Request has invalid subscription method\");\n    if (!d(s.params)) throw new Error(\"JSON-RPC Request has invalid subscription params\");\n    const r = s.params;\n    return e(r, \"id\"), e(r, \"data\"), r;\n}\nconst C = {\n    waku: {\n        publish: \"waku_publish\",\n        batchPublish: \"waku_batchPublish\",\n        subscribe: \"waku_subscribe\",\n        batchSubscribe: \"waku_batchSubscribe\",\n        subscription: \"waku_subscription\",\n        unsubscribe: \"waku_unsubscribe\",\n        batchUnsubscribe: \"waku_batchUnsubscribe\",\n        batchFetchMessages: \"waku_batchFetchMessages\"\n    },\n    irn: {\n        publish: \"irn_publish\",\n        batchPublish: \"irn_batchPublish\",\n        subscribe: \"irn_subscribe\",\n        batchSubscribe: \"irn_batchSubscribe\",\n        subscription: \"irn_subscription\",\n        unsubscribe: \"irn_unsubscribe\",\n        batchUnsubscribe: \"irn_batchUnsubscribe\",\n        batchFetchMessages: \"irn_batchFetchMessages\"\n    },\n    iridium: {\n        publish: \"iridium_publish\",\n        batchPublish: \"iridium_batchPublish\",\n        subscribe: \"iridium_subscribe\",\n        batchSubscribe: \"iridium_batchSubscribe\",\n        subscription: \"iridium_subscription\",\n        unsubscribe: \"iridium_unsubscribe\",\n        batchUnsubscribe: \"iridium_batchUnsubscribe\",\n        batchFetchMessages: \"iridium_batchFetchMessages\"\n    }\n};\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXBpL2Rpc3QvaW5kZXguZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxTQUFTQSxFQUFFQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsSUFBRSxRQUFRO0lBQUUsSUFBRyxDQUFDRixDQUFDLENBQUNDLEVBQUUsSUFBRSxPQUFPRCxDQUFDLENBQUNDLEVBQUUsS0FBR0MsR0FBRSxNQUFNLElBQUlDLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRUYsRUFBRSxPQUFPLENBQUM7QUFBQztBQUFDLFNBQVNHLEVBQUVKLENBQUMsRUFBQ0MsQ0FBQztJQUFFLElBQUlDLElBQUUsQ0FBQztJQUFFLE9BQU9ELEVBQUVJLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFBSUEsS0FBS04sS0FBSUUsQ0FBQUEsSUFBRSxDQUFDO0lBQUUsSUFBR0E7QUFBQztBQUFDLFNBQVNLLEVBQUVQLENBQUMsRUFBQ0MsQ0FBQztJQUFFLE9BQU9PLE1BQU1DLE9BQU8sQ0FBQ1QsS0FBR0EsRUFBRVUsTUFBTSxLQUFHVCxJQUFFVSxPQUFPQyxJQUFJLENBQUNaLEdBQUdVLE1BQU0sS0FBR1Q7QUFBQztBQUFDLFNBQVNZLEVBQUViLENBQUMsRUFBQ0MsQ0FBQztJQUFFLE9BQU9PLE1BQU1DLE9BQU8sQ0FBQ1QsS0FBR0EsRUFBRVUsTUFBTSxJQUFFVCxJQUFFVSxPQUFPQyxJQUFJLENBQUNaLEdBQUdVLE1BQU0sSUFBRVQ7QUFBQztBQUFDLFNBQVNhLEVBQUVkLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDO0lBQUUsT0FBTSxDQUFDQSxFQUFFUSxNQUFNLEdBQUNHLEVBQUViLEdBQUVDLEVBQUVTLE1BQU0sSUFBRUgsRUFBRVAsR0FBRUMsRUFBRVMsTUFBTSxLQUFHTixFQUFFSixHQUFFQyxLQUFHLENBQUM7QUFBQztBQUFDLFNBQVNjLEVBQUVmLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxJQUFFLEdBQUc7SUFBRSxNQUFNSSxJQUFFTixFQUFFZ0IsS0FBSyxDQUFDZDtJQUFHLE9BQU9JLENBQUMsQ0FBQ0EsRUFBRUksTUFBTSxHQUFDLEVBQUUsQ0FBQ08sSUFBSSxHQUFHQyxXQUFXLE9BQUtqQixFQUFFZ0IsSUFBSSxHQUFHQyxXQUFXO0FBQUU7QUFBQyxTQUFTQyxFQUFFbkIsQ0FBQztJQUFFLE9BQU9vQixFQUFFcEIsRUFBRXFCLE1BQU0sS0FBR0MsRUFBRXRCLEVBQUV1QixNQUFNO0FBQUM7QUFBQyxTQUFTSCxFQUFFcEIsQ0FBQztJQUFFLE9BQU9lLEVBQUVmLEdBQUU7QUFBWTtBQUFDLFNBQVNzQixFQUFFdEIsQ0FBQztJQUFFLE9BQU9jLEVBQUVkLEdBQUU7UUFBQztLQUFRLEVBQUMsRUFBRTtBQUFDO0FBQUMsU0FBU3dCLEVBQUV4QixDQUFDO0lBQUUsT0FBT3lCLEVBQUV6QixFQUFFcUIsTUFBTSxLQUFHSyxFQUFFMUIsRUFBRXVCLE1BQU07QUFBQztBQUFDLFNBQVNFLEVBQUV6QixDQUFDO0lBQUUsT0FBT2UsRUFBRWYsR0FBRTtBQUFVO0FBQUMsU0FBUzBCLEVBQUUxQixDQUFDO0lBQUUsT0FBT2MsRUFBRWQsR0FBRTtRQUFDO1FBQVU7UUFBUTtLQUFNLEVBQUM7UUFBQztRQUFTO0tBQU07QUFBQztBQUFDLFNBQVMyQixFQUFFM0IsQ0FBQztJQUFFLE9BQU80QixFQUFFNUIsRUFBRXFCLE1BQU0sS0FBR1EsRUFBRTdCLEVBQUV1QixNQUFNO0FBQUM7QUFBQyxTQUFTSyxFQUFFNUIsQ0FBQztJQUFFLE9BQU9lLEVBQUVmLEdBQUU7QUFBYztBQUFDLFNBQVM2QixFQUFFN0IsQ0FBQztJQUFFLE9BQU9jLEVBQUVkLEdBQUU7UUFBQztRQUFLO0tBQVEsRUFBQyxFQUFFO0FBQUM7QUFBQyxTQUFTOEIsRUFBRTlCLENBQUM7SUFBRSxPQUFPK0IsRUFBRS9CLEVBQUVxQixNQUFNLEtBQUdXLEVBQUVoQyxFQUFFdUIsTUFBTTtBQUFDO0FBQUMsU0FBU1EsRUFBRS9CLENBQUM7SUFBRSxPQUFPZSxFQUFFZixHQUFFO0FBQWU7QUFBQyxTQUFTZ0MsRUFBRWhDLENBQUM7SUFBRSxPQUFPYyxFQUFFZCxHQUFFO1FBQUM7UUFBSztLQUFPLEVBQUMsRUFBRTtBQUFDO0FBQUMsU0FBU2lDLEVBQUVqQyxDQUFDO0lBQUUsSUFBRyxDQUFDb0IsRUFBRXBCLEVBQUVxQixNQUFNLEdBQUUsTUFBTSxJQUFJbEIsTUFBTTtJQUFpRCxJQUFHLENBQUNtQixFQUFFdEIsRUFBRXVCLE1BQU0sR0FBRSxNQUFNLElBQUlwQixNQUFNO0lBQWlELE1BQU1GLElBQUVELEVBQUV1QixNQUFNO0lBQUMsT0FBT3hCLEVBQUVFLEdBQUUsVUFBU0E7QUFBQztBQUFDLFNBQVNpQyxFQUFFbEMsQ0FBQztJQUFFLElBQUcsQ0FBQ3lCLEVBQUV6QixFQUFFcUIsTUFBTSxHQUFFLE1BQU0sSUFBSWxCLE1BQU07SUFBK0MsSUFBRyxDQUFDdUIsRUFBRTFCLEVBQUV1QixNQUFNLEdBQUUsTUFBTSxJQUFJcEIsTUFBTTtJQUErQyxNQUFNRixJQUFFRCxFQUFFdUIsTUFBTTtJQUFDLE9BQU94QixFQUFFRSxHQUFFLFVBQVNGLEVBQUVFLEdBQUUsWUFBV0YsRUFBRUUsR0FBRSxPQUFNLFdBQVVBO0FBQUM7QUFBQyxTQUFTa0MsRUFBRW5DLENBQUM7SUFBRSxJQUFHLENBQUM0QixFQUFFNUIsRUFBRXFCLE1BQU0sR0FBRSxNQUFNLElBQUlsQixNQUFNO0lBQW1ELElBQUcsQ0FBQzBCLEVBQUU3QixFQUFFdUIsTUFBTSxHQUFFLE1BQU0sSUFBSXBCLE1BQU07SUFBbUQsTUFBTUYsSUFBRUQsRUFBRXVCLE1BQU07SUFBQyxPQUFPeEIsRUFBRUUsR0FBRSxPQUFNQTtBQUFDO0FBQUMsU0FBU21DLEVBQUVwQyxDQUFDO0lBQUUsSUFBRyxDQUFDK0IsRUFBRS9CLEVBQUVxQixNQUFNLEdBQUUsTUFBTSxJQUFJbEIsTUFBTTtJQUFvRCxJQUFHLENBQUM2QixFQUFFaEMsRUFBRXVCLE1BQU0sR0FBRSxNQUFNLElBQUlwQixNQUFNO0lBQW9ELE1BQU1GLElBQUVELEVBQUV1QixNQUFNO0lBQUMsT0FBT3hCLEVBQUVFLEdBQUUsT0FBTUYsRUFBRUUsR0FBRSxTQUFRQTtBQUFDO0FBQUMsTUFBTW9DLElBQUU7SUFBQ0MsTUFBSztRQUFDQyxTQUFRO1FBQWVDLGNBQWE7UUFBb0JDLFdBQVU7UUFBaUJDLGdCQUFlO1FBQXNCQyxjQUFhO1FBQW9CQyxhQUFZO1FBQW1CQyxrQkFBaUI7UUFBd0JDLG9CQUFtQjtJQUF5QjtJQUFFQyxLQUFJO1FBQUNSLFNBQVE7UUFBY0MsY0FBYTtRQUFtQkMsV0FBVTtRQUFnQkMsZ0JBQWU7UUFBcUJDLGNBQWE7UUFBbUJDLGFBQVk7UUFBa0JDLGtCQUFpQjtRQUF1QkMsb0JBQW1CO0lBQXdCO0lBQUVFLFNBQVE7UUFBQ1QsU0FBUTtRQUFrQkMsY0FBYTtRQUF1QkMsV0FBVTtRQUFvQkMsZ0JBQWU7UUFBeUJDLGNBQWE7UUFBdUJDLGFBQVk7UUFBc0JDLGtCQUFpQjtRQUEyQkMsb0JBQW1CO0lBQTRCO0FBQUM7QUFBNmEsQ0FDanFHLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9yZWxheS1hcGkvZGlzdC9pbmRleC5lcy5qcz80OTdkIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGUocyxyLGk9XCJzdHJpbmdcIil7aWYoIXNbcl18fHR5cGVvZiBzW3JdIT09aSl0aHJvdyBuZXcgRXJyb3IoYE1pc3Npbmcgb3IgaW52YWxpZCBcIiR7cn1cIiBwYXJhbWApfWZ1bmN0aW9uIGwocyxyKXtsZXQgaT0hMDtyZXR1cm4gci5mb3JFYWNoKHQ9Pnt0IGluIHN8fChpPSExKX0pLGl9ZnVuY3Rpb24gZihzLHIpe3JldHVybiBBcnJheS5pc0FycmF5KHMpP3MubGVuZ3RoPT09cjpPYmplY3Qua2V5cyhzKS5sZW5ndGg9PT1yfWZ1bmN0aW9uIHcocyxyKXtyZXR1cm4gQXJyYXkuaXNBcnJheShzKT9zLmxlbmd0aD49cjpPYmplY3Qua2V5cyhzKS5sZW5ndGg+PXJ9ZnVuY3Rpb24gdShzLHIsaSl7cmV0dXJuKGkubGVuZ3RoP3cocyxyLmxlbmd0aCk6ZihzLHIubGVuZ3RoKSk/bChzLHIpOiExfWZ1bmN0aW9uIG4ocyxyLGk9XCJfXCIpe2NvbnN0IHQ9cy5zcGxpdChpKTtyZXR1cm4gdFt0Lmxlbmd0aC0xXS50cmltKCkudG9Mb3dlckNhc2UoKT09PXIudHJpbSgpLnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gUihzKXtyZXR1cm4gYihzLm1ldGhvZCkmJmEocy5wYXJhbXMpfWZ1bmN0aW9uIGIocyl7cmV0dXJuIG4ocyxcInN1YnNjcmliZVwiKX1mdW5jdGlvbiBhKHMpe3JldHVybiB1KHMsW1widG9waWNcIl0sW10pfWZ1bmN0aW9uIFAocyl7cmV0dXJuIGMocy5tZXRob2QpJiZoKHMucGFyYW1zKX1mdW5jdGlvbiBjKHMpe3JldHVybiBuKHMsXCJwdWJsaXNoXCIpfWZ1bmN0aW9uIGgocyl7cmV0dXJuIHUocyxbXCJtZXNzYWdlXCIsXCJ0b3BpY1wiLFwidHRsXCJdLFtcInByb21wdFwiLFwidGFnXCJdKX1mdW5jdGlvbiBfKHMpe3JldHVybiBvKHMubWV0aG9kKSYmcChzLnBhcmFtcyl9ZnVuY3Rpb24gbyhzKXtyZXR1cm4gbihzLFwidW5zdWJzY3JpYmVcIil9ZnVuY3Rpb24gcChzKXtyZXR1cm4gdShzLFtcImlkXCIsXCJ0b3BpY1wiXSxbXSl9ZnVuY3Rpb24gUyhzKXtyZXR1cm4gbShzLm1ldGhvZCkmJmQocy5wYXJhbXMpfWZ1bmN0aW9uIG0ocyl7cmV0dXJuIG4ocyxcInN1YnNjcmlwdGlvblwiKX1mdW5jdGlvbiBkKHMpe3JldHVybiB1KHMsW1wiaWRcIixcImRhdGFcIl0sW10pfWZ1bmN0aW9uIGcocyl7aWYoIWIocy5tZXRob2QpKXRocm93IG5ldyBFcnJvcihcIkpTT04tUlBDIFJlcXVlc3QgaGFzIGludmFsaWQgc3Vic2NyaWJlIG1ldGhvZFwiKTtpZighYShzLnBhcmFtcykpdGhyb3cgbmV3IEVycm9yKFwiSlNPTi1SUEMgUmVxdWVzdCBoYXMgaW52YWxpZCBzdWJzY3JpYmUgcGFyYW1zXCIpO2NvbnN0IHI9cy5wYXJhbXM7cmV0dXJuIGUocixcInRvcGljXCIpLHJ9ZnVuY3Rpb24gcShzKXtpZighYyhzLm1ldGhvZCkpdGhyb3cgbmV3IEVycm9yKFwiSlNPTi1SUEMgUmVxdWVzdCBoYXMgaW52YWxpZCBwdWJsaXNoIG1ldGhvZFwiKTtpZighaChzLnBhcmFtcykpdGhyb3cgbmV3IEVycm9yKFwiSlNPTi1SUEMgUmVxdWVzdCBoYXMgaW52YWxpZCBwdWJsaXNoIHBhcmFtc1wiKTtjb25zdCByPXMucGFyYW1zO3JldHVybiBlKHIsXCJ0b3BpY1wiKSxlKHIsXCJtZXNzYWdlXCIpLGUocixcInR0bFwiLFwibnVtYmVyXCIpLHJ9ZnVuY3Rpb24gRShzKXtpZighbyhzLm1ldGhvZCkpdGhyb3cgbmV3IEVycm9yKFwiSlNPTi1SUEMgUmVxdWVzdCBoYXMgaW52YWxpZCB1bnN1YnNjcmliZSBtZXRob2RcIik7aWYoIXAocy5wYXJhbXMpKXRocm93IG5ldyBFcnJvcihcIkpTT04tUlBDIFJlcXVlc3QgaGFzIGludmFsaWQgdW5zdWJzY3JpYmUgcGFyYW1zXCIpO2NvbnN0IHI9cy5wYXJhbXM7cmV0dXJuIGUocixcImlkXCIpLHJ9ZnVuY3Rpb24gayhzKXtpZighbShzLm1ldGhvZCkpdGhyb3cgbmV3IEVycm9yKFwiSlNPTi1SUEMgUmVxdWVzdCBoYXMgaW52YWxpZCBzdWJzY3JpcHRpb24gbWV0aG9kXCIpO2lmKCFkKHMucGFyYW1zKSl0aHJvdyBuZXcgRXJyb3IoXCJKU09OLVJQQyBSZXF1ZXN0IGhhcyBpbnZhbGlkIHN1YnNjcmlwdGlvbiBwYXJhbXNcIik7Y29uc3Qgcj1zLnBhcmFtcztyZXR1cm4gZShyLFwiaWRcIiksZShyLFwiZGF0YVwiKSxyfWNvbnN0IEM9e3dha3U6e3B1Ymxpc2g6XCJ3YWt1X3B1Ymxpc2hcIixiYXRjaFB1Ymxpc2g6XCJ3YWt1X2JhdGNoUHVibGlzaFwiLHN1YnNjcmliZTpcIndha3Vfc3Vic2NyaWJlXCIsYmF0Y2hTdWJzY3JpYmU6XCJ3YWt1X2JhdGNoU3Vic2NyaWJlXCIsc3Vic2NyaXB0aW9uOlwid2FrdV9zdWJzY3JpcHRpb25cIix1bnN1YnNjcmliZTpcIndha3VfdW5zdWJzY3JpYmVcIixiYXRjaFVuc3Vic2NyaWJlOlwid2FrdV9iYXRjaFVuc3Vic2NyaWJlXCIsYmF0Y2hGZXRjaE1lc3NhZ2VzOlwid2FrdV9iYXRjaEZldGNoTWVzc2FnZXNcIn0saXJuOntwdWJsaXNoOlwiaXJuX3B1Ymxpc2hcIixiYXRjaFB1Ymxpc2g6XCJpcm5fYmF0Y2hQdWJsaXNoXCIsc3Vic2NyaWJlOlwiaXJuX3N1YnNjcmliZVwiLGJhdGNoU3Vic2NyaWJlOlwiaXJuX2JhdGNoU3Vic2NyaWJlXCIsc3Vic2NyaXB0aW9uOlwiaXJuX3N1YnNjcmlwdGlvblwiLHVuc3Vic2NyaWJlOlwiaXJuX3Vuc3Vic2NyaWJlXCIsYmF0Y2hVbnN1YnNjcmliZTpcImlybl9iYXRjaFVuc3Vic2NyaWJlXCIsYmF0Y2hGZXRjaE1lc3NhZ2VzOlwiaXJuX2JhdGNoRmV0Y2hNZXNzYWdlc1wifSxpcmlkaXVtOntwdWJsaXNoOlwiaXJpZGl1bV9wdWJsaXNoXCIsYmF0Y2hQdWJsaXNoOlwiaXJpZGl1bV9iYXRjaFB1Ymxpc2hcIixzdWJzY3JpYmU6XCJpcmlkaXVtX3N1YnNjcmliZVwiLGJhdGNoU3Vic2NyaWJlOlwiaXJpZGl1bV9iYXRjaFN1YnNjcmliZVwiLHN1YnNjcmlwdGlvbjpcImlyaWRpdW1fc3Vic2NyaXB0aW9uXCIsdW5zdWJzY3JpYmU6XCJpcmlkaXVtX3Vuc3Vic2NyaWJlXCIsYmF0Y2hVbnN1YnNjcmliZTpcImlyaWRpdW1fYmF0Y2hVbnN1YnNjcmliZVwiLGJhdGNoRmV0Y2hNZXNzYWdlczpcImlyaWRpdW1fYmF0Y2hGZXRjaE1lc3NhZ2VzXCJ9fTtleHBvcnR7QyBhcyBSRUxBWV9KU09OUlBDLGMgYXMgaXNQdWJsaXNoTWV0aG9kLGggYXMgaXNQdWJsaXNoUGFyYW1zLFAgYXMgaXNQdWJsaXNoUmVxdWVzdCxiIGFzIGlzU3Vic2NyaWJlTWV0aG9kLGEgYXMgaXNTdWJzY3JpYmVQYXJhbXMsUiBhcyBpc1N1YnNjcmliZVJlcXVlc3QsbSBhcyBpc1N1YnNjcmlwdGlvbk1ldGhvZCxkIGFzIGlzU3Vic2NyaXB0aW9uUGFyYW1zLFMgYXMgaXNTdWJzY3JpcHRpb25SZXF1ZXN0LG8gYXMgaXNVbnN1YnNjcmliZU1ldGhvZCxwIGFzIGlzVW5zdWJzY3JpYmVQYXJhbXMsXyBhcyBpc1Vuc3Vic2NyaWJlUmVxdWVzdCxxIGFzIHBhcnNlUHVibGlzaFJlcXVlc3QsZyBhcyBwYXJzZVN1YnNjcmliZVJlcXVlc3QsayBhcyBwYXJzZVN1YnNjcmlwdGlvblJlcXVlc3QsRSBhcyBwYXJzZVVuc3Vic2NyaWJlUmVxdWVzdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJlIiwicyIsInIiLCJpIiwiRXJyb3IiLCJsIiwiZm9yRWFjaCIsInQiLCJmIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiT2JqZWN0Iiwia2V5cyIsInciLCJ1IiwibiIsInNwbGl0IiwidHJpbSIsInRvTG93ZXJDYXNlIiwiUiIsImIiLCJtZXRob2QiLCJhIiwicGFyYW1zIiwiUCIsImMiLCJoIiwiXyIsIm8iLCJwIiwiUyIsIm0iLCJkIiwiZyIsInEiLCJFIiwiayIsIkMiLCJ3YWt1IiwicHVibGlzaCIsImJhdGNoUHVibGlzaCIsInN1YnNjcmliZSIsImJhdGNoU3Vic2NyaWJlIiwic3Vic2NyaXB0aW9uIiwidW5zdWJzY3JpYmUiLCJiYXRjaFVuc3Vic2NyaWJlIiwiYmF0Y2hGZXRjaE1lc3NhZ2VzIiwiaXJuIiwiaXJpZGl1bSIsIlJFTEFZX0pTT05SUEMiLCJpc1B1Ymxpc2hNZXRob2QiLCJpc1B1Ymxpc2hQYXJhbXMiLCJpc1B1Ymxpc2hSZXF1ZXN0IiwiaXNTdWJzY3JpYmVNZXRob2QiLCJpc1N1YnNjcmliZVBhcmFtcyIsImlzU3Vic2NyaWJlUmVxdWVzdCIsImlzU3Vic2NyaXB0aW9uTWV0aG9kIiwiaXNTdWJzY3JpcHRpb25QYXJhbXMiLCJpc1N1YnNjcmlwdGlvblJlcXVlc3QiLCJpc1Vuc3Vic2NyaWJlTWV0aG9kIiwiaXNVbnN1YnNjcmliZVBhcmFtcyIsImlzVW5zdWJzY3JpYmVSZXF1ZXN0IiwicGFyc2VQdWJsaXNoUmVxdWVzdCIsInBhcnNlU3Vic2NyaWJlUmVxdWVzdCIsInBhcnNlU3Vic2NyaXB0aW9uUmVxdWVzdCIsInBhcnNlVW5zdWJzY3JpYmVSZXF1ZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-api/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/dist/index.es.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/index.es.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DATA_ENCODING: () => (/* binding */ xt),\n/* harmony export */   DID_DELIMITER: () => (/* binding */ Vt),\n/* harmony export */   DID_METHOD: () => (/* binding */ Jt),\n/* harmony export */   DID_PREFIX: () => (/* binding */ Yt),\n/* harmony export */   JSON_ENCODING: () => (/* binding */ Gt),\n/* harmony export */   JWT_DELIMITER: () => (/* binding */ ut),\n/* harmony export */   JWT_ENCODING: () => (/* binding */ Dt),\n/* harmony export */   JWT_IRIDIUM_ALG: () => (/* binding */ jt),\n/* harmony export */   JWT_IRIDIUM_TYP: () => (/* binding */ Zt),\n/* harmony export */   KEY_PAIR_SEED_LENGTH: () => (/* binding */ Ne),\n/* harmony export */   MULTICODEC_ED25519_BASE: () => (/* binding */ Kt),\n/* harmony export */   MULTICODEC_ED25519_ENCODING: () => (/* binding */ dt),\n/* harmony export */   MULTICODEC_ED25519_HEADER: () => (/* binding */ Wt),\n/* harmony export */   MULTICODEC_ED25519_LENGTH: () => (/* binding */ Fe),\n/* harmony export */   decodeData: () => (/* binding */ Xo),\n/* harmony export */   decodeIss: () => (/* binding */ tn),\n/* harmony export */   decodeJSON: () => (/* binding */ lt),\n/* harmony export */   decodeJWT: () => (/* binding */ sn),\n/* harmony export */   decodeSig: () => (/* binding */ nn),\n/* harmony export */   encodeData: () => (/* binding */ rn),\n/* harmony export */   encodeIss: () => (/* binding */ Qe),\n/* harmony export */   encodeJSON: () => (/* binding */ bt),\n/* harmony export */   encodeJWT: () => (/* binding */ on),\n/* harmony export */   encodeSig: () => (/* binding */ en),\n/* harmony export */   generateKeyPair: () => (/* binding */ Po),\n/* harmony export */   signJWT: () => (/* binding */ Qo),\n/* harmony export */   verifyJWT: () => (/* binding */ ts)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\nfunction En(t) {\n    return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === \"Uint8Array\";\n}\nfunction fe(t, ...e) {\n    if (!En(t)) throw new Error(\"Uint8Array expected\");\n    if (e.length > 0 && !e.includes(t.length)) throw new Error(\"Uint8Array expected of length \" + e + \", got length=\" + t.length);\n}\nfunction De(t, e = !0) {\n    if (t.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (e && t.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nfunction gn(t, e) {\n    fe(t);\n    const n = e.outputLen;\n    if (t.length < n) throw new Error(\"digestInto() expects output buffer of length at least \" + n);\n}\nconst it = typeof globalThis == \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0; /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \nconst _t = (t)=>new DataView(t.buffer, t.byteOffset, t.byteLength);\nfunction yn(t) {\n    if (typeof t != \"string\") throw new Error(\"utf8ToBytes expected string, got \" + typeof t);\n    return new Uint8Array(new TextEncoder().encode(t));\n}\nfunction de(t) {\n    return typeof t == \"string\" && (t = yn(t)), fe(t), t;\n}\nclass xn {\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction Bn(t) {\n    const e = (r)=>t().update(de(r)).digest(), n = t();\n    return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = ()=>t(), e;\n}\nfunction he(t = 32) {\n    if (it && typeof it.getRandomValues == \"function\") return it.getRandomValues(new Uint8Array(t));\n    if (it && typeof it.randomBytes == \"function\") return it.randomBytes(t);\n    throw new Error(\"crypto.getRandomValues must be defined\");\n}\nfunction Cn(t, e, n, r) {\n    if (typeof t.setBigUint64 == \"function\") return t.setBigUint64(e, n, r);\n    const o = BigInt(32), s = BigInt(4294967295), a = Number(n >> o & s), u = Number(n & s), i = r ? 4 : 0, D = r ? 0 : 4;\n    t.setUint32(e + i, a, r), t.setUint32(e + D, u, r);\n}\nclass An extends xn {\n    constructor(e, n, r, o){\n        super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = _t(this.buffer);\n    }\n    update(e) {\n        De(this);\n        const { view: n, buffer: r, blockLen: o } = this;\n        e = de(e);\n        const s = e.length;\n        for(let a = 0; a < s;){\n            const u = Math.min(o - this.pos, s - a);\n            if (u === o) {\n                const i = _t(e);\n                for(; o <= s - a; a += o)this.process(i, a);\n                continue;\n            }\n            r.set(e.subarray(a, a + u), this.pos), this.pos += u, a += u, this.pos === o && (this.process(n, 0), this.pos = 0);\n        }\n        return this.length += e.length, this.roundClean(), this;\n    }\n    digestInto(e) {\n        De(this), gn(e, this), this.finished = !0;\n        const { buffer: n, view: r, blockLen: o, isLE: s } = this;\n        let { pos: a } = this;\n        n[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > o - a && (this.process(r, 0), a = 0);\n        for(let l = a; l < o; l++)n[l] = 0;\n        Cn(r, o - 8, BigInt(this.length * 8), s), this.process(r, 0);\n        const u = _t(e), i = this.outputLen;\n        if (i % 4) throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n        const D = i / 4, c = this.get();\n        if (D > c.length) throw new Error(\"_sha2: outputLen bigger than state\");\n        for(let l = 0; l < D; l++)u.setUint32(4 * l, c[l], s);\n    }\n    digest() {\n        const { buffer: e, outputLen: n } = this;\n        this.digestInto(e);\n        const r = e.slice(0, n);\n        return this.destroy(), r;\n    }\n    _cloneInto(e) {\n        e || (e = new this.constructor), e.set(...this.get());\n        const { blockLen: n, buffer: r, length: o, finished: s, destroyed: a, pos: u } = this;\n        return e.length = o, e.pos = u, e.finished = s, e.destroyed = a, o % n && e.buffer.set(r), e;\n    }\n}\nconst wt = BigInt(2 ** 32 - 1), St = BigInt(32);\nfunction le(t, e = !1) {\n    return e ? {\n        h: Number(t & wt),\n        l: Number(t >> St & wt)\n    } : {\n        h: Number(t >> St & wt) | 0,\n        l: Number(t & wt) | 0\n    };\n}\nfunction mn(t, e = !1) {\n    let n = new Uint32Array(t.length), r = new Uint32Array(t.length);\n    for(let o = 0; o < t.length; o++){\n        const { h: s, l: a } = le(t[o], e);\n        [n[o], r[o]] = [\n            s,\n            a\n        ];\n    }\n    return [\n        n,\n        r\n    ];\n}\nconst _n = (t, e)=>BigInt(t >>> 0) << St | BigInt(e >>> 0), Sn = (t, e, n)=>t >>> n, vn = (t, e, n)=>t << 32 - n | e >>> n, In = (t, e, n)=>t >>> n | e << 32 - n, Un = (t, e, n)=>t << 32 - n | e >>> n, Tn = (t, e, n)=>t << 64 - n | e >>> n - 32, Fn = (t, e, n)=>t >>> n - 32 | e << 64 - n, Nn = (t, e)=>e, Ln = (t, e)=>t, On = (t, e, n)=>t << n | e >>> 32 - n, Hn = (t, e, n)=>e << n | t >>> 32 - n, zn = (t, e, n)=>e << n - 32 | t >>> 64 - n, Mn = (t, e, n)=>t << n - 32 | e >>> 64 - n;\nfunction qn(t, e, n, r) {\n    const o = (e >>> 0) + (r >>> 0);\n    return {\n        h: t + n + (o / 2 ** 32 | 0) | 0,\n        l: o | 0\n    };\n}\nconst $n = (t, e, n)=>(t >>> 0) + (e >>> 0) + (n >>> 0), kn = (t, e, n, r)=>e + n + r + (t / 2 ** 32 | 0) | 0, Rn = (t, e, n, r)=>(t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0), jn = (t, e, n, r, o)=>e + n + r + o + (t / 2 ** 32 | 0) | 0, Zn = (t, e, n, r, o)=>(t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0) + (o >>> 0), Gn = (t, e, n, r, o, s)=>e + n + r + o + s + (t / 2 ** 32 | 0) | 0, x = {\n    fromBig: le,\n    split: mn,\n    toBig: _n,\n    shrSH: Sn,\n    shrSL: vn,\n    rotrSH: In,\n    rotrSL: Un,\n    rotrBH: Tn,\n    rotrBL: Fn,\n    rotr32H: Nn,\n    rotr32L: Ln,\n    rotlSH: On,\n    rotlSL: Hn,\n    rotlBH: zn,\n    rotlBL: Mn,\n    add: qn,\n    add3L: $n,\n    add3H: kn,\n    add4L: Rn,\n    add4H: jn,\n    add5H: Gn,\n    add5L: Zn\n}, [Vn, Yn] = (()=>x.split([\n        \"0x428a2f98d728ae22\",\n        \"0x7137449123ef65cd\",\n        \"0xb5c0fbcfec4d3b2f\",\n        \"0xe9b5dba58189dbbc\",\n        \"0x3956c25bf348b538\",\n        \"0x59f111f1b605d019\",\n        \"0x923f82a4af194f9b\",\n        \"0xab1c5ed5da6d8118\",\n        \"0xd807aa98a3030242\",\n        \"0x12835b0145706fbe\",\n        \"0x243185be4ee4b28c\",\n        \"0x550c7dc3d5ffb4e2\",\n        \"0x72be5d74f27b896f\",\n        \"0x80deb1fe3b1696b1\",\n        \"0x9bdc06a725c71235\",\n        \"0xc19bf174cf692694\",\n        \"0xe49b69c19ef14ad2\",\n        \"0xefbe4786384f25e3\",\n        \"0x0fc19dc68b8cd5b5\",\n        \"0x240ca1cc77ac9c65\",\n        \"0x2de92c6f592b0275\",\n        \"0x4a7484aa6ea6e483\",\n        \"0x5cb0a9dcbd41fbd4\",\n        \"0x76f988da831153b5\",\n        \"0x983e5152ee66dfab\",\n        \"0xa831c66d2db43210\",\n        \"0xb00327c898fb213f\",\n        \"0xbf597fc7beef0ee4\",\n        \"0xc6e00bf33da88fc2\",\n        \"0xd5a79147930aa725\",\n        \"0x06ca6351e003826f\",\n        \"0x142929670a0e6e70\",\n        \"0x27b70a8546d22ffc\",\n        \"0x2e1b21385c26c926\",\n        \"0x4d2c6dfc5ac42aed\",\n        \"0x53380d139d95b3df\",\n        \"0x650a73548baf63de\",\n        \"0x766a0abb3c77b2a8\",\n        \"0x81c2c92e47edaee6\",\n        \"0x92722c851482353b\",\n        \"0xa2bfe8a14cf10364\",\n        \"0xa81a664bbc423001\",\n        \"0xc24b8b70d0f89791\",\n        \"0xc76c51a30654be30\",\n        \"0xd192e819d6ef5218\",\n        \"0xd69906245565a910\",\n        \"0xf40e35855771202a\",\n        \"0x106aa07032bbd1b8\",\n        \"0x19a4c116b8d2d0c8\",\n        \"0x1e376c085141ab53\",\n        \"0x2748774cdf8eeb99\",\n        \"0x34b0bcb5e19b48a8\",\n        \"0x391c0cb3c5c95a63\",\n        \"0x4ed8aa4ae3418acb\",\n        \"0x5b9cca4f7763e373\",\n        \"0x682e6ff3d6b2b8a3\",\n        \"0x748f82ee5defb2fc\",\n        \"0x78a5636f43172f60\",\n        \"0x84c87814a1f0ab72\",\n        \"0x8cc702081a6439ec\",\n        \"0x90befffa23631e28\",\n        \"0xa4506cebde82bde9\",\n        \"0xbef9a3f7b2c67915\",\n        \"0xc67178f2e372532b\",\n        \"0xca273eceea26619c\",\n        \"0xd186b8c721c0c207\",\n        \"0xeada7dd6cde0eb1e\",\n        \"0xf57d4f7fee6ed178\",\n        \"0x06f067aa72176fba\",\n        \"0x0a637dc5a2c898a6\",\n        \"0x113f9804bef90dae\",\n        \"0x1b710b35131c471b\",\n        \"0x28db77f523047d84\",\n        \"0x32caab7b40c72493\",\n        \"0x3c9ebe0a15c9bebc\",\n        \"0x431d67c49c100d4c\",\n        \"0x4cc5d4becb3e42b6\",\n        \"0x597f299cfc657e2a\",\n        \"0x5fcb6fab3ad6faec\",\n        \"0x6c44198c4a475817\"\n    ].map((t)=>BigInt(t))))(), P = new Uint32Array(80), Q = new Uint32Array(80);\nclass Jn extends An {\n    constructor(){\n        super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;\n    }\n    get() {\n        const { Ah: e, Al: n, Bh: r, Bl: o, Ch: s, Cl: a, Dh: u, Dl: i, Eh: D, El: c, Fh: l, Fl: p, Gh: w, Gl: h, Hh: g, Hl: S } = this;\n        return [\n            e,\n            n,\n            r,\n            o,\n            s,\n            a,\n            u,\n            i,\n            D,\n            c,\n            l,\n            p,\n            w,\n            h,\n            g,\n            S\n        ];\n    }\n    set(e, n, r, o, s, a, u, i, D, c, l, p, w, h, g, S) {\n        this.Ah = e | 0, this.Al = n | 0, this.Bh = r | 0, this.Bl = o | 0, this.Ch = s | 0, this.Cl = a | 0, this.Dh = u | 0, this.Dl = i | 0, this.Eh = D | 0, this.El = c | 0, this.Fh = l | 0, this.Fl = p | 0, this.Gh = w | 0, this.Gl = h | 0, this.Hh = g | 0, this.Hl = S | 0;\n    }\n    process(e, n) {\n        for(let d = 0; d < 16; d++, n += 4)P[d] = e.getUint32(n), Q[d] = e.getUint32(n += 4);\n        for(let d = 16; d < 80; d++){\n            const m = P[d - 15] | 0, F = Q[d - 15] | 0, q = x.rotrSH(m, F, 1) ^ x.rotrSH(m, F, 8) ^ x.shrSH(m, F, 7), z = x.rotrSL(m, F, 1) ^ x.rotrSL(m, F, 8) ^ x.shrSL(m, F, 7), I = P[d - 2] | 0, O = Q[d - 2] | 0, ot = x.rotrSH(I, O, 19) ^ x.rotrBH(I, O, 61) ^ x.shrSH(I, O, 6), tt = x.rotrSL(I, O, 19) ^ x.rotrBL(I, O, 61) ^ x.shrSL(I, O, 6), st = x.add4L(z, tt, Q[d - 7], Q[d - 16]), at = x.add4H(st, q, ot, P[d - 7], P[d - 16]);\n            P[d] = at | 0, Q[d] = st | 0;\n        }\n        let { Ah: r, Al: o, Bh: s, Bl: a, Ch: u, Cl: i, Dh: D, Dl: c, Eh: l, El: p, Fh: w, Fl: h, Gh: g, Gl: S, Hh: v, Hl: L } = this;\n        for(let d = 0; d < 80; d++){\n            const m = x.rotrSH(l, p, 14) ^ x.rotrSH(l, p, 18) ^ x.rotrBH(l, p, 41), F = x.rotrSL(l, p, 14) ^ x.rotrSL(l, p, 18) ^ x.rotrBL(l, p, 41), q = l & w ^ ~l & g, z = p & h ^ ~p & S, I = x.add5L(L, F, z, Yn[d], Q[d]), O = x.add5H(I, v, m, q, Vn[d], P[d]), ot = I | 0, tt = x.rotrSH(r, o, 28) ^ x.rotrBH(r, o, 34) ^ x.rotrBH(r, o, 39), st = x.rotrSL(r, o, 28) ^ x.rotrBL(r, o, 34) ^ x.rotrBL(r, o, 39), at = r & s ^ r & u ^ s & u, Ct = o & a ^ o & i ^ a & i;\n            v = g | 0, L = S | 0, g = w | 0, S = h | 0, w = l | 0, h = p | 0, ({ h: l, l: p } = x.add(D | 0, c | 0, O | 0, ot | 0)), D = u | 0, c = i | 0, u = s | 0, i = a | 0, s = r | 0, a = o | 0;\n            const At = x.add3L(ot, st, Ct);\n            r = x.add3H(At, O, tt, at), o = At | 0;\n        }\n        ({ h: r, l: o } = x.add(this.Ah | 0, this.Al | 0, r | 0, o | 0)), ({ h: s, l: a } = x.add(this.Bh | 0, this.Bl | 0, s | 0, a | 0)), ({ h: u, l: i } = x.add(this.Ch | 0, this.Cl | 0, u | 0, i | 0)), ({ h: D, l: c } = x.add(this.Dh | 0, this.Dl | 0, D | 0, c | 0)), ({ h: l, l: p } = x.add(this.Eh | 0, this.El | 0, l | 0, p | 0)), ({ h: w, l: h } = x.add(this.Fh | 0, this.Fl | 0, w | 0, h | 0)), ({ h: g, l: S } = x.add(this.Gh | 0, this.Gl | 0, g | 0, S | 0)), ({ h: v, l: L } = x.add(this.Hh | 0, this.Hl | 0, v | 0, L | 0)), this.set(r, o, s, a, u, i, D, c, l, p, w, h, g, S, v, L);\n    }\n    roundClean() {\n        P.fill(0), Q.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nconst Kn = Bn(()=>new Jn); /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \nconst vt = BigInt(0), be = BigInt(1), Wn = BigInt(2);\nfunction It(t) {\n    return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === \"Uint8Array\";\n}\nfunction Ut(t) {\n    if (!It(t)) throw new Error(\"Uint8Array expected\");\n}\nfunction Tt(t, e) {\n    if (typeof e != \"boolean\") throw new Error(t + \" boolean expected, got \" + e);\n}\nconst Xn = Array.from({\n    length: 256\n}, (t, e)=>e.toString(16).padStart(2, \"0\"));\nfunction Ft(t) {\n    Ut(t);\n    let e = \"\";\n    for(let n = 0; n < t.length; n++)e += Xn[t[n]];\n    return e;\n}\nfunction pe(t) {\n    if (typeof t != \"string\") throw new Error(\"hex string expected, got \" + typeof t);\n    return t === \"\" ? vt : BigInt(\"0x\" + t);\n}\nconst K = {\n    _0: 48,\n    _9: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction we(t) {\n    if (t >= K._0 && t <= K._9) return t - K._0;\n    if (t >= K.A && t <= K.F) return t - (K.A - 10);\n    if (t >= K.a && t <= K.f) return t - (K.a - 10);\n}\nfunction Ee(t) {\n    if (typeof t != \"string\") throw new Error(\"hex string expected, got \" + typeof t);\n    const e = t.length, n = e / 2;\n    if (e % 2) throw new Error(\"hex string expected, got unpadded hex of length \" + e);\n    const r = new Uint8Array(n);\n    for(let o = 0, s = 0; o < n; o++, s += 2){\n        const a = we(t.charCodeAt(s)), u = we(t.charCodeAt(s + 1));\n        if (a === void 0 || u === void 0) {\n            const i = t[s] + t[s + 1];\n            throw new Error('hex string expected, got non-hex character \"' + i + '\" at index ' + s);\n        }\n        r[o] = a * 16 + u;\n    }\n    return r;\n}\nfunction Pn(t) {\n    return pe(Ft(t));\n}\nfunction Et(t) {\n    return Ut(t), pe(Ft(Uint8Array.from(t).reverse()));\n}\nfunction ge(t, e) {\n    return Ee(t.toString(16).padStart(e * 2, \"0\"));\n}\nfunction Nt(t, e) {\n    return ge(t, e).reverse();\n}\nfunction W(t, e, n) {\n    let r;\n    if (typeof e == \"string\") try {\n        r = Ee(e);\n    } catch (s) {\n        throw new Error(t + \" must be hex string or Uint8Array, cause: \" + s);\n    }\n    else if (It(e)) r = Uint8Array.from(e);\n    else throw new Error(t + \" must be hex string or Uint8Array\");\n    const o = r.length;\n    if (typeof n == \"number\" && o !== n) throw new Error(t + \" of length \" + n + \" expected, got \" + o);\n    return r;\n}\nfunction ye(...t) {\n    let e = 0;\n    for(let r = 0; r < t.length; r++){\n        const o = t[r];\n        Ut(o), e += o.length;\n    }\n    const n = new Uint8Array(e);\n    for(let r = 0, o = 0; r < t.length; r++){\n        const s = t[r];\n        n.set(s, o), o += s.length;\n    }\n    return n;\n}\nconst Lt = (t)=>typeof t == \"bigint\" && vt <= t;\nfunction Qn(t, e, n) {\n    return Lt(t) && Lt(e) && Lt(n) && e <= t && t < n;\n}\nfunction ft(t, e, n, r) {\n    if (!Qn(e, n, r)) throw new Error(\"expected valid \" + t + \": \" + n + \" <= n < \" + r + \", got \" + e);\n}\nfunction tr(t) {\n    let e;\n    for(e = 0; t > vt; t >>= be, e += 1);\n    return e;\n}\nconst er = (t)=>(Wn << BigInt(t - 1)) - be, nr = {\n    bigint: (t)=>typeof t == \"bigint\",\n    function: (t)=>typeof t == \"function\",\n    boolean: (t)=>typeof t == \"boolean\",\n    string: (t)=>typeof t == \"string\",\n    stringOrUint8Array: (t)=>typeof t == \"string\" || It(t),\n    isSafeInteger: (t)=>Number.isSafeInteger(t),\n    array: (t)=>Array.isArray(t),\n    field: (t, e)=>e.Fp.isValid(t),\n    hash: (t)=>typeof t == \"function\" && Number.isSafeInteger(t.outputLen)\n};\nfunction Ot(t, e, n = {}) {\n    const r = (o, s, a)=>{\n        const u = nr[s];\n        if (typeof u != \"function\") throw new Error(\"invalid validator function\");\n        const i = t[o];\n        if (!(a && i === void 0) && !u(i, t)) throw new Error(\"param \" + String(o) + \" is invalid. Expected \" + s + \", got \" + i);\n    };\n    for (const [o, s] of Object.entries(e))r(o, s, !1);\n    for (const [o, s] of Object.entries(n))r(o, s, !0);\n    return t;\n}\nfunction xe(t) {\n    const e = new WeakMap;\n    return (n, ...r)=>{\n        const o = e.get(n);\n        if (o !== void 0) return o;\n        const s = t(n, ...r);\n        return e.set(n, s), s;\n    };\n}\nconst M = BigInt(0), N = BigInt(1), nt = BigInt(2), rr = BigInt(3), Ht = BigInt(4), Be = BigInt(5), Ce = BigInt(8);\nfunction H(t, e) {\n    const n = t % e;\n    return n >= M ? n : e + n;\n}\nfunction or(t, e, n) {\n    if (e < M) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (n <= M) throw new Error(\"invalid modulus\");\n    if (n === N) return M;\n    let r = N;\n    for(; e > M;)e & N && (r = r * t % n), t = t * t % n, e >>= N;\n    return r;\n}\nfunction J(t, e, n) {\n    let r = t;\n    for(; e-- > M;)r *= r, r %= n;\n    return r;\n}\nfunction Ae(t, e) {\n    if (t === M) throw new Error(\"invert: expected non-zero number\");\n    if (e <= M) throw new Error(\"invert: expected positive modulus, got \" + e);\n    let n = H(t, e), r = e, o = M, s = N;\n    for(; n !== M;){\n        const u = r / n, i = r % n, D = o - s * u;\n        r = n, n = i, o = s, s = D;\n    }\n    if (r !== N) throw new Error(\"invert: does not exist\");\n    return H(o, e);\n}\nfunction sr(t) {\n    const e = (t - N) / nt;\n    let n, r, o;\n    for(n = t - N, r = 0; n % nt === M; n /= nt, r++);\n    for(o = nt; o < t && or(o, e, t) !== t - N; o++)if (o > 1e3) throw new Error(\"Cannot find square root: likely non-prime P\");\n    if (r === 1) {\n        const a = (t + N) / Ht;\n        return function(i, D) {\n            const c = i.pow(D, a);\n            if (!i.eql(i.sqr(c), D)) throw new Error(\"Cannot find square root\");\n            return c;\n        };\n    }\n    const s = (n + N) / nt;\n    return function(u, i) {\n        if (u.pow(i, e) === u.neg(u.ONE)) throw new Error(\"Cannot find square root\");\n        let D = r, c = u.pow(u.mul(u.ONE, o), n), l = u.pow(i, s), p = u.pow(i, n);\n        for(; !u.eql(p, u.ONE);){\n            if (u.eql(p, u.ZERO)) return u.ZERO;\n            let w = 1;\n            for(let g = u.sqr(p); w < D && !u.eql(g, u.ONE); w++)g = u.sqr(g);\n            const h = u.pow(c, N << BigInt(D - w - 1));\n            c = u.sqr(h), l = u.mul(l, h), p = u.mul(p, c), D = w;\n        }\n        return l;\n    };\n}\nfunction ir(t) {\n    if (t % Ht === rr) {\n        const e = (t + N) / Ht;\n        return function(r, o) {\n            const s = r.pow(o, e);\n            if (!r.eql(r.sqr(s), o)) throw new Error(\"Cannot find square root\");\n            return s;\n        };\n    }\n    if (t % Ce === Be) {\n        const e = (t - Be) / Ce;\n        return function(r, o) {\n            const s = r.mul(o, nt), a = r.pow(s, e), u = r.mul(o, a), i = r.mul(r.mul(u, nt), a), D = r.mul(u, r.sub(i, r.ONE));\n            if (!r.eql(r.sqr(D), o)) throw new Error(\"Cannot find square root\");\n            return D;\n        };\n    }\n    return sr(t);\n}\nconst ur = (t, e)=>(H(t, e) & N) === N, cr = [\n    \"create\",\n    \"isValid\",\n    \"is0\",\n    \"neg\",\n    \"inv\",\n    \"sqrt\",\n    \"sqr\",\n    \"eql\",\n    \"add\",\n    \"sub\",\n    \"mul\",\n    \"pow\",\n    \"div\",\n    \"addN\",\n    \"subN\",\n    \"mulN\",\n    \"sqrN\"\n];\nfunction ar(t) {\n    const e = {\n        ORDER: \"bigint\",\n        MASK: \"bigint\",\n        BYTES: \"isSafeInteger\",\n        BITS: \"isSafeInteger\"\n    }, n = cr.reduce((r, o)=>(r[o] = \"function\", r), e);\n    return Ot(t, n);\n}\nfunction fr(t, e, n) {\n    if (n < M) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (n === M) return t.ONE;\n    if (n === N) return e;\n    let r = t.ONE, o = e;\n    for(; n > M;)n & N && (r = t.mul(r, o)), o = t.sqr(o), n >>= N;\n    return r;\n}\nfunction Dr(t, e) {\n    const n = new Array(e.length), r = e.reduce((s, a, u)=>t.is0(a) ? s : (n[u] = s, t.mul(s, a)), t.ONE), o = t.inv(r);\n    return e.reduceRight((s, a, u)=>t.is0(a) ? s : (n[u] = t.mul(s, n[u]), t.mul(s, a)), o), n;\n}\nfunction me(t, e) {\n    const n = e !== void 0 ? e : t.toString(2).length, r = Math.ceil(n / 8);\n    return {\n        nBitLength: n,\n        nByteLength: r\n    };\n}\nfunction _e(t, e, n = !1, r = {}) {\n    if (t <= M) throw new Error(\"invalid field: expected ORDER > 0, got \" + t);\n    const { nBitLength: o, nByteLength: s } = me(t, e);\n    if (s > 2048) throw new Error(\"invalid field: expected ORDER of <= 2048 bytes\");\n    let a;\n    const u = Object.freeze({\n        ORDER: t,\n        isLE: n,\n        BITS: o,\n        BYTES: s,\n        MASK: er(o),\n        ZERO: M,\n        ONE: N,\n        create: (i)=>H(i, t),\n        isValid: (i)=>{\n            if (typeof i != \"bigint\") throw new Error(\"invalid field element: expected bigint, got \" + typeof i);\n            return M <= i && i < t;\n        },\n        is0: (i)=>i === M,\n        isOdd: (i)=>(i & N) === N,\n        neg: (i)=>H(-i, t),\n        eql: (i, D)=>i === D,\n        sqr: (i)=>H(i * i, t),\n        add: (i, D)=>H(i + D, t),\n        sub: (i, D)=>H(i - D, t),\n        mul: (i, D)=>H(i * D, t),\n        pow: (i, D)=>fr(u, i, D),\n        div: (i, D)=>H(i * Ae(D, t), t),\n        sqrN: (i)=>i * i,\n        addN: (i, D)=>i + D,\n        subN: (i, D)=>i - D,\n        mulN: (i, D)=>i * D,\n        inv: (i)=>Ae(i, t),\n        sqrt: r.sqrt || ((i)=>(a || (a = ir(t)), a(u, i))),\n        invertBatch: (i)=>Dr(u, i),\n        cmov: (i, D, c)=>c ? D : i,\n        toBytes: (i)=>n ? Nt(i, s) : ge(i, s),\n        fromBytes: (i)=>{\n            if (i.length !== s) throw new Error(\"Field.fromBytes: expected \" + s + \" bytes, got \" + i.length);\n            return n ? Et(i) : Pn(i);\n        }\n    });\n    return Object.freeze(u);\n}\nconst Se = BigInt(0), gt = BigInt(1);\nfunction zt(t, e) {\n    const n = e.negate();\n    return t ? n : e;\n}\nfunction ve(t, e) {\n    if (!Number.isSafeInteger(t) || t <= 0 || t > e) throw new Error(\"invalid window size, expected [1..\" + e + \"], got W=\" + t);\n}\nfunction Mt(t, e) {\n    ve(t, e);\n    const n = Math.ceil(e / t) + 1, r = 2 ** (t - 1);\n    return {\n        windows: n,\n        windowSize: r\n    };\n}\nfunction dr(t, e) {\n    if (!Array.isArray(t)) throw new Error(\"array expected\");\n    t.forEach((n, r)=>{\n        if (!(n instanceof e)) throw new Error(\"invalid point at index \" + r);\n    });\n}\nfunction hr(t, e) {\n    if (!Array.isArray(t)) throw new Error(\"array of scalars expected\");\n    t.forEach((n, r)=>{\n        if (!e.isValid(n)) throw new Error(\"invalid scalar at index \" + r);\n    });\n}\nconst qt = new WeakMap, Ie = new WeakMap;\nfunction $t(t) {\n    return Ie.get(t) || 1;\n}\nfunction lr(t, e) {\n    return {\n        constTimeNegate: zt,\n        hasPrecomputes (n) {\n            return $t(n) !== 1;\n        },\n        unsafeLadder (n, r, o = t.ZERO) {\n            let s = n;\n            for(; r > Se;)r & gt && (o = o.add(s)), s = s.double(), r >>= gt;\n            return o;\n        },\n        precomputeWindow (n, r) {\n            const { windows: o, windowSize: s } = Mt(r, e), a = [];\n            let u = n, i = u;\n            for(let D = 0; D < o; D++){\n                i = u, a.push(i);\n                for(let c = 1; c < s; c++)i = i.add(u), a.push(i);\n                u = i.double();\n            }\n            return a;\n        },\n        wNAF (n, r, o) {\n            const { windows: s, windowSize: a } = Mt(n, e);\n            let u = t.ZERO, i = t.BASE;\n            const D = BigInt(2 ** n - 1), c = 2 ** n, l = BigInt(n);\n            for(let p = 0; p < s; p++){\n                const w = p * a;\n                let h = Number(o & D);\n                o >>= l, h > a && (h -= c, o += gt);\n                const g = w, S = w + Math.abs(h) - 1, v = p % 2 !== 0, L = h < 0;\n                h === 0 ? i = i.add(zt(v, r[g])) : u = u.add(zt(L, r[S]));\n            }\n            return {\n                p: u,\n                f: i\n            };\n        },\n        wNAFUnsafe (n, r, o, s = t.ZERO) {\n            const { windows: a, windowSize: u } = Mt(n, e), i = BigInt(2 ** n - 1), D = 2 ** n, c = BigInt(n);\n            for(let l = 0; l < a; l++){\n                const p = l * u;\n                if (o === Se) break;\n                let w = Number(o & i);\n                if (o >>= c, w > u && (w -= D, o += gt), w === 0) continue;\n                let h = r[p + Math.abs(w) - 1];\n                w < 0 && (h = h.negate()), s = s.add(h);\n            }\n            return s;\n        },\n        getPrecomputes (n, r, o) {\n            let s = qt.get(r);\n            return s || (s = this.precomputeWindow(r, n), n !== 1 && qt.set(r, o(s))), s;\n        },\n        wNAFCached (n, r, o) {\n            const s = $t(n);\n            return this.wNAF(s, this.getPrecomputes(s, n, o), r);\n        },\n        wNAFCachedUnsafe (n, r, o, s) {\n            const a = $t(n);\n            return a === 1 ? this.unsafeLadder(n, r, s) : this.wNAFUnsafe(a, this.getPrecomputes(a, n, o), r, s);\n        },\n        setWindowSize (n, r) {\n            ve(r, e), Ie.set(n, r), qt.delete(n);\n        }\n    };\n}\nfunction br(t, e, n, r) {\n    if (dr(n, t), hr(r, e), n.length !== r.length) throw new Error(\"arrays of points and scalars must have equal length\");\n    const o = t.ZERO, s = tr(BigInt(n.length)), a = s > 12 ? s - 3 : s > 4 ? s - 2 : s ? 2 : 1, u = (1 << a) - 1, i = new Array(u + 1).fill(o), D = Math.floor((e.BITS - 1) / a) * a;\n    let c = o;\n    for(let l = D; l >= 0; l -= a){\n        i.fill(o);\n        for(let w = 0; w < r.length; w++){\n            const h = r[w], g = Number(h >> BigInt(l) & BigInt(u));\n            i[g] = i[g].add(n[w]);\n        }\n        let p = o;\n        for(let w = i.length - 1, h = o; w > 0; w--)h = h.add(i[w]), p = p.add(h);\n        if (c = c.add(p), l !== 0) for(let w = 0; w < a; w++)c = c.double();\n    }\n    return c;\n}\nfunction pr(t) {\n    return ar(t.Fp), Ot(t, {\n        n: \"bigint\",\n        h: \"bigint\",\n        Gx: \"field\",\n        Gy: \"field\"\n    }, {\n        nBitLength: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\"\n    }), Object.freeze({\n        ...me(t.n, t.nBitLength),\n        ...t,\n        p: t.Fp.ORDER\n    });\n}\nconst G = BigInt(0), j = BigInt(1), yt = BigInt(2), wr = BigInt(8), Er = {\n    zip215: !0\n};\nfunction gr(t) {\n    const e = pr(t);\n    return Ot(t, {\n        hash: \"function\",\n        a: \"bigint\",\n        d: \"bigint\",\n        randomBytes: \"function\"\n    }, {\n        adjustScalarBytes: \"function\",\n        domain: \"function\",\n        uvRatio: \"function\",\n        mapToCurve: \"function\"\n    }), Object.freeze({\n        ...e\n    });\n}\nfunction yr(t) {\n    const e = gr(t), { Fp: n, n: r, prehash: o, hash: s, randomBytes: a, nByteLength: u, h: i } = e, D = yt << BigInt(u * 8) - j, c = n.create, l = _e(e.n, e.nBitLength), p = e.uvRatio || ((y, f)=>{\n        try {\n            return {\n                isValid: !0,\n                value: n.sqrt(y * n.inv(f))\n            };\n        } catch  {\n            return {\n                isValid: !1,\n                value: G\n            };\n        }\n    }), w = e.adjustScalarBytes || ((y)=>y), h = e.domain || ((y, f, b)=>{\n        if (Tt(\"phflag\", b), f.length || b) throw new Error(\"Contexts/pre-hash are not supported\");\n        return y;\n    });\n    function g(y, f) {\n        ft(\"coordinate \" + y, f, G, D);\n    }\n    function S(y) {\n        if (!(y instanceof d)) throw new Error(\"ExtendedPoint expected\");\n    }\n    const v = xe((y, f)=>{\n        const { ex: b, ey: E, ez: B } = y, C = y.is0();\n        f == null && (f = C ? wr : n.inv(B));\n        const A = c(b * f), U = c(E * f), _ = c(B * f);\n        if (C) return {\n            x: G,\n            y: j\n        };\n        if (_ !== j) throw new Error(\"invZ was invalid\");\n        return {\n            x: A,\n            y: U\n        };\n    }), L = xe((y)=>{\n        const { a: f, d: b } = e;\n        if (y.is0()) throw new Error(\"bad point: ZERO\");\n        const { ex: E, ey: B, ez: C, et: A } = y, U = c(E * E), _ = c(B * B), T = c(C * C), $ = c(T * T), R = c(U * f), V = c(T * c(R + _)), Y = c($ + c(b * c(U * _)));\n        if (V !== Y) throw new Error(\"bad point: equation left != right (1)\");\n        const Z = c(E * B), X = c(C * A);\n        if (Z !== X) throw new Error(\"bad point: equation left != right (2)\");\n        return !0;\n    });\n    class d {\n        constructor(f, b, E, B){\n            this.ex = f, this.ey = b, this.ez = E, this.et = B, g(\"x\", f), g(\"y\", b), g(\"z\", E), g(\"t\", B), Object.freeze(this);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(f) {\n            if (f instanceof d) throw new Error(\"extended point not allowed\");\n            const { x: b, y: E } = f || {};\n            return g(\"x\", b), g(\"y\", E), new d(b, E, j, c(b * E));\n        }\n        static normalizeZ(f) {\n            const b = n.invertBatch(f.map((E)=>E.ez));\n            return f.map((E, B)=>E.toAffine(b[B])).map(d.fromAffine);\n        }\n        static msm(f, b) {\n            return br(d, l, f, b);\n        }\n        _setWindowSize(f) {\n            q.setWindowSize(this, f);\n        }\n        assertValidity() {\n            L(this);\n        }\n        equals(f) {\n            S(f);\n            const { ex: b, ey: E, ez: B } = this, { ex: C, ey: A, ez: U } = f, _ = c(b * U), T = c(C * B), $ = c(E * U), R = c(A * B);\n            return _ === T && $ === R;\n        }\n        is0() {\n            return this.equals(d.ZERO);\n        }\n        negate() {\n            return new d(c(-this.ex), this.ey, this.ez, c(-this.et));\n        }\n        double() {\n            const { a: f } = e, { ex: b, ey: E, ez: B } = this, C = c(b * b), A = c(E * E), U = c(yt * c(B * B)), _ = c(f * C), T = b + E, $ = c(c(T * T) - C - A), R = _ + A, V = R - U, Y = _ - A, Z = c($ * V), X = c(R * Y), et = c($ * Y), pt = c(V * R);\n            return new d(Z, X, pt, et);\n        }\n        add(f) {\n            S(f);\n            const { a: b, d: E } = e, { ex: B, ey: C, ez: A, et: U } = this, { ex: _, ey: T, ez: $, et: R } = f;\n            if (b === BigInt(-1)) {\n                const re = c((C - B) * (T + _)), oe = c((C + B) * (T - _)), mt = c(oe - re);\n                if (mt === G) return this.double();\n                const se = c(A * yt * R), ie = c(U * yt * $), ue = ie + se, ce = oe + re, ae = ie - se, Dn = c(ue * mt), dn = c(ce * ae), hn = c(ue * ae), ln = c(mt * ce);\n                return new d(Dn, dn, ln, hn);\n            }\n            const V = c(B * _), Y = c(C * T), Z = c(U * E * R), X = c(A * $), et = c((B + C) * (_ + T) - V - Y), pt = X - Z, ee = X + Z, ne = c(Y - b * V), un = c(et * pt), cn = c(ee * ne), an = c(et * ne), fn = c(pt * ee);\n            return new d(un, cn, fn, an);\n        }\n        subtract(f) {\n            return this.add(f.negate());\n        }\n        wNAF(f) {\n            return q.wNAFCached(this, f, d.normalizeZ);\n        }\n        multiply(f) {\n            const b = f;\n            ft(\"scalar\", b, j, r);\n            const { p: E, f: B } = this.wNAF(b);\n            return d.normalizeZ([\n                E,\n                B\n            ])[0];\n        }\n        multiplyUnsafe(f, b = d.ZERO) {\n            const E = f;\n            return ft(\"scalar\", E, G, r), E === G ? F : this.is0() || E === j ? this : q.wNAFCachedUnsafe(this, E, d.normalizeZ, b);\n        }\n        isSmallOrder() {\n            return this.multiplyUnsafe(i).is0();\n        }\n        isTorsionFree() {\n            return q.unsafeLadder(this, r).is0();\n        }\n        toAffine(f) {\n            return v(this, f);\n        }\n        clearCofactor() {\n            const { h: f } = e;\n            return f === j ? this : this.multiplyUnsafe(f);\n        }\n        static fromHex(f, b = !1) {\n            const { d: E, a: B } = e, C = n.BYTES;\n            f = W(\"pointHex\", f, C), Tt(\"zip215\", b);\n            const A = f.slice(), U = f[C - 1];\n            A[C - 1] = U & -129;\n            const _ = Et(A), T = b ? D : n.ORDER;\n            ft(\"pointHex.y\", _, G, T);\n            const $ = c(_ * _), R = c($ - j), V = c(E * $ - B);\n            let { isValid: Y, value: Z } = p(R, V);\n            if (!Y) throw new Error(\"Point.fromHex: invalid y coordinate\");\n            const X = (Z & j) === j, et = (U & 128) !== 0;\n            if (!b && Z === G && et) throw new Error(\"Point.fromHex: x=0 and x_0=1\");\n            return et !== X && (Z = c(-Z)), d.fromAffine({\n                x: Z,\n                y: _\n            });\n        }\n        static fromPrivateKey(f) {\n            return O(f).point;\n        }\n        toRawBytes() {\n            const { x: f, y: b } = this.toAffine(), E = Nt(b, n.BYTES);\n            return E[E.length - 1] |= f & j ? 128 : 0, E;\n        }\n        toHex() {\n            return Ft(this.toRawBytes());\n        }\n    }\n    d.BASE = new d(e.Gx, e.Gy, j, c(e.Gx * e.Gy)), d.ZERO = new d(G, j, j, G);\n    const { BASE: m, ZERO: F } = d, q = lr(d, u * 8);\n    function z(y) {\n        return H(y, r);\n    }\n    function I(y) {\n        return z(Et(y));\n    }\n    function O(y) {\n        const f = n.BYTES;\n        y = W(\"private key\", y, f);\n        const b = W(\"hashed private key\", s(y), 2 * f), E = w(b.slice(0, f)), B = b.slice(f, 2 * f), C = I(E), A = m.multiply(C), U = A.toRawBytes();\n        return {\n            head: E,\n            prefix: B,\n            scalar: C,\n            point: A,\n            pointBytes: U\n        };\n    }\n    function ot(y) {\n        return O(y).pointBytes;\n    }\n    function tt(y = new Uint8Array, ...f) {\n        const b = ye(...f);\n        return I(s(h(b, W(\"context\", y), !!o)));\n    }\n    function st(y, f, b = {}) {\n        y = W(\"message\", y), o && (y = o(y));\n        const { prefix: E, scalar: B, pointBytes: C } = O(f), A = tt(b.context, E, y), U = m.multiply(A).toRawBytes(), _ = tt(b.context, U, C, y), T = z(A + _ * B);\n        ft(\"signature.s\", T, G, r);\n        const $ = ye(U, Nt(T, n.BYTES));\n        return W(\"result\", $, n.BYTES * 2);\n    }\n    const at = Er;\n    function Ct(y, f, b, E = at) {\n        const { context: B, zip215: C } = E, A = n.BYTES;\n        y = W(\"signature\", y, 2 * A), f = W(\"message\", f), b = W(\"publicKey\", b, A), C !== void 0 && Tt(\"zip215\", C), o && (f = o(f));\n        const U = Et(y.slice(A, 2 * A));\n        let _, T, $;\n        try {\n            _ = d.fromHex(b, C), T = d.fromHex(y.slice(0, A), C), $ = m.multiplyUnsafe(U);\n        } catch  {\n            return !1;\n        }\n        if (!C && _.isSmallOrder()) return !1;\n        const R = tt(B, T.toRawBytes(), _.toRawBytes(), f);\n        return T.add(_.multiplyUnsafe(R)).subtract($).clearCofactor().equals(d.ZERO);\n    }\n    return m._setWindowSize(8), {\n        CURVE: e,\n        getPublicKey: ot,\n        sign: st,\n        verify: Ct,\n        ExtendedPoint: d,\n        utils: {\n            getExtendedPublicKey: O,\n            randomPrivateKey: ()=>a(n.BYTES),\n            precompute (y = 8, f = d.BASE) {\n                return f._setWindowSize(y), f.multiply(BigInt(3)), f;\n            }\n        }\n    };\n}\nBigInt(0), BigInt(1);\nconst kt = BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\"), Ue = BigInt(\"19681161376707505956807079304988542015446066515923890162744021073123829784752\");\nBigInt(0);\nconst xr = BigInt(1), Te = BigInt(2);\nBigInt(3);\nconst Br = BigInt(5), Cr = BigInt(8);\nfunction Ar(t) {\n    const e = BigInt(10), n = BigInt(20), r = BigInt(40), o = BigInt(80), s = kt, u = t * t % s * t % s, i = J(u, Te, s) * u % s, D = J(i, xr, s) * t % s, c = J(D, Br, s) * D % s, l = J(c, e, s) * c % s, p = J(l, n, s) * l % s, w = J(p, r, s) * p % s, h = J(w, o, s) * w % s, g = J(h, o, s) * w % s, S = J(g, e, s) * c % s;\n    return {\n        pow_p_5_8: J(S, Te, s) * t % s,\n        b2: u\n    };\n}\nfunction mr(t) {\n    return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;\n}\nfunction _r(t, e) {\n    const n = kt, r = H(e * e * e, n), o = H(r * r * e, n), s = Ar(t * o).pow_p_5_8;\n    let a = H(t * r * s, n);\n    const u = H(e * a * a, n), i = a, D = H(a * Ue, n), c = u === t, l = u === H(-t, n), p = u === H(-t * Ue, n);\n    return c && (a = i), (l || p) && (a = D), ur(a, n) && (a = H(-a, n)), {\n        isValid: c || l,\n        value: a\n    };\n}\nconst Sr = (()=>_e(kt, void 0, !0))(), vr = (()=>({\n        a: BigInt(-1),\n        d: BigInt(\"37095705934669439343138083508754565189542113879843219016388785533085940283555\"),\n        Fp: Sr,\n        n: BigInt(\"7237005577332262213973186563042994240857116359379907606001950938285454250989\"),\n        h: Cr,\n        Gx: BigInt(\"15112221349535400772501151409588531511454012693041857206046113283949847762202\"),\n        Gy: BigInt(\"46316835694926478169428394003475163141307993866256225615783033603165251855960\"),\n        hash: Kn,\n        randomBytes: he,\n        adjustScalarBytes: mr,\n        uvRatio: _r\n    }))(), Rt = (()=>yr(vr))(), jt = \"EdDSA\", Zt = \"JWT\", ut = \".\", Dt = \"base64url\", Gt = \"utf8\", xt = \"utf8\", Vt = \":\", Yt = \"did\", Jt = \"key\", dt = \"base58btc\", Kt = \"z\", Wt = \"K36\", Fe = 32, Ne = 32;\nfunction Xt(t) {\n    return globalThis.Buffer != null ? new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t;\n}\nfunction Le(t = 0) {\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t)) : new Uint8Array(t);\n}\nfunction Oe(t, e) {\n    e || (e = t.reduce((o, s)=>o + s.length, 0));\n    const n = Le(e);\n    let r = 0;\n    for (const o of t)n.set(o, r), r += o.length;\n    return Xt(n);\n}\nfunction Ir(t, e) {\n    if (t.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var n = new Uint8Array(256), r = 0; r < n.length; r++)n[r] = 255;\n    for(var o = 0; o < t.length; o++){\n        var s = t.charAt(o), a = s.charCodeAt(0);\n        if (n[a] !== 255) throw new TypeError(s + \" is ambiguous\");\n        n[a] = o;\n    }\n    var u = t.length, i = t.charAt(0), D = Math.log(u) / Math.log(256), c = Math.log(256) / Math.log(u);\n    function l(h) {\n        if (h instanceof Uint8Array || (ArrayBuffer.isView(h) ? h = new Uint8Array(h.buffer, h.byteOffset, h.byteLength) : Array.isArray(h) && (h = Uint8Array.from(h))), !(h instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (h.length === 0) return \"\";\n        for(var g = 0, S = 0, v = 0, L = h.length; v !== L && h[v] === 0;)v++, g++;\n        for(var d = (L - v) * c + 1 >>> 0, m = new Uint8Array(d); v !== L;){\n            for(var F = h[v], q = 0, z = d - 1; (F !== 0 || q < S) && z !== -1; z--, q++)F += 256 * m[z] >>> 0, m[z] = F % u >>> 0, F = F / u >>> 0;\n            if (F !== 0) throw new Error(\"Non-zero carry\");\n            S = q, v++;\n        }\n        for(var I = d - S; I !== d && m[I] === 0;)I++;\n        for(var O = i.repeat(g); I < d; ++I)O += t.charAt(m[I]);\n        return O;\n    }\n    function p(h) {\n        if (typeof h != \"string\") throw new TypeError(\"Expected String\");\n        if (h.length === 0) return new Uint8Array;\n        var g = 0;\n        if (h[g] !== \" \") {\n            for(var S = 0, v = 0; h[g] === i;)S++, g++;\n            for(var L = (h.length - g) * D + 1 >>> 0, d = new Uint8Array(L); h[g];){\n                var m = n[h.charCodeAt(g)];\n                if (m === 255) return;\n                for(var F = 0, q = L - 1; (m !== 0 || F < v) && q !== -1; q--, F++)m += u * d[q] >>> 0, d[q] = m % 256 >>> 0, m = m / 256 >>> 0;\n                if (m !== 0) throw new Error(\"Non-zero carry\");\n                v = F, g++;\n            }\n            if (h[g] !== \" \") {\n                for(var z = L - v; z !== L && d[z] === 0;)z++;\n                for(var I = new Uint8Array(S + (L - z)), O = S; z !== L;)I[O++] = d[z++];\n                return I;\n            }\n        }\n    }\n    function w(h) {\n        var g = p(h);\n        if (g) return g;\n        throw new Error(`Non-${e} character`);\n    }\n    return {\n        encode: l,\n        decodeUnsafe: p,\n        decode: w\n    };\n}\nvar Ur = Ir, Tr = Ur;\nconst He = (t)=>{\n    if (t instanceof Uint8Array && t.constructor.name === \"Uint8Array\") return t;\n    if (t instanceof ArrayBuffer) return new Uint8Array(t);\n    if (ArrayBuffer.isView(t)) return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, Fr = (t)=>new TextEncoder().encode(t), Nr = (t)=>new TextDecoder().decode(t);\nclass Lr {\n    constructor(e, n, r){\n        this.name = e, this.prefix = n, this.baseEncode = r;\n    }\n    encode(e) {\n        if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;\n        throw Error(\"Unknown type, must be binary type\");\n    }\n}\nclass Or {\n    constructor(e, n, r){\n        if (this.name = e, this.prefix = n, n.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = n.codePointAt(0), this.baseDecode = r;\n    }\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return ze(this, e);\n    }\n}\nclass Hr {\n    constructor(e){\n        this.decoders = e;\n    }\n    or(e) {\n        return ze(this, e);\n    }\n    decode(e) {\n        const n = e[0], r = this.decoders[n];\n        if (r) return r.decode(e);\n        throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n}\nconst ze = (t, e)=>new Hr({\n        ...t.decoders || {\n            [t.prefix]: t\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nclass zr {\n    constructor(e, n, r, o){\n        this.name = e, this.prefix = n, this.baseEncode = r, this.baseDecode = o, this.encoder = new Lr(e, n, r), this.decoder = new Or(e, n, o);\n    }\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n}\nconst Bt = ({ name: t, prefix: e, encode: n, decode: r })=>new zr(t, e, n, r), ht = ({ prefix: t, name: e, alphabet: n })=>{\n    const { encode: r, decode: o } = Tr(n, e);\n    return Bt({\n        prefix: t,\n        name: e,\n        encode: r,\n        decode: (s)=>He(o(s))\n    });\n}, Mr = (t, e, n, r)=>{\n    const o = {};\n    for(let c = 0; c < e.length; ++c)o[e[c]] = c;\n    let s = t.length;\n    for(; t[s - 1] === \"=\";)--s;\n    const a = new Uint8Array(s * n / 8 | 0);\n    let u = 0, i = 0, D = 0;\n    for(let c = 0; c < s; ++c){\n        const l = o[t[c]];\n        if (l === void 0) throw new SyntaxError(`Non-${r} character`);\n        i = i << n | l, u += n, u >= 8 && (u -= 8, a[D++] = 255 & i >> u);\n    }\n    if (u >= n || 255 & i << 8 - u) throw new SyntaxError(\"Unexpected end of data\");\n    return a;\n}, qr = (t, e, n)=>{\n    const r = e[e.length - 1] === \"=\", o = (1 << n) - 1;\n    let s = \"\", a = 0, u = 0;\n    for(let i = 0; i < t.length; ++i)for(u = u << 8 | t[i], a += 8; a > n;)a -= n, s += e[o & u >> a];\n    if (a && (s += e[o & u << n - a]), r) for(; s.length * n & 7;)s += \"=\";\n    return s;\n}, k = ({ name: t, prefix: e, bitsPerChar: n, alphabet: r })=>Bt({\n        prefix: e,\n        name: t,\n        encode (o) {\n            return qr(o, r, n);\n        },\n        decode (o) {\n            return Mr(o, r, n, t);\n        }\n    }), $r = Bt({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (t)=>Nr(t),\n    decode: (t)=>Fr(t)\n});\nvar kr = Object.freeze({\n    __proto__: null,\n    identity: $r\n});\nconst Rr = k({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar jr = Object.freeze({\n    __proto__: null,\n    base2: Rr\n});\nconst Zr = k({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar Gr = Object.freeze({\n    __proto__: null,\n    base8: Zr\n});\nconst Vr = ht({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar Yr = Object.freeze({\n    __proto__: null,\n    base10: Vr\n});\nconst Jr = k({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), Kr = k({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar Wr = Object.freeze({\n    __proto__: null,\n    base16: Jr,\n    base16upper: Kr\n});\nconst Xr = k({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), Pr = k({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), Qr = k({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), to = k({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), eo = k({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), no = k({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), ro = k({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), oo = k({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), so = k({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar io = Object.freeze({\n    __proto__: null,\n    base32: Xr,\n    base32upper: Pr,\n    base32pad: Qr,\n    base32padupper: to,\n    base32hex: eo,\n    base32hexupper: no,\n    base32hexpad: ro,\n    base32hexpadupper: oo,\n    base32z: so\n});\nconst uo = ht({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), co = ht({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar ao = Object.freeze({\n    __proto__: null,\n    base36: uo,\n    base36upper: co\n});\nconst fo = ht({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Do = ht({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar ho = Object.freeze({\n    __proto__: null,\n    base58btc: fo,\n    base58flickr: Do\n});\nconst lo = k({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), bo = k({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), po = k({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), wo = k({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar Eo = Object.freeze({\n    __proto__: null,\n    base64: lo,\n    base64pad: bo,\n    base64url: po,\n    base64urlpad: wo\n});\nconst Me = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), go = Me.reduce((t, e, n)=>(t[n] = e, t), []), yo = Me.reduce((t, e, n)=>(t[e.codePointAt(0)] = n, t), []);\nfunction xo(t) {\n    return t.reduce((e, n)=>(e += go[n], e), \"\");\n}\nfunction Bo(t) {\n    const e = [];\n    for (const n of t){\n        const r = yo[n.codePointAt(0)];\n        if (r === void 0) throw new Error(`Non-base256emoji character: ${n}`);\n        e.push(r);\n    }\n    return new Uint8Array(e);\n}\nconst Co = Bt({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: xo,\n    decode: Bo\n});\nvar Ao = Object.freeze({\n    __proto__: null,\n    base256emoji: Co\n}), mo = $e, qe = 128, _o = 127, So = ~_o, vo = Math.pow(2, 31);\nfunction $e(t, e, n) {\n    e = e || [], n = n || 0;\n    for(var r = n; t >= vo;)e[n++] = t & 255 | qe, t /= 128;\n    for(; t & So;)e[n++] = t & 255 | qe, t >>>= 7;\n    return e[n] = t | 0, $e.bytes = n - r + 1, e;\n}\nvar Io = Pt, Uo = 128, ke = 127;\nfunction Pt(t, r) {\n    var n = 0, r = r || 0, o = 0, s = r, a, u = t.length;\n    do {\n        if (s >= u) throw Pt.bytes = 0, new RangeError(\"Could not decode varint\");\n        a = t[s++], n += o < 28 ? (a & ke) << o : (a & ke) * Math.pow(2, o), o += 7;\n    }while (a >= Uo);\n    return Pt.bytes = s - r, n;\n}\nvar To = Math.pow(2, 7), Fo = Math.pow(2, 14), No = Math.pow(2, 21), Lo = Math.pow(2, 28), Oo = Math.pow(2, 35), Ho = Math.pow(2, 42), zo = Math.pow(2, 49), Mo = Math.pow(2, 56), qo = Math.pow(2, 63), $o = function(t) {\n    return t < To ? 1 : t < Fo ? 2 : t < No ? 3 : t < Lo ? 4 : t < Oo ? 5 : t < Ho ? 6 : t < zo ? 7 : t < Mo ? 8 : t < qo ? 9 : 10;\n}, ko = {\n    encode: mo,\n    decode: Io,\n    encodingLength: $o\n}, Re = ko;\nconst je = (t, e, n = 0)=>(Re.encode(t, e, n), e), Ze = (t)=>Re.encodingLength(t), Qt = (t, e)=>{\n    const n = e.byteLength, r = Ze(t), o = r + Ze(n), s = new Uint8Array(o + n);\n    return je(t, s, 0), je(n, s, r), s.set(e, o), new Ro(t, n, e, s);\n};\nclass Ro {\n    constructor(e, n, r, o){\n        this.code = e, this.size = n, this.digest = r, this.bytes = o;\n    }\n}\nconst Ge = ({ name: t, code: e, encode: n })=>new jo(t, e, n);\nclass jo {\n    constructor(e, n, r){\n        this.name = e, this.code = n, this.encode = r;\n    }\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const n = this.encode(e);\n            return n instanceof Uint8Array ? Qt(this.code, n) : n.then((r)=>Qt(this.code, r));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n}\nconst Ve = (t)=>async (e)=>new Uint8Array(await crypto.subtle.digest(t, e)), Zo = Ge({\n    name: \"sha2-256\",\n    code: 18,\n    encode: Ve(\"SHA-256\")\n}), Go = Ge({\n    name: \"sha2-512\",\n    code: 19,\n    encode: Ve(\"SHA-512\")\n});\nvar Vo = Object.freeze({\n    __proto__: null,\n    sha256: Zo,\n    sha512: Go\n});\nconst Ye = 0, Yo = \"identity\", Je = He, Jo = (t)=>Qt(Ye, Je(t)), Ko = {\n    code: Ye,\n    name: Yo,\n    encode: Je,\n    digest: Jo\n};\nvar Wo = Object.freeze({\n    __proto__: null,\n    identity: Ko\n});\nnew TextEncoder, new TextDecoder;\nconst Ke = {\n    ...kr,\n    ...jr,\n    ...Gr,\n    ...Yr,\n    ...Wr,\n    ...io,\n    ...ao,\n    ...ho,\n    ...Eo,\n    ...Ao\n};\n({\n    ...Vo,\n    ...Wo\n});\nfunction We(t, e, n, r) {\n    return {\n        name: t,\n        prefix: e,\n        encoder: {\n            name: t,\n            prefix: e,\n            encode: n\n        },\n        decoder: {\n            decode: r\n        }\n    };\n}\nconst Xe = We(\"utf8\", \"u\", (t)=>\"u\" + new TextDecoder(\"utf8\").decode(t), (t)=>new TextEncoder().encode(t.substring(1))), te = We(\"ascii\", \"a\", (t)=>{\n    let e = \"a\";\n    for(let n = 0; n < t.length; n++)e += String.fromCharCode(t[n]);\n    return e;\n}, (t)=>{\n    t = t.substring(1);\n    const e = Le(t.length);\n    for(let n = 0; n < t.length; n++)e[n] = t.charCodeAt(n);\n    return e;\n}), Pe = {\n    utf8: Xe,\n    \"utf-8\": Xe,\n    hex: Ke.base16,\n    latin1: te,\n    ascii: te,\n    binary: te,\n    ...Ke\n};\nfunction ct(t, e = \"utf8\") {\n    const n = Pe[e];\n    if (!n) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t.buffer, t.byteOffset, t.byteLength).toString(\"utf8\") : n.encoder.encode(t).substring(1);\n}\nfunction rt(t, e = \"utf8\") {\n    const n = Pe[e];\n    if (!n) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t, \"utf-8\")) : n.decoder.decode(`${n.prefix}${t}`);\n}\nfunction lt(t) {\n    return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonParse)(ct(rt(t, Dt), Gt));\n}\nfunction bt(t) {\n    return ct(rt((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)(t), Gt), Dt);\n}\nfunction Qe(t) {\n    const e = rt(Wt, dt), n = Kt + ct(Oe([\n        e,\n        t\n    ]), dt);\n    return [\n        Yt,\n        Jt,\n        n\n    ].join(Vt);\n}\nfunction tn(t) {\n    const [e, n, r] = t.split(Vt);\n    if (e !== Yt || n !== Jt) throw new Error('Issuer must be a DID with method \"key\"');\n    if (r.slice(0, 1) !== Kt) throw new Error(\"Issuer must be a key in mulicodec format\");\n    const o = rt(r.slice(1), dt);\n    if (ct(o.slice(0, 2), dt) !== Wt) throw new Error('Issuer must be a public key with type \"Ed25519\"');\n    const s = o.slice(2);\n    if (s.length !== Fe) throw new Error(\"Issuer must be a public key with length 32 bytes\");\n    return s;\n}\nfunction en(t) {\n    return ct(t, Dt);\n}\nfunction nn(t) {\n    return rt(t, Dt);\n}\nfunction rn(t) {\n    return rt([\n        bt(t.header),\n        bt(t.payload)\n    ].join(ut), xt);\n}\nfunction Xo(t) {\n    const e = ct(t, xt).split(ut), n = lt(e[0]), r = lt(e[1]);\n    return {\n        header: n,\n        payload: r\n    };\n}\nfunction on(t) {\n    return [\n        bt(t.header),\n        bt(t.payload),\n        en(t.signature)\n    ].join(ut);\n}\nfunction sn(t) {\n    const e = t.split(ut), n = lt(e[0]), r = lt(e[1]), o = nn(e[2]), s = rt(e.slice(0, 2).join(ut), xt);\n    return {\n        header: n,\n        payload: r,\n        signature: o,\n        data: s\n    };\n}\nfunction Po(t = he(Ne)) {\n    const e = Rt.getPublicKey(t);\n    return {\n        secretKey: Oe([\n            t,\n            e\n        ]),\n        publicKey: e\n    };\n}\nasync function Qo(t, e, n, r, o = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.fromMiliseconds)(Date.now())) {\n    const s = {\n        alg: jt,\n        typ: Zt\n    }, a = Qe(r.publicKey), u = o + n, i = {\n        iss: a,\n        sub: t,\n        aud: e,\n        iat: o,\n        exp: u\n    }, D = rn({\n        header: s,\n        payload: i\n    }), c = Rt.sign(D, r.secretKey.slice(0, 32));\n    return on({\n        header: s,\n        payload: i,\n        signature: c\n    });\n}\nasync function ts(t) {\n    const { header: e, payload: n, data: r, signature: o } = sn(t);\n    if (e.alg !== jt || e.typ !== Zt) throw new Error(\"JWT must use EdDSA algorithm\");\n    const s = tn(n.iss);\n    return Rt.verify(o, r, s);\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/safe-json/dist/esm/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safeJsonParse: () => (/* binding */ safeJsonParse),\n/* harmony export */   safeJsonStringify: () => (/* binding */ safeJsonStringify)\n/* harmony export */ });\nconst JSONStringify = (data)=>JSON.stringify(data, (_, value)=>typeof value === \"bigint\" ? value.toString() + \"n\" : value);\nconst JSONParse = (json)=>{\n    const numbersBiggerThanMaxInt = /([\\[:])?(\\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\\}\\]])/g;\n    const serializedData = json.replace(numbersBiggerThanMaxInt, '$1\"$2n\"$3');\n    return JSON.parse(serializedData, (_, value)=>{\n        const isCustomFormatBigInt = typeof value === \"string\" && value.match(/^\\d+n$/);\n        if (isCustomFormatBigInt) return BigInt(value.substring(0, value.length - 1));\n        return value;\n    });\n};\nfunction safeJsonParse(value) {\n    if (typeof value !== \"string\") {\n        throw new Error(`Cannot safe json parse value of type ${typeof value}`);\n    }\n    try {\n        return JSONParse(value);\n    } catch (_a) {\n        return value;\n    }\n}\nfunction safeJsonStringify(value) {\n    return typeof value === \"string\" ? value : JSONStringify(value) || \"\";\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc2FmZS1qc29uL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsZ0JBQWdCQyxDQUFBQSxPQUFRQyxLQUFLQyxTQUFTLENBQUNGLE1BQU0sQ0FBQ0csR0FBR0MsUUFBVSxPQUFPQSxVQUFVLFdBQVdBLE1BQU1DLFFBQVEsS0FBSyxNQUFNRDtBQUN0SCxNQUFNRSxZQUFZQyxDQUFBQTtJQUNkLE1BQU1DLDBCQUEwQjtJQUNoQyxNQUFNQyxpQkFBaUJGLEtBQUtHLE9BQU8sQ0FBQ0YseUJBQXlCO0lBQzdELE9BQU9QLEtBQUtVLEtBQUssQ0FBQ0YsZ0JBQWdCLENBQUNOLEdBQUdDO1FBQ2xDLE1BQU1RLHVCQUF1QixPQUFPUixVQUFVLFlBQVlBLE1BQU1TLEtBQUssQ0FBQztRQUN0RSxJQUFJRCxzQkFDQSxPQUFPRSxPQUFPVixNQUFNVyxTQUFTLENBQUMsR0FBR1gsTUFBTVksTUFBTSxHQUFHO1FBQ3BELE9BQU9aO0lBQ1g7QUFDSjtBQUNPLFNBQVNhLGNBQWNiLEtBQUs7SUFDL0IsSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDM0IsTUFBTSxJQUFJYyxNQUFNLENBQUMscUNBQXFDLEVBQUUsT0FBT2QsTUFBTSxDQUFDO0lBQzFFO0lBQ0EsSUFBSTtRQUNBLE9BQU9FLFVBQVVGO0lBQ3JCLEVBQ0EsT0FBT2UsSUFBSTtRQUNQLE9BQU9mO0lBQ1g7QUFDSjtBQUNPLFNBQVNnQixrQkFBa0JoQixLQUFLO0lBQ25DLE9BQU8sT0FBT0EsVUFBVSxXQUFXQSxRQUFRTCxjQUFjSyxVQUFVO0FBQ3ZFLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3NhZmUtanNvbi9kaXN0L2VzbS9pbmRleC5qcz9lMmQ5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEpTT05TdHJpbmdpZnkgPSBkYXRhID0+IEpTT04uc3RyaW5naWZ5KGRhdGEsIChfLCB2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiID8gdmFsdWUudG9TdHJpbmcoKSArIFwiblwiIDogdmFsdWUpO1xuY29uc3QgSlNPTlBhcnNlID0ganNvbiA9PiB7XG4gICAgY29uc3QgbnVtYmVyc0JpZ2dlclRoYW5NYXhJbnQgPSAvKFtcXFs6XSk/KFxcZHsxNyx9fCg/Ols5XSg/OlsxLTldMDcxOTkyNTQ3NDA5OTF8MFsxLTldNzE5OTI1NDc0MDk5MXwwMFs4LTldMTk5MjU0NzQwOTkxfDAwN1syLTldOTkyNTQ3NDA5OTF8MDA3MTk5WzMtOV01NDc0MDk5MXwwMDcxOTkyWzYtOV00NzQwOTkxfDAwNzE5OTI1WzUtOV03NDA5OTF8MDA3MTk5MjU0WzgtOV00MDk5MXwwMDcxOTkyNTQ3WzUtOV0wOTkxfDAwNzE5OTI1NDc0WzEtOV05OTF8MDA3MTk5MjU0NzQwOTlbMi05XSkpKShbLFxcfVxcXV0pL2c7XG4gICAgY29uc3Qgc2VyaWFsaXplZERhdGEgPSBqc29uLnJlcGxhY2UobnVtYmVyc0JpZ2dlclRoYW5NYXhJbnQsIFwiJDFcXFwiJDJuXFxcIiQzXCIpO1xuICAgIHJldHVybiBKU09OLnBhcnNlKHNlcmlhbGl6ZWREYXRhLCAoXywgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgaXNDdXN0b21Gb3JtYXRCaWdJbnQgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUubWF0Y2goL15cXGQrbiQvKTtcbiAgICAgICAgaWYgKGlzQ3VzdG9tRm9ybWF0QmlnSW50KVxuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZS5zdWJzdHJpbmcoMCwgdmFsdWUubGVuZ3RoIC0gMSkpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVKc29uUGFyc2UodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHNhZmUganNvbiBwYXJzZSB2YWx1ZSBvZiB0eXBlICR7dHlwZW9mIHZhbHVlfWApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTlBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2FmZUpzb25TdHJpbmdpZnkodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUgOiBKU09OU3RyaW5naWZ5KHZhbHVlKSB8fCBcIlwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkpTT05TdHJpbmdpZnkiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsIl8iLCJ2YWx1ZSIsInRvU3RyaW5nIiwiSlNPTlBhcnNlIiwianNvbiIsIm51bWJlcnNCaWdnZXJUaGFuTWF4SW50Iiwic2VyaWFsaXplZERhdGEiLCJyZXBsYWNlIiwicGFyc2UiLCJpc0N1c3RvbUZvcm1hdEJpZ0ludCIsIm1hdGNoIiwiQmlnSW50Iiwic3Vic3RyaW5nIiwibGVuZ3RoIiwic2FmZUpzb25QYXJzZSIsIkVycm9yIiwiX2EiLCJzYWZlSnNvblN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/sign-client/dist/index.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/sign-client/dist/index.es.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTH_CONTEXT: () => (/* binding */ wt),\n/* harmony export */   AUTH_KEYS_CONTEXT: () => (/* binding */ mt),\n/* harmony export */   AUTH_PAIRING_TOPIC_CONTEXT: () => (/* binding */ _t),\n/* harmony export */   AUTH_PROTOCOL: () => (/* binding */ yt),\n/* harmony export */   AUTH_PUBLIC_KEY_NAME: () => (/* binding */ le),\n/* harmony export */   AUTH_REQUEST_CONTEXT: () => (/* binding */ Et),\n/* harmony export */   AUTH_STORAGE_PREFIX: () => (/* binding */ ce),\n/* harmony export */   AUTH_VERSION: () => (/* binding */ Ss),\n/* harmony export */   ENGINE_CONTEXT: () => (/* binding */ dt),\n/* harmony export */   ENGINE_QUEUE_STATES: () => (/* binding */ $),\n/* harmony export */   ENGINE_RPC_OPTS: () => (/* binding */ N),\n/* harmony export */   HISTORY_CONTEXT: () => (/* binding */ ms),\n/* harmony export */   HISTORY_EVENTS: () => (/* binding */ ws),\n/* harmony export */   HISTORY_STORAGE_VERSION: () => (/* binding */ _s),\n/* harmony export */   METHODS_TO_VERIFY: () => (/* binding */ gt),\n/* harmony export */   PROPOSAL_CONTEXT: () => (/* binding */ pt),\n/* harmony export */   PROPOSAL_EXPIRY: () => (/* binding */ Es),\n/* harmony export */   PROPOSAL_EXPIRY_MESSAGE: () => (/* binding */ $e),\n/* harmony export */   REQUEST_CONTEXT: () => (/* binding */ ut),\n/* harmony export */   SESSION_CONTEXT: () => (/* binding */ ht),\n/* harmony export */   SESSION_EXPIRY: () => (/* binding */ Y),\n/* harmony export */   SESSION_REQUEST_EXPIRY_BOUNDARIES: () => (/* binding */ Ee),\n/* harmony export */   SIGN_CLIENT_CONTEXT: () => (/* binding */ Me),\n/* harmony export */   SIGN_CLIENT_DEFAULT: () => (/* binding */ _e),\n/* harmony export */   SIGN_CLIENT_EVENTS: () => (/* binding */ gs),\n/* harmony export */   SIGN_CLIENT_PROTOCOL: () => (/* binding */ De),\n/* harmony export */   SIGN_CLIENT_STORAGE_OPTIONS: () => (/* binding */ ys),\n/* harmony export */   SIGN_CLIENT_STORAGE_PREFIX: () => (/* binding */ me),\n/* harmony export */   SIGN_CLIENT_VERSION: () => (/* binding */ Le),\n/* harmony export */   SessionStore: () => (/* binding */ Ms),\n/* harmony export */   SignClient: () => (/* binding */ ks),\n/* harmony export */   TVF_METHODS: () => (/* binding */ Ke),\n/* harmony export */   WALLETCONNECT_DEEPLINK_CHOICE: () => (/* binding */ ke),\n/* harmony export */   \"default\": () => (/* binding */ Se)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/core */ \"(ssr)/./node_modules/@walletconnect/core/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/types */ \"(ssr)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\n\n\n\nconst De = \"wc\", Le = 2, Me = \"client\", me = `${De}@${Le}:${Me}:`, _e = {\n    name: Me,\n    logger: \"error\",\n    controller: !1,\n    relayUrl: \"wss://relay.walletconnect.org\"\n}, gs = {\n    session_proposal: \"session_proposal\",\n    session_update: \"session_update\",\n    session_extend: \"session_extend\",\n    session_ping: \"session_ping\",\n    session_delete: \"session_delete\",\n    session_expire: \"session_expire\",\n    session_request: \"session_request\",\n    session_request_sent: \"session_request_sent\",\n    session_event: \"session_event\",\n    proposal_expire: \"proposal_expire\",\n    session_authenticate: \"session_authenticate\",\n    session_request_expire: \"session_request_expire\",\n    session_connect: \"session_connect\"\n}, ys = {\n    database: \":memory:\"\n}, ke = \"WALLETCONNECT_DEEPLINK_CHOICE\", ws = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, ms = \"history\", _s = \"0.3\", pt = \"proposal\", Es = _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.THIRTY_DAYS, $e = \"Proposal expired\", ht = \"session\", Y = _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.SEVEN_DAYS, dt = \"engine\", N = {\n    wc_sessionPropose: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1100\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1101\n        },\n        reject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1120\n        },\n        autoReject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1121\n        }\n    },\n    wc_sessionSettle: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1102\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1103\n        }\n    },\n    wc_sessionUpdate: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1104\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1105\n        }\n    },\n    wc_sessionExtend: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1106\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1107\n        }\n    },\n    wc_sessionRequest: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1108\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1109\n        }\n    },\n    wc_sessionEvent: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1110\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1111\n        }\n    },\n    wc_sessionDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1112\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1113\n        }\n    },\n    wc_sessionPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1114\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1115\n        }\n    },\n    wc_sessionAuthenticate: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_HOUR,\n            prompt: !0,\n            tag: 1116\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_HOUR,\n            prompt: !1,\n            tag: 1117\n        },\n        reject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1118\n        },\n        autoReject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1119\n        }\n    }\n}, Ee = {\n    min: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n    max: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.SEVEN_DAYS\n}, $ = {\n    idle: \"IDLE\",\n    active: \"ACTIVE\"\n}, Ke = {\n    eth_sendTransaction: {\n        key: \"\"\n    },\n    eth_sendRawTransaction: {\n        key: \"\"\n    },\n    wallet_sendCalls: {\n        key: \"\"\n    },\n    solana_signTransaction: {\n        key: \"signature\"\n    },\n    solana_signAllTransactions: {\n        key: \"transactions\"\n    },\n    solana_signAndSendTransaction: {\n        key: \"signature\"\n    }\n}, ut = \"request\", gt = [\n    \"wc_sessionPropose\",\n    \"wc_sessionRequest\",\n    \"wc_authRequest\",\n    \"wc_sessionAuthenticate\"\n], yt = \"wc\", Ss = 1.5, wt = \"auth\", mt = \"authKeys\", _t = \"pairingTopics\", Et = \"requests\", ce = `${yt}@${1.5}:${wt}:`, le = `${ce}:PUB_KEY`;\nvar Rs = Object.defineProperty, fs = Object.defineProperties, Is = Object.getOwnPropertyDescriptors, St = Object.getOwnPropertySymbols, vs = Object.prototype.hasOwnProperty, qs = Object.prototype.propertyIsEnumerable, Ue = (S, n, e)=>n in S ? Rs(S, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : S[n] = e, v = (S, n)=>{\n    for(var e in n || (n = {}))vs.call(n, e) && Ue(S, e, n[e]);\n    if (St) for (var e of St(n))qs.call(n, e) && Ue(S, e, n[e]);\n    return S;\n}, x = (S, n)=>fs(S, Is(n)), c = (S, n, e)=>Ue(S, typeof n != \"symbol\" ? n + \"\" : n, e);\nclass Ts extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.IEngine {\n    constructor(n){\n        super(n), c(this, \"name\", dt), c(this, \"events\", new (events__WEBPACK_IMPORTED_MODULE_2___default())), c(this, \"initialized\", !1), c(this, \"requestQueue\", {\n            state: $.idle,\n            queue: []\n        }), c(this, \"sessionRequestQueue\", {\n            state: $.idle,\n            queue: []\n        }), c(this, \"requestQueueDelay\", _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_SECOND), c(this, \"expectedPairingMethodMap\", new Map), c(this, \"recentlyDeletedMap\", new Map), c(this, \"recentlyDeletedLimit\", 200), c(this, \"relayMessageCache\", []), c(this, \"pendingSessions\", new Map), c(this, \"init\", async ()=>{\n            this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({\n                methods: Object.keys(N)\n            }), this.initialized = !0, setTimeout(()=>{\n                this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(this.requestQueueDelay)));\n        }), c(this, \"connect\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            const t = x(v({}, e), {\n                requiredNamespaces: e.requiredNamespaces || {},\n                optionalNamespaces: e.optionalNamespaces || {}\n            });\n            await this.isValidConnect(t);\n            const { pairingTopic: s, requiredNamespaces: i, optionalNamespaces: r, sessionProperties: o, relays: a } = t;\n            let l = s, u, g = !1;\n            try {\n                if (l) {\n                    const R = this.client.core.pairing.pairings.get(l);\n                    this.client.logger.warn(\"connect() with existing pairing topic is deprecated and will be removed in the next major release.\"), g = R.active;\n                }\n            } catch (R) {\n                throw this.client.logger.error(`connect() -> pairing.get(${l}) failed`), R;\n            }\n            if (!l || !g) {\n                const { topic: R, uri: D } = await this.client.core.pairing.create();\n                l = R, u = D;\n            }\n            if (!l) {\n                const { message: R } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `connect() pairing topic: ${l}`);\n                throw new Error(R);\n            }\n            const h = await this.client.core.crypto.generateKeyPair(), d = N.wc_sessionPropose.req.ttl || _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES, y = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(d), m = x(v({\n                requiredNamespaces: i,\n                optionalNamespaces: r,\n                relays: a ?? [\n                    {\n                        protocol: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_DEFAULT_PROTOCOL\n                    }\n                ],\n                proposer: {\n                    publicKey: h,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: y,\n                pairingTopic: l\n            }, o && {\n                sessionProperties: o\n            }), {\n                id: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)()\n            }), I = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", m.id), { reject: p, resolve: E, done: V } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(d, $e), q = ({ id: R })=>{\n                R === m.id && (this.client.events.off(\"proposal_expire\", q), this.pendingSessions.delete(m.id), this.events.emit(I, {\n                    error: {\n                        message: $e,\n                        code: 0\n                    }\n                }));\n            };\n            return this.client.events.on(\"proposal_expire\", q), this.events.once(I, ({ error: R, session: D })=>{\n                this.client.events.off(\"proposal_expire\", q), R ? p(R) : D && E(D);\n            }), await this.sendRequest({\n                topic: l,\n                method: \"wc_sessionPropose\",\n                params: m,\n                throwOnFailedPublish: !0,\n                clientRpcId: m.id\n            }), await this.setProposal(m.id, m), {\n                uri: u,\n                approval: V\n            };\n        }), c(this, \"pair\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                return await this.client.core.pairing.pair(e);\n            } catch (t) {\n                throw this.client.logger.error(\"pair() failed\"), t;\n            }\n        }), c(this, \"approve\", async (e)=>{\n            var t, s, i;\n            const r = this.client.core.eventClient.createEvent({\n                properties: {\n                    topic: (t = e?.id) == null ? void 0 : t.toString(),\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started\n                    ]\n                }\n            });\n            try {\n                this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            } catch (P) {\n                throw r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.no_internet_connection), P;\n            }\n            try {\n                await this.isValidProposalId(e?.id);\n            } catch (P) {\n                throw this.client.logger.error(`approve() -> proposal.get(${e?.id}) failed`), r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.proposal_not_found), P;\n            }\n            try {\n                await this.isValidApprove(e);\n            } catch (P) {\n                throw this.client.logger.error(\"approve() -> isValidApprove() failed\"), r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure), P;\n            }\n            const { id: o, relayProtocol: a, namespaces: l, sessionProperties: u, sessionConfig: g } = e, h = this.client.proposal.get(o);\n            this.client.core.eventClient.deleteEvent({\n                eventId: r.eventId\n            });\n            const { pairingTopic: d, proposer: y, requiredNamespaces: m, optionalNamespaces: I } = h;\n            let p = (s = this.client.core.eventClient) == null ? void 0 : s.getEvent({\n                topic: d\n            });\n            p || (p = (i = this.client.core.eventClient) == null ? void 0 : i.createEvent({\n                type: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n                properties: {\n                    topic: d,\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success\n                    ]\n                }\n            }));\n            const E = await this.client.core.crypto.generateKeyPair(), V = y.publicKey, q = await this.client.core.crypto.generateSharedKey(E, V), R = v(v({\n                relay: {\n                    protocol: a ?? \"irn\"\n                },\n                namespaces: l,\n                controller: {\n                    publicKey: E,\n                    metadata: this.client.metadata\n                },\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y)\n            }, u && {\n                sessionProperties: u\n            }), g && {\n                sessionConfig: g\n            }), D = _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay;\n            p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n            try {\n                await this.client.core.relayer.subscribe(q, {\n                    transportType: D\n                });\n            } catch (P) {\n                throw p.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure), P;\n            }\n            p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n            const ee = x(v({}, R), {\n                topic: q,\n                requiredNamespaces: m,\n                optionalNamespaces: I,\n                pairingTopic: d,\n                acknowledged: !1,\n                self: R.controller,\n                peer: {\n                    publicKey: y.publicKey,\n                    metadata: y.metadata\n                },\n                controller: E,\n                transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay\n            });\n            await this.client.session.set(q, ee), p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.store_session);\n            try {\n                p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.publishing_session_settle), await this.sendRequest({\n                    topic: q,\n                    method: \"wc_sessionSettle\",\n                    params: R,\n                    throwOnFailedPublish: !0\n                }).catch((P)=>{\n                    throw p?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure), P;\n                }), p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success), p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.publishing_session_approve), await this.sendResult({\n                    id: o,\n                    topic: d,\n                    result: {\n                        relay: {\n                            protocol: a ?? \"irn\"\n                        },\n                        responderPublicKey: E\n                    },\n                    throwOnFailedPublish: !0\n                }).catch((P)=>{\n                    throw p?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure), P;\n                }), p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n            } catch (P) {\n                throw this.client.logger.error(P), this.client.session.delete(q, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), await this.client.core.relayer.unsubscribe(q), P;\n            }\n            return this.client.core.eventClient.deleteEvent({\n                eventId: p.eventId\n            }), await this.client.core.pairing.updateMetadata({\n                topic: d,\n                metadata: y.metadata\n            }), await this.client.proposal.delete(o, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), await this.client.core.pairing.activate({\n                topic: d\n            }), await this.setExpiry(q, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y)), {\n                topic: q,\n                acknowledged: ()=>Promise.resolve(this.client.session.get(q))\n            };\n        }), c(this, \"reject\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidReject(e);\n            } catch (r) {\n                throw this.client.logger.error(\"reject() -> isValidReject() failed\"), r;\n            }\n            const { id: t, reason: s } = e;\n            let i;\n            try {\n                i = this.client.proposal.get(t).pairingTopic;\n            } catch (r) {\n                throw this.client.logger.error(`reject() -> proposal.get(${t}) failed`), r;\n            }\n            i && (await this.sendError({\n                id: t,\n                topic: i,\n                error: s,\n                rpcOpts: N.wc_sessionPropose.reject\n            }), await this.client.proposal.delete(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")));\n        }), c(this, \"update\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidUpdate(e);\n            } catch (g) {\n                throw this.client.logger.error(\"update() -> isValidUpdate() failed\"), g;\n            }\n            const { topic: t, namespaces: s } = e, { done: i, resolve: r, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(), a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), u = this.client.session.get(t).namespaces;\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", a), ({ error: g })=>{\n                g ? o(g) : r();\n            }), await this.client.session.update(t, {\n                namespaces: s\n            }), await this.sendRequest({\n                topic: t,\n                method: \"wc_sessionUpdate\",\n                params: {\n                    namespaces: s\n                },\n                throwOnFailedPublish: !0,\n                clientRpcId: a,\n                relayRpcId: l\n            }).catch((g)=>{\n                this.client.logger.error(g), this.client.session.update(t, {\n                    namespaces: u\n                }), o(g);\n            }), {\n                acknowledged: i\n            };\n        }), c(this, \"extend\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidExtend(e);\n            } catch (a) {\n                throw this.client.logger.error(\"extend() -> isValidExtend() failed\"), a;\n            }\n            const { topic: t } = e, s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), { done: i, resolve: r, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), ({ error: a })=>{\n                a ? o(a) : r();\n            }), await this.setExpiry(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y)), this.sendRequest({\n                topic: t,\n                method: \"wc_sessionExtend\",\n                params: {},\n                clientRpcId: s,\n                throwOnFailedPublish: !0\n            }).catch((a)=>{\n                o(a);\n            }), {\n                acknowledged: i\n            };\n        }), c(this, \"request\", async (e)=>{\n            this.isInitialized();\n            try {\n                await this.isValidRequest(e);\n            } catch (p) {\n                throw this.client.logger.error(\"request() -> isValidRequest() failed\"), p;\n            }\n            const { chainId: t, request: s, topic: i, expiry: r = N.wc_sessionRequest.req.ttl } = e, o = this.client.session.get(i);\n            o?.transportType === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), { done: u, resolve: g, reject: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(r, \"Request expired. Please try again.\");\n            this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", a), ({ error: p, result: E })=>{\n                p ? h(p) : g(E);\n            });\n            const d = \"wc_sessionRequest\", y = this.getAppLinkIfEnabled(o.peer.metadata, o.transportType);\n            if (y) return await this.sendRequest({\n                clientRpcId: a,\n                relayRpcId: l,\n                topic: i,\n                method: d,\n                params: {\n                    request: x(v({}, s), {\n                        expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(r)\n                    }),\n                    chainId: t\n                },\n                expiry: r,\n                throwOnFailedPublish: !0,\n                appLink: y\n            }).catch((p)=>h(p)), this.client.events.emit(\"session_request_sent\", {\n                topic: i,\n                request: s,\n                chainId: t,\n                id: a\n            }), await u();\n            const m = {\n                request: x(v({}, s), {\n                    expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(r)\n                }),\n                chainId: t\n            }, I = this.shouldSetTVF(d, m);\n            return await Promise.all([\n                new Promise(async (p)=>{\n                    await this.sendRequest(v({\n                        clientRpcId: a,\n                        relayRpcId: l,\n                        topic: i,\n                        method: d,\n                        params: m,\n                        expiry: r,\n                        throwOnFailedPublish: !0\n                    }, I && {\n                        tvf: this.getTVFParams(a, m)\n                    })).catch((E)=>h(E)), this.client.events.emit(\"session_request_sent\", {\n                        topic: i,\n                        request: s,\n                        chainId: t,\n                        id: a\n                    }), p();\n                }),\n                new Promise(async (p)=>{\n                    var E;\n                    if (!((E = o.sessionConfig) != null && E.disableDeepLink)) {\n                        const V = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDeepLink)(this.client.core.storage, ke);\n                        await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.handleDeeplinkRedirect)({\n                            id: a,\n                            topic: i,\n                            wcDeepLink: V\n                        });\n                    }\n                    p();\n                }),\n                u()\n            ]).then((p)=>p[2]);\n        }), c(this, \"respond\", async (e)=>{\n            this.isInitialized(), await this.isValidRespond(e);\n            const { topic: t, response: s } = e, { id: i } = s, r = this.client.session.get(t);\n            r.transportType === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const o = this.getAppLinkIfEnabled(r.peer.metadata, r.transportType);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(s) ? await this.sendResult({\n                id: i,\n                topic: t,\n                result: s.result,\n                throwOnFailedPublish: !0,\n                appLink: o\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(s) && await this.sendError({\n                id: i,\n                topic: t,\n                error: s.error,\n                appLink: o\n            }), this.cleanupAfterResponse(e);\n        }), c(this, \"ping\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidPing(e);\n            } catch (s) {\n                throw this.client.logger.error(\"ping() -> isValidPing() failed\"), s;\n            }\n            const { topic: t } = e;\n            if (this.client.session.keys.includes(t)) {\n                const s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), i = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), { done: r, resolve: o, reject: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), ({ error: l })=>{\n                    l ? a(l) : o();\n                }), await Promise.all([\n                    this.sendRequest({\n                        topic: t,\n                        method: \"wc_sessionPing\",\n                        params: {},\n                        throwOnFailedPublish: !0,\n                        clientRpcId: s,\n                        relayRpcId: i\n                    }),\n                    r()\n                ]);\n            } else this.client.core.pairing.pairings.keys.includes(t) && (this.client.logger.warn(\"ping() on pairing topic is deprecated and will be removed in the next major release.\"), await this.client.core.pairing.ping({\n                topic: t\n            }));\n        }), c(this, \"emit\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e);\n            const { topic: t, event: s, chainId: i } = e, r = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)();\n            await this.sendRequest({\n                topic: t,\n                method: \"wc_sessionEvent\",\n                params: {\n                    event: s,\n                    chainId: i\n                },\n                throwOnFailedPublish: !0,\n                relayRpcId: r,\n                clientRpcId: o\n            });\n        }), c(this, \"disconnect\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e);\n            const { topic: t } = e;\n            if (this.client.session.keys.includes(t)) await this.sendRequest({\n                topic: t,\n                method: \"wc_sessionDelete\",\n                params: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"),\n                throwOnFailedPublish: !0\n            }), await this.deleteSession({\n                topic: t,\n                emitEvent: !1\n            });\n            else if (this.client.core.pairing.pairings.keys.includes(t)) await this.client.core.pairing.disconnect({\n                topic: t\n            });\n            else {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISMATCHED_TOPIC\", `Session or pairing topic not found: ${t}`);\n                throw new Error(s);\n            }\n        }), c(this, \"find\", (e)=>(this.isInitialized(), this.client.session.getAll().filter((t)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isSessionCompatible)(t, e)))), c(this, \"getPendingSessionRequests\", ()=>this.client.pendingRequest.getAll()), c(this, \"authenticate\", async (e, t)=>{\n            var s;\n            this.isInitialized(), this.isValidAuthenticate(e);\n            const i = t && this.client.core.linkModeSupportedApps.includes(t) && ((s = this.client.metadata.redirect) == null ? void 0 : s.linkMode), r = i ? _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode : _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay;\n            r === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const { chains: o, statement: a = \"\", uri: l, domain: u, nonce: g, type: h, exp: d, nbf: y, methods: m = [], expiry: I } = e, p = [\n                ...e.resources || []\n            ], { topic: E, uri: V } = await this.client.core.pairing.create({\n                methods: [\n                    \"wc_sessionAuthenticate\"\n                ],\n                transportType: r\n            });\n            this.client.logger.info({\n                message: \"Generated new pairing\",\n                pairing: {\n                    topic: E,\n                    uri: V\n                }\n            });\n            const q = await this.client.core.crypto.generateKeyPair(), R = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(q);\n            if (await Promise.all([\n                this.client.auth.authKeys.set(le, {\n                    responseTopic: R,\n                    publicKey: q\n                }),\n                this.client.auth.pairingTopics.set(R, {\n                    topic: R,\n                    pairingTopic: E\n                })\n            ]), await this.client.core.relayer.subscribe(R, {\n                transportType: r\n            }), this.client.logger.info(`sending request to new pairing topic: ${E}`), m.length > 0) {\n                const { namespace: b } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(o[0]);\n                let L = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createEncodedRecap)(b, \"request\", m);\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(p) && (L = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeEncodedRecaps)(L, p.pop())), p.push(L);\n            }\n            const D = I && I > N.wc_sessionAuthenticate.req.ttl ? I : N.wc_sessionAuthenticate.req.ttl, ee = {\n                authPayload: {\n                    type: h ?? \"caip122\",\n                    chains: o,\n                    statement: a,\n                    aud: l,\n                    domain: u,\n                    version: \"1\",\n                    nonce: g,\n                    iat: new Date().toISOString(),\n                    exp: d,\n                    nbf: y,\n                    resources: p\n                },\n                requester: {\n                    publicKey: q,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(D)\n            }, P = {\n                eip155: {\n                    chains: o,\n                    methods: [\n                        ...new Set([\n                            \"personal_sign\",\n                            ...m\n                        ])\n                    ],\n                    events: [\n                        \"chainChanged\",\n                        \"accountsChanged\"\n                    ]\n                }\n            }, X = {\n                requiredNamespaces: {},\n                optionalNamespaces: P,\n                relays: [\n                    {\n                        protocol: \"irn\"\n                    }\n                ],\n                pairingTopic: E,\n                proposer: {\n                    publicKey: q,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionPropose.req.ttl),\n                id: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)()\n            }, { done: ft, resolve: Fe, reject: Re } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(D, \"Request expired\"), te = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), pe = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", X.id), fe = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", te), he = async ({ error: b, session: L })=>{\n                this.events.off(fe, Ie), b ? Re(b) : L && Fe({\n                    session: L\n                });\n            }, Ie = async (b)=>{\n                var L, je, Qe;\n                if (await this.deletePendingAuthRequest(te, {\n                    message: \"fulfilled\",\n                    code: 0\n                }), b.error) {\n                    const ie = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n                    return b.error.code === ie.code ? void 0 : (this.events.off(pe, he), Re(b.error.message));\n                }\n                await this.deleteProposal(X.id), this.events.off(pe, he);\n                const { cacaos: He, responder: Q } = b.result, qe = [], ze = [];\n                for (const ie of He){\n                    await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.validateSignedCacao)({\n                        cacao: ie,\n                        projectId: this.client.core.projectId\n                    }) || (this.client.logger.error(ie, \"Signature verification failed\"), Re((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\")));\n                    const { p: Te } = ie, Ne = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(Te.resources), Ye = [\n                        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getNamespacedDidChainId)(Te.iss)\n                    ], It = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDidAddress)(Te.iss);\n                    if (Ne) {\n                        const Pe = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getMethodsFromRecap)(Ne), vt = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getChainsFromRecap)(Ne);\n                        qe.push(...Pe), Ye.push(...vt);\n                    }\n                    for (const Pe of Ye)ze.push(`${Pe}:${It}`);\n                }\n                const se = await this.client.core.crypto.generateSharedKey(q, Q.publicKey);\n                let de;\n                qe.length > 0 && (de = {\n                    topic: se,\n                    acknowledged: !0,\n                    self: {\n                        publicKey: q,\n                        metadata: this.client.metadata\n                    },\n                    peer: Q,\n                    controller: Q.publicKey,\n                    expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y),\n                    requiredNamespaces: {},\n                    optionalNamespaces: {},\n                    relay: {\n                        protocol: \"irn\"\n                    },\n                    pairingTopic: E,\n                    namespaces: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.buildNamespacesFromAuth)([\n                        ...new Set(qe)\n                    ], [\n                        ...new Set(ze)\n                    ]),\n                    transportType: r\n                }, await this.client.core.relayer.subscribe(se, {\n                    transportType: r\n                }), await this.client.session.set(se, de), E && await this.client.core.pairing.updateMetadata({\n                    topic: E,\n                    metadata: Q.metadata\n                }), de = this.client.session.get(se)), (L = this.client.metadata.redirect) != null && L.linkMode && (je = Q.metadata.redirect) != null && je.linkMode && (Qe = Q.metadata.redirect) != null && Qe.universal && t && (this.client.core.addLinkModeSupportedApp(Q.metadata.redirect.universal), this.client.session.update(se, {\n                    transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode\n                })), Fe({\n                    auths: He,\n                    session: de\n                });\n            };\n            this.events.once(pe, he), this.events.once(fe, Ie);\n            let ve;\n            try {\n                if (i) {\n                    const b = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionAuthenticate\", ee, te);\n                    this.client.core.history.set(E, b);\n                    const L = await this.client.core.crypto.encode(\"\", b, {\n                        type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_2,\n                        encoding: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL\n                    });\n                    ve = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(t, E, L);\n                } else await Promise.all([\n                    this.sendRequest({\n                        topic: E,\n                        method: \"wc_sessionAuthenticate\",\n                        params: ee,\n                        expiry: e.expiry,\n                        throwOnFailedPublish: !0,\n                        clientRpcId: te\n                    }),\n                    this.sendRequest({\n                        topic: E,\n                        method: \"wc_sessionPropose\",\n                        params: X,\n                        expiry: N.wc_sessionPropose.req.ttl,\n                        throwOnFailedPublish: !0,\n                        clientRpcId: X.id\n                    })\n                ]);\n            } catch (b) {\n                throw this.events.off(pe, he), this.events.off(fe, Ie), b;\n            }\n            return await this.setProposal(X.id, X), await this.setAuthRequest(te, {\n                request: x(v({}, ee), {\n                    verifyContext: {}\n                }),\n                pairingTopic: E,\n                transportType: r\n            }), {\n                uri: ve ?? V,\n                response: ft\n            };\n        }), c(this, \"approveSessionAuthenticate\", async (e)=>{\n            const { id: t, auths: s } = e, i = this.client.core.eventClient.createEvent({\n                properties: {\n                    topic: t.toString(),\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started\n                    ]\n                }\n            });\n            try {\n                this.isInitialized();\n            } catch (I) {\n                throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection), I;\n            }\n            const r = this.getPendingAuthRequest(t);\n            if (!r) throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t}`);\n            const o = r.transportType || _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay;\n            o === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const a = r.requester.publicKey, l = await this.client.core.crypto.generateKeyPair(), u = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(a), g = {\n                type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                receiverPublicKey: a,\n                senderPublicKey: l\n            }, h = [], d = [];\n            for (const I of s){\n                if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.validateSignedCacao)({\n                    cacao: I,\n                    projectId: this.client.core.projectId\n                })) {\n                    i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n                    const R = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\");\n                    throw await this.sendError({\n                        id: t,\n                        topic: u,\n                        error: R,\n                        encodeOpts: g\n                    }), new Error(R.message);\n                }\n                i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n                const { p } = I, E = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(p.resources), V = [\n                    (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getNamespacedDidChainId)(p.iss)\n                ], q = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDidAddress)(p.iss);\n                if (E) {\n                    const R = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getMethodsFromRecap)(E), D = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getChainsFromRecap)(E);\n                    h.push(...R), V.push(...D);\n                }\n                for (const R of V)d.push(`${R}:${q}`);\n            }\n            const y = await this.client.core.crypto.generateSharedKey(l, a);\n            i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n            let m;\n            if (h?.length > 0) {\n                m = {\n                    topic: y,\n                    acknowledged: !0,\n                    self: {\n                        publicKey: l,\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: a,\n                        metadata: r.requester.metadata\n                    },\n                    controller: a,\n                    expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y),\n                    authentication: s,\n                    requiredNamespaces: {},\n                    optionalNamespaces: {},\n                    relay: {\n                        protocol: \"irn\"\n                    },\n                    pairingTopic: r.pairingTopic,\n                    namespaces: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.buildNamespacesFromAuth)([\n                        ...new Set(h)\n                    ], [\n                        ...new Set(d)\n                    ]),\n                    transportType: o\n                }, i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n                try {\n                    await this.client.core.relayer.subscribe(y, {\n                        transportType: o\n                    });\n                } catch (I) {\n                    throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure), I;\n                }\n                i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success), await this.client.session.set(y, m), i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session), await this.client.core.pairing.updateMetadata({\n                    topic: r.pairingTopic,\n                    metadata: r.requester.metadata\n                });\n            }\n            i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n            try {\n                await this.sendResult({\n                    topic: u,\n                    id: t,\n                    result: {\n                        cacaos: s,\n                        responder: {\n                            publicKey: l,\n                            metadata: this.client.metadata\n                        }\n                    },\n                    encodeOpts: g,\n                    throwOnFailedPublish: !0,\n                    appLink: this.getAppLinkIfEnabled(r.requester.metadata, o)\n                });\n            } catch (I) {\n                throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure), I;\n            }\n            return await this.client.auth.requests.delete(t, {\n                message: \"fulfilled\",\n                code: 0\n            }), await this.client.core.pairing.activate({\n                topic: r.pairingTopic\n            }), this.client.core.eventClient.deleteEvent({\n                eventId: i.eventId\n            }), {\n                session: m\n            };\n        }), c(this, \"rejectSessionAuthenticate\", async (e)=>{\n            this.isInitialized();\n            const { id: t, reason: s } = e, i = this.getPendingAuthRequest(t);\n            if (!i) throw new Error(`Could not find pending auth request with id ${t}`);\n            i.transportType === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const r = i.requester.publicKey, o = await this.client.core.crypto.generateKeyPair(), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(r), l = {\n                type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                receiverPublicKey: r,\n                senderPublicKey: o\n            };\n            await this.sendError({\n                id: t,\n                topic: a,\n                error: s,\n                encodeOpts: l,\n                rpcOpts: N.wc_sessionAuthenticate.reject,\n                appLink: this.getAppLinkIfEnabled(i.requester.metadata, i.transportType)\n            }), await this.client.auth.requests.delete(t, {\n                message: \"rejected\",\n                code: 0\n            }), await this.client.proposal.delete(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n        }), c(this, \"formatAuthMessage\", (e)=>{\n            this.isInitialized();\n            const { request: t, iss: s } = e;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.formatMessage)(t, s);\n        }), c(this, \"processRelayMessageCache\", ()=>{\n            setTimeout(async ()=>{\n                if (this.relayMessageCache.length !== 0) for(; this.relayMessageCache.length > 0;)try {\n                    const e = this.relayMessageCache.shift();\n                    e && await this.onRelayMessage(e);\n                } catch (e) {\n                    this.client.logger.error(e);\n                }\n            }, 50);\n        }), c(this, \"cleanupDuplicatePairings\", async (e)=>{\n            if (e.pairingTopic) try {\n                const t = this.client.core.pairing.pairings.get(e.pairingTopic), s = this.client.core.pairing.pairings.getAll().filter((i)=>{\n                    var r, o;\n                    return ((r = i.peerMetadata) == null ? void 0 : r.url) && ((o = i.peerMetadata) == null ? void 0 : o.url) === e.peer.metadata.url && i.topic && i.topic !== t.topic;\n                });\n                if (s.length === 0) return;\n                this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`), await Promise.all(s.map((i)=>this.client.core.pairing.disconnect({\n                        topic: i.topic\n                    }))), this.client.logger.info(\"Duplicate pairings clean up finished\");\n            } catch (t) {\n                this.client.logger.error(t);\n            }\n        }), c(this, \"deleteSession\", async (e)=>{\n            var t;\n            const { topic: s, expirerHasDeleted: i = !1, emitEvent: r = !0, id: o = 0 } = e, { self: a } = this.client.session.get(s);\n            await this.client.core.relayer.unsubscribe(s), await this.client.session.delete(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.addToRecentlyDeleted(s, \"session\"), this.client.core.crypto.keychain.has(a.publicKey) && await this.client.core.crypto.deleteKeyPair(a.publicKey), this.client.core.crypto.keychain.has(s) && await this.client.core.crypto.deleteSymKey(s), i || this.client.core.expirer.del(s), this.client.core.storage.removeItem(ke).catch((l)=>this.client.logger.warn(l)), this.getPendingSessionRequests().forEach((l)=>{\n                l.topic === s && this.deletePendingSessionRequest(l.id, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n            }), s === ((t = this.sessionRequestQueue.queue[0]) == null ? void 0 : t.topic) && (this.sessionRequestQueue.state = $.idle), r && this.client.events.emit(\"session_delete\", {\n                id: o,\n                topic: s\n            });\n        }), c(this, \"deleteProposal\", async (e, t)=>{\n            if (t) try {\n                const s = this.client.proposal.get(e), i = this.client.core.eventClient.getEvent({\n                    topic: s.pairingTopic\n                });\n                i?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n            } catch  {}\n            await Promise.all([\n                this.client.proposal.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")),\n                t ? Promise.resolve() : this.client.core.expirer.del(e)\n            ]), this.addToRecentlyDeleted(e, \"proposal\");\n        }), c(this, \"deletePendingSessionRequest\", async (e, t, s = !1)=>{\n            await Promise.all([\n                this.client.pendingRequest.delete(e, t),\n                s ? Promise.resolve() : this.client.core.expirer.del(e)\n            ]), this.addToRecentlyDeleted(e, \"request\"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i)=>i.id !== e), s && (this.sessionRequestQueue.state = $.idle, this.client.events.emit(\"session_request_expire\", {\n                id: e\n            }));\n        }), c(this, \"deletePendingAuthRequest\", async (e, t, s = !1)=>{\n            await Promise.all([\n                this.client.auth.requests.delete(e, t),\n                s ? Promise.resolve() : this.client.core.expirer.del(e)\n            ]);\n        }), c(this, \"setExpiry\", async (e, t)=>{\n            this.client.session.keys.includes(e) && (this.client.core.expirer.set(e, t), await this.client.session.update(e, {\n                expiry: t\n            }));\n        }), c(this, \"setProposal\", async (e, t)=>{\n            this.client.core.expirer.set(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e, t);\n        }), c(this, \"setAuthRequest\", async (e, t)=>{\n            const { request: s, pairingTopic: i, transportType: r = _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay } = t;\n            this.client.core.expirer.set(e, s.expiryTimestamp), await this.client.auth.requests.set(e, {\n                authPayload: s.authPayload,\n                requester: s.requester,\n                expiryTimestamp: s.expiryTimestamp,\n                id: e,\n                pairingTopic: i,\n                verifyContext: s.verifyContext,\n                transportType: r\n            });\n        }), c(this, \"setPendingSessionRequest\", async (e)=>{\n            const { id: t, topic: s, params: i, verifyContext: r } = e, o = i.request.expiryTimestamp || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionRequest.req.ttl);\n            this.client.core.expirer.set(t, o), await this.client.pendingRequest.set(t, {\n                id: t,\n                topic: s,\n                params: i,\n                verifyContext: r\n            });\n        }), c(this, \"sendRequest\", async (e)=>{\n            const { topic: t, method: s, params: i, expiry: r, relayRpcId: o, clientRpcId: a, throwOnFailedPublish: l, appLink: u, tvf: g } = e, h = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(s, i, a);\n            let d;\n            const y = !!u;\n            try {\n                const p = y ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64;\n                d = await this.client.core.crypto.encode(t, h, {\n                    encoding: p\n                });\n            } catch (p) {\n                throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t} failed`), p;\n            }\n            let m;\n            if (gt.includes(s)) {\n                const p = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(h)), E = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(d);\n                m = await this.client.core.verify.register({\n                    id: E,\n                    decryptedId: p\n                });\n            }\n            const I = N[s].req;\n            if (I.attestation = m, r && (I.ttl = r), o && (I.id = o), this.client.core.history.set(t, h), y) {\n                const p = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(u, t, d);\n                await global.Linking.openURL(p, this.client.name);\n            } else {\n                const p = N[s].req;\n                r && (p.ttl = r), o && (p.id = o), p.tvf = x(v({}, g), {\n                    correlationId: h.id\n                }), l ? (p.internal = x(v({}, p.internal), {\n                    throwOnFailedPublish: !0\n                }), await this.client.core.relayer.publish(t, d, p)) : this.client.core.relayer.publish(t, d, p).catch((E)=>this.client.logger.error(E));\n            }\n            return h.id;\n        }), c(this, \"sendResult\", async (e)=>{\n            const { id: t, topic: s, result: i, throwOnFailedPublish: r, encodeOpts: o, appLink: a } = e, l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult)(t, i);\n            let u;\n            const g = a && typeof (global == null ? void 0 : global.Linking) < \"u\";\n            try {\n                const y = g ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64;\n                u = await this.client.core.crypto.encode(s, l, x(v({}, o || {}), {\n                    encoding: y\n                }));\n            } catch (y) {\n                throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`), y;\n            }\n            let h, d;\n            try {\n                h = await this.client.core.history.get(s, t);\n                const y = h.request;\n                try {\n                    this.shouldSetTVF(y.method, y.params) && (d = this.getTVFParams(t, y.params, i));\n                } catch (m) {\n                    this.client.logger.warn(\"sendResult() -> getTVFParams() failed\", m);\n                }\n            } catch (y) {\n                throw this.client.logger.error(`sendResult() -> history.get(${s}, ${t}) failed`), y;\n            }\n            if (g) {\n                const y = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(a, s, u);\n                await global.Linking.openURL(y, this.client.name);\n            } else {\n                const y = h.request.method, m = N[y].res;\n                m.tvf = x(v({}, d), {\n                    correlationId: t\n                }), r ? (m.internal = x(v({}, m.internal), {\n                    throwOnFailedPublish: !0\n                }), await this.client.core.relayer.publish(s, u, m)) : this.client.core.relayer.publish(s, u, m).catch((I)=>this.client.logger.error(I));\n            }\n            await this.client.core.history.resolve(l);\n        }), c(this, \"sendError\", async (e)=>{\n            const { id: t, topic: s, error: i, encodeOpts: r, rpcOpts: o, appLink: a } = e, l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(t, i);\n            let u;\n            const g = a && typeof (global == null ? void 0 : global.Linking) < \"u\";\n            try {\n                const d = g ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64;\n                u = await this.client.core.crypto.encode(s, l, x(v({}, r || {}), {\n                    encoding: d\n                }));\n            } catch (d) {\n                throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`), d;\n            }\n            let h;\n            try {\n                h = await this.client.core.history.get(s, t);\n            } catch (d) {\n                throw this.client.logger.error(`sendError() -> history.get(${s}, ${t}) failed`), d;\n            }\n            if (g) {\n                const d = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(a, s, u);\n                await global.Linking.openURL(d, this.client.name);\n            } else {\n                const d = h.request.method, y = o || N[d].res;\n                this.client.core.relayer.publish(s, u, y);\n            }\n            await this.client.core.history.resolve(l);\n        }), c(this, \"cleanup\", async ()=>{\n            const e = [], t = [];\n            this.client.session.getAll().forEach((s)=>{\n                let i = !1;\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(s.expiry) && (i = !0), this.client.core.crypto.keychain.has(s.topic) || (i = !0), i && e.push(s.topic);\n            }), this.client.proposal.getAll().forEach((s)=>{\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(s.expiryTimestamp) && t.push(s.id);\n            }), await Promise.all([\n                ...e.map((s)=>this.deleteSession({\n                        topic: s\n                    })),\n                ...t.map((s)=>this.deleteProposal(s))\n            ]);\n        }), c(this, \"onRelayEventRequest\", async (e)=>{\n            this.requestQueue.queue.push(e), await this.processRequestsQueue();\n        }), c(this, \"processRequestsQueue\", async ()=>{\n            if (this.requestQueue.state === $.active) {\n                this.client.logger.info(\"Request queue already active, skipping...\");\n                return;\n            }\n            for(this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0;){\n                this.requestQueue.state = $.active;\n                const e = this.requestQueue.queue.shift();\n                if (e) try {\n                    await this.processRequest(e);\n                } catch (t) {\n                    this.client.logger.warn(t);\n                }\n            }\n            this.requestQueue.state = $.idle;\n        }), c(this, \"processRequest\", async (e)=>{\n            const { topic: t, payload: s, attestation: i, transportType: r, encryptedId: o } = e, a = s.method;\n            if (!this.shouldIgnorePairingRequest({\n                topic: t,\n                requestMethod: a\n            })) switch(a){\n                case \"wc_sessionPropose\":\n                    return await this.onSessionProposeRequest({\n                        topic: t,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: o\n                    });\n                case \"wc_sessionSettle\":\n                    return await this.onSessionSettleRequest(t, s);\n                case \"wc_sessionUpdate\":\n                    return await this.onSessionUpdateRequest(t, s);\n                case \"wc_sessionExtend\":\n                    return await this.onSessionExtendRequest(t, s);\n                case \"wc_sessionPing\":\n                    return await this.onSessionPingRequest(t, s);\n                case \"wc_sessionDelete\":\n                    return await this.onSessionDeleteRequest(t, s);\n                case \"wc_sessionRequest\":\n                    return await this.onSessionRequest({\n                        topic: t,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: o,\n                        transportType: r\n                    });\n                case \"wc_sessionEvent\":\n                    return await this.onSessionEventRequest(t, s);\n                case \"wc_sessionAuthenticate\":\n                    return await this.onSessionAuthenticateRequest({\n                        topic: t,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: o,\n                        transportType: r\n                    });\n                default:\n                    return this.client.logger.info(`Unsupported request method ${a}`);\n            }\n        }), c(this, \"onRelayEventResponse\", async (e)=>{\n            const { topic: t, payload: s, transportType: i } = e, r = (await this.client.core.history.get(t, s.id)).request.method;\n            switch(r){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeResponse(t, s, i);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleResponse(t, s);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateResponse(t, s);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendResponse(t, s);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingResponse(t, s);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequestResponse(t, s);\n                case \"wc_sessionAuthenticate\":\n                    return this.onSessionAuthenticateResponse(t, s);\n                default:\n                    return this.client.logger.info(`Unsupported response method ${r}`);\n            }\n        }), c(this, \"onRelayEventUnknownPayload\", (e)=>{\n            const { topic: t } = e, { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `Decoded payload on topic ${t} is not identifiable as a JSON-RPC request or a response.`);\n            throw new Error(s);\n        }), c(this, \"shouldIgnorePairingRequest\", (e)=>{\n            const { topic: t, requestMethod: s } = e, i = this.expectedPairingMethodMap.get(t);\n            return !i || i.includes(s) ? !1 : !!(i.includes(\"wc_sessionAuthenticate\") && this.client.events.listenerCount(\"session_authenticate\") > 0);\n        }), c(this, \"onSessionProposeRequest\", async (e)=>{\n            const { topic: t, payload: s, attestation: i, encryptedId: r } = e, { params: o, id: a } = s;\n            try {\n                const l = this.client.core.eventClient.getEvent({\n                    topic: t\n                });\n                this.client.events.listenerCount(\"session_proposal\") === 0 && (console.warn(\"No listener for session_proposal event\"), l?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found)), this.isValidConnect(v({}, s.params));\n                const u = o.expiryTimestamp || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionPropose.req.ttl), g = v({\n                    id: a,\n                    pairingTopic: t,\n                    expiryTimestamp: u\n                }, o);\n                await this.setProposal(a, g);\n                const h = await this.getVerifyContext({\n                    attestationId: i,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(s)),\n                    encryptedId: r,\n                    metadata: g.proposer.metadata\n                });\n                l?.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal), this.client.events.emit(\"session_proposal\", {\n                    id: a,\n                    params: g,\n                    verifyContext: h\n                });\n            } catch (l) {\n                await this.sendError({\n                    id: a,\n                    topic: t,\n                    error: l,\n                    rpcOpts: N.wc_sessionPropose.autoReject\n                }), this.client.logger.error(l);\n            }\n        }), c(this, \"onSessionProposeResponse\", async (e, t, s)=>{\n            const { id: i } = t;\n            if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t)) {\n                const { result: r } = t;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    result: r\n                });\n                const o = this.client.proposal.get(i);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    proposal: o\n                });\n                const a = o.proposer.publicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    selfPublicKey: a\n                });\n                const l = r.responderPublicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    peerPublicKey: l\n                });\n                const u = await this.client.core.crypto.generateSharedKey(a, l);\n                this.pendingSessions.set(i, {\n                    sessionTopic: u,\n                    pairingTopic: e,\n                    proposalId: i,\n                    publicKey: a\n                });\n                const g = await this.client.core.relayer.subscribe(u, {\n                    transportType: s\n                });\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    subscriptionId: g\n                }), await this.client.core.pairing.activate({\n                    topic: e\n                });\n            } else if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t)) {\n                await this.client.proposal.delete(i, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n                const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", i);\n                if (this.events.listenerCount(r) === 0) throw new Error(`emitting ${r} without any listeners, 954`);\n                this.events.emit(r, {\n                    error: t.error\n                });\n            }\n        }), c(this, \"onSessionSettleRequest\", async (e, t)=>{\n            const { id: s, params: i } = t;\n            try {\n                this.isValidSessionSettleRequest(i);\n                const { relay: r, controller: o, expiry: a, namespaces: l, sessionProperties: u, sessionConfig: g } = t.params, h = [\n                    ...this.pendingSessions.values()\n                ].find((m)=>m.sessionTopic === e);\n                if (!h) return this.client.logger.error(`Pending session not found for topic ${e}`);\n                const d = this.client.proposal.get(h.proposalId), y = x(v(v({\n                    topic: e,\n                    relay: r,\n                    expiry: a,\n                    namespaces: l,\n                    acknowledged: !0,\n                    pairingTopic: h.pairingTopic,\n                    requiredNamespaces: d.requiredNamespaces,\n                    optionalNamespaces: d.optionalNamespaces,\n                    controller: o.publicKey,\n                    self: {\n                        publicKey: h.publicKey,\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: o.publicKey,\n                        metadata: o.metadata\n                    }\n                }, u && {\n                    sessionProperties: u\n                }), g && {\n                    sessionConfig: g\n                }), {\n                    transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay\n                });\n                await this.client.session.set(y.topic, y), await this.setExpiry(y.topic, y.expiry), await this.client.core.pairing.updateMetadata({\n                    topic: h.pairingTopic,\n                    metadata: y.peer.metadata\n                }), this.client.events.emit(\"session_connect\", {\n                    session: y\n                }), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", h.proposalId), {\n                    session: y\n                }), this.pendingSessions.delete(h.proposalId), this.deleteProposal(h.proposalId, !1), this.cleanupDuplicatePairings(y), await this.sendResult({\n                    id: t.id,\n                    topic: e,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                });\n            } catch (r) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }), c(this, \"onSessionSettleResponse\", async (e, t)=>{\n            const { id: s } = t;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? (await this.client.session.update(e, {\n                acknowledged: !0\n            }), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", s), {})) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && (await this.client.session.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", s), {\n                error: t.error\n            }));\n        }), c(this, \"onSessionUpdateRequest\", async (e, t)=>{\n            const { params: s, id: i } = t;\n            try {\n                const r = `${e}_session_update`, o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(r);\n                if (o && this.isRequestOutOfSync(o, i)) {\n                    this.client.logger.warn(`Discarding out of sync request - ${i}`), this.sendError({\n                        id: i,\n                        topic: e,\n                        error: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"INVALID_UPDATE_REQUEST\")\n                    });\n                    return;\n                }\n                this.isValidUpdate(v({\n                    topic: e\n                }, s));\n                try {\n                    _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(r, i), await this.client.session.update(e, {\n                        namespaces: s.namespaces\n                    }), await this.sendResult({\n                        id: i,\n                        topic: e,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    });\n                } catch (a) {\n                    throw _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.delete(r), a;\n                }\n                this.client.events.emit(\"session_update\", {\n                    id: i,\n                    topic: e,\n                    params: s\n                });\n            } catch (r) {\n                await this.sendError({\n                    id: i,\n                    topic: e,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }), c(this, \"isRequestOutOfSync\", (e, t)=>t.toString().slice(0, -3) < e.toString().slice(0, -3)), c(this, \"onSessionUpdateResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionExtendRequest\", async (e, t)=>{\n            const { id: s } = t;\n            try {\n                this.isValidExtend({\n                    topic: e\n                }), await this.setExpiry(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y)), await this.sendResult({\n                    id: s,\n                    topic: e,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                }), this.client.events.emit(\"session_extend\", {\n                    id: s,\n                    topic: e\n                });\n            } catch (i) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: i\n                }), this.client.logger.error(i);\n            }\n        }), c(this, \"onSessionExtendResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionPingRequest\", async (e, t)=>{\n            const { id: s } = t;\n            try {\n                this.isValidPing({\n                    topic: e\n                }), await this.sendResult({\n                    id: s,\n                    topic: e,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                }), this.client.events.emit(\"session_ping\", {\n                    id: s,\n                    topic: e\n                });\n            } catch (i) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: i\n                }), this.client.logger.error(i);\n            }\n        }), c(this, \"onSessionPingResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), {\n                    error: t.error\n                });\n            }, 500);\n        }), c(this, \"onSessionDeleteRequest\", async (e, t)=>{\n            const { id: s } = t;\n            try {\n                this.isValidDisconnect({\n                    topic: e,\n                    reason: t.params\n                }), Promise.all([\n                    new Promise((i)=>{\n                        this.client.core.relayer.once(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.publish, async ()=>{\n                            i(await this.deleteSession({\n                                topic: e,\n                                id: s\n                            }));\n                        });\n                    }),\n                    this.sendResult({\n                        id: s,\n                        topic: e,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    }),\n                    this.cleanupPendingSentRequestsForTopic({\n                        topic: e,\n                        error: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")\n                    })\n                ]).catch((i)=>this.client.logger.error(i));\n            } catch (i) {\n                this.client.logger.error(i);\n            }\n        }), c(this, \"onSessionRequest\", async (e)=>{\n            var t, s, i;\n            const { topic: r, payload: o, attestation: a, encryptedId: l, transportType: u } = e, { id: g, params: h } = o;\n            try {\n                await this.isValidRequest(v({\n                    topic: r\n                }, h));\n                const d = this.client.session.get(r), y = await this.getVerifyContext({\n                    attestationId: a,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionRequest\", h, g))),\n                    encryptedId: l,\n                    metadata: d.peer.metadata,\n                    transportType: u\n                }), m = {\n                    id: g,\n                    topic: r,\n                    params: h,\n                    verifyContext: y\n                };\n                await this.setPendingSessionRequest(m), u === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode && (t = d.peer.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp((s = d.peer.metadata.redirect) == null ? void 0 : s.universal), (i = this.client.signConfig) != null && i.disableRequestQueue ? this.emitSessionRequest(m) : (this.addSessionRequestToSessionRequestQueue(m), this.processSessionRequestQueue());\n            } catch (d) {\n                await this.sendError({\n                    id: g,\n                    topic: r,\n                    error: d\n                }), this.client.logger.error(d);\n            }\n        }), c(this, \"onSessionRequestResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                result: t.result\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionEventRequest\", async (e, t)=>{\n            const { id: s, params: i } = t;\n            try {\n                const r = `${e}_session_event_${i.event.name}`, o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(r);\n                if (o && this.isRequestOutOfSync(o, s)) {\n                    this.client.logger.info(`Discarding out of sync request - ${s}`);\n                    return;\n                }\n                this.isValidEmit(v({\n                    topic: e\n                }, i)), this.client.events.emit(\"session_event\", {\n                    id: s,\n                    topic: e,\n                    params: i\n                }), _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(r, s);\n            } catch (r) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }), c(this, \"onSessionAuthenticateResponse\", (e, t)=>{\n            const { id: s } = t;\n            this.client.logger.trace({\n                type: \"method\",\n                method: \"onSessionAuthenticateResponse\",\n                topic: e,\n                payload: t\n            }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                result: t.result\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionAuthenticateRequest\", async (e)=>{\n            var t;\n            const { topic: s, payload: i, attestation: r, encryptedId: o, transportType: a } = e;\n            try {\n                const { requester: l, authPayload: u, expiryTimestamp: g } = i.params, h = await this.getVerifyContext({\n                    attestationId: r,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(i)),\n                    encryptedId: o,\n                    metadata: l.metadata,\n                    transportType: a\n                }), d = {\n                    requester: l,\n                    pairingTopic: s,\n                    id: i.id,\n                    authPayload: u,\n                    verifyContext: h,\n                    expiryTimestamp: g\n                };\n                await this.setAuthRequest(i.id, {\n                    request: d,\n                    pairingTopic: s,\n                    transportType: a\n                }), a === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode && (t = l.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp(l.metadata.redirect.universal), this.client.events.emit(\"session_authenticate\", {\n                    topic: s,\n                    params: i.params,\n                    id: i.id,\n                    verifyContext: h\n                });\n            } catch (l) {\n                this.client.logger.error(l);\n                const u = i.params.requester.publicKey, g = await this.client.core.crypto.generateKeyPair(), h = this.getAppLinkIfEnabled(i.params.requester.metadata, a), d = {\n                    type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                    receiverPublicKey: u,\n                    senderPublicKey: g\n                };\n                await this.sendError({\n                    id: i.id,\n                    topic: s,\n                    error: l,\n                    encodeOpts: d,\n                    rpcOpts: N.wc_sessionAuthenticate.autoReject,\n                    appLink: h\n                });\n            }\n        }), c(this, \"addSessionRequestToSessionRequestQueue\", (e)=>{\n            this.sessionRequestQueue.queue.push(e);\n        }), c(this, \"cleanupAfterResponse\", (e)=>{\n            this.deletePendingSessionRequest(e.response.id, {\n                message: \"fulfilled\",\n                code: 0\n            }), setTimeout(()=>{\n                this.sessionRequestQueue.state = $.idle, this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(this.requestQueueDelay));\n        }), c(this, \"cleanupPendingSentRequestsForTopic\", ({ topic: e, error: t })=>{\n            const s = this.client.core.history.pending;\n            s.length > 0 && s.filter((i)=>i.topic === e && i.request.method === \"wc_sessionRequest\").forEach((i)=>{\n                const r = i.request.id, o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", r);\n                if (this.events.listenerCount(o) === 0) throw new Error(`emitting ${o} without any listeners`);\n                this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", i.request.id), {\n                    error: t\n                });\n            });\n        }), c(this, \"processSessionRequestQueue\", ()=>{\n            if (this.sessionRequestQueue.state === $.active) {\n                this.client.logger.info(\"session request queue is already active.\");\n                return;\n            }\n            const e = this.sessionRequestQueue.queue[0];\n            if (!e) {\n                this.client.logger.info(\"session request queue is empty.\");\n                return;\n            }\n            try {\n                this.sessionRequestQueue.state = $.active, this.emitSessionRequest(e);\n            } catch (t) {\n                this.client.logger.error(t);\n            }\n        }), c(this, \"emitSessionRequest\", (e)=>{\n            this.client.events.emit(\"session_request\", e);\n        }), c(this, \"onPairingCreated\", (e)=>{\n            if (e.methods && this.expectedPairingMethodMap.set(e.topic, e.methods), e.active) return;\n            const t = this.client.proposal.getAll().find((s)=>s.pairingTopic === e.topic);\n            t && this.onSessionProposeRequest({\n                topic: e.topic,\n                payload: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionPropose\", {\n                    requiredNamespaces: t.requiredNamespaces,\n                    optionalNamespaces: t.optionalNamespaces,\n                    relays: t.relays,\n                    proposer: t.proposer,\n                    sessionProperties: t.sessionProperties\n                }, t.id)\n            });\n        }), c(this, \"isValidConnect\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `connect() params: ${JSON.stringify(e)}`);\n                throw new Error(a);\n            }\n            const { pairingTopic: t, requiredNamespaces: s, optionalNamespaces: i, sessionProperties: r, relays: o } = e;\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(t) || await this.isValidPairingTopic(t), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelays)(o, !0)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `connect() relays: ${o}`);\n                throw new Error(a);\n            }\n            !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(s) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(s) !== 0 && this.validateNamespaces(s, \"requiredNamespaces\"), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(i) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(i) !== 0 && this.validateNamespaces(i, \"optionalNamespaces\"), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(r) || this.validateSessionProps(r, \"sessionProperties\");\n        }), c(this, \"validateNamespaces\", (e, t)=>{\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequiredNamespaces)(e, \"connect()\", t);\n            if (s) throw new Error(s.message);\n        }), c(this, \"isValidApprove\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `approve() params: ${e}`).message);\n            const { id: t, namespaces: s, relayProtocol: i, sessionProperties: r } = e;\n            this.checkRecentlyDeleted(t), await this.isValidProposalId(t);\n            const o = this.client.proposal.get(t), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(s, \"approve()\");\n            if (a) throw new Error(a.message);\n            const l = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(o.requiredNamespaces, s, \"approve()\");\n            if (l) throw new Error(l.message);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(i, !0)) {\n                const { message: u } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `approve() relayProtocol: ${i}`);\n                throw new Error(u);\n            }\n            (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(r) || this.validateSessionProps(r, \"sessionProperties\");\n        }), c(this, \"isValidReject\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `reject() params: ${e}`);\n                throw new Error(i);\n            }\n            const { id: t, reason: s } = e;\n            if (this.checkRecentlyDeleted(t), await this.isValidProposalId(t), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidErrorReason)(s)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `reject() reason: ${JSON.stringify(s)}`);\n                throw new Error(i);\n            }\n        }), c(this, \"isValidSessionSettleRequest\", (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: l } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `onSessionSettleRequest() params: ${e}`);\n                throw new Error(l);\n            }\n            const { relay: t, controller: s, namespaces: i, expiry: r } = e;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelay)(t)) {\n                const { message: l } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n                throw new Error(l);\n            }\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidController)(s, \"onSessionSettleRequest()\");\n            if (o) throw new Error(o.message);\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(i, \"onSessionSettleRequest()\");\n            if (a) throw new Error(a.message);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(r)) {\n                const { message: l } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"onSessionSettleRequest()\");\n                throw new Error(l);\n            }\n        }), c(this, \"isValidUpdate\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `update() params: ${e}`);\n                throw new Error(a);\n            }\n            const { topic: t, namespaces: s } = e;\n            this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);\n            const i = this.client.session.get(t), r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(s, \"update()\");\n            if (r) throw new Error(r.message);\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(i.requiredNamespaces, s, \"update()\");\n            if (o) throw new Error(o.message);\n        }), c(this, \"isValidExtend\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `extend() params: ${e}`);\n                throw new Error(s);\n            }\n            const { topic: t } = e;\n            this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);\n        }), c(this, \"isValidRequest\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() params: ${e}`);\n                throw new Error(a);\n            }\n            const { topic: t, request: s, chainId: i, expiry: r } = e;\n            this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);\n            const { namespaces: o } = this.client.session.get(t);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(o, i)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() chainId: ${i}`);\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequest)(s)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() ${JSON.stringify(s)}`);\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesRequest)(o, i, s.method)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() method: ${s.method}`);\n                throw new Error(a);\n            }\n            if (r && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequestExpiry)(r, Ee)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() expiry: ${r}. Expiry must be a number (in seconds) between ${Ee.min} and ${Ee.max}`);\n                throw new Error(a);\n            }\n        }), c(this, \"isValidRespond\", async (e)=>{\n            var t;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `respond() params: ${e}`);\n                throw new Error(r);\n            }\n            const { topic: s, response: i } = e;\n            try {\n                await this.isValidSessionTopic(s);\n            } catch (r) {\n                throw (t = e?.response) != null && t.id && this.cleanupAfterResponse(e), r;\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidResponse)(i)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `respond() response: ${JSON.stringify(i)}`);\n                throw new Error(r);\n            }\n        }), c(this, \"isValidPing\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `ping() params: ${e}`);\n                throw new Error(s);\n            }\n            const { topic: t } = e;\n            await this.isValidSessionOrPairingTopic(t);\n        }), c(this, \"isValidEmit\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() params: ${e}`);\n                throw new Error(o);\n            }\n            const { topic: t, event: s, chainId: i } = e;\n            await this.isValidSessionTopic(t);\n            const { namespaces: r } = this.client.session.get(t);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(r, i)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() chainId: ${i}`);\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidEvent)(s)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(s)}`);\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesEvent)(r, i, s.name)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(s)}`);\n                throw new Error(o);\n            }\n        }), c(this, \"isValidDisconnect\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `disconnect() params: ${e}`);\n                throw new Error(s);\n            }\n            const { topic: t } = e;\n            await this.isValidSessionOrPairingTopic(t);\n        }), c(this, \"isValidAuthenticate\", (e)=>{\n            const { chains: t, uri: s, domain: i, nonce: r } = e;\n            if (!Array.isArray(t) || t.length === 0) throw new Error(\"chains is required and must be a non-empty array\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(s, !1)) throw new Error(\"uri is required parameter\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(i, !1)) throw new Error(\"domain is required parameter\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(r, !1)) throw new Error(\"nonce is required parameter\");\n            if ([\n                ...new Set(t.map((a)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(a).namespace))\n            ].length > 1) throw new Error(\"Multi-namespace requests are not supported. Please request single namespace only.\");\n            const { namespace: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(t[0]);\n            if (o !== \"eip155\") throw new Error(\"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\");\n        }), c(this, \"getVerifyContext\", async (e)=>{\n            const { attestationId: t, hash: s, encryptedId: i, metadata: r, transportType: o } = e, a = {\n                verified: {\n                    verifyUrl: r.verifyUrl || _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.VERIFY_SERVER,\n                    validation: \"UNKNOWN\",\n                    origin: r.url || \"\"\n                }\n            };\n            try {\n                if (o === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode) {\n                    const u = this.getAppLinkIfEnabled(r, o);\n                    return a.verified.validation = u && new URL(u).origin === new URL(r.url).origin ? \"VALID\" : \"INVALID\", a;\n                }\n                const l = await this.client.core.verify.resolve({\n                    attestationId: t,\n                    hash: s,\n                    encryptedId: i,\n                    verifyUrl: r.verifyUrl\n                });\n                l && (a.verified.origin = l.origin, a.verified.isScam = l.isScam, a.verified.validation = l.origin === new URL(r.url).origin ? \"VALID\" : \"INVALID\");\n            } catch (l) {\n                this.client.logger.warn(l);\n            }\n            return this.client.logger.debug(`Verify context: ${JSON.stringify(a)}`), a;\n        }), c(this, \"validateSessionProps\", (e, t)=>{\n            Object.values(e).forEach((s)=>{\n                if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(s, !1)) {\n                    const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `${t} must be in Record<string, string> format. Received: ${JSON.stringify(s)}`);\n                    throw new Error(i);\n                }\n            });\n        }), c(this, \"getPendingAuthRequest\", (e)=>{\n            const t = this.client.auth.requests.get(e);\n            return typeof t == \"object\" ? t : void 0;\n        }), c(this, \"addToRecentlyDeleted\", (e, t)=>{\n            if (this.recentlyDeletedMap.set(e, t), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n                let s = 0;\n                const i = this.recentlyDeletedLimit / 2;\n                for (const r of this.recentlyDeletedMap.keys()){\n                    if (s++ >= i) break;\n                    this.recentlyDeletedMap.delete(r);\n                }\n            }\n        }), c(this, \"checkRecentlyDeleted\", (e)=>{\n            const t = this.recentlyDeletedMap.get(e);\n            if (t) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `Record was recently deleted - ${t}: ${e}`);\n                throw new Error(s);\n            }\n        }), c(this, \"isLinkModeEnabled\", (e, t)=>{\n            var s, i, r, o, a, l, u, g, h;\n            return !e || t !== _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode ? !1 : ((i = (s = this.client.metadata) == null ? void 0 : s.redirect) == null ? void 0 : i.linkMode) === !0 && ((o = (r = this.client.metadata) == null ? void 0 : r.redirect) == null ? void 0 : o.universal) !== void 0 && ((l = (a = this.client.metadata) == null ? void 0 : a.redirect) == null ? void 0 : l.universal) !== \"\" && ((u = e?.redirect) == null ? void 0 : u.universal) !== void 0 && ((g = e?.redirect) == null ? void 0 : g.universal) !== \"\" && ((h = e?.redirect) == null ? void 0 : h.linkMode) === !0 && this.client.core.linkModeSupportedApps.includes(e.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < \"u\";\n        }), c(this, \"getAppLinkIfEnabled\", (e, t)=>{\n            var s;\n            return this.isLinkModeEnabled(e, t) ? (s = e?.redirect) == null ? void 0 : s.universal : void 0;\n        }), c(this, \"handleLinkModeMessage\", ({ url: e })=>{\n            if (!e || !e.includes(\"wc_ev\") || !e.includes(\"topic\")) return;\n            const t = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSearchParamFromURL)(e, \"topic\") || \"\", s = decodeURIComponent((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSearchParamFromURL)(e, \"wc_ev\") || \"\"), i = this.client.session.keys.includes(t);\n            i && this.client.session.update(t, {\n                transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode\n            }), this.client.core.dispatchEnvelope({\n                topic: t,\n                message: s,\n                sessionExists: i\n            });\n        }), c(this, \"registerLinkModeListeners\", async ()=>{\n            var e;\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isTestRun)() || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isReactNative)() && (e = this.client.metadata.redirect) != null && e.linkMode) {\n                const t = global == null ? void 0 : global.Linking;\n                if (typeof t < \"u\") {\n                    t.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n                    const s = await t.getInitialURL();\n                    s && setTimeout(()=>{\n                        this.handleLinkModeMessage({\n                            url: s\n                        });\n                    }, 50);\n                }\n            }\n        }), c(this, \"shouldSetTVF\", (e, t)=>{\n            if (!t || e !== \"wc_sessionRequest\") return !1;\n            const { request: s } = t;\n            return Object.keys(Ke).includes(s.method);\n        }), c(this, \"getTVFParams\", (e, t, s)=>{\n            var i, r;\n            try {\n                const o = t.request.method, a = this.extractTxHashesFromResult(o, s);\n                return x(v({\n                    correlationId: e,\n                    rpcMethods: [\n                        o\n                    ],\n                    chainId: t.chainId\n                }, this.isValidContractData(t.request.params) && {\n                    contractAddresses: [\n                        (r = (i = t.request.params) == null ? void 0 : i[0]) == null ? void 0 : r.to\n                    ]\n                }), {\n                    txHashes: a\n                });\n            } catch (o) {\n                this.client.logger.warn(\"Error getting TVF params\", o);\n            }\n            return {};\n        }), c(this, \"isValidContractData\", (e)=>{\n            var t;\n            if (!e) return !1;\n            try {\n                const s = e?.data || ((t = e?.[0]) == null ? void 0 : t.data);\n                if (!s.startsWith(\"0x\")) return !1;\n                const i = s.slice(2);\n                return /^[0-9a-fA-F]*$/.test(i) ? i.length % 2 === 0 : !1;\n            } catch  {}\n            return !1;\n        }), c(this, \"extractTxHashesFromResult\", (e, t)=>{\n            try {\n                const s = Ke[e];\n                if (typeof t == \"string\") return [\n                    t\n                ];\n                const i = t[s.key];\n                if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(i)) return i;\n                if (typeof i == \"string\") return [\n                    i\n                ];\n            } catch (s) {\n                this.client.logger.warn(\"Error extracting tx hashes from result\", s);\n            }\n            return [];\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(n);\n        }\n    }\n    async confirmOnlineStateOrThrow() {\n        await this.client.core.relayer.confirmOnlineStateOrThrow();\n    }\n    registerRelayerEvents() {\n        this.client.core.relayer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.message, (n)=>{\n            !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(n) : this.onRelayMessage(n);\n        });\n    }\n    async onRelayMessage(n) {\n        const { topic: e, message: t, attestation: s, transportType: i } = n, { publicKey: r } = this.client.auth.authKeys.keys.includes(le) ? this.client.auth.authKeys.get(le) : {\n            responseTopic: void 0,\n            publicKey: void 0\n        }, o = await this.client.core.crypto.decode(e, t, {\n            receiverPublicKey: r,\n            encoding: i === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64\n        });\n        try {\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcRequest)(o) ? (this.client.core.history.set(e, o), this.onRelayEventRequest({\n                topic: e,\n                payload: o,\n                attestation: s,\n                transportType: i,\n                encryptedId: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(t)\n            })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResponse)(o) ? (await this.client.core.history.resolve(o), await this.onRelayEventResponse({\n                topic: e,\n                payload: o,\n                transportType: i\n            }), this.client.core.history.delete(e, o.id)) : this.onRelayEventUnknownPayload({\n                topic: e,\n                payload: o,\n                transportType: i\n            });\n        } catch (a) {\n            this.client.logger.error(a);\n        }\n    }\n    registerExpirerEvents() {\n        this.client.core.expirer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EXPIRER_EVENTS.expired, async (n)=>{\n            const { topic: e, id: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseExpirerTarget)(n.target);\n            if (t && this.client.pendingRequest.keys.includes(t)) return await this.deletePendingSessionRequest(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\"), !0);\n            if (t && this.client.auth.requests.keys.includes(t)) return await this.deletePendingAuthRequest(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\"), !0);\n            e ? this.client.session.keys.includes(e) && (await this.deleteSession({\n                topic: e,\n                expirerHasDeleted: !0\n            }), this.client.events.emit(\"session_expire\", {\n                topic: e\n            })) : t && (await this.deleteProposal(t, !0), this.client.events.emit(\"proposal_expire\", {\n                id: t\n            }));\n        });\n    }\n    registerPairingEvents() {\n        this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.PAIRING_EVENTS.create, (n)=>this.onPairingCreated(n)), this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.PAIRING_EVENTS.delete, (n)=>{\n            this.addToRecentlyDeleted(n.topic, \"pairing\");\n        });\n    }\n    isValidPairingTopic(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${n}`);\n            throw new Error(e);\n        }\n        if (!this.client.core.pairing.pairings.keys.includes(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${n}`);\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.core.pairing.pairings.get(n).expiry)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", `pairing topic: ${n}`);\n            throw new Error(e);\n        }\n    }\n    async isValidSessionTopic(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `session topic should be a string: ${n}`);\n            throw new Error(e);\n        }\n        if (this.checkRecentlyDeleted(n), !this.client.session.keys.includes(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `session topic doesn't exist: ${n}`);\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.session.get(n).expiry)) {\n            await this.deleteSession({\n                topic: n\n            });\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", `session topic: ${n}`);\n            throw new Error(e);\n        }\n        if (!this.client.core.crypto.keychain.has(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `session topic does not exist in keychain: ${n}`);\n            throw await this.deleteSession({\n                topic: n\n            }), new Error(e);\n        }\n    }\n    async isValidSessionOrPairingTopic(n) {\n        if (this.checkRecentlyDeleted(n), this.client.session.keys.includes(n)) await this.isValidSessionTopic(n);\n        else if (this.client.core.pairing.pairings.keys.includes(n)) this.isValidPairingTopic(n);\n        else if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `session or pairing topic doesn't exist: ${n}`);\n            throw new Error(e);\n        } else {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `session or pairing topic should be a string: ${n}`);\n            throw new Error(e);\n        }\n    }\n    async isValidProposalId(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidId)(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `proposal id should be a number: ${n}`);\n            throw new Error(e);\n        }\n        if (!this.client.proposal.keys.includes(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${n}`);\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.proposal.get(n).expiryTimestamp)) {\n            await this.deleteProposal(n);\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", `proposal id: ${n}`);\n            throw new Error(e);\n        }\n    }\n}\nclass Ns extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, pt, me), this.core = n, this.logger = e;\n    }\n}\nclass Rt extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, ht, me), this.core = n, this.logger = e;\n    }\n}\nclass Ps extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, ut, me, (t)=>t.id), this.core = n, this.logger = e;\n    }\n}\nclass Os extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, mt, ce, ()=>le), this.core = n, this.logger = e;\n    }\n}\nclass bs extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, _t, ce), this.core = n, this.logger = e;\n    }\n}\nclass As extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, Et, ce, (t)=>t.id), this.core = n, this.logger = e;\n    }\n}\nvar Cs = Object.defineProperty, xs = (S, n, e)=>n in S ? Cs(S, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : S[n] = e, Ge = (S, n, e)=>xs(S, typeof n != \"symbol\" ? n + \"\" : n, e);\nclass Vs {\n    constructor(n, e){\n        this.core = n, this.logger = e, Ge(this, \"authKeys\"), Ge(this, \"pairingTopics\"), Ge(this, \"requests\"), this.authKeys = new Os(this.core, this.logger), this.pairingTopics = new bs(this.core, this.logger), this.requests = new As(this.core, this.logger);\n    }\n    async init() {\n        await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();\n    }\n}\nvar Ds = Object.defineProperty, Ls = (S, n, e)=>n in S ? Ds(S, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : S[n] = e, _ = (S, n, e)=>Ls(S, typeof n != \"symbol\" ? n + \"\" : n, e);\nclass Se extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.ISignClient {\n    constructor(n){\n        super(n), _(this, \"protocol\", De), _(this, \"version\", Le), _(this, \"name\", _e.name), _(this, \"metadata\"), _(this, \"core\"), _(this, \"logger\"), _(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter), _(this, \"engine\"), _(this, \"session\"), _(this, \"proposal\"), _(this, \"pendingRequest\"), _(this, \"auth\"), _(this, \"signConfig\"), _(this, \"on\", (t, s)=>this.events.on(t, s)), _(this, \"once\", (t, s)=>this.events.once(t, s)), _(this, \"off\", (t, s)=>this.events.off(t, s)), _(this, \"removeListener\", (t, s)=>this.events.removeListener(t, s)), _(this, \"removeAllListeners\", (t)=>this.events.removeAllListeners(t)), _(this, \"connect\", async (t)=>{\n            try {\n                return await this.engine.connect(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"pair\", async (t)=>{\n            try {\n                return await this.engine.pair(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"approve\", async (t)=>{\n            try {\n                return await this.engine.approve(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"reject\", async (t)=>{\n            try {\n                return await this.engine.reject(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"update\", async (t)=>{\n            try {\n                return await this.engine.update(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"extend\", async (t)=>{\n            try {\n                return await this.engine.extend(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"request\", async (t)=>{\n            try {\n                return await this.engine.request(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"respond\", async (t)=>{\n            try {\n                return await this.engine.respond(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"ping\", async (t)=>{\n            try {\n                return await this.engine.ping(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"emit\", async (t)=>{\n            try {\n                return await this.engine.emit(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"disconnect\", async (t)=>{\n            try {\n                return await this.engine.disconnect(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"find\", (t)=>{\n            try {\n                return this.engine.find(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"getPendingSessionRequests\", ()=>{\n            try {\n                return this.engine.getPendingSessionRequests();\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }), _(this, \"authenticate\", async (t, s)=>{\n            try {\n                return await this.engine.authenticate(t, s);\n            } catch (i) {\n                throw this.logger.error(i.message), i;\n            }\n        }), _(this, \"formatAuthMessage\", (t)=>{\n            try {\n                return this.engine.formatAuthMessage(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"approveSessionAuthenticate\", async (t)=>{\n            try {\n                return await this.engine.approveSessionAuthenticate(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"rejectSessionAuthenticate\", async (t)=>{\n            try {\n                return await this.engine.rejectSessionAuthenticate(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), this.name = n?.name || _e.name, this.metadata = n?.metadata || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getAppMetadata)(), this.signConfig = n?.signConfig;\n        const e = typeof n?.logger < \"u\" && typeof n?.logger != \"string\" ? n.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: n?.logger || _e.logger\n        }));\n        this.core = n?.core || new _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Core(n), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.generateChildLogger)(e, this.name), this.session = new Rt(this.core, this.logger), this.proposal = new Ns(this.core, this.logger), this.pendingRequest = new Ps(this.core, this.logger), this.engine = new Ts(this), this.auth = new Vs(this.core, this.logger);\n    }\n    static async init(n) {\n        const e = new Se(n);\n        return await e.initialize(), e;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getLoggerContext)(this.logger);\n    }\n    get pairing() {\n        return this.core.pairing.pairings;\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info(\"SignClient Initialization Success\"), setTimeout(()=>{\n                this.engine.processRelayMessageCache();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_SECOND));\n        } catch (n) {\n            throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(n.message), n;\n        }\n    }\n}\nconst Ms = Rt, ks = Se;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/sign-client/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./misc */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsdUZBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsbUZBQVEsR0FBR0g7QUFDeENFLFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsbUZBQVEsR0FBR0gsVUFDeEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3RpbWUvZGlzdC9janMvY29uc3RhbnRzL2luZGV4LmpzPzJlZTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWlzY1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90aW1lXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/misc.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;\nexports.ONE_HUNDRED = 100;\nexports.ONE_THOUSAND = 1000; //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvbWlzYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDbERBLG1CQUFtQixHQUFHO0FBQ3RCQSxvQkFBb0IsR0FBRyxNQUN2QixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvbWlzYy5qcz9iNDM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PTkVfVEhPVVNBTkQgPSBleHBvcnRzLk9ORV9IVU5EUkVEID0gdm9pZCAwO1xuZXhwb3J0cy5PTkVfSFVORFJFRCA9IDEwMDtcbmV4cG9ydHMuT05FX1RIT1VTQU5EID0gMTAwMDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pc2MuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiT05FX1RIT1VTQU5EIiwiT05FX0hVTkRSRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/time.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;\nexports.ONE_SECOND = 1;\nexports.FIVE_SECONDS = 5;\nexports.TEN_SECONDS = 10;\nexports.THIRTY_SECONDS = 30;\nexports.SIXTY_SECONDS = 60;\nexports.ONE_MINUTE = exports.SIXTY_SECONDS;\nexports.FIVE_MINUTES = exports.ONE_MINUTE * 5;\nexports.TEN_MINUTES = exports.ONE_MINUTE * 10;\nexports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;\nexports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;\nexports.ONE_HOUR = exports.SIXTY_MINUTES;\nexports.THREE_HOURS = exports.ONE_HOUR * 3;\nexports.SIX_HOURS = exports.ONE_HOUR * 6;\nexports.TWELVE_HOURS = exports.ONE_HOUR * 12;\nexports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;\nexports.ONE_DAY = exports.TWENTY_FOUR_HOURS;\nexports.THREE_DAYS = exports.ONE_DAY * 3;\nexports.FIVE_DAYS = exports.ONE_DAY * 5;\nexports.SEVEN_DAYS = exports.ONE_DAY * 7;\nexports.THIRTY_DAYS = exports.ONE_DAY * 30;\nexports.ONE_WEEK = exports.SEVEN_DAYS;\nexports.TWO_WEEKS = exports.ONE_WEEK * 2;\nexports.THREE_WEEKS = exports.ONE_WEEK * 3;\nexports.FOUR_WEEKS = exports.ONE_WEEK * 4;\nexports.ONE_YEAR = exports.ONE_DAY * 365; //# sourceMappingURL=time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvdGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUdBLGtCQUFrQixHQUFHQSxtQkFBbUIsR0FBR0EsaUJBQWlCLEdBQUdBLGdCQUFnQixHQUFHQSxtQkFBbUIsR0FBR0Esa0JBQWtCLEdBQUdBLGlCQUFpQixHQUFHQSxrQkFBa0IsR0FBR0EsZUFBZSxHQUFHQSx5QkFBeUIsR0FBR0Esb0JBQW9CLEdBQUdBLGlCQUFpQixHQUFHQSxtQkFBbUIsR0FBR0EsZ0JBQWdCLEdBQUdBLHFCQUFxQixHQUFHQSxzQkFBc0IsR0FBR0EsbUJBQW1CLEdBQUdBLG9CQUFvQixHQUFHQSxrQkFBa0IsR0FBR0EscUJBQXFCLEdBQUdBLHNCQUFzQixHQUFHQSxtQkFBbUIsR0FBR0Esb0JBQW9CLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDdGlCQSxrQkFBa0IsR0FBRztBQUNyQkEsb0JBQW9CLEdBQUc7QUFDdkJBLG1CQUFtQixHQUFHO0FBQ3RCQSxzQkFBc0IsR0FBRztBQUN6QkEscUJBQXFCLEdBQUc7QUFDeEJBLGtCQUFrQixHQUFHQSxRQUFRc0IsYUFBYTtBQUMxQ3RCLG9CQUFvQixHQUFHQSxRQUFRcUIsVUFBVSxHQUFHO0FBQzVDckIsbUJBQW1CLEdBQUdBLFFBQVFxQixVQUFVLEdBQUc7QUFDM0NyQixzQkFBc0IsR0FBR0EsUUFBUXFCLFVBQVUsR0FBRztBQUM5Q3JCLHFCQUFxQixHQUFHQSxRQUFRcUIsVUFBVSxHQUFHO0FBQzdDckIsZ0JBQWdCLEdBQUdBLFFBQVFpQixhQUFhO0FBQ3hDakIsbUJBQW1CLEdBQUdBLFFBQVFnQixRQUFRLEdBQUc7QUFDekNoQixpQkFBaUIsR0FBR0EsUUFBUWdCLFFBQVEsR0FBRztBQUN2Q2hCLG9CQUFvQixHQUFHQSxRQUFRZ0IsUUFBUSxHQUFHO0FBQzFDaEIseUJBQXlCLEdBQUdBLFFBQVFnQixRQUFRLEdBQUc7QUFDL0NoQixlQUFlLEdBQUdBLFFBQVFZLGlCQUFpQjtBQUMzQ1osa0JBQWtCLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN2Q1gsaUJBQWlCLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN0Q1gsa0JBQWtCLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN2Q1gsbUJBQW1CLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN4Q1gsZ0JBQWdCLEdBQUdBLFFBQVFRLFVBQVU7QUFDckNSLGlCQUFpQixHQUFHQSxRQUFRTSxRQUFRLEdBQUc7QUFDdkNOLG1CQUFtQixHQUFHQSxRQUFRTSxRQUFRLEdBQUc7QUFDekNOLGtCQUFrQixHQUFHQSxRQUFRTSxRQUFRLEdBQUc7QUFDeENOLGdCQUFnQixHQUFHQSxRQUFRVyxPQUFPLEdBQUcsS0FDckMsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3RpbWUvZGlzdC9janMvY29uc3RhbnRzL3RpbWUuanM/ZGRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT05FX1lFQVIgPSBleHBvcnRzLkZPVVJfV0VFS1MgPSBleHBvcnRzLlRIUkVFX1dFRUtTID0gZXhwb3J0cy5UV09fV0VFS1MgPSBleHBvcnRzLk9ORV9XRUVLID0gZXhwb3J0cy5USElSVFlfREFZUyA9IGV4cG9ydHMuU0VWRU5fREFZUyA9IGV4cG9ydHMuRklWRV9EQVlTID0gZXhwb3J0cy5USFJFRV9EQVlTID0gZXhwb3J0cy5PTkVfREFZID0gZXhwb3J0cy5UV0VOVFlfRk9VUl9IT1VSUyA9IGV4cG9ydHMuVFdFTFZFX0hPVVJTID0gZXhwb3J0cy5TSVhfSE9VUlMgPSBleHBvcnRzLlRIUkVFX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiA9IGV4cG9ydHMuU0lYVFlfTUlOVVRFUyA9IGV4cG9ydHMuVEhJUlRZX01JTlVURVMgPSBleHBvcnRzLlRFTl9NSU5VVEVTID0gZXhwb3J0cy5GSVZFX01JTlVURVMgPSBleHBvcnRzLk9ORV9NSU5VVEUgPSBleHBvcnRzLlNJWFRZX1NFQ09ORFMgPSBleHBvcnRzLlRISVJUWV9TRUNPTkRTID0gZXhwb3J0cy5URU5fU0VDT05EUyA9IGV4cG9ydHMuRklWRV9TRUNPTkRTID0gZXhwb3J0cy5PTkVfU0VDT05EID0gdm9pZCAwO1xuZXhwb3J0cy5PTkVfU0VDT05EID0gMTtcbmV4cG9ydHMuRklWRV9TRUNPTkRTID0gNTtcbmV4cG9ydHMuVEVOX1NFQ09ORFMgPSAxMDtcbmV4cG9ydHMuVEhJUlRZX1NFQ09ORFMgPSAzMDtcbmV4cG9ydHMuU0lYVFlfU0VDT05EUyA9IDYwO1xuZXhwb3J0cy5PTkVfTUlOVVRFID0gZXhwb3J0cy5TSVhUWV9TRUNPTkRTO1xuZXhwb3J0cy5GSVZFX01JTlVURVMgPSBleHBvcnRzLk9ORV9NSU5VVEUgKiA1O1xuZXhwb3J0cy5URU5fTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSAqIDEwO1xuZXhwb3J0cy5USElSVFlfTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSAqIDMwO1xuZXhwb3J0cy5TSVhUWV9NSU5VVEVTID0gZXhwb3J0cy5PTkVfTUlOVVRFICogNjA7XG5leHBvcnRzLk9ORV9IT1VSID0gZXhwb3J0cy5TSVhUWV9NSU5VVEVTO1xuZXhwb3J0cy5USFJFRV9IT1VSUyA9IGV4cG9ydHMuT05FX0hPVVIgKiAzO1xuZXhwb3J0cy5TSVhfSE9VUlMgPSBleHBvcnRzLk9ORV9IT1VSICogNjtcbmV4cG9ydHMuVFdFTFZFX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiAqIDEyO1xuZXhwb3J0cy5UV0VOVFlfRk9VUl9IT1VSUyA9IGV4cG9ydHMuT05FX0hPVVIgKiAyNDtcbmV4cG9ydHMuT05FX0RBWSA9IGV4cG9ydHMuVFdFTlRZX0ZPVVJfSE9VUlM7XG5leHBvcnRzLlRIUkVFX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiAzO1xuZXhwb3J0cy5GSVZFX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiA1O1xuZXhwb3J0cy5TRVZFTl9EQVlTID0gZXhwb3J0cy5PTkVfREFZICogNztcbmV4cG9ydHMuVEhJUlRZX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiAzMDtcbmV4cG9ydHMuT05FX1dFRUsgPSBleHBvcnRzLlNFVkVOX0RBWVM7XG5leHBvcnRzLlRXT19XRUVLUyA9IGV4cG9ydHMuT05FX1dFRUsgKiAyO1xuZXhwb3J0cy5USFJFRV9XRUVLUyA9IGV4cG9ydHMuT05FX1dFRUsgKiAzO1xuZXhwb3J0cy5GT1VSX1dFRUtTID0gZXhwb3J0cy5PTkVfV0VFSyAqIDQ7XG5leHBvcnRzLk9ORV9ZRUFSID0gZXhwb3J0cy5PTkVfREFZICogMzY1O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJPTkVfWUVBUiIsIkZPVVJfV0VFS1MiLCJUSFJFRV9XRUVLUyIsIlRXT19XRUVLUyIsIk9ORV9XRUVLIiwiVEhJUlRZX0RBWVMiLCJTRVZFTl9EQVlTIiwiRklWRV9EQVlTIiwiVEhSRUVfREFZUyIsIk9ORV9EQVkiLCJUV0VOVFlfRk9VUl9IT1VSUyIsIlRXRUxWRV9IT1VSUyIsIlNJWF9IT1VSUyIsIlRIUkVFX0hPVVJTIiwiT05FX0hPVVIiLCJTSVhUWV9NSU5VVEVTIiwiVEhJUlRZX01JTlVURVMiLCJURU5fTUlOVVRFUyIsIkZJVkVfTUlOVVRFUyIsIk9ORV9NSU5VVEUiLCJTSVhUWV9TRUNPTkRTIiwiVEhJUlRZX1NFQ09ORFMiLCJURU5fU0VDT05EUyIsIkZJVkVfU0VDT05EUyIsIk9ORV9TRUNPTkQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./watch */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/watch.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyx1RkFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQywyRUFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyx5RkFBYSxHQUFHSCxVQUM3QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9pbmRleC5qcz8yOWI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhdGNoXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/types/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./watch */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyx1RkFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSCxVQUN6QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcz8zNjI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhdGNoXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/types/watch.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IWatch = void 0;\nclass IWatch {\n}\nexports.IWatch = IWatch; //# sourceMappingURL=watch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy93YXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEIsTUFBTUU7QUFDTjtBQUNBRixjQUFjLEdBQUdFLFFBQ2pCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3R5cGVzL3dhdGNoLmpzPzRiY2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklXYXRjaCA9IHZvaWQgMDtcbmNsYXNzIElXYXRjaCB7XG59XG5leHBvcnRzLklXYXRjaCA9IElXYXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhdGNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIklXYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/convert.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromMiliseconds = exports.toMiliseconds = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\");\nfunction toMiliseconds(seconds) {\n    return seconds * constants_1.ONE_THOUSAND;\n}\nexports.toMiliseconds = toMiliseconds;\nfunction fromMiliseconds(miliseconds) {\n    return Math.floor(miliseconds / constants_1.ONE_THOUSAND);\n}\nexports.fromMiliseconds = fromMiliseconds; //# sourceMappingURL=convert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9jb252ZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUN2RCxNQUFNSSxjQUFjQyxtQkFBT0EsQ0FBQywwRkFBYztBQUMxQyxTQUFTRixjQUFjRyxPQUFPO0lBQzFCLE9BQU9BLFVBQVVGLFlBQVlHLFlBQVk7QUFDN0M7QUFDQVAscUJBQXFCLEdBQUdHO0FBQ3hCLFNBQVNELGdCQUFnQk0sV0FBVztJQUNoQyxPQUFPQyxLQUFLQyxLQUFLLENBQUNGLGNBQWNKLFlBQVlHLFlBQVk7QUFDNUQ7QUFDQVAsdUJBQXVCLEdBQUdFLGlCQUMxQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9jb252ZXJ0LmpzPzk5MWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21NaWxpc2Vjb25kcyA9IGV4cG9ydHMudG9NaWxpc2Vjb25kcyA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmZ1bmN0aW9uIHRvTWlsaXNlY29uZHMoc2Vjb25kcykge1xuICAgIHJldHVybiBzZWNvbmRzICogY29uc3RhbnRzXzEuT05FX1RIT1VTQU5EO1xufVxuZXhwb3J0cy50b01pbGlzZWNvbmRzID0gdG9NaWxpc2Vjb25kcztcbmZ1bmN0aW9uIGZyb21NaWxpc2Vjb25kcyhtaWxpc2Vjb25kcykge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1pbGlzZWNvbmRzIC8gY29uc3RhbnRzXzEuT05FX1RIT1VTQU5EKTtcbn1cbmV4cG9ydHMuZnJvbU1pbGlzZWNvbmRzID0gZnJvbU1pbGlzZWNvbmRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udmVydC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmcm9tTWlsaXNlY29uZHMiLCJ0b01pbGlzZWNvbmRzIiwiY29uc3RhbnRzXzEiLCJyZXF1aXJlIiwic2Vjb25kcyIsIk9ORV9USE9VU0FORCIsIm1pbGlzZWNvbmRzIiwiTWF0aCIsImZsb29yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/delay.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.delay = void 0;\nfunction delay(timeout) {\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            resolve(true);\n        }, timeout);\n    });\n}\nexports.delay = delay; //# sourceMappingURL=delay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9kZWxheS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsYUFBYSxHQUFHLEtBQUs7QUFDckIsU0FBU0UsTUFBTUMsT0FBTztJQUNsQixPQUFPLElBQUlDLFFBQVFDLENBQUFBO1FBQ2ZDLFdBQVc7WUFDUEQsUUFBUTtRQUNaLEdBQUdGO0lBQ1A7QUFDSjtBQUNBSCxhQUFhLEdBQUdFLE9BQ2hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2RlbGF5LmpzPzliOTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlbGF5ID0gdm9pZCAwO1xuZnVuY3Rpb24gZGVsYXkodGltZW91dCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVsYXkgPSBkZWxheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlbGF5IiwidGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./delay */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./convert */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyx1RkFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxxRkFBVyxHQUFHSCxVQUMzQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9pbmRleC5qcz9iN2NjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlbGF5XCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnZlcnRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHNsaWJfMSIsInJlcXVpcmUiLCJfX2V4cG9ydFN0YXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/watch.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/watch.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Watch = void 0;\nclass Watch {\n    constructor(){\n        this.timestamps = new Map();\n    }\n    start(label) {\n        if (this.timestamps.has(label)) {\n            throw new Error(`Watch already started for label: ${label}`);\n        }\n        this.timestamps.set(label, {\n            started: Date.now()\n        });\n    }\n    stop(label) {\n        const timestamp = this.get(label);\n        if (typeof timestamp.elapsed !== \"undefined\") {\n            throw new Error(`Watch already stopped for label: ${label}`);\n        }\n        const elapsed = Date.now() - timestamp.started;\n        this.timestamps.set(label, {\n            started: timestamp.started,\n            elapsed\n        });\n    }\n    get(label) {\n        const timestamp = this.timestamps.get(label);\n        if (typeof timestamp === \"undefined\") {\n            throw new Error(`No timestamp found for label: ${label}`);\n        }\n        return timestamp;\n    }\n    elapsed(label) {\n        const timestamp = this.get(label);\n        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;\n        return elapsed;\n    }\n}\nexports.Watch = Watch;\nexports[\"default\"] = Watch; //# sourceMappingURL=watch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy93YXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsYUFBYSxHQUFHLEtBQUs7QUFDckIsTUFBTUU7SUFDRkMsYUFBYztRQUNWLElBQUksQ0FBQ0MsVUFBVSxHQUFHLElBQUlDO0lBQzFCO0lBQ0FDLE1BQU1DLEtBQUssRUFBRTtRQUNULElBQUksSUFBSSxDQUFDSCxVQUFVLENBQUNJLEdBQUcsQ0FBQ0QsUUFBUTtZQUM1QixNQUFNLElBQUlFLE1BQU0sQ0FBQyxpQ0FBaUMsRUFBRUYsTUFBTSxDQUFDO1FBQy9EO1FBQ0EsSUFBSSxDQUFDSCxVQUFVLENBQUNNLEdBQUcsQ0FBQ0gsT0FBTztZQUFFSSxTQUFTQyxLQUFLQyxHQUFHO1FBQUc7SUFDckQ7SUFDQUMsS0FBS1AsS0FBSyxFQUFFO1FBQ1IsTUFBTVEsWUFBWSxJQUFJLENBQUNDLEdBQUcsQ0FBQ1Q7UUFDM0IsSUFBSSxPQUFPUSxVQUFVRSxPQUFPLEtBQUssYUFBYTtZQUMxQyxNQUFNLElBQUlSLE1BQU0sQ0FBQyxpQ0FBaUMsRUFBRUYsTUFBTSxDQUFDO1FBQy9EO1FBQ0EsTUFBTVUsVUFBVUwsS0FBS0MsR0FBRyxLQUFLRSxVQUFVSixPQUFPO1FBQzlDLElBQUksQ0FBQ1AsVUFBVSxDQUFDTSxHQUFHLENBQUNILE9BQU87WUFBRUksU0FBU0ksVUFBVUosT0FBTztZQUFFTTtRQUFRO0lBQ3JFO0lBQ0FELElBQUlULEtBQUssRUFBRTtRQUNQLE1BQU1RLFlBQVksSUFBSSxDQUFDWCxVQUFVLENBQUNZLEdBQUcsQ0FBQ1Q7UUFDdEMsSUFBSSxPQUFPUSxjQUFjLGFBQWE7WUFDbEMsTUFBTSxJQUFJTixNQUFNLENBQUMsOEJBQThCLEVBQUVGLE1BQU0sQ0FBQztRQUM1RDtRQUNBLE9BQU9RO0lBQ1g7SUFDQUUsUUFBUVYsS0FBSyxFQUFFO1FBQ1gsTUFBTVEsWUFBWSxJQUFJLENBQUNDLEdBQUcsQ0FBQ1Q7UUFDM0IsTUFBTVUsVUFBVUYsVUFBVUUsT0FBTyxJQUFJTCxLQUFLQyxHQUFHLEtBQUtFLFVBQVVKLE9BQU87UUFDbkUsT0FBT007SUFDWDtBQUNKO0FBQ0FqQixhQUFhLEdBQUdFO0FBQ2hCRixrQkFBZSxHQUFHRSxPQUNsQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy93YXRjaC5qcz8yZGM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XYXRjaCA9IHZvaWQgMDtcbmNsYXNzIFdhdGNoIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50aW1lc3RhbXBzID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBzdGFydChsYWJlbCkge1xuICAgICAgICBpZiAodGhpcy50aW1lc3RhbXBzLmhhcyhsYWJlbCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV2F0Y2ggYWxyZWFkeSBzdGFydGVkIGZvciBsYWJlbDogJHtsYWJlbH1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpbWVzdGFtcHMuc2V0KGxhYmVsLCB7IHN0YXJ0ZWQ6IERhdGUubm93KCkgfSk7XG4gICAgfVxuICAgIHN0b3AobGFiZWwpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy5nZXQobGFiZWwpO1xuICAgICAgICBpZiAodHlwZW9mIHRpbWVzdGFtcC5lbGFwc2VkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdhdGNoIGFscmVhZHkgc3RvcHBlZCBmb3IgbGFiZWw6ICR7bGFiZWx9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWxhcHNlZCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXAuc3RhcnRlZDtcbiAgICAgICAgdGhpcy50aW1lc3RhbXBzLnNldChsYWJlbCwgeyBzdGFydGVkOiB0aW1lc3RhbXAuc3RhcnRlZCwgZWxhcHNlZCB9KTtcbiAgICB9XG4gICAgZ2V0KGxhYmVsKSB7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRoaXMudGltZXN0YW1wcy5nZXQobGFiZWwpO1xuICAgICAgICBpZiAodHlwZW9mIHRpbWVzdGFtcCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyB0aW1lc3RhbXAgZm91bmQgZm9yIGxhYmVsOiAke2xhYmVsfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aW1lc3RhbXA7XG4gICAgfVxuICAgIGVsYXBzZWQobGFiZWwpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy5nZXQobGFiZWwpO1xuICAgICAgICBjb25zdCBlbGFwc2VkID0gdGltZXN0YW1wLmVsYXBzZWQgfHwgRGF0ZS5ub3coKSAtIHRpbWVzdGFtcC5zdGFydGVkO1xuICAgICAgICByZXR1cm4gZWxhcHNlZDtcbiAgICB9XG59XG5leHBvcnRzLldhdGNoID0gV2F0Y2g7XG5leHBvcnRzLmRlZmF1bHQgPSBXYXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhdGNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIldhdGNoIiwiY29uc3RydWN0b3IiLCJ0aW1lc3RhbXBzIiwiTWFwIiwic3RhcnQiLCJsYWJlbCIsImhhcyIsIkVycm9yIiwic2V0Iiwic3RhcnRlZCIsIkRhdGUiLCJub3ciLCJzdG9wIiwidGltZXN0YW1wIiwiZ2V0IiwiZWxhcHNlZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/watch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __createBinding(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}\nfunction __exportStar(m, exports) {\n    for(var p in m)if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n;\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result.default = mod;\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/types/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/types/dist/index.es.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ICore: () => (/* binding */ h),\n/* harmony export */   ICrypto: () => (/* binding */ g),\n/* harmony export */   IEchoClient: () => (/* binding */ O),\n/* harmony export */   IEngine: () => (/* binding */ V),\n/* harmony export */   IEngineEvents: () => (/* binding */ K),\n/* harmony export */   IEventClient: () => (/* binding */ R),\n/* harmony export */   IExpirer: () => (/* binding */ S),\n/* harmony export */   IJsonRpcHistory: () => (/* binding */ I),\n/* harmony export */   IKeyChain: () => (/* binding */ j),\n/* harmony export */   IMessageTracker: () => (/* binding */ y),\n/* harmony export */   IPairing: () => (/* binding */ $),\n/* harmony export */   IPublisher: () => (/* binding */ m),\n/* harmony export */   IRelayer: () => (/* binding */ d),\n/* harmony export */   ISignClient: () => (/* binding */ J),\n/* harmony export */   ISignClientEvents: () => (/* binding */ H),\n/* harmony export */   IStore: () => (/* binding */ f),\n/* harmony export */   ISubscriber: () => (/* binding */ P),\n/* harmony export */   ISubscriberTopicMap: () => (/* binding */ C),\n/* harmony export */   IVerify: () => (/* binding */ M)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/events */ \"(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar a = Object.defineProperty, u = (e, s, r)=>s in e ? a(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, c = (e, s, r)=>u(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass h extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super(), this.opts = s, c(this, \"protocol\", \"wc\"), c(this, \"version\", 2);\n    }\n}\nclass g {\n    constructor(s, r, t){\n        this.core = s, this.logger = r;\n    }\n}\nvar p = Object.defineProperty, b = (e, s, r)=>s in e ? p(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, v = (e, s, r)=>b(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass I extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.core = s, this.logger = r, v(this, \"records\", new Map);\n    }\n}\nclass y {\n    constructor(s, r){\n        this.logger = s, this.core = r;\n    }\n}\nclass m extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.relayer = s, this.logger = r;\n    }\n}\nclass d extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super();\n    }\n}\nclass f {\n    constructor(s, r, t, q){\n        this.core = s, this.logger = r, this.name = t;\n    }\n}\nvar E = Object.defineProperty, x = (e, s, r)=>s in e ? E(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, w = (e, s, r)=>x(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass C {\n    constructor(){\n        w(this, \"map\", new Map);\n    }\n}\nclass P extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.relayer = s, this.logger = r;\n    }\n}\nclass j {\n    constructor(s, r){\n        this.core = s, this.logger = r;\n    }\n}\nclass S extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.core = s, this.logger = r;\n    }\n}\nclass $ {\n    constructor(s, r){\n        this.logger = s, this.core = r;\n    }\n}\nclass M {\n    constructor(s, r, t){\n        this.core = s, this.logger = r, this.store = t;\n    }\n}\nclass O {\n    constructor(s, r){\n        this.projectId = s, this.logger = r;\n    }\n}\nclass R {\n    constructor(s, r, t){\n        this.core = s, this.logger = r, this.telemetryEnabled = t;\n    }\n}\nvar T = Object.defineProperty, k = (e, s, r)=>s in e ? T(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, i = (e, s, r)=>k(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass H extends (events__WEBPACK_IMPORTED_MODULE_1___default()) {\n    constructor(){\n        super();\n    }\n}\nclass J {\n    constructor(s){\n        this.opts = s, i(this, \"protocol\", \"wc\"), i(this, \"version\", 2);\n    }\n}\nclass K extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(){\n        super();\n    }\n}\nclass V {\n    constructor(s){\n        this.client = s;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/types/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/universal-provider/dist/index.es.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/dist/index.es.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UniversalProvider: () => (/* binding */ oh),\n/* harmony export */   \"default\": () => (/* binding */ Z)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/sign-client */ \"(ssr)/./node_modules/@walletconnect/sign-client/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-http-connection */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\nconst be = \"error\", _t = \"wss://relay.walletconnect.org\", Ct = \"wc\", It = \"universal_provider\", $e = `${Ct}@2:${It}:`, ye = \"https://rpc.walletconnect.org/v1/\", w = \"generic\", Ot = `${ye}bundler`, f = {\n    DEFAULT_CHAIN_CHANGED: \"default_chain_changed\"\n};\nvar G = typeof globalThis < \"u\" ? globalThis :  false ? 0 : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction At() {\n    this.__data__ = [], this.size = 0;\n}\nvar jt = At;\nfunction Ht(r, e) {\n    return r === e || r !== r && e !== e;\n}\nvar z = Ht, Et = z;\nfunction St(r, e) {\n    for(var t = r.length; t--;)if (Et(r[t][0], e)) return t;\n    return -1;\n}\nvar k = St, Nt = k, Tt = Array.prototype, Dt = Tt.splice;\nfunction qt(r) {\n    var e = this.__data__, t = Nt(e, r);\n    if (t < 0) return !1;\n    var i = e.length - 1;\n    return t == i ? e.pop() : Dt.call(e, t, 1), --this.size, !0;\n}\nvar Rt = qt, xt = k;\nfunction Lt(r) {\n    var e = this.__data__, t = xt(e, r);\n    return t < 0 ? void 0 : e[t][1];\n}\nvar Ut = Lt, Ft = k;\nfunction Mt(r) {\n    return Ft(this.__data__, r) > -1;\n}\nvar Gt = Mt, zt = k;\nfunction kt(r, e) {\n    var t = this.__data__, i = zt(t, r);\n    return i < 0 ? (++this.size, t.push([\n        r,\n        e\n    ])) : t[i][1] = e, this;\n}\nvar Bt = kt, Vt = jt, Jt = Rt, Kt = Ut, Wt = Gt, Xt = Bt;\nfunction _(r) {\n    var e = -1, t = r == null ? 0 : r.length;\n    for(this.clear(); ++e < t;){\n        var i = r[e];\n        this.set(i[0], i[1]);\n    }\n}\n_.prototype.clear = Vt, _.prototype.delete = Jt, _.prototype.get = Kt, _.prototype.has = Wt, _.prototype.set = Xt;\nvar B = _, Yt = B;\nfunction Zt() {\n    this.__data__ = new Yt, this.size = 0;\n}\nvar Qt = Zt;\nfunction er(r) {\n    var e = this.__data__, t = e.delete(r);\n    return this.size = e.size, t;\n}\nvar tr = er;\nfunction rr(r) {\n    return this.__data__.get(r);\n}\nvar ir = rr;\nfunction sr(r) {\n    return this.__data__.has(r);\n}\nvar nr = sr, ar = typeof G == \"object\" && G && G.Object === Object && G, we = ar, or = we, cr = typeof self == \"object\" && self && self.Object === Object && self, hr = or || cr || Function(\"return this\")(), C = hr, pr = C, ur = pr.Symbol, _e = ur, Ce = _e, Ie = Object.prototype, lr = Ie.hasOwnProperty, dr = Ie.toString, F = Ce ? Ce.toStringTag : void 0;\nfunction vr(r) {\n    var e = lr.call(r, F), t = r[F];\n    try {\n        r[F] = void 0;\n        var i = !0;\n    } catch  {}\n    var s = dr.call(r);\n    return i && (e ? r[F] = t : delete r[F]), s;\n}\nvar fr = vr, mr = Object.prototype, gr = mr.toString;\nfunction Pr(r) {\n    return gr.call(r);\n}\nvar br = Pr, Oe = _e, $r = fr, yr = br, wr = \"[object Null]\", _r = \"[object Undefined]\", Ae = Oe ? Oe.toStringTag : void 0;\nfunction Cr(r) {\n    return r == null ? r === void 0 ? _r : wr : Ae && Ae in Object(r) ? $r(r) : yr(r);\n}\nvar V = Cr;\nfunction Ir(r) {\n    var e = typeof r;\n    return r != null && (e == \"object\" || e == \"function\");\n}\nvar $ = Ir, Or = V, Ar = $, jr = \"[object AsyncFunction]\", Hr = \"[object Function]\", Er = \"[object GeneratorFunction]\", Sr = \"[object Proxy]\";\nfunction Nr(r) {\n    if (!Ar(r)) return !1;\n    var e = Or(r);\n    return e == Hr || e == Er || e == jr || e == Sr;\n}\nvar te = Nr, Tr = C, Dr = Tr[\"__core-js_shared__\"], qr = Dr, re = qr, je = function() {\n    var r = /[^.]+$/.exec(re && re.keys && re.keys.IE_PROTO || \"\");\n    return r ? \"Symbol(src)_1.\" + r : \"\";\n}();\nfunction Rr(r) {\n    return !!je && je in r;\n}\nvar xr = Rr, Lr = Function.prototype, Ur = Lr.toString;\nfunction Fr(r) {\n    if (r != null) {\n        try {\n            return Ur.call(r);\n        } catch  {}\n        try {\n            return r + \"\";\n        } catch  {}\n    }\n    return \"\";\n}\nvar Mr = Fr, Gr = te, zr = xr, kr = $, Br = Mr, Vr = /[\\\\^$.*+?()[\\]{}|]/g, Jr = /^\\[object .+?Constructor\\]$/, Kr = Function.prototype, Wr = Object.prototype, Xr = Kr.toString, Yr = Wr.hasOwnProperty, Zr = RegExp(\"^\" + Xr.call(Yr).replace(Vr, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\nfunction Qr(r) {\n    if (!kr(r) || zr(r)) return !1;\n    var e = Gr(r) ? Zr : Jr;\n    return e.test(Br(r));\n}\nvar ei = Qr;\nfunction ti(r, e) {\n    return r?.[e];\n}\nvar ri = ti, ii = ei, si = ri;\nfunction ni(r, e) {\n    var t = si(r, e);\n    return ii(t) ? t : void 0;\n}\nvar ie = ni, ai = ie, oi = C, ci = ai(oi, \"Map\"), He = ci, hi = ie, pi = hi(Object, \"create\"), J = pi, Ee = J;\nfunction ui() {\n    this.__data__ = Ee ? Ee(null) : {}, this.size = 0;\n}\nvar li = ui;\nfunction di(r) {\n    var e = this.has(r) && delete this.__data__[r];\n    return this.size -= e ? 1 : 0, e;\n}\nvar vi = di, fi = J, mi = \"__lodash_hash_undefined__\", gi = Object.prototype, Pi = gi.hasOwnProperty;\nfunction bi(r) {\n    var e = this.__data__;\n    if (fi) {\n        var t = e[r];\n        return t === mi ? void 0 : t;\n    }\n    return Pi.call(e, r) ? e[r] : void 0;\n}\nvar $i = bi, yi = J, wi = Object.prototype, _i = wi.hasOwnProperty;\nfunction Ci(r) {\n    var e = this.__data__;\n    return yi ? e[r] !== void 0 : _i.call(e, r);\n}\nvar Ii = Ci, Oi = J, Ai = \"__lodash_hash_undefined__\";\nfunction ji(r, e) {\n    var t = this.__data__;\n    return this.size += this.has(r) ? 0 : 1, t[r] = Oi && e === void 0 ? Ai : e, this;\n}\nvar Hi = ji, Ei = li, Si = vi, Ni = $i, Ti = Ii, Di = Hi;\nfunction I(r) {\n    var e = -1, t = r == null ? 0 : r.length;\n    for(this.clear(); ++e < t;){\n        var i = r[e];\n        this.set(i[0], i[1]);\n    }\n}\nI.prototype.clear = Ei, I.prototype.delete = Si, I.prototype.get = Ni, I.prototype.has = Ti, I.prototype.set = Di;\nvar qi = I, Se = qi, Ri = B, xi = He;\nfunction Li() {\n    this.size = 0, this.__data__ = {\n        hash: new Se,\n        map: new (xi || Ri),\n        string: new Se\n    };\n}\nvar Ui = Li;\nfunction Fi(r) {\n    var e = typeof r;\n    return e == \"string\" || e == \"number\" || e == \"symbol\" || e == \"boolean\" ? r !== \"__proto__\" : r === null;\n}\nvar Mi = Fi, Gi = Mi;\nfunction zi(r, e) {\n    var t = r.__data__;\n    return Gi(e) ? t[typeof e == \"string\" ? \"string\" : \"hash\"] : t.map;\n}\nvar K = zi, ki = K;\nfunction Bi(r) {\n    var e = ki(this, r).delete(r);\n    return this.size -= e ? 1 : 0, e;\n}\nvar Vi = Bi, Ji = K;\nfunction Ki(r) {\n    return Ji(this, r).get(r);\n}\nvar Wi = Ki, Xi = K;\nfunction Yi(r) {\n    return Xi(this, r).has(r);\n}\nvar Zi = Yi, Qi = K;\nfunction es(r, e) {\n    var t = Qi(this, r), i = t.size;\n    return t.set(r, e), this.size += t.size == i ? 0 : 1, this;\n}\nvar ts = es, rs = Ui, is = Vi, ss = Wi, ns = Zi, as = ts;\nfunction O(r) {\n    var e = -1, t = r == null ? 0 : r.length;\n    for(this.clear(); ++e < t;){\n        var i = r[e];\n        this.set(i[0], i[1]);\n    }\n}\nO.prototype.clear = rs, O.prototype.delete = is, O.prototype.get = ss, O.prototype.has = ns, O.prototype.set = as;\nvar os = O, cs = B, hs = He, ps = os, us = 200;\nfunction ls(r, e) {\n    var t = this.__data__;\n    if (t instanceof cs) {\n        var i = t.__data__;\n        if (!hs || i.length < us - 1) return i.push([\n            r,\n            e\n        ]), this.size = ++t.size, this;\n        t = this.__data__ = new ps(i);\n    }\n    return t.set(r, e), this.size = t.size, this;\n}\nvar ds = ls, vs = B, fs = Qt, ms = tr, gs = ir, Ps = nr, bs = ds;\nfunction A(r) {\n    var e = this.__data__ = new vs(r);\n    this.size = e.size;\n}\nA.prototype.clear = fs, A.prototype.delete = ms, A.prototype.get = gs, A.prototype.has = Ps, A.prototype.set = bs;\nvar $s = A, ys = ie, ws = function() {\n    try {\n        var r = ys(Object, \"defineProperty\");\n        return r({}, \"\", {}), r;\n    } catch  {}\n}(), Ne = ws, Te = Ne;\nfunction _s(r, e, t) {\n    e == \"__proto__\" && Te ? Te(r, e, {\n        configurable: !0,\n        enumerable: !0,\n        value: t,\n        writable: !0\n    }) : r[e] = t;\n}\nvar se = _s, Cs = se, Is = z;\nfunction Os(r, e, t) {\n    (t !== void 0 && !Is(r[e], t) || t === void 0 && !(e in r)) && Cs(r, e, t);\n}\nvar De = Os;\nfunction As(r) {\n    return function(e, t, i) {\n        for(var s = -1, n = Object(e), a = i(e), o = a.length; o--;){\n            var c = a[r ? o : ++s];\n            if (t(n[c], c, n) === !1) break;\n        }\n        return e;\n    };\n}\nvar js = As, Hs = js, Es = Hs(), Ss = Es, ne = {\n    exports: {}\n};\n(function(r, e) {\n    var t = C, i = e && !e.nodeType && e, s = i && !0 && r && !r.nodeType && r, n = s && s.exports === i, a = n ? t.Buffer : void 0, o = a ? a.allocUnsafe : void 0;\n    function c(u, l) {\n        if (l) return u.slice();\n        var P = u.length, d = o ? o(P) : new u.constructor(P);\n        return u.copy(d), d;\n    }\n    r.exports = c;\n})(ne, ne.exports);\nvar Ns = C, Ts = Ns.Uint8Array, Ds = Ts, qe = Ds;\nfunction qs(r) {\n    var e = new r.constructor(r.byteLength);\n    return new qe(e).set(new qe(r)), e;\n}\nvar Rs = qs, xs = Rs;\nfunction Ls(r, e) {\n    var t = e ? xs(r.buffer) : r.buffer;\n    return new r.constructor(t, r.byteOffset, r.length);\n}\nvar Us = Ls;\nfunction Fs(r, e) {\n    var t = -1, i = r.length;\n    for(e || (e = Array(i)); ++t < i;)e[t] = r[t];\n    return e;\n}\nvar Ms = Fs, Gs = $, Re = Object.create, zs = function() {\n    function r() {}\n    return function(e) {\n        if (!Gs(e)) return {};\n        if (Re) return Re(e);\n        r.prototype = e;\n        var t = new r;\n        return r.prototype = void 0, t;\n    };\n}(), ks = zs;\nfunction Bs(r, e) {\n    return function(t) {\n        return r(e(t));\n    };\n}\nvar Vs = Bs, Js = Vs, Ks = Js(Object.getPrototypeOf, Object), xe = Ks, Ws = Object.prototype;\nfunction Xs(r) {\n    var e = r && r.constructor, t = typeof e == \"function\" && e.prototype || Ws;\n    return r === t;\n}\nvar Le = Xs, Ys = ks, Zs = xe, Qs = Le;\nfunction en(r) {\n    return typeof r.constructor == \"function\" && !Qs(r) ? Ys(Zs(r)) : {};\n}\nvar tn = en;\nfunction rn(r) {\n    return r != null && typeof r == \"object\";\n}\nvar M = rn, sn = V, nn = M, an = \"[object Arguments]\";\nfunction on(r) {\n    return nn(r) && sn(r) == an;\n}\nvar cn = on, Ue = cn, hn = M, Fe = Object.prototype, pn = Fe.hasOwnProperty, un = Fe.propertyIsEnumerable, ln = Ue(function() {\n    return arguments;\n}()) ? Ue : function(r) {\n    return hn(r) && pn.call(r, \"callee\") && !un.call(r, \"callee\");\n}, Me = ln, dn = Array.isArray, Ge = dn, vn = 9007199254740991;\nfunction fn(r) {\n    return typeof r == \"number\" && r > -1 && r % 1 == 0 && r <= vn;\n}\nvar ze = fn, mn = te, gn = ze;\nfunction Pn(r) {\n    return r != null && gn(r.length) && !mn(r);\n}\nvar ae = Pn, bn = ae, $n = M;\nfunction yn(r) {\n    return $n(r) && bn(r);\n}\nvar wn = yn, W = {\n    exports: {}\n};\nfunction _n() {\n    return !1;\n}\nvar Cn = _n;\n(function(r, e) {\n    var t = C, i = Cn, s = e && !e.nodeType && e, n = s && !0 && r && !r.nodeType && r, a = n && n.exports === s, o = a ? t.Buffer : void 0, c = o ? o.isBuffer : void 0, u = c || i;\n    r.exports = u;\n})(W, W.exports);\nvar In = V, On = xe, An = M, jn = \"[object Object]\", Hn = Function.prototype, En = Object.prototype, ke = Hn.toString, Sn = En.hasOwnProperty, Nn = ke.call(Object);\nfunction Tn(r) {\n    if (!An(r) || In(r) != jn) return !1;\n    var e = On(r);\n    if (e === null) return !0;\n    var t = Sn.call(e, \"constructor\") && e.constructor;\n    return typeof t == \"function\" && t instanceof t && ke.call(t) == Nn;\n}\nvar Dn = Tn, qn = V, Rn = ze, xn = M, Ln = \"[object Arguments]\", Un = \"[object Array]\", Fn = \"[object Boolean]\", Mn = \"[object Date]\", Gn = \"[object Error]\", zn = \"[object Function]\", kn = \"[object Map]\", Bn = \"[object Number]\", Vn = \"[object Object]\", Jn = \"[object RegExp]\", Kn = \"[object Set]\", Wn = \"[object String]\", Xn = \"[object WeakMap]\", Yn = \"[object ArrayBuffer]\", Zn = \"[object DataView]\", Qn = \"[object Float32Array]\", ea = \"[object Float64Array]\", ta = \"[object Int8Array]\", ra = \"[object Int16Array]\", ia = \"[object Int32Array]\", sa = \"[object Uint8Array]\", na = \"[object Uint8ClampedArray]\", aa = \"[object Uint16Array]\", oa = \"[object Uint32Array]\", p = {};\np[Qn] = p[ea] = p[ta] = p[ra] = p[ia] = p[sa] = p[na] = p[aa] = p[oa] = !0, p[Ln] = p[Un] = p[Yn] = p[Fn] = p[Zn] = p[Mn] = p[Gn] = p[zn] = p[kn] = p[Bn] = p[Vn] = p[Jn] = p[Kn] = p[Wn] = p[Xn] = !1;\nfunction ca(r) {\n    return xn(r) && Rn(r.length) && !!p[qn(r)];\n}\nvar ha = ca;\nfunction pa(r) {\n    return function(e) {\n        return r(e);\n    };\n}\nvar ua = pa, oe = {\n    exports: {}\n};\n(function(r, e) {\n    var t = we, i = e && !e.nodeType && e, s = i && !0 && r && !r.nodeType && r, n = s && s.exports === i, a = n && t.process, o = function() {\n        try {\n            var c = s && s.require && s.require(\"util\").types;\n            return c || a && a.binding && a.binding(\"util\");\n        } catch  {}\n    }();\n    r.exports = o;\n})(oe, oe.exports);\nvar la = ha, da = ua, Be = oe.exports, Ve = Be && Be.isTypedArray, va = Ve ? da(Ve) : la, Je = va;\nfunction fa(r, e) {\n    if (!(e === \"constructor\" && typeof r[e] == \"function\") && e != \"__proto__\") return r[e];\n}\nvar Ke = fa, ma = se, ga = z, Pa = Object.prototype, ba = Pa.hasOwnProperty;\nfunction $a(r, e, t) {\n    var i = r[e];\n    (!(ba.call(r, e) && ga(i, t)) || t === void 0 && !(e in r)) && ma(r, e, t);\n}\nvar ya = $a, wa = ya, _a = se;\nfunction Ca(r, e, t, i) {\n    var s = !t;\n    t || (t = {});\n    for(var n = -1, a = e.length; ++n < a;){\n        var o = e[n], c = i ? i(t[o], r[o], o, t, r) : void 0;\n        c === void 0 && (c = r[o]), s ? _a(t, o, c) : wa(t, o, c);\n    }\n    return t;\n}\nvar Ia = Ca;\nfunction Oa(r, e) {\n    for(var t = -1, i = Array(r); ++t < r;)i[t] = e(t);\n    return i;\n}\nvar Aa = Oa, ja = 9007199254740991, Ha = /^(?:0|[1-9]\\d*)$/;\nfunction Ea(r, e) {\n    var t = typeof r;\n    return e = e ?? ja, !!e && (t == \"number\" || t != \"symbol\" && Ha.test(r)) && r > -1 && r % 1 == 0 && r < e;\n}\nvar We = Ea, Sa = Aa, Na = Me, Ta = Ge, Da = W.exports, qa = We, Ra = Je, xa = Object.prototype, La = xa.hasOwnProperty;\nfunction Ua(r, e) {\n    var t = Ta(r), i = !t && Na(r), s = !t && !i && Da(r), n = !t && !i && !s && Ra(r), a = t || i || s || n, o = a ? Sa(r.length, String) : [], c = o.length;\n    for(var u in r)(e || La.call(r, u)) && !(a && (u == \"length\" || s && (u == \"offset\" || u == \"parent\") || n && (u == \"buffer\" || u == \"byteLength\" || u == \"byteOffset\") || qa(u, c))) && o.push(u);\n    return o;\n}\nvar Fa = Ua;\nfunction Ma(r) {\n    var e = [];\n    if (r != null) for(var t in Object(r))e.push(t);\n    return e;\n}\nvar Ga = Ma, za = $, ka = Le, Ba = Ga, Va = Object.prototype, Ja = Va.hasOwnProperty;\nfunction Ka(r) {\n    if (!za(r)) return Ba(r);\n    var e = ka(r), t = [];\n    for(var i in r)i == \"constructor\" && (e || !Ja.call(r, i)) || t.push(i);\n    return t;\n}\nvar Wa = Ka, Xa = Fa, Ya = Wa, Za = ae;\nfunction Qa(r) {\n    return Za(r) ? Xa(r, !0) : Ya(r);\n}\nvar Xe = Qa, eo = Ia, to = Xe;\nfunction ro(r) {\n    return eo(r, to(r));\n}\nvar io = ro, Ye = De, so = ne.exports, no = Us, ao = Ms, oo = tn, Ze = Me, Qe = Ge, co = wn, ho = W.exports, po = te, uo = $, lo = Dn, vo = Je, et = Ke, fo = io;\nfunction mo(r, e, t, i, s, n, a) {\n    var o = et(r, t), c = et(e, t), u = a.get(c);\n    if (u) {\n        Ye(r, t, u);\n        return;\n    }\n    var l = n ? n(o, c, t + \"\", r, e, a) : void 0, P = l === void 0;\n    if (P) {\n        var d = Qe(c), Q = !d && ho(c), ve = !d && !Q && vo(c);\n        l = c, d || Q || ve ? Qe(o) ? l = o : co(o) ? l = ao(o) : Q ? (P = !1, l = so(c, !0)) : ve ? (P = !1, l = no(c, !0)) : l = [] : lo(c) || Ze(c) ? (l = o, Ze(o) ? l = fo(o) : (!uo(o) || po(o)) && (l = oo(c))) : P = !1;\n    }\n    P && (a.set(c, l), s(l, c, i, n, a), a.delete(c)), Ye(r, t, l);\n}\nvar go = mo, Po = $s, bo = De, $o = Ss, yo = go, wo = $, _o = Xe, Co = Ke;\nfunction tt(r, e, t, i, s) {\n    r !== e && $o(e, function(n, a) {\n        if (s || (s = new Po), wo(n)) yo(r, e, a, t, tt, i, s);\n        else {\n            var o = i ? i(Co(r, a), n, a + \"\", r, e, s) : void 0;\n            o === void 0 && (o = n), bo(r, a, o);\n        }\n    }, _o);\n}\nvar Io = tt;\nfunction Oo(r) {\n    return r;\n}\nvar rt = Oo;\nfunction Ao(r, e, t) {\n    switch(t.length){\n        case 0:\n            return r.call(e);\n        case 1:\n            return r.call(e, t[0]);\n        case 2:\n            return r.call(e, t[0], t[1]);\n        case 3:\n            return r.call(e, t[0], t[1], t[2]);\n    }\n    return r.apply(e, t);\n}\nvar jo = Ao, Ho = jo, it = Math.max;\nfunction Eo(r, e, t) {\n    return e = it(e === void 0 ? r.length - 1 : e, 0), function() {\n        for(var i = arguments, s = -1, n = it(i.length - e, 0), a = Array(n); ++s < n;)a[s] = i[e + s];\n        s = -1;\n        for(var o = Array(e + 1); ++s < e;)o[s] = i[s];\n        return o[e] = t(a), Ho(r, this, o);\n    };\n}\nvar So = Eo;\nfunction No(r) {\n    return function() {\n        return r;\n    };\n}\nvar To = No, Do = To, st = Ne, qo = rt, Ro = st ? function(r, e) {\n    return st(r, \"toString\", {\n        configurable: !0,\n        enumerable: !1,\n        value: Do(e),\n        writable: !0\n    });\n} : qo, xo = Ro, Lo = 800, Uo = 16, Fo = Date.now;\nfunction Mo(r) {\n    var e = 0, t = 0;\n    return function() {\n        var i = Fo(), s = Uo - (i - t);\n        if (t = i, s > 0) {\n            if (++e >= Lo) return arguments[0];\n        } else e = 0;\n        return r.apply(void 0, arguments);\n    };\n}\nvar Go = Mo, zo = xo, ko = Go, Bo = ko(zo), Vo = Bo, Jo = rt, Ko = So, Wo = Vo;\nfunction Xo(r, e) {\n    return Wo(Ko(r, e, Jo), r + \"\");\n}\nvar Yo = Xo, Zo = z, Qo = ae, ec = We, tc = $;\nfunction rc(r, e, t) {\n    if (!tc(t)) return !1;\n    var i = typeof e;\n    return (i == \"number\" ? Qo(t) && ec(e, t.length) : i == \"string\" && e in t) ? Zo(t[e], r) : !1;\n}\nvar ic = rc, sc = Yo, nc = ic;\nfunction ac(r) {\n    return sc(function(e, t) {\n        var i = -1, s = t.length, n = s > 1 ? t[s - 1] : void 0, a = s > 2 ? t[2] : void 0;\n        for(n = r.length > 3 && typeof n == \"function\" ? (s--, n) : void 0, a && nc(t[0], t[1], a) && (n = s < 3 ? void 0 : n, s = 1), e = Object(e); ++i < s;){\n            var o = t[i];\n            o && r(e, o, i, n);\n        }\n        return e;\n    });\n}\nvar oc = ac, cc = Io, hc = oc, pc = hc(function(r, e, t) {\n    cc(r, e, t);\n}), uc = pc, lc = Object.defineProperty, dc = Object.defineProperties, vc = Object.getOwnPropertyDescriptors, nt = Object.getOwnPropertySymbols, fc = Object.prototype.hasOwnProperty, mc = Object.prototype.propertyIsEnumerable, at = (r, e, t)=>e in r ? lc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, X = (r, e)=>{\n    for(var t in e || (e = {}))fc.call(e, t) && at(r, t, e[t]);\n    if (nt) for (var t of nt(e))mc.call(e, t) && at(r, t, e[t]);\n    return r;\n}, gc = (r, e)=>dc(r, vc(e));\nfunction v(r, e, t) {\n    var i;\n    const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(r);\n    return ((i = e.rpcMap) == null ? void 0 : i[s.reference]) || `${ye}?chainId=${s.namespace}:${s.reference}&projectId=${t}`;\n}\nfunction y(r) {\n    return r.includes(\":\") ? r.split(\":\")[1] : r;\n}\nfunction ot(r) {\n    return r.map((e)=>`${e.split(\":\")[0]}:${e.split(\":\")[1]}`);\n}\nfunction Pc(r, e) {\n    const t = Object.keys(e.namespaces).filter((s)=>s.includes(r));\n    if (!t.length) return [];\n    const i = [];\n    return t.forEach((s)=>{\n        const n = e.namespaces[s].accounts;\n        i.push(...n);\n    }), i;\n}\nfunction ce(r = {}, e = {}) {\n    const t = ct(r), i = ct(e);\n    return uc(t, i);\n}\nfunction ct(r) {\n    var e, t, i, s;\n    const n = {};\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(r)) return n;\n    for (const [a, o] of Object.entries(r)){\n        const c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)(a) ? [\n            a\n        ] : o.chains, u = o.methods || [], l = o.events || [], P = o.rpcMap || {}, d = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(a);\n        n[d] = gc(X(X({}, n[d]), o), {\n            chains: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(c, (e = n[d]) == null ? void 0 : e.chains),\n            methods: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(u, (t = n[d]) == null ? void 0 : t.methods),\n            events: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(l, (i = n[d]) == null ? void 0 : i.events),\n            rpcMap: X(X({}, P), (s = n[d]) == null ? void 0 : s.rpcMap)\n        });\n    }\n    return n;\n}\nfunction bc(r) {\n    return r.includes(\":\") ? r.split(\":\")[2] : r;\n}\nfunction ht(r) {\n    const e = {};\n    for (const [t, i] of Object.entries(r)){\n        const s = i.methods || [], n = i.events || [], a = i.accounts || [], o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)(t) ? [\n            t\n        ] : i.chains ? i.chains : ot(i.accounts);\n        e[t] = {\n            chains: o,\n            methods: s,\n            events: n,\n            accounts: a\n        };\n    }\n    return e;\n}\nfunction he(r) {\n    return typeof r == \"number\" ? r : r.includes(\"0x\") ? parseInt(r, 16) : (r = r.includes(\":\") ? r.split(\":\")[1] : r, isNaN(Number(r)) ? r : Number(r));\n}\nconst pt = {}, h = (r)=>pt[r], pe = (r, e)=>{\n    pt[r] = e;\n};\nvar $c = Object.defineProperty, yc = (r, e, t)=>e in r ? $c(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, j = (r, e, t)=>yc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass wc {\n    constructor(e){\n        j(this, \"name\", \"polkadot\"), j(this, \"client\"), j(this, \"httpProviders\"), j(this, \"events\"), j(this, \"namespace\"), j(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = y(t);\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = `${this.name}:${this.chainId}`, t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${e}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar _c = Object.defineProperty, Cc = Object.defineProperties, Ic = Object.getOwnPropertyDescriptors, ut = Object.getOwnPropertySymbols, Oc = Object.prototype.hasOwnProperty, Ac = Object.prototype.propertyIsEnumerable, ue = (r, e, t)=>e in r ? _c(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, lt = (r, e)=>{\n    for(var t in e || (e = {}))Oc.call(e, t) && ue(r, t, e[t]);\n    if (ut) for (var t of ut(e))Ac.call(e, t) && ue(r, t, e[t]);\n    return r;\n}, dt = (r, e)=>Cc(r, Ic(e)), H = (r, e, t)=>ue(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass jc {\n    constructor(e){\n        H(this, \"name\", \"eip155\"), H(this, \"client\"), H(this, \"chainId\"), H(this, \"namespace\"), H(this, \"httpProviders\"), H(this, \"events\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());\n    }\n    async request(e) {\n        switch(e.request.method){\n            case \"eth_requestAccounts\":\n                return this.getAccounts();\n            case \"eth_accounts\":\n                return this.getAccounts();\n            case \"wallet_switchEthereumChain\":\n                return await this.handleSwitchChain(e);\n            case \"eth_chainId\":\n                return parseInt(this.getDefaultChain());\n            case \"wallet_getCapabilities\":\n                return await this.getCapabilities(e);\n            case \"wallet_getCallsStatus\":\n                return await this.getCallStatus(e);\n        }\n        return this.namespace.methods.includes(e.request.method) ? await this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(parseInt(e), t), this.chainId = parseInt(e), this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId.toString();\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(`${this.name}:${e}`, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${e}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__.HttpConnection(i, h(\"disableProviderPing\")));\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = parseInt(y(t));\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    getHttpProvider() {\n        const e = this.chainId, t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n        return t;\n    }\n    async handleSwitchChain(e) {\n        var t, i;\n        let s = e.request.params ? (t = e.request.params[0]) == null ? void 0 : t.chainId : \"0x0\";\n        s = s.startsWith(\"0x\") ? s : `0x${s}`;\n        const n = parseInt(s, 16);\n        if (this.isChainApproved(n)) this.setDefaultChain(`${n}`);\n        else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) await this.client.request({\n            topic: e.topic,\n            request: {\n                method: e.request.method,\n                params: [\n                    {\n                        chainId: s\n                    }\n                ]\n            },\n            chainId: (i = this.namespace.chains) == null ? void 0 : i[0]\n        }), this.setDefaultChain(`${n}`);\n        else throw new Error(`Failed to switch to chain 'eip155:${n}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);\n        return null;\n    }\n    isChainApproved(e) {\n        return this.namespace.chains.includes(`${this.name}:${e}`);\n    }\n    async getCapabilities(e) {\n        var t, i, s;\n        const n = (i = (t = e.request) == null ? void 0 : t.params) == null ? void 0 : i[0];\n        if (!n) throw new Error(\"Missing address parameter in `wallet_getCapabilities` request\");\n        const a = this.client.session.get(e.topic), o = ((s = a?.sessionProperties) == null ? void 0 : s.capabilities) || {};\n        if (o != null && o[n]) return o?.[n];\n        const c = await this.client.request(e);\n        try {\n            await this.client.session.update(e.topic, {\n                sessionProperties: dt(lt({}, a.sessionProperties || {}), {\n                    capabilities: dt(lt({}, o || {}), {\n                        [n]: c\n                    })\n                })\n            });\n        } catch (u) {\n            console.warn(\"Failed to update session with capabilities\", u);\n        }\n        return c;\n    }\n    async getCallStatus(e) {\n        var t, i;\n        const s = this.client.session.get(e.topic), n = (t = s.sessionProperties) == null ? void 0 : t.bundler_name;\n        if (n) {\n            const o = this.getBundlerUrl(e.chainId, n);\n            try {\n                return await this.getUserOperationReceipt(o, e);\n            } catch (c) {\n                console.warn(\"Failed to fetch call status from bundler\", c, o);\n            }\n        }\n        const a = (i = s.sessionProperties) == null ? void 0 : i.bundler_url;\n        if (a) try {\n            return await this.getUserOperationReceipt(a, e);\n        } catch (o) {\n            console.warn(\"Failed to fetch call status from custom bundler\", o, a);\n        }\n        if (this.namespace.methods.includes(e.request.method)) return await this.client.request(e);\n        throw new Error(\"Fetching call status not approved by the wallet.\");\n    }\n    async getUserOperationReceipt(e, t) {\n        var i;\n        const s = new URL(e), n = await fetch(s, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"eth_getUserOperationReceipt\", [\n                (i = t.request.params) == null ? void 0 : i[0]\n            ]))\n        });\n        if (!n.ok) throw new Error(`Failed to fetch user operation receipt - ${n.status}`);\n        return await n.json();\n    }\n    getBundlerUrl(e, t) {\n        return `${Ot}?projectId=${this.client.core.projectId}&chainId=${e}&bundler=${t}`;\n    }\n}\nvar Hc = Object.defineProperty, Ec = (r, e, t)=>e in r ? Hc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, E = (r, e, t)=>Ec(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Sc {\n    constructor(e){\n        E(this, \"name\", \"solana\"), E(this, \"client\"), E(this, \"httpProviders\"), E(this, \"events\"), E(this, \"namespace\"), E(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = y(t);\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = `${this.name}:${this.chainId}`, t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${e}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar Nc = Object.defineProperty, Tc = (r, e, t)=>e in r ? Nc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, S = (r, e, t)=>Tc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Dc {\n    constructor(e){\n        S(this, \"name\", \"cosmos\"), S(this, \"client\"), S(this, \"httpProviders\"), S(this, \"events\"), S(this, \"namespace\"), S(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = y(t);\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = `${this.name}:${this.chainId}`, t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${e}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar qc = Object.defineProperty, Rc = (r, e, t)=>e in r ? qc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, N = (r, e, t)=>Rc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass xc {\n    constructor(e){\n        N(this, \"name\", \"algorand\"), N(this, \"client\"), N(this, \"httpProviders\"), N(this, \"events\"), N(this, \"namespace\"), N(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        if (!this.httpProviders[e]) {\n            const i = t || v(`${this.name}:${e}`, this.namespace, this.client.core.projectId);\n            if (!i) throw new Error(`No RPC url provided for chainId: ${e}`);\n            this.setHttpProvider(e, i);\n        }\n        this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            e[t] = this.createHttpProvider(t, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = `${this.name}:${this.chainId}`, t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        return typeof i > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar Lc = Object.defineProperty, Uc = (r, e, t)=>e in r ? Lc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, T = (r, e, t)=>Uc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Fc {\n    constructor(e){\n        T(this, \"name\", \"cip34\"), T(this, \"client\"), T(this, \"httpProviders\"), T(this, \"events\"), T(this, \"namespace\"), T(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            const i = this.getCardanoRPCUrl(t), s = y(t);\n            e[s] = this.createHttpProvider(s, i);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = `${this.name}:${this.chainId}`, t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n        return t;\n    }\n    getCardanoRPCUrl(e) {\n        const t = this.namespace.rpcMap;\n        if (t) return t[e];\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || this.getCardanoRPCUrl(e);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${e}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar Mc = Object.defineProperty, Gc = (r, e, t)=>e in r ? Mc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, D = (r, e, t)=>Gc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass zc {\n    constructor(e){\n        D(this, \"name\", \"elrond\"), D(this, \"client\"), D(this, \"httpProviders\"), D(this, \"events\"), D(this, \"namespace\"), D(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = y(t);\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = `${this.name}:${this.chainId}`, t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${e}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar kc = Object.defineProperty, Bc = (r, e, t)=>e in r ? kc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, q = (r, e, t)=>Bc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Vc {\n    constructor(e){\n        q(this, \"name\", \"multiversx\"), q(this, \"client\"), q(this, \"httpProviders\"), q(this, \"events\"), q(this, \"namespace\"), q(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = y(t);\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = `${this.name}:${this.chainId}`, t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${e}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar Jc = Object.defineProperty, Kc = (r, e, t)=>e in r ? Jc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, R = (r, e, t)=>Kc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Wc {\n    constructor(e){\n        R(this, \"name\", \"near\"), R(this, \"client\"), R(this, \"httpProviders\"), R(this, \"events\"), R(this, \"namespace\"), R(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        if (this.chainId = e, !this.httpProviders[e]) {\n            const i = t || v(`${this.name}:${e}`, this.namespace);\n            if (!i) throw new Error(`No RPC url provided for chainId: ${e}`);\n            this.setHttpProvider(e, i);\n        }\n        this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            e[t] = this.createHttpProvider(t, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = `${this.name}:${this.chainId}`, t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace);\n        return typeof i > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar Xc = Object.defineProperty, Yc = (r, e, t)=>e in r ? Xc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, x = (r, e, t)=>Yc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Zc {\n    constructor(e){\n        x(this, \"name\", \"tezos\"), x(this, \"client\"), x(this, \"httpProviders\"), x(this, \"events\"), x(this, \"namespace\"), x(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        if (this.chainId = e, !this.httpProviders[e]) {\n            const i = t || v(`${this.name}:${e}`, this.namespace);\n            if (!i) throw new Error(`No RPC url provided for chainId: ${e}`);\n            this.setHttpProvider(e, i);\n        }\n        this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            e[t] = this.createHttpProvider(t);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = `${this.name}:${this.chainId}`, t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace);\n        return typeof i > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i));\n    }\n}\nvar Qc = Object.defineProperty, eh = (r, e, t)=>e in r ? Qc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, L = (r, e, t)=>eh(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass th {\n    constructor(e){\n        L(this, \"name\", w), L(this, \"client\"), L(this, \"httpProviders\"), L(this, \"events\"), L(this, \"namespace\"), L(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(e) {\n        this.namespace.chains = [\n            ...new Set((this.namespace.chains || []).concat(e.chains || []))\n        ], this.namespace.accounts = [\n            ...new Set((this.namespace.accounts || []).concat(e.accounts || []))\n        ], this.namespace.methods = [\n            ...new Set((this.namespace.methods || []).concat(e.methods || []))\n        ], this.namespace.events = [\n            ...new Set((this.namespace.events || []).concat(e.events || []))\n        ], this.httpProviders = this.createHttpProviders();\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider(e.chainId).request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        var e, t;\n        const i = {};\n        return (t = (e = this.namespace) == null ? void 0 : e.accounts) == null || t.forEach((s)=>{\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(s);\n            i[`${n.namespace}:${n.reference}`] = this.createHttpProvider(s);\n        }), i;\n    }\n    getHttpProvider(e) {\n        const t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${e}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar rh = Object.defineProperty, ih = Object.defineProperties, sh = Object.getOwnPropertyDescriptors, vt = Object.getOwnPropertySymbols, nh = Object.prototype.hasOwnProperty, ah = Object.prototype.propertyIsEnumerable, le = (r, e, t)=>e in r ? rh(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, Y = (r, e)=>{\n    for(var t in e || (e = {}))nh.call(e, t) && le(r, t, e[t]);\n    if (vt) for (var t of vt(e))ah.call(e, t) && le(r, t, e[t]);\n    return r;\n}, de = (r, e)=>ih(r, sh(e)), g = (r, e, t)=>le(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Z {\n    constructor(e){\n        g(this, \"client\"), g(this, \"namespaces\"), g(this, \"optionalNamespaces\"), g(this, \"sessionProperties\"), g(this, \"events\", new (events__WEBPACK_IMPORTED_MODULE_4___default())), g(this, \"rpcProviders\", {}), g(this, \"session\"), g(this, \"providerOpts\"), g(this, \"logger\"), g(this, \"uri\"), g(this, \"disableProviderPing\", !1), this.providerOpts = e, this.logger = typeof e?.logger < \"u\" && typeof e?.logger != \"string\" ? e.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: e?.logger || be\n        })), this.disableProviderPing = e?.disableProviderPing || !1;\n    }\n    static async init(e) {\n        const t = new Z(e);\n        return await t.initialize(), t;\n    }\n    async request(e, t, i) {\n        const [s, n] = this.validateChain(t);\n        if (!this.session) throw new Error(\"Please call connect() before request()\");\n        return await this.getProvider(s).request({\n            request: Y({}, e),\n            chainId: `${s}:${n}`,\n            topic: this.session.topic,\n            expiry: i\n        });\n    }\n    sendAsync(e, t, i, s) {\n        const n = new Date().getTime();\n        this.request(e, i, s).then((a)=>t(null, (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult)(n, a))).catch((a)=>t(a, void 0));\n    }\n    async enable() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        return this.session || await this.connect({\n            namespaces: this.namespaces,\n            optionalNamespaces: this.optionalNamespaces,\n            sessionProperties: this.sessionProperties\n        }), await this.requestAccounts();\n    }\n    async disconnect() {\n        var e;\n        if (!this.session) throw new Error(\"Please call connect() before enable()\");\n        await this.client.disconnect({\n            topic: (e = this.session) == null ? void 0 : e.topic,\n            reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")\n        }), await this.cleanup();\n    }\n    async connect(e) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (this.setNamespaces(e), await this.cleanupPendingPairings(), !e.skipPairing) return await this.pair(e.pairingTopic);\n    }\n    async authenticate(e, t) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        this.setNamespaces(e), await this.cleanupPendingPairings();\n        const { uri: i, response: s } = await this.client.authenticate(e, t);\n        i && (this.uri = i, this.events.emit(\"display_uri\", i));\n        const n = await s();\n        if (this.session = n.session, this.session) {\n            const a = ht(this.session.namespaces);\n            this.namespaces = ce(this.namespaces, a), this.persist(\"namespaces\", this.namespaces), this.onConnect();\n        }\n        return n;\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    async pair(e) {\n        const { uri: t, approval: i } = await this.client.connect({\n            pairingTopic: e,\n            requiredNamespaces: this.namespaces,\n            optionalNamespaces: this.optionalNamespaces,\n            sessionProperties: this.sessionProperties\n        });\n        t && (this.uri = t, this.events.emit(\"display_uri\", t));\n        const s = await i();\n        this.session = s;\n        const n = ht(s.namespaces);\n        return this.namespaces = ce(this.namespaces, n), this.persist(\"namespaces\", this.namespaces), this.onConnect(), this.session;\n    }\n    setDefaultChain(e, t) {\n        try {\n            if (!this.session) return;\n            const [i, s] = this.validateChain(e), n = this.getProvider(i);\n            n.name === w ? n.setDefaultChain(`${i}:${s}`, t) : n.setDefaultChain(s, t);\n        } catch (i) {\n            if (!/Please call connect/.test(i.message)) throw i;\n        }\n    }\n    async cleanupPendingPairings(e = {}) {\n        this.logger.info(\"Cleaning up inactive pairings...\");\n        const t = this.client.pairing.getAll();\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(t)) {\n            for (const i of t)e.deletePairings ? this.client.core.expirer.set(i.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i.topic);\n            this.logger.info(`Inactive pairings cleared: ${t.length}`);\n        }\n    }\n    abortPairingAttempt() {\n        this.logger.warn(\"abortPairingAttempt is deprecated. This is now a no-op.\");\n    }\n    async checkStorage() {\n        if (this.namespaces = await this.getFromStore(\"namespaces\"), this.optionalNamespaces = await this.getFromStore(\"optionalNamespaces\") || {}, this.client.session.length) {\n            const e = this.client.session.keys.length - 1;\n            this.session = this.client.session.get(this.client.session.keys[e]), this.createProviders();\n        }\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();\n    }\n    async createClient() {\n        this.client = this.providerOpts.client || await _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__[\"default\"].init({\n            core: this.providerOpts.core,\n            logger: this.providerOpts.logger || be,\n            relayUrl: this.providerOpts.relayUrl || _t,\n            projectId: this.providerOpts.projectId,\n            metadata: this.providerOpts.metadata,\n            storageOptions: this.providerOpts.storageOptions,\n            storage: this.providerOpts.storage,\n            name: this.providerOpts.name,\n            customStoragePrefix: this.providerOpts.customStoragePrefix,\n            telemetryEnabled: this.providerOpts.telemetryEnabled\n        }), this.logger.trace(\"SignClient Initialized\");\n    }\n    createProviders() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (!this.session) throw new Error(\"Session not initialized. Please call connect() before enable()\");\n        const e = [\n            ...new Set(Object.keys(this.session.namespaces).map((t)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(t)))\n        ];\n        pe(\"client\", this.client), pe(\"events\", this.events), pe(\"disableProviderPing\", this.disableProviderPing), e.forEach((t)=>{\n            if (!this.session) return;\n            const i = Pc(t, this.session), s = ot(i), n = ce(this.namespaces, this.optionalNamespaces), a = de(Y({}, n[t]), {\n                accounts: i,\n                chains: s\n            });\n            switch(t){\n                case \"eip155\":\n                    this.rpcProviders[t] = new jc({\n                        namespace: a\n                    });\n                    break;\n                case \"algorand\":\n                    this.rpcProviders[t] = new xc({\n                        namespace: a\n                    });\n                    break;\n                case \"solana\":\n                    this.rpcProviders[t] = new Sc({\n                        namespace: a\n                    });\n                    break;\n                case \"cosmos\":\n                    this.rpcProviders[t] = new Dc({\n                        namespace: a\n                    });\n                    break;\n                case \"polkadot\":\n                    this.rpcProviders[t] = new wc({\n                        namespace: a\n                    });\n                    break;\n                case \"cip34\":\n                    this.rpcProviders[t] = new Fc({\n                        namespace: a\n                    });\n                    break;\n                case \"elrond\":\n                    this.rpcProviders[t] = new zc({\n                        namespace: a\n                    });\n                    break;\n                case \"multiversx\":\n                    this.rpcProviders[t] = new Vc({\n                        namespace: a\n                    });\n                    break;\n                case \"near\":\n                    this.rpcProviders[t] = new Wc({\n                        namespace: a\n                    });\n                    break;\n                case \"tezos\":\n                    this.rpcProviders[t] = new Zc({\n                        namespace: a\n                    });\n                    break;\n                default:\n                    this.rpcProviders[w] ? this.rpcProviders[w].updateNamespace(a) : this.rpcProviders[w] = new th({\n                        namespace: a\n                    });\n            }\n        });\n    }\n    registerEventListeners() {\n        if (typeof this.client > \"u\") throw new Error(\"Sign Client is not initialized\");\n        this.client.on(\"session_ping\", (e)=>{\n            this.events.emit(\"session_ping\", e);\n        }), this.client.on(\"session_event\", (e)=>{\n            const { params: t } = e, { event: i } = t;\n            if (i.name === \"accountsChanged\") {\n                const s = i.data;\n                s && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(s) && this.events.emit(\"accountsChanged\", s.map(bc));\n            } else if (i.name === \"chainChanged\") {\n                const s = t.chainId, n = t.event.data, a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(s), o = he(s) !== he(n) ? `${a}:${he(n)}` : s;\n                this.onChainChanged(o);\n            } else this.events.emit(i.name, i.data);\n            this.events.emit(\"session_event\", e);\n        }), this.client.on(\"session_update\", ({ topic: e, params: t })=>{\n            var i;\n            const { namespaces: s } = t, n = (i = this.client) == null ? void 0 : i.session.get(e);\n            this.session = de(Y({}, n), {\n                namespaces: s\n            }), this.onSessionUpdate(), this.events.emit(\"session_update\", {\n                topic: e,\n                params: t\n            });\n        }), this.client.on(\"session_delete\", async (e)=>{\n            await this.cleanup(), this.events.emit(\"session_delete\", e), this.events.emit(\"disconnect\", de(Y({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: e.topic\n            }));\n        }), this.on(f.DEFAULT_CHAIN_CHANGED, (e)=>{\n            this.onChainChanged(e, !0);\n        });\n    }\n    getProvider(e) {\n        return this.rpcProviders[e] || this.rpcProviders[w];\n    }\n    onSessionUpdate() {\n        Object.keys(this.rpcProviders).forEach((e)=>{\n            var t;\n            this.getProvider(e).updateNamespace((t = this.session) == null ? void 0 : t.namespaces[e]);\n        });\n    }\n    setNamespaces(e) {\n        const { namespaces: t, optionalNamespaces: i, sessionProperties: s } = e;\n        t && Object.keys(t).length && (this.namespaces = t), i && Object.keys(i).length && (this.optionalNamespaces = i), this.sessionProperties = s, this.persist(\"namespaces\", t), this.persist(\"optionalNamespaces\", i);\n    }\n    validateChain(e) {\n        const [t, i] = e?.split(\":\") || [\n            \"\",\n            \"\"\n        ];\n        if (!this.namespaces || !Object.keys(this.namespaces).length) return [\n            t,\n            i\n        ];\n        if (t && !Object.keys(this.namespaces || {}).map((a)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(a)).includes(t)) throw new Error(`Namespace '${t}' is not configured. Please call connect() first with namespace config.`);\n        if (t && i) return [\n            t,\n            i\n        ];\n        const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(Object.keys(this.namespaces)[0]), n = this.rpcProviders[s].getDefaultChain();\n        return [\n            s,\n            n\n        ];\n    }\n    async requestAccounts() {\n        const [e] = this.validateChain();\n        return await this.getProvider(e).requestAccounts();\n    }\n    onChainChanged(e, t = !1) {\n        if (!this.namespaces) return;\n        const [i, s] = this.validateChain(e);\n        s && (t || this.getProvider(i).setDefaultChain(s), this.namespaces[i] ? this.namespaces[i].defaultChain = s : this.namespaces[`${i}:${s}`] ? this.namespaces[`${i}:${s}`].defaultChain = s : this.namespaces[`${i}:${s}`] = {\n            defaultChain: s\n        }, this.persist(\"namespaces\", this.namespaces), this.events.emit(\"chainChanged\", s));\n    }\n    onConnect() {\n        this.createProviders(), this.events.emit(\"connect\", {\n            session: this.session\n        });\n    }\n    async cleanup() {\n        this.session = void 0, this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, this.persist(\"namespaces\", void 0), this.persist(\"optionalNamespaces\", void 0), this.persist(\"sessionProperties\", void 0), await this.cleanupPendingPairings({\n            deletePairings: !0\n        });\n    }\n    persist(e, t) {\n        this.client.core.storage.setItem(`${$e}/${e}`, t);\n    }\n    async getFromStore(e) {\n        return await this.client.core.storage.getItem(`${$e}/${e}`);\n    }\n}\nconst oh = Z;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/dist/index.es.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE10: () => (/* binding */ It),\n/* harmony export */   BASE16: () => (/* binding */ V),\n/* harmony export */   BASE64: () => (/* binding */ At),\n/* harmony export */   BASE64URL: () => (/* binding */ Qs),\n/* harmony export */   COLON: () => (/* binding */ qr),\n/* harmony export */   DEFAULT_DEPTH: () => (/* binding */ Qe),\n/* harmony export */   EMPTY_SPACE: () => (/* binding */ Be),\n/* harmony export */   ENV_MAP: () => (/* binding */ H),\n/* harmony export */   INTERNAL_ERRORS: () => (/* binding */ mr),\n/* harmony export */   MemoryStore: () => (/* binding */ Zi),\n/* harmony export */   ONE_THOUSAND: () => (/* binding */ Gr),\n/* harmony export */   REACT_NATIVE_PRODUCT: () => (/* binding */ Ft),\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: () => (/* binding */ sr),\n/* harmony export */   SDK_ERRORS: () => (/* binding */ yr),\n/* harmony export */   SDK_TYPE: () => (/* binding */ Gt),\n/* harmony export */   SLASH: () => (/* binding */ qt),\n/* harmony export */   TYPE_0: () => (/* binding */ Nt),\n/* harmony export */   TYPE_1: () => (/* binding */ Ie),\n/* harmony export */   TYPE_2: () => (/* binding */ _e),\n/* harmony export */   UTF8: () => (/* binding */ Oe),\n/* harmony export */   addResourceToRecap: () => (/* binding */ $n),\n/* harmony export */   appendToQueryString: () => (/* binding */ Wt),\n/* harmony export */   assertType: () => (/* binding */ eo),\n/* harmony export */   assignAbilityToActions: () => (/* binding */ ft),\n/* harmony export */   base64Decode: () => (/* binding */ _n),\n/* harmony export */   base64Encode: () => (/* binding */ Un),\n/* harmony export */   buildApprovedNamespaces: () => (/* binding */ _i),\n/* harmony export */   buildAuthObject: () => (/* binding */ Xo),\n/* harmony export */   buildNamespacesFromAuth: () => (/* binding */ Ti),\n/* harmony export */   buildRecapStatement: () => (/* binding */ Pn),\n/* harmony export */   calcExpiry: () => (/* binding */ ho),\n/* harmony export */   capitalize: () => (/* binding */ io),\n/* harmony export */   capitalizeWord: () => (/* binding */ Qt),\n/* harmony export */   createDelayedPromise: () => (/* binding */ co),\n/* harmony export */   createEncodedRecap: () => (/* binding */ ts),\n/* harmony export */   createExpiringPromise: () => (/* binding */ ao),\n/* harmony export */   createRecap: () => (/* binding */ Tn),\n/* harmony export */   decodeRecap: () => (/* binding */ oe),\n/* harmony export */   decodeTypeByte: () => (/* binding */ fe),\n/* harmony export */   decodeTypeTwoEnvelope: () => (/* binding */ ui),\n/* harmony export */   decrypt: () => (/* binding */ ci),\n/* harmony export */   deriveSymKey: () => (/* binding */ ri),\n/* harmony export */   deserialize: () => (/* binding */ Fe),\n/* harmony export */   encodeRecap: () => (/* binding */ De),\n/* harmony export */   encodeTypeByte: () => (/* binding */ Ut),\n/* harmony export */   encodeTypeTwoEnvelope: () => (/* binding */ ai),\n/* harmony export */   encrypt: () => (/* binding */ ii),\n/* harmony export */   engineEvent: () => (/* binding */ go),\n/* harmony export */   enumify: () => (/* binding */ so),\n/* harmony export */   formatAccountId: () => (/* binding */ Mt),\n/* harmony export */   formatAccountWithChain: () => (/* binding */ Mr),\n/* harmony export */   formatChainId: () => (/* binding */ Dt),\n/* harmony export */   formatDeeplinkUrl: () => (/* binding */ en),\n/* harmony export */   formatExpirerTarget: () => (/* binding */ tt),\n/* harmony export */   formatIdTarget: () => (/* binding */ fo),\n/* harmony export */   formatMessage: () => (/* binding */ In),\n/* harmony export */   formatMessageContext: () => (/* binding */ to),\n/* harmony export */   formatRelayParams: () => (/* binding */ ar),\n/* harmony export */   formatRelayRpcUrl: () => (/* binding */ Zr),\n/* harmony export */   formatStatementFromRecap: () => (/* binding */ dt),\n/* harmony export */   formatTopicTarget: () => (/* binding */ uo),\n/* harmony export */   formatUA: () => (/* binding */ Yt),\n/* harmony export */   formatUri: () => (/* binding */ wi),\n/* harmony export */   fromBase64: () => (/* binding */ rt),\n/* harmony export */   generateKeyPair: () => (/* binding */ ti),\n/* harmony export */   generateRandomBytes32: () => (/* binding */ ni),\n/* harmony export */   getAccountsChains: () => (/* binding */ le),\n/* harmony export */   getAccountsFromNamespaces: () => (/* binding */ Hr),\n/* harmony export */   getAddressFromAccount: () => (/* binding */ Vt),\n/* harmony export */   getAddressesFromAccounts: () => (/* binding */ Vr),\n/* harmony export */   getAppId: () => (/* binding */ Jr),\n/* harmony export */   getAppMetadata: () => (/* binding */ Yr),\n/* harmony export */   getBrowserOnlineStatus: () => (/* binding */ Ur),\n/* harmony export */   getChainFromAccount: () => (/* binding */ Ht),\n/* harmony export */   getChainsFromAccounts: () => (/* binding */ Kt),\n/* harmony export */   getChainsFromNamespace: () => (/* binding */ Le),\n/* harmony export */   getChainsFromNamespaces: () => (/* binding */ Kr),\n/* harmony export */   getChainsFromRecap: () => (/* binding */ os),\n/* harmony export */   getChainsFromRequiredNamespaces: () => (/* binding */ Fr),\n/* harmony export */   getCommonValuesInArrays: () => (/* binding */ nt),\n/* harmony export */   getCryptoKeyFromKeyData: () => (/* binding */ or),\n/* harmony export */   getDecodedRecapFromResources: () => (/* binding */ An),\n/* harmony export */   getDeepLink: () => (/* binding */ mo),\n/* harmony export */   getDidAddress: () => (/* binding */ ut),\n/* harmony export */   getDidAddressSegments: () => (/* binding */ ke),\n/* harmony export */   getDidChainId: () => (/* binding */ xn),\n/* harmony export */   getEnvironment: () => (/* binding */ ue),\n/* harmony export */   getHttpUrl: () => (/* binding */ Qr),\n/* harmony export */   getInternalError: () => (/* binding */ te),\n/* harmony export */   getJavascriptID: () => (/* binding */ Jt),\n/* harmony export */   getJavascriptOS: () => (/* binding */ zt),\n/* harmony export */   getLastItems: () => (/* binding */ Zt),\n/* harmony export */   getLinkModeURL: () => (/* binding */ Ei),\n/* harmony export */   getMethodsFromRecap: () => (/* binding */ rs),\n/* harmony export */   getNamespacedDidChainId: () => (/* binding */ On),\n/* harmony export */   getNamespacesChains: () => (/* binding */ lr),\n/* harmony export */   getNamespacesEventsForChainId: () => (/* binding */ hr),\n/* harmony export */   getNamespacesFromAccounts: () => (/* binding */ gr),\n/* harmony export */   getNamespacesMethodsForChainId: () => (/* binding */ dr),\n/* harmony export */   getNodeOnlineStatus: () => (/* binding */ Tr),\n/* harmony export */   getReCapActions: () => (/* binding */ Sn),\n/* harmony export */   getReactNativeOnlineStatus: () => (/* binding */ _r),\n/* harmony export */   getRecapAbilitiesFromResource: () => (/* binding */ es),\n/* harmony export */   getRecapFromResources: () => (/* binding */ Me),\n/* harmony export */   getRecapResource: () => (/* binding */ Nn),\n/* harmony export */   getRelayClientMetadata: () => (/* binding */ Xr),\n/* harmony export */   getRelayProtocolApi: () => (/* binding */ mi),\n/* harmony export */   getRelayProtocolName: () => (/* binding */ yi),\n/* harmony export */   getRequiredNamespacesFromNamespaces: () => (/* binding */ Ui),\n/* harmony export */   getSdkError: () => (/* binding */ de),\n/* harmony export */   getSearchParamFromURL: () => (/* binding */ bo),\n/* harmony export */   getUniqueValues: () => (/* binding */ Ze),\n/* harmony export */   handleDeeplinkRedirect: () => (/* binding */ yo),\n/* harmony export */   hasOverlap: () => (/* binding */ re),\n/* harmony export */   hashEthereumMessage: () => (/* binding */ ct),\n/* harmony export */   hashKey: () => (/* binding */ oi),\n/* harmony export */   hashMessage: () => (/* binding */ si),\n/* harmony export */   isAndroid: () => (/* binding */ Wr),\n/* harmony export */   isBrowser: () => (/* binding */ Ae),\n/* harmony export */   isCaipNamespace: () => (/* binding */ Tt),\n/* harmony export */   isConformingNamespaces: () => (/* binding */ Nr),\n/* harmony export */   isExpired: () => (/* binding */ po),\n/* harmony export */   isIframe: () => (/* binding */ rn),\n/* harmony export */   isIos: () => (/* binding */ zr),\n/* harmony export */   isNode: () => (/* binding */ et),\n/* harmony export */   isOnline: () => (/* binding */ Yi),\n/* harmony export */   isProposalStruct: () => (/* binding */ Pi),\n/* harmony export */   isReactNative: () => (/* binding */ ne),\n/* harmony export */   isRecap: () => (/* binding */ lt),\n/* harmony export */   isSessionCompatible: () => (/* binding */ $i),\n/* harmony export */   isSessionStruct: () => (/* binding */ Li),\n/* harmony export */   isTelegram: () => (/* binding */ nn),\n/* harmony export */   isTestRun: () => (/* binding */ Eo),\n/* harmony export */   isTypeOneEnvelope: () => (/* binding */ li),\n/* harmony export */   isTypeTwoEnvelope: () => (/* binding */ di),\n/* harmony export */   isUndefined: () => (/* binding */ ae),\n/* harmony export */   isValidAccountId: () => (/* binding */ br),\n/* harmony export */   isValidAccounts: () => (/* binding */ vr),\n/* harmony export */   isValidActions: () => (/* binding */ Or),\n/* harmony export */   isValidArray: () => (/* binding */ $e),\n/* harmony export */   isValidChainId: () => (/* binding */ Re),\n/* harmony export */   isValidChains: () => (/* binding */ wr),\n/* harmony export */   isValidController: () => (/* binding */ Bi),\n/* harmony export */   isValidEip1271Signature: () => (/* binding */ bn),\n/* harmony export */   isValidEip191Signature: () => (/* binding */ mn),\n/* harmony export */   isValidErrorReason: () => (/* binding */ Mi),\n/* harmony export */   isValidEvent: () => (/* binding */ Ki),\n/* harmony export */   isValidId: () => (/* binding */ ki),\n/* harmony export */   isValidNamespaceAccounts: () => (/* binding */ xr),\n/* harmony export */   isValidNamespaceActions: () => (/* binding */ Pt),\n/* harmony export */   isValidNamespaceChains: () => (/* binding */ Er),\n/* harmony export */   isValidNamespaceMethodsOrEvents: () => (/* binding */ Rt),\n/* harmony export */   isValidNamespaces: () => (/* binding */ Ir),\n/* harmony export */   isValidNamespacesChainId: () => (/* binding */ Fi),\n/* harmony export */   isValidNamespacesEvent: () => (/* binding */ Gi),\n/* harmony export */   isValidNamespacesRequest: () => (/* binding */ qi),\n/* harmony export */   isValidNumber: () => (/* binding */ Ge),\n/* harmony export */   isValidObject: () => (/* binding */ qe),\n/* harmony export */   isValidParams: () => (/* binding */ Di),\n/* harmony export */   isValidRecap: () => (/* binding */ Y),\n/* harmony export */   isValidRelay: () => (/* binding */ Ar),\n/* harmony export */   isValidRelays: () => (/* binding */ Ci),\n/* harmony export */   isValidRequest: () => (/* binding */ Vi),\n/* harmony export */   isValidRequestExpiry: () => (/* binding */ Ji),\n/* harmony export */   isValidRequiredNamespaces: () => (/* binding */ ji),\n/* harmony export */   isValidResponse: () => (/* binding */ Hi),\n/* harmony export */   isValidString: () => (/* binding */ q),\n/* harmony export */   isValidUrl: () => (/* binding */ Ri),\n/* harmony export */   mapEntries: () => (/* binding */ oo),\n/* harmony export */   mapToObj: () => (/* binding */ no),\n/* harmony export */   mergeArrays: () => (/* binding */ Q),\n/* harmony export */   mergeEncodedRecaps: () => (/* binding */ ns),\n/* harmony export */   mergeRecaps: () => (/* binding */ Rn),\n/* harmony export */   normalizeNamespaces: () => (/* binding */ $t),\n/* harmony export */   objToMap: () => (/* binding */ ro),\n/* harmony export */   openDeeplink: () => (/* binding */ tn),\n/* harmony export */   parseAccountId: () => (/* binding */ Xe),\n/* harmony export */   parseChainId: () => (/* binding */ Ye),\n/* harmony export */   parseContextNames: () => (/* binding */ Xt),\n/* harmony export */   parseExpirerTarget: () => (/* binding */ lo),\n/* harmony export */   parseNamespaceKey: () => (/* binding */ pr),\n/* harmony export */   parseRelayParams: () => (/* binding */ ir),\n/* harmony export */   parseTopic: () => (/* binding */ cr),\n/* harmony export */   parseUri: () => (/* binding */ bi),\n/* harmony export */   populateAuthPayload: () => (/* binding */ Zo),\n/* harmony export */   recapHasResource: () => (/* binding */ Qo),\n/* harmony export */   serialize: () => (/* binding */ _t),\n/* harmony export */   sleep: () => (/* binding */ vo),\n/* harmony export */   subscribeToBrowserNetworkChange: () => (/* binding */ $r),\n/* harmony export */   subscribeToNetworkChange: () => (/* binding */ Xi),\n/* harmony export */   subscribeToReactNativeNetworkChange: () => (/* binding */ Rr),\n/* harmony export */   toBase64: () => (/* binding */ on),\n/* harmony export */   uuidv4: () => (/* binding */ wo),\n/* harmony export */   validateDecoding: () => (/* binding */ fi),\n/* harmony export */   validateEncoding: () => (/* binding */ rr),\n/* harmony export */   validateSignedCacao: () => (/* binding */ Yo),\n/* harmony export */   verifyP256Jwt: () => (/* binding */ gi),\n/* harmony export */   verifySignature: () => (/* binding */ yn)\n/* harmony export */ });\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! detect-browser */ \"(ssr)/./node_modules/detect-browser/es/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/window-getters */ \"(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/window-metadata */ \"(ssr)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js\");\n/* harmony import */ var _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/relay-auth */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/index.es.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays */ \"(ssr)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/relay-api */ \"(ssr)/./node_modules/@walletconnect/relay-api/dist/index.es.js\");\n\n\n\n\n\n\n\n\n\nconst Pe = \":\";\nfunction Ye(e) {\n    const [t, n] = e.split(Pe);\n    return {\n        namespace: t,\n        reference: n\n    };\n}\nfunction Dt(e) {\n    const { namespace: t, reference: n } = e;\n    return [\n        t,\n        n\n    ].join(Pe);\n}\nfunction Xe(e) {\n    const [t, n, r] = e.split(Pe);\n    return {\n        namespace: t,\n        reference: n,\n        address: r\n    };\n}\nfunction Mt(e) {\n    const { namespace: t, reference: n, address: r } = e;\n    return [\n        t,\n        n,\n        r\n    ].join(Pe);\n}\nfunction Ze(e, t) {\n    const n = [];\n    return e.forEach((r)=>{\n        const o = t(r);\n        n.includes(o) || n.push(o);\n    }), n;\n}\nfunction Vt(e) {\n    const { address: t } = Xe(e);\n    return t;\n}\nfunction Ht(e) {\n    const { namespace: t, reference: n } = Xe(e);\n    return Dt({\n        namespace: t,\n        reference: n\n    });\n}\nfunction Mr(e, t) {\n    const { namespace: n, reference: r } = Ye(t);\n    return Mt({\n        namespace: n,\n        reference: r,\n        address: e\n    });\n}\nfunction Vr(e) {\n    return Ze(e, Vt);\n}\nfunction Kt(e) {\n    return Ze(e, Ht);\n}\nfunction Hr(e, t = []) {\n    const n = [];\n    return Object.keys(e).forEach((r)=>{\n        if (t.length && !t.includes(r)) return;\n        const o = e[r];\n        n.push(...o.accounts);\n    }), n;\n}\nfunction Kr(e, t = []) {\n    const n = [];\n    return Object.keys(e).forEach((r)=>{\n        if (t.length && !t.includes(r)) return;\n        const o = e[r];\n        n.push(...Kt(o.accounts));\n    }), n;\n}\nfunction Fr(e, t = []) {\n    const n = [];\n    return Object.keys(e).forEach((r)=>{\n        if (t.length && !t.includes(r)) return;\n        const o = e[r];\n        n.push(...Le(r, o));\n    }), n;\n}\nfunction Le(e, t) {\n    return e.includes(\":\") ? [\n        e\n    ] : t.chains || [];\n}\nconst Ft = \"ReactNative\", H = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\"\n}, Be = \" \", qr = \":\", qt = \"/\", Qe = 2, Gr = 1e3, Gt = \"js\";\nfunction et() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction ne() {\n    return !(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && navigator.product === Ft;\n}\nfunction Wr() {\n    return ne() && typeof global < \"u\" && typeof (global == null ? void 0 : global.Platform) < \"u\" && (global == null ? void 0 : global.Platform.OS) === \"android\";\n}\nfunction zr() {\n    return ne() && typeof global < \"u\" && typeof (global == null ? void 0 : global.Platform) < \"u\" && (global == null ? void 0 : global.Platform.OS) === \"ios\";\n}\nfunction Ae() {\n    return !et() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)();\n}\nfunction ue() {\n    return ne() ? H.reactNative : et() ? H.node : Ae() ? H.browser : H.unknown;\n}\nfunction Jr() {\n    var e;\n    try {\n        return ne() && typeof global < \"u\" && typeof (global == null ? void 0 : global.Application) < \"u\" ? (e = global.Application) == null ? void 0 : e.applicationId : void 0;\n    } catch  {\n        return;\n    }\n}\nfunction Wt(e, t) {\n    const n = new URLSearchParams(e);\n    for (const r of Object.keys(t).sort())if (t.hasOwnProperty(r)) {\n        const o = t[r];\n        o !== void 0 && n.set(r, o);\n    }\n    return n.toString();\n}\nfunction Yr() {\n    return (0,_walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__.getWindowMetadata)() || {\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        icons: [\n            \"\"\n        ]\n    };\n}\nfunction Xr(e, t) {\n    var n;\n    const r = ue(), o = {\n        protocol: e,\n        version: t,\n        env: r\n    };\n    return r === \"browser\" && (o.host = ((n = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : n.host) || \"unknown\"), o;\n}\nfunction zt() {\n    if (ue() === H.reactNative && typeof global < \"u\" && typeof (global == null ? void 0 : global.Platform) < \"u\") {\n        const { OS: n, Version: r } = global.Platform;\n        return [\n            n,\n            r\n        ].join(\"-\");\n    }\n    const e = (0,detect_browser__WEBPACK_IMPORTED_MODULE_7__.detect)();\n    if (e === null) return \"unknown\";\n    const t = e.os ? e.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n    return e.type === \"browser\" ? [\n        t,\n        e.name,\n        e.version\n    ].join(\"-\") : [\n        t,\n        e.version\n    ].join(\"-\");\n}\nfunction Jt() {\n    var e;\n    const t = ue();\n    return t === H.browser ? [\n        t,\n        ((e = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : e.host) || \"unknown\"\n    ].join(\":\") : t;\n}\nfunction Yt(e, t, n) {\n    const r = zt(), o = Jt();\n    return [\n        [\n            e,\n            t\n        ].join(\"-\"),\n        [\n            Gt,\n            n\n        ].join(\"-\"),\n        r,\n        o\n    ].join(\"/\");\n}\nfunction Zr({ protocol: e, version: t, relayUrl: n, sdkVersion: r, auth: o, projectId: s, useOnCloseEvent: i, bundleId: c, packageName: u }) {\n    const a = n.split(\"?\"), l = Yt(e, t, r), f = {\n        auth: o,\n        ua: l,\n        projectId: s,\n        useOnCloseEvent: i || void 0,\n        packageName: u || void 0,\n        bundleId: c || void 0\n    }, d = Wt(a[1] || \"\", f);\n    return a[0] + \"?\" + d;\n}\nfunction Qr(e) {\n    let t = (e.match(/^[^:]+(?=:\\/\\/)/gi) || [])[0];\n    const n = typeof t < \"u\" ? e.split(\"://\")[1] : e;\n    return t = t === \"wss\" ? \"https\" : \"http\", [\n        t,\n        n\n    ].join(\"://\");\n}\nfunction eo(e, t, n) {\n    if (!e[t] || typeof e[t] !== n) throw new Error(`Missing or invalid \"${t}\" param`);\n}\nfunction Xt(e, t = Qe) {\n    return Zt(e.split(qt), t);\n}\nfunction to(e) {\n    return Xt(e).join(Be);\n}\nfunction re(e, t) {\n    return e.filter((n)=>t.includes(n)).length === e.length;\n}\nfunction Zt(e, t = Qe) {\n    return e.slice(Math.max(e.length - t, 0));\n}\nfunction no(e) {\n    return Object.fromEntries(e.entries());\n}\nfunction ro(e) {\n    return new Map(Object.entries(e));\n}\nfunction oo(e, t) {\n    const n = {};\n    return Object.keys(e).forEach((r)=>{\n        n[r] = t(e[r]);\n    }), n;\n}\nconst so = (e)=>e;\nfunction Qt(e) {\n    return e.trim().replace(/^\\w/, (t)=>t.toUpperCase());\n}\nfunction io(e) {\n    return e.split(Be).map((t)=>Qt(t)).join(Be);\n}\nfunction co(e = _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES, t) {\n    const n = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e || _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES);\n    let r, o, s, i;\n    return {\n        resolve: (c)=>{\n            s && r && (clearTimeout(s), r(c), i = Promise.resolve(c));\n        },\n        reject: (c)=>{\n            s && o && (clearTimeout(s), o(c));\n        },\n        done: ()=>new Promise((c, u)=>{\n                if (i) return c(i);\n                s = setTimeout(()=>{\n                    const a = new Error(t);\n                    i = Promise.reject(a), u(a);\n                }, n), r = c, o = u;\n            })\n    };\n}\nfunction ao(e, t, n) {\n    return new Promise(async (r, o)=>{\n        const s = setTimeout(()=>o(new Error(n)), t);\n        try {\n            const i = await e;\n            r(i);\n        } catch (i) {\n            o(i);\n        }\n        clearTimeout(s);\n    });\n}\nfunction tt(e, t) {\n    if (typeof t == \"string\" && t.startsWith(`${e}:`)) return t;\n    if (e.toLowerCase() === \"topic\") {\n        if (typeof t != \"string\") throw new Error('Value must be \"string\" for expirer target type: topic');\n        return `topic:${t}`;\n    } else if (e.toLowerCase() === \"id\") {\n        if (typeof t != \"number\") throw new Error('Value must be \"number\" for expirer target type: id');\n        return `id:${t}`;\n    }\n    throw new Error(`Unknown expirer target type: ${e}`);\n}\nfunction uo(e) {\n    return tt(\"topic\", e);\n}\nfunction fo(e) {\n    return tt(\"id\", e);\n}\nfunction lo(e) {\n    const [t, n] = e.split(\":\"), r = {\n        id: void 0,\n        topic: void 0\n    };\n    if (t === \"topic\" && typeof n == \"string\") r.topic = n;\n    else if (t === \"id\" && Number.isInteger(Number(n))) r.id = Number(n);\n    else throw new Error(`Invalid target, expected id:number or topic:string, got ${t}:${n}`);\n    return r;\n}\nfunction ho(e, t) {\n    return (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.fromMiliseconds)((t || Date.now()) + (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e));\n}\nfunction po(e) {\n    return Date.now() >= (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e);\n}\nfunction go(e, t) {\n    return `${e}${t ? `:${t}` : \"\"}`;\n}\nfunction Q(e = [], t = []) {\n    return [\n        ...new Set([\n            ...e,\n            ...t\n        ])\n    ];\n}\nasync function yo({ id: e, topic: t, wcDeepLink: n }) {\n    var r;\n    try {\n        if (!n) return;\n        const o = typeof n == \"string\" ? JSON.parse(n) : n, s = o?.href;\n        if (typeof s != \"string\") return;\n        const i = en(s, e, t), c = ue();\n        if (c === H.browser) {\n            if (!((r = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)()) != null && r.hasFocus())) {\n                console.warn(\"Document does not have focus, skipping deeplink.\");\n                return;\n            }\n            tn(i);\n        } else c === H.reactNative && typeof (global == null ? void 0 : global.Linking) < \"u\" && await global.Linking.openURL(i);\n    } catch (o) {\n        console.error(o);\n    }\n}\nfunction en(e, t, n) {\n    const r = `requestId=${t}&sessionTopic=${n}`;\n    e.endsWith(\"/\") && (e = e.slice(0, -1));\n    let o = `${e}`;\n    if (e.startsWith(\"https://t.me\")) {\n        const s = e.includes(\"?\") ? \"&startapp=\" : \"?startapp=\";\n        o = `${o}${s}${on(r, !0)}`;\n    } else o = `${o}/wc?${r}`;\n    return o;\n}\nfunction tn(e) {\n    let t = \"_self\";\n    rn() ? t = \"_top\" : (nn() || e.startsWith(\"https://\") || e.startsWith(\"http://\")) && (t = \"_blank\"), window.open(e, t, \"noreferrer noopener\");\n}\nasync function mo(e, t) {\n    let n = \"\";\n    try {\n        if (Ae() && (n = localStorage.getItem(t), n)) return n;\n        n = await e.getItem(t);\n    } catch (r) {\n        console.error(r);\n    }\n    return n;\n}\nfunction nt(e, t) {\n    return e.filter((n)=>t.includes(n));\n}\nfunction bo(e, t) {\n    if (!e.includes(t)) return null;\n    const n = e.split(/([&,?,=])/), r = n.indexOf(t);\n    return n[r + 2];\n}\nfunction wo() {\n    return typeof crypto < \"u\" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/gu, (e)=>{\n        const t = Math.random() * 16 | 0;\n        return (e === \"x\" ? t : t & 3 | 8).toString(16);\n    });\n}\nfunction Eo() {\n    return typeof process < \"u\" && process.env.IS_VITEST === \"true\";\n}\nfunction nn() {\n    return  false && (0);\n}\nfunction rn() {\n    try {\n        return window.self !== window.top;\n    } catch  {\n        return !1;\n    }\n}\nfunction on(e, t = !1) {\n    const n = Buffer.from(e).toString(\"base64\");\n    return t ? n.replace(/[=]/g, \"\") : n;\n}\nfunction rt(e) {\n    return Buffer.from(e, \"base64\").toString(\"utf-8\");\n}\nfunction vo(e) {\n    return new Promise((t)=>setTimeout(t, e));\n}\nfunction Ne(e) {\n    if (!Number.isSafeInteger(e) || e < 0) throw new Error(\"positive integer expected, got \" + e);\n}\nfunction xo(e) {\n    return e instanceof Uint8Array || ArrayBuffer.isView(e) && e.constructor.name === \"Uint8Array\";\n}\nfunction je(e, ...t) {\n    if (!xo(e)) throw new Error(\"Uint8Array expected\");\n    if (t.length > 0 && !t.includes(e.length)) throw new Error(\"Uint8Array expected of length \" + t + \", got length=\" + e.length);\n}\nfunction ot(e) {\n    if (typeof e != \"function\" || typeof e.create != \"function\") throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");\n    Ne(e.outputLen), Ne(e.blockLen);\n}\nfunction me(e, t = !0) {\n    if (e.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (t && e.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nfunction sn(e, t) {\n    je(e);\n    const n = t.outputLen;\n    if (e.length < n) throw new Error(\"digestInto() expects output buffer of length at least \" + n);\n}\nconst Ce = BigInt(2 ** 32 - 1), cn = BigInt(32);\nfunction Oo(e, t = !1) {\n    return t ? {\n        h: Number(e & Ce),\n        l: Number(e >> cn & Ce)\n    } : {\n        h: Number(e >> cn & Ce) | 0,\n        l: Number(e & Ce) | 0\n    };\n}\nfunction Io(e, t = !1) {\n    let n = new Uint32Array(e.length), r = new Uint32Array(e.length);\n    for(let o = 0; o < e.length; o++){\n        const { h: s, l: i } = Oo(e[o], t);\n        [n[o], r[o]] = [\n            s,\n            i\n        ];\n    }\n    return [\n        n,\n        r\n    ];\n}\nconst Ao = (e, t, n)=>e << n | t >>> 32 - n, No = (e, t, n)=>t << n | e >>> 32 - n, So = (e, t, n)=>t << n - 32 | e >>> 64 - n, Uo = (e, t, n)=>e << n - 32 | t >>> 64 - n, be = typeof globalThis == \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0;\nfunction _o(e) {\n    return new Uint32Array(e.buffer, e.byteOffset, Math.floor(e.byteLength / 4));\n}\nfunction st(e) {\n    return new DataView(e.buffer, e.byteOffset, e.byteLength);\n}\nfunction J(e, t) {\n    return e << 32 - t | e >>> t;\n}\nconst an = new Uint8Array(new Uint32Array([\n    287454020\n]).buffer)[0] === 68;\nfunction To(e) {\n    return e << 24 & 4278190080 | e << 8 & 16711680 | e >>> 8 & 65280 | e >>> 24 & 255;\n}\nfunction un(e) {\n    for(let t = 0; t < e.length; t++)e[t] = To(e[t]);\n}\nfunction $o(e) {\n    if (typeof e != \"string\") throw new Error(\"utf8ToBytes expected string, got \" + typeof e);\n    return new Uint8Array(new TextEncoder().encode(e));\n}\nfunction we(e) {\n    return typeof e == \"string\" && (e = $o(e)), je(e), e;\n}\nclass it {\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction fn(e) {\n    const t = (r)=>e().update(we(r)).digest(), n = e();\n    return t.outputLen = n.outputLen, t.blockLen = n.blockLen, t.create = ()=>e(), t;\n}\nfunction Se(e = 32) {\n    if (be && typeof be.getRandomValues == \"function\") return be.getRandomValues(new Uint8Array(e));\n    if (be && typeof be.randomBytes == \"function\") return be.randomBytes(e);\n    throw new Error(\"crypto.getRandomValues must be defined\");\n}\nconst ln = [], dn = [], hn = [], Ro = BigInt(0), Ue = BigInt(1), Po = BigInt(2), Lo = BigInt(7), Bo = BigInt(256), jo = BigInt(113);\nfor(let e = 0, t = Ue, n = 1, r = 0; e < 24; e++){\n    [n, r] = [\n        r,\n        (2 * n + 3 * r) % 5\n    ], ln.push(2 * (5 * r + n)), dn.push((e + 1) * (e + 2) / 2 % 64);\n    let o = Ro;\n    for(let s = 0; s < 7; s++)t = (t << Ue ^ (t >> Lo) * jo) % Bo, t & Po && (o ^= Ue << (Ue << BigInt(s)) - Ue);\n    hn.push(o);\n}\nconst [Co, ko] = Io(hn, !0), pn = (e, t, n)=>n > 32 ? So(e, t, n) : Ao(e, t, n), gn = (e, t, n)=>n > 32 ? Uo(e, t, n) : No(e, t, n);\nfunction Do(e, t = 24) {\n    const n = new Uint32Array(10);\n    for(let r = 24 - t; r < 24; r++){\n        for(let i = 0; i < 10; i++)n[i] = e[i] ^ e[i + 10] ^ e[i + 20] ^ e[i + 30] ^ e[i + 40];\n        for(let i = 0; i < 10; i += 2){\n            const c = (i + 8) % 10, u = (i + 2) % 10, a = n[u], l = n[u + 1], f = pn(a, l, 1) ^ n[c], d = gn(a, l, 1) ^ n[c + 1];\n            for(let g = 0; g < 50; g += 10)e[i + g] ^= f, e[i + g + 1] ^= d;\n        }\n        let o = e[2], s = e[3];\n        for(let i = 0; i < 24; i++){\n            const c = dn[i], u = pn(o, s, c), a = gn(o, s, c), l = ln[i];\n            o = e[l], s = e[l + 1], e[l] = u, e[l + 1] = a;\n        }\n        for(let i = 0; i < 50; i += 10){\n            for(let c = 0; c < 10; c++)n[c] = e[i + c];\n            for(let c = 0; c < 10; c++)e[i + c] ^= ~n[(c + 2) % 10] & n[(c + 4) % 10];\n        }\n        e[0] ^= Co[r], e[1] ^= ko[r];\n    }\n    n.fill(0);\n}\nclass Bt extends it {\n    constructor(t, n, r, o = !1, s = 24){\n        if (super(), this.blockLen = t, this.suffix = n, this.outputLen = r, this.enableXOF = o, this.rounds = s, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, Ne(r), 0 >= this.blockLen || this.blockLen >= 200) throw new Error(\"Sha3 supports only keccak-f1600 function\");\n        this.state = new Uint8Array(200), this.state32 = _o(this.state);\n    }\n    keccak() {\n        an || un(this.state32), Do(this.state32, this.rounds), an || un(this.state32), this.posOut = 0, this.pos = 0;\n    }\n    update(t) {\n        me(this);\n        const { blockLen: n, state: r } = this;\n        t = we(t);\n        const o = t.length;\n        for(let s = 0; s < o;){\n            const i = Math.min(n - this.pos, o - s);\n            for(let c = 0; c < i; c++)r[this.pos++] ^= t[s++];\n            this.pos === n && this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished) return;\n        this.finished = !0;\n        const { state: t, suffix: n, pos: r, blockLen: o } = this;\n        t[r] ^= n, (n & 128) !== 0 && r === o - 1 && this.keccak(), t[o - 1] ^= 128, this.keccak();\n    }\n    writeInto(t) {\n        me(this, !1), je(t), this.finish();\n        const n = this.state, { blockLen: r } = this;\n        for(let o = 0, s = t.length; o < s;){\n            this.posOut >= r && this.keccak();\n            const i = Math.min(r - this.posOut, s - o);\n            t.set(n.subarray(this.posOut, this.posOut + i), o), this.posOut += i, o += i;\n        }\n        return t;\n    }\n    xofInto(t) {\n        if (!this.enableXOF) throw new Error(\"XOF is not possible for this instance\");\n        return this.writeInto(t);\n    }\n    xof(t) {\n        return Ne(t), this.xofInto(new Uint8Array(t));\n    }\n    digestInto(t) {\n        if (sn(t, this), this.finished) throw new Error(\"digest() was already called\");\n        return this.writeInto(t), this.destroy(), t;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = !0, this.state.fill(0);\n    }\n    _cloneInto(t) {\n        const { blockLen: n, suffix: r, outputLen: o, rounds: s, enableXOF: i } = this;\n        return t || (t = new Bt(n, r, o, i, s)), t.state32.set(this.state32), t.pos = this.pos, t.posOut = this.posOut, t.finished = this.finished, t.rounds = s, t.suffix = r, t.outputLen = o, t.enableXOF = i, t.destroyed = this.destroyed, t;\n    }\n}\nconst Mo = (e, t, n)=>fn(()=>new Bt(t, e, n)), Vo = Mo(1, 136, 256 / 8), Ho = \"https://rpc.walletconnect.org/v1\";\nfunction ct(e) {\n    const t = `\u0019Ethereum Signed Message:\n${e.length}`, n = new TextEncoder().encode(t + e);\n    return \"0x\" + Buffer.from(Vo(n)).toString(\"hex\");\n}\nasync function yn(e, t, n, r, o, s) {\n    switch(n.t){\n        case \"eip191\":\n            return await mn(e, t, n.s);\n        case \"eip1271\":\n            return await bn(e, t, n.s, r, o, s);\n        default:\n            throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n.t}`);\n    }\n}\nasync function mn(e, t, n) {\n    return (await (0,viem__WEBPACK_IMPORTED_MODULE_8__.recoverAddress)({\n        hash: ct(t),\n        signature: n\n    })).toLowerCase() === e.toLowerCase();\n}\nasync function bn(e, t, n, r, o, s) {\n    const i = Ye(r);\n    if (!i.namespace || !i.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r}`);\n    try {\n        const c = \"0x1626ba7e\", u = \"0000000000000000000000000000000000000000000000000000000000000040\", a = \"0000000000000000000000000000000000000000000000000000000000000041\", l = n.substring(2), f = ct(t).substring(2), d = c + f + u + a + l, g = await fetch(`${s || Ho}/?chainId=${r}&projectId=${o}`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                id: Ko(),\n                jsonrpc: \"2.0\",\n                method: \"eth_call\",\n                params: [\n                    {\n                        to: e,\n                        data: d\n                    },\n                    \"latest\"\n                ]\n            })\n        }), { result: y } = await g.json();\n        return y ? y.slice(0, c.length).toLowerCase() === c.toLowerCase() : !1;\n    } catch (c) {\n        return console.error(\"isValidEip1271Signature: \", c), !1;\n    }\n}\nfunction Ko() {\n    return Date.now() + Math.floor(Math.random() * 1e3);\n}\nvar Fo = Object.defineProperty, qo = Object.defineProperties, Go = Object.getOwnPropertyDescriptors, wn = Object.getOwnPropertySymbols, Wo = Object.prototype.hasOwnProperty, zo = Object.prototype.propertyIsEnumerable, En = (e, t, n)=>t in e ? Fo(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: n\n    }) : e[t] = n, at = (e, t)=>{\n    for(var n in t || (t = {}))Wo.call(t, n) && En(e, n, t[n]);\n    if (wn) for (var n of wn(t))zo.call(t, n) && En(e, n, t[n]);\n    return e;\n}, vn = (e, t)=>qo(e, Go(t));\nconst Jo = \"did:pkh:\", ke = (e)=>e?.split(\":\"), xn = (e)=>{\n    const t = e && ke(e);\n    if (t) return e.includes(Jo) ? t[3] : t[1];\n}, On = (e)=>{\n    const t = e && ke(e);\n    if (t) return t[2] + \":\" + t[3];\n}, ut = (e)=>{\n    const t = e && ke(e);\n    if (t) return t.pop();\n};\nasync function Yo(e) {\n    const { cacao: t, projectId: n } = e, { s: r, p: o } = t, s = In(o, o.iss), i = ut(o.iss);\n    return await yn(i, s, r, On(o.iss), n);\n}\nconst In = (e, t)=>{\n    const n = `${e.domain} wants you to sign in with your Ethereum account:`, r = ut(t);\n    if (!e.aud && !e.uri) throw new Error(\"Either `aud` or `uri` is required to construct the message\");\n    let o = e.statement || void 0;\n    const s = `URI: ${e.aud || e.uri}`, i = `Version: ${e.version}`, c = `Chain ID: ${xn(t)}`, u = `Nonce: ${e.nonce}`, a = `Issued At: ${e.iat}`, l = e.exp ? `Expiration Time: ${e.exp}` : void 0, f = e.nbf ? `Not Before: ${e.nbf}` : void 0, d = e.requestId ? `Request ID: ${e.requestId}` : void 0, g = e.resources ? `Resources:${e.resources.map((h)=>`\n- ${h}`).join(\"\")}` : void 0, y = Me(e.resources);\n    if (y) {\n        const h = oe(y);\n        o = dt(o, h);\n    }\n    return [\n        n,\n        r,\n        \"\",\n        o,\n        \"\",\n        s,\n        i,\n        c,\n        u,\n        a,\n        l,\n        f,\n        d,\n        g\n    ].filter((h)=>h != null).join(`\n`);\n};\nfunction Xo(e, t, n) {\n    return n.includes(\"did:pkh:\") || (n = `did:pkh:${n}`), {\n        h: {\n            t: \"caip122\"\n        },\n        p: {\n            iss: n,\n            domain: e.domain,\n            aud: e.aud,\n            version: e.version,\n            nonce: e.nonce,\n            iat: e.iat,\n            statement: e.statement,\n            requestId: e.requestId,\n            resources: e.resources,\n            nbf: e.nbf,\n            exp: e.exp\n        },\n        s: t\n    };\n}\nfunction Zo(e) {\n    var t;\n    const { authPayload: n, chains: r, methods: o } = e, s = n.statement || \"\";\n    if (!(r != null && r.length)) return n;\n    const i = n.chains, c = nt(i, r);\n    if (!(c != null && c.length)) throw new Error(\"No supported chains\");\n    const u = An(n.resources);\n    if (!u) return n;\n    Y(u);\n    const a = Nn(u, \"eip155\");\n    let l = n?.resources || [];\n    if (a != null && a.length) {\n        const f = Sn(a), d = nt(f, o);\n        if (!(d != null && d.length)) throw new Error(`Supported methods don't satisfy the requested: ${JSON.stringify(f)}, supported: ${JSON.stringify(o)}`);\n        const g = ft(\"request\", d, {\n            chains: c\n        }), y = $n(u, \"eip155\", g);\n        l = ((t = n?.resources) == null ? void 0 : t.slice(0, -1)) || [], l.push(De(y));\n    }\n    return vn(at({}, n), {\n        statement: Pn(s, Me(l)),\n        chains: c,\n        resources: n != null && n.resources || l.length > 0 ? l : void 0\n    });\n}\nfunction An(e) {\n    const t = Me(e);\n    if (t && lt(t)) return oe(t);\n}\nfunction Qo(e, t) {\n    var n;\n    return (n = e?.att) == null ? void 0 : n.hasOwnProperty(t);\n}\nfunction Nn(e, t) {\n    var n, r;\n    return (n = e?.att) != null && n[t] ? Object.keys((r = e?.att) == null ? void 0 : r[t]) : [];\n}\nfunction es(e) {\n    return e?.map((t)=>Object.keys(t)) || [];\n}\nfunction Sn(e) {\n    return e?.map((t)=>{\n        var n;\n        return (n = t.split(\"/\")) == null ? void 0 : n[1];\n    }) || [];\n}\nfunction Un(e) {\n    return Buffer.from(JSON.stringify(e)).toString(\"base64\");\n}\nfunction _n(e) {\n    return JSON.parse(Buffer.from(e, \"base64\").toString(\"utf-8\"));\n}\nfunction Y(e) {\n    if (!e) throw new Error(\"No recap provided, value is undefined\");\n    if (!e.att) throw new Error(\"No `att` property found\");\n    const t = Object.keys(e.att);\n    if (!(t != null && t.length)) throw new Error(\"No resources found in `att` property\");\n    t.forEach((n)=>{\n        const r = e.att[n];\n        if (Array.isArray(r)) throw new Error(`Resource must be an object: ${n}`);\n        if (typeof r != \"object\") throw new Error(`Resource must be an object: ${n}`);\n        if (!Object.keys(r).length) throw new Error(`Resource object is empty: ${n}`);\n        Object.keys(r).forEach((o)=>{\n            const s = r[o];\n            if (!Array.isArray(s)) throw new Error(`Ability limits ${o} must be an array of objects, found: ${s}`);\n            if (!s.length) throw new Error(`Value of ${o} is empty array, must be an array with objects`);\n            s.forEach((i)=>{\n                if (typeof i != \"object\") throw new Error(`Ability limits (${o}) must be an array of objects, found: ${i}`);\n            });\n        });\n    });\n}\nfunction Tn(e, t, n, r = {}) {\n    return n?.sort((o, s)=>o.localeCompare(s)), {\n        att: {\n            [e]: ft(t, n, r)\n        }\n    };\n}\nfunction $n(e, t, n) {\n    var r;\n    e.att[t] = at({}, n);\n    const o = (r = Object.keys(e.att)) == null ? void 0 : r.sort((i, c)=>i.localeCompare(c)), s = {\n        att: {}\n    };\n    return o.reduce((i, c)=>(i.att[c] = e.att[c], i), s);\n}\nfunction ft(e, t, n = {}) {\n    t = t?.sort((o, s)=>o.localeCompare(s));\n    const r = t.map((o)=>({\n            [`${e}/${o}`]: [\n                n\n            ]\n        }));\n    return Object.assign({}, ...r);\n}\nfunction De(e) {\n    return Y(e), `urn:recap:${Un(e).replace(/=/g, \"\")}`;\n}\nfunction oe(e) {\n    const t = _n(e.replace(\"urn:recap:\", \"\"));\n    return Y(t), t;\n}\nfunction ts(e, t, n) {\n    const r = Tn(e, t, n);\n    return De(r);\n}\nfunction lt(e) {\n    return e && e.includes(\"urn:recap:\");\n}\nfunction ns(e, t) {\n    const n = oe(e), r = oe(t), o = Rn(n, r);\n    return De(o);\n}\nfunction Rn(e, t) {\n    Y(e), Y(t);\n    const n = Object.keys(e.att).concat(Object.keys(t.att)).sort((o, s)=>o.localeCompare(s)), r = {\n        att: {}\n    };\n    return n.forEach((o)=>{\n        var s, i;\n        Object.keys(((s = e.att) == null ? void 0 : s[o]) || {}).concat(Object.keys(((i = t.att) == null ? void 0 : i[o]) || {})).sort((c, u)=>c.localeCompare(u)).forEach((c)=>{\n            var u, a;\n            r.att[o] = vn(at({}, r.att[o]), {\n                [c]: ((u = e.att[o]) == null ? void 0 : u[c]) || ((a = t.att[o]) == null ? void 0 : a[c])\n            });\n        });\n    }), r;\n}\nfunction dt(e = \"\", t) {\n    Y(t);\n    const n = \"I further authorize the stated URI to perform the following actions on my behalf: \";\n    if (e.includes(n)) return e;\n    const r = [];\n    let o = 0;\n    Object.keys(t.att).forEach((c)=>{\n        const u = Object.keys(t.att[c]).map((f)=>({\n                ability: f.split(\"/\")[0],\n                action: f.split(\"/\")[1]\n            }));\n        u.sort((f, d)=>f.action.localeCompare(d.action));\n        const a = {};\n        u.forEach((f)=>{\n            a[f.ability] || (a[f.ability] = []), a[f.ability].push(f.action);\n        });\n        const l = Object.keys(a).map((f)=>(o++, `(${o}) '${f}': '${a[f].join(\"', '\")}' for '${c}'.`));\n        r.push(l.join(\", \").replace(\".,\", \".\"));\n    });\n    const s = r.join(\" \"), i = `${n}${s}`;\n    return `${e ? e + \" \" : \"\"}${i}`;\n}\nfunction rs(e) {\n    var t;\n    const n = oe(e);\n    Y(n);\n    const r = (t = n.att) == null ? void 0 : t.eip155;\n    return r ? Object.keys(r).map((o)=>o.split(\"/\")[1]) : [];\n}\nfunction os(e) {\n    const t = oe(e);\n    Y(t);\n    const n = [];\n    return Object.values(t.att).forEach((r)=>{\n        Object.values(r).forEach((o)=>{\n            var s;\n            (s = o?.[0]) != null && s.chains && n.push(o[0].chains);\n        });\n    }), [\n        ...new Set(n.flat())\n    ];\n}\nfunction Pn(e, t) {\n    if (!t) return e;\n    const n = oe(t);\n    return Y(n), dt(e, n);\n}\nfunction Me(e) {\n    if (!e) return;\n    const t = e?.[e.length - 1];\n    return lt(t) ? t : void 0;\n}\nfunction ht(e) {\n    if (!Number.isSafeInteger(e) || e < 0) throw new Error(\"positive integer expected, got \" + e);\n}\nfunction Ln(e) {\n    return e instanceof Uint8Array || ArrayBuffer.isView(e) && e.constructor.name === \"Uint8Array\";\n}\nfunction F(e, ...t) {\n    if (!Ln(e)) throw new Error(\"Uint8Array expected\");\n    if (t.length > 0 && !t.includes(e.length)) throw new Error(\"Uint8Array expected of length \" + t + \", got length=\" + e.length);\n}\nfunction Bn(e, t = !0) {\n    if (e.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (t && e.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nfunction ss(e, t) {\n    F(e);\n    const n = t.outputLen;\n    if (e.length < n) throw new Error(\"digestInto() expects output buffer of length at least \" + n);\n}\nfunction jn(e) {\n    if (typeof e != \"boolean\") throw new Error(`boolean expected, not ${e}`);\n}\nconst se = (e)=>new Uint32Array(e.buffer, e.byteOffset, Math.floor(e.byteLength / 4)), is = (e)=>new DataView(e.buffer, e.byteOffset, e.byteLength), cs = new Uint8Array(new Uint32Array([\n    287454020\n]).buffer)[0] === 68;\nif (!cs) throw new Error(\"Non little-endian hardware is not supported\");\nfunction as(e) {\n    if (typeof e != \"string\") throw new Error(\"string expected\");\n    return new Uint8Array(new TextEncoder().encode(e));\n}\nfunction pt(e) {\n    if (typeof e == \"string\") e = as(e);\n    else if (Ln(e)) e = gt(e);\n    else throw new Error(\"Uint8Array expected, got \" + typeof e);\n    return e;\n}\nfunction us(e, t) {\n    if (t == null || typeof t != \"object\") throw new Error(\"options must be defined\");\n    return Object.assign(e, t);\n}\nfunction fs(e, t) {\n    if (e.length !== t.length) return !1;\n    let n = 0;\n    for(let r = 0; r < e.length; r++)n |= e[r] ^ t[r];\n    return n === 0;\n}\nconst ls = (e, t)=>{\n    function n(r, ...o) {\n        if (F(r), e.nonceLength !== void 0) {\n            const l = o[0];\n            if (!l) throw new Error(\"nonce / iv required\");\n            e.varSizeNonce ? F(l) : F(l, e.nonceLength);\n        }\n        const s = e.tagLength;\n        s && o[1] !== void 0 && F(o[1]);\n        const i = t(r, ...o), c = (l, f)=>{\n            if (f !== void 0) {\n                if (l !== 2) throw new Error(\"cipher output not supported\");\n                F(f);\n            }\n        };\n        let u = !1;\n        return {\n            encrypt (l, f) {\n                if (u) throw new Error(\"cannot encrypt() twice with same key + nonce\");\n                return u = !0, F(l), c(i.encrypt.length, f), i.encrypt(l, f);\n            },\n            decrypt (l, f) {\n                if (F(l), s && l.length < s) throw new Error(\"invalid ciphertext length: smaller than tagLength=\" + s);\n                return c(i.decrypt.length, f), i.decrypt(l, f);\n            }\n        };\n    }\n    return Object.assign(n, e), n;\n};\nfunction Cn(e, t, n = !0) {\n    if (t === void 0) return new Uint8Array(e);\n    if (t.length !== e) throw new Error(\"invalid output length, expected \" + e + \", got: \" + t.length);\n    if (n && !ds(t)) throw new Error(\"invalid output, must be aligned\");\n    return t;\n}\nfunction kn(e, t, n, r) {\n    if (typeof e.setBigUint64 == \"function\") return e.setBigUint64(t, n, r);\n    const o = BigInt(32), s = BigInt(4294967295), i = Number(n >> o & s), c = Number(n & s), u = r ? 4 : 0, a = r ? 0 : 4;\n    e.setUint32(t + u, i, r), e.setUint32(t + a, c, r);\n}\nfunction ds(e) {\n    return e.byteOffset % 4 === 0;\n}\nfunction gt(e) {\n    return Uint8Array.from(e);\n}\nfunction Ee(...e) {\n    for(let t = 0; t < e.length; t++)e[t].fill(0);\n}\nconst Dn = (e)=>Uint8Array.from(e.split(\"\").map((t)=>t.charCodeAt(0))), hs = Dn(\"expand 16-byte k\"), ps = Dn(\"expand 32-byte k\"), gs = se(hs), ys = se(ps);\nfunction x(e, t) {\n    return e << t | e >>> 32 - t;\n}\nfunction yt(e) {\n    return e.byteOffset % 4 === 0;\n}\nconst Ve = 64, ms = 16, Mn = 2 ** 32 - 1, Vn = new Uint32Array;\nfunction bs(e, t, n, r, o, s, i, c) {\n    const u = o.length, a = new Uint8Array(Ve), l = se(a), f = yt(o) && yt(s), d = f ? se(o) : Vn, g = f ? se(s) : Vn;\n    for(let y = 0; y < u; i++){\n        if (e(t, n, r, l, i, c), i >= Mn) throw new Error(\"arx: counter overflow\");\n        const h = Math.min(Ve, u - y);\n        if (f && h === Ve) {\n            const m = y / 4;\n            if (y % 4 !== 0) throw new Error(\"arx: invalid block position\");\n            for(let B = 0, b; B < ms; B++)b = m + B, g[b] = d[b] ^ l[B];\n            y += Ve;\n            continue;\n        }\n        for(let m = 0, B; m < h; m++)B = y + m, s[B] = o[B] ^ a[m];\n        y += h;\n    }\n}\nfunction ws(e, t) {\n    const { allowShortKeys: n, extendNonceFn: r, counterLength: o, counterRight: s, rounds: i } = us({\n        allowShortKeys: !1,\n        counterLength: 8,\n        counterRight: !1,\n        rounds: 20\n    }, t);\n    if (typeof e != \"function\") throw new Error(\"core must be a function\");\n    return ht(o), ht(i), jn(s), jn(n), (c, u, a, l, f = 0)=>{\n        F(c), F(u), F(a);\n        const d = a.length;\n        if (l === void 0 && (l = new Uint8Array(d)), F(l), ht(f), f < 0 || f >= Mn) throw new Error(\"arx: counter overflow\");\n        if (l.length < d) throw new Error(`arx: output (${l.length}) is shorter than data (${d})`);\n        const g = [];\n        let y = c.length, h, m;\n        if (y === 32) g.push(h = gt(c)), m = ys;\n        else if (y === 16 && n) h = new Uint8Array(32), h.set(c), h.set(c, 16), m = gs, g.push(h);\n        else throw new Error(`arx: invalid 32-byte key, got length=${y}`);\n        yt(u) || g.push(u = gt(u));\n        const B = se(h);\n        if (r) {\n            if (u.length !== 24) throw new Error(\"arx: extended nonce must be 24 bytes\");\n            r(m, B, se(u.subarray(0, 16)), B), u = u.subarray(16);\n        }\n        const b = 16 - o;\n        if (b !== u.length) throw new Error(`arx: nonce must be ${b} or 16 bytes`);\n        if (b !== 12) {\n            const I = new Uint8Array(12);\n            I.set(u, s ? 0 : 12 - u.length), u = I, g.push(u);\n        }\n        const _ = se(u);\n        return bs(e, m, B, _, a, l, f, i), Ee(...g), l;\n    };\n}\nconst M = (e, t)=>e[t++] & 255 | (e[t++] & 255) << 8;\nclass Es {\n    constructor(t){\n        this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = !1, t = pt(t), F(t, 32);\n        const n = M(t, 0), r = M(t, 2), o = M(t, 4), s = M(t, 6), i = M(t, 8), c = M(t, 10), u = M(t, 12), a = M(t, 14);\n        this.r[0] = n & 8191, this.r[1] = (n >>> 13 | r << 3) & 8191, this.r[2] = (r >>> 10 | o << 6) & 7939, this.r[3] = (o >>> 7 | s << 9) & 8191, this.r[4] = (s >>> 4 | i << 12) & 255, this.r[5] = i >>> 1 & 8190, this.r[6] = (i >>> 14 | c << 2) & 8191, this.r[7] = (c >>> 11 | u << 5) & 8065, this.r[8] = (u >>> 8 | a << 8) & 8191, this.r[9] = a >>> 5 & 127;\n        for(let l = 0; l < 8; l++)this.pad[l] = M(t, 16 + 2 * l);\n    }\n    process(t, n, r = !1) {\n        const o = r ? 0 : 2048, { h: s, r: i } = this, c = i[0], u = i[1], a = i[2], l = i[3], f = i[4], d = i[5], g = i[6], y = i[7], h = i[8], m = i[9], B = M(t, n + 0), b = M(t, n + 2), _ = M(t, n + 4), I = M(t, n + 6), k = M(t, n + 8), E = M(t, n + 10), L = M(t, n + 12), j = M(t, n + 14);\n        let v = s[0] + (B & 8191), O = s[1] + ((B >>> 13 | b << 3) & 8191), w = s[2] + ((b >>> 10 | _ << 6) & 8191), R = s[3] + ((_ >>> 7 | I << 9) & 8191), A = s[4] + ((I >>> 4 | k << 12) & 8191), T = s[5] + (k >>> 1 & 8191), N = s[6] + ((k >>> 14 | E << 2) & 8191), S = s[7] + ((E >>> 11 | L << 5) & 8191), U = s[8] + ((L >>> 8 | j << 8) & 8191), $ = s[9] + (j >>> 5 | o), p = 0, C = p + v * c + O * (5 * m) + w * (5 * h) + R * (5 * y) + A * (5 * g);\n        p = C >>> 13, C &= 8191, C += T * (5 * d) + N * (5 * f) + S * (5 * l) + U * (5 * a) + $ * (5 * u), p += C >>> 13, C &= 8191;\n        let D = p + v * u + O * c + w * (5 * m) + R * (5 * h) + A * (5 * y);\n        p = D >>> 13, D &= 8191, D += T * (5 * g) + N * (5 * d) + S * (5 * f) + U * (5 * l) + $ * (5 * a), p += D >>> 13, D &= 8191;\n        let P = p + v * a + O * u + w * c + R * (5 * m) + A * (5 * h);\n        p = P >>> 13, P &= 8191, P += T * (5 * y) + N * (5 * g) + S * (5 * d) + U * (5 * f) + $ * (5 * l), p += P >>> 13, P &= 8191;\n        let G = p + v * l + O * a + w * u + R * c + A * (5 * m);\n        p = G >>> 13, G &= 8191, G += T * (5 * h) + N * (5 * y) + S * (5 * g) + U * (5 * d) + $ * (5 * f), p += G >>> 13, G &= 8191;\n        let X = p + v * f + O * l + w * a + R * u + A * c;\n        p = X >>> 13, X &= 8191, X += T * (5 * m) + N * (5 * h) + S * (5 * y) + U * (5 * g) + $ * (5 * d), p += X >>> 13, X &= 8191;\n        let Z = p + v * d + O * f + w * l + R * a + A * u;\n        p = Z >>> 13, Z &= 8191, Z += T * c + N * (5 * m) + S * (5 * h) + U * (5 * y) + $ * (5 * g), p += Z >>> 13, Z &= 8191;\n        let he = p + v * g + O * d + w * f + R * l + A * a;\n        p = he >>> 13, he &= 8191, he += T * u + N * c + S * (5 * m) + U * (5 * h) + $ * (5 * y), p += he >>> 13, he &= 8191;\n        let pe = p + v * y + O * g + w * d + R * f + A * l;\n        p = pe >>> 13, pe &= 8191, pe += T * a + N * u + S * c + U * (5 * m) + $ * (5 * h), p += pe >>> 13, pe &= 8191;\n        let ge = p + v * h + O * y + w * g + R * d + A * f;\n        p = ge >>> 13, ge &= 8191, ge += T * l + N * a + S * u + U * c + $ * (5 * m), p += ge >>> 13, ge &= 8191;\n        let ye = p + v * m + O * h + w * y + R * g + A * d;\n        p = ye >>> 13, ye &= 8191, ye += T * f + N * l + S * a + U * u + $ * c, p += ye >>> 13, ye &= 8191, p = (p << 2) + p | 0, p = p + C | 0, C = p & 8191, p = p >>> 13, D += p, s[0] = C, s[1] = D, s[2] = P, s[3] = G, s[4] = X, s[5] = Z, s[6] = he, s[7] = pe, s[8] = ge, s[9] = ye;\n    }\n    finalize() {\n        const { h: t, pad: n } = this, r = new Uint16Array(10);\n        let o = t[1] >>> 13;\n        t[1] &= 8191;\n        for(let c = 2; c < 10; c++)t[c] += o, o = t[c] >>> 13, t[c] &= 8191;\n        t[0] += o * 5, o = t[0] >>> 13, t[0] &= 8191, t[1] += o, o = t[1] >>> 13, t[1] &= 8191, t[2] += o, r[0] = t[0] + 5, o = r[0] >>> 13, r[0] &= 8191;\n        for(let c = 1; c < 10; c++)r[c] = t[c] + o, o = r[c] >>> 13, r[c] &= 8191;\n        r[9] -= 8192;\n        let s = (o ^ 1) - 1;\n        for(let c = 0; c < 10; c++)r[c] &= s;\n        s = ~s;\n        for(let c = 0; c < 10; c++)t[c] = t[c] & s | r[c];\n        t[0] = (t[0] | t[1] << 13) & 65535, t[1] = (t[1] >>> 3 | t[2] << 10) & 65535, t[2] = (t[2] >>> 6 | t[3] << 7) & 65535, t[3] = (t[3] >>> 9 | t[4] << 4) & 65535, t[4] = (t[4] >>> 12 | t[5] << 1 | t[6] << 14) & 65535, t[5] = (t[6] >>> 2 | t[7] << 11) & 65535, t[6] = (t[7] >>> 5 | t[8] << 8) & 65535, t[7] = (t[8] >>> 8 | t[9] << 5) & 65535;\n        let i = t[0] + n[0];\n        t[0] = i & 65535;\n        for(let c = 1; c < 8; c++)i = (t[c] + n[c] | 0) + (i >>> 16) | 0, t[c] = i & 65535;\n        Ee(r);\n    }\n    update(t) {\n        Bn(this);\n        const { buffer: n, blockLen: r } = this;\n        t = pt(t);\n        const o = t.length;\n        for(let s = 0; s < o;){\n            const i = Math.min(r - this.pos, o - s);\n            if (i === r) {\n                for(; r <= o - s; s += r)this.process(t, s);\n                continue;\n            }\n            n.set(t.subarray(s, s + i), this.pos), this.pos += i, s += i, this.pos === r && (this.process(n, 0, !1), this.pos = 0);\n        }\n        return this;\n    }\n    destroy() {\n        Ee(this.h, this.r, this.buffer, this.pad);\n    }\n    digestInto(t) {\n        Bn(this), ss(t, this), this.finished = !0;\n        const { buffer: n, h: r } = this;\n        let { pos: o } = this;\n        if (o) {\n            for(n[o++] = 1; o < 16; o++)n[o] = 0;\n            this.process(n, 0, !0);\n        }\n        this.finalize();\n        let s = 0;\n        for(let i = 0; i < 8; i++)t[s++] = r[i] >>> 0, t[s++] = r[i] >>> 8;\n        return t;\n    }\n    digest() {\n        const { buffer: t, outputLen: n } = this;\n        this.digestInto(t);\n        const r = t.slice(0, n);\n        return this.destroy(), r;\n    }\n}\nfunction vs(e) {\n    const t = (r, o)=>e(o).update(pt(r)).digest(), n = e(new Uint8Array(32));\n    return t.outputLen = n.outputLen, t.blockLen = n.blockLen, t.create = (r)=>e(r), t;\n}\nconst xs = vs((e)=>new Es(e));\nfunction Os(e, t, n, r, o, s = 20) {\n    let i = e[0], c = e[1], u = e[2], a = e[3], l = t[0], f = t[1], d = t[2], g = t[3], y = t[4], h = t[5], m = t[6], B = t[7], b = o, _ = n[0], I = n[1], k = n[2], E = i, L = c, j = u, v = a, O = l, w = f, R = d, A = g, T = y, N = h, S = m, U = B, $ = b, p = _, C = I, D = k;\n    for(let G = 0; G < s; G += 2)E = E + O | 0, $ = x($ ^ E, 16), T = T + $ | 0, O = x(O ^ T, 12), E = E + O | 0, $ = x($ ^ E, 8), T = T + $ | 0, O = x(O ^ T, 7), L = L + w | 0, p = x(p ^ L, 16), N = N + p | 0, w = x(w ^ N, 12), L = L + w | 0, p = x(p ^ L, 8), N = N + p | 0, w = x(w ^ N, 7), j = j + R | 0, C = x(C ^ j, 16), S = S + C | 0, R = x(R ^ S, 12), j = j + R | 0, C = x(C ^ j, 8), S = S + C | 0, R = x(R ^ S, 7), v = v + A | 0, D = x(D ^ v, 16), U = U + D | 0, A = x(A ^ U, 12), v = v + A | 0, D = x(D ^ v, 8), U = U + D | 0, A = x(A ^ U, 7), E = E + w | 0, D = x(D ^ E, 16), S = S + D | 0, w = x(w ^ S, 12), E = E + w | 0, D = x(D ^ E, 8), S = S + D | 0, w = x(w ^ S, 7), L = L + R | 0, $ = x($ ^ L, 16), U = U + $ | 0, R = x(R ^ U, 12), L = L + R | 0, $ = x($ ^ L, 8), U = U + $ | 0, R = x(R ^ U, 7), j = j + A | 0, p = x(p ^ j, 16), T = T + p | 0, A = x(A ^ T, 12), j = j + A | 0, p = x(p ^ j, 8), T = T + p | 0, A = x(A ^ T, 7), v = v + O | 0, C = x(C ^ v, 16), N = N + C | 0, O = x(O ^ N, 12), v = v + O | 0, C = x(C ^ v, 8), N = N + C | 0, O = x(O ^ N, 7);\n    let P = 0;\n    r[P++] = i + E | 0, r[P++] = c + L | 0, r[P++] = u + j | 0, r[P++] = a + v | 0, r[P++] = l + O | 0, r[P++] = f + w | 0, r[P++] = d + R | 0, r[P++] = g + A | 0, r[P++] = y + T | 0, r[P++] = h + N | 0, r[P++] = m + S | 0, r[P++] = B + U | 0, r[P++] = b + $ | 0, r[P++] = _ + p | 0, r[P++] = I + C | 0, r[P++] = k + D | 0;\n}\nconst Is = ws(Os, {\n    counterRight: !1,\n    counterLength: 4,\n    allowShortKeys: !1\n}), As = new Uint8Array(16), Hn = (e, t)=>{\n    e.update(t);\n    const n = t.length % 16;\n    n && e.update(As.subarray(n));\n}, Ns = new Uint8Array(32);\nfunction Kn(e, t, n, r, o) {\n    const s = e(t, n, Ns), i = xs.create(s);\n    o && Hn(i, o), Hn(i, r);\n    const c = new Uint8Array(16), u = is(c);\n    kn(u, 0, BigInt(o ? o.length : 0), !0), kn(u, 8, BigInt(r.length), !0), i.update(c);\n    const a = i.digest();\n    return Ee(s, c), a;\n}\nconst Ss = (e)=>(t, n, r)=>({\n            encrypt (s, i) {\n                const c = s.length;\n                i = Cn(c + 16, i, !1), i.set(s);\n                const u = i.subarray(0, -16);\n                e(t, n, u, u, 1);\n                const a = Kn(e, t, n, u, r);\n                return i.set(a, c), Ee(a), i;\n            },\n            decrypt (s, i) {\n                i = Cn(s.length - 16, i, !1);\n                const c = s.subarray(0, -16), u = s.subarray(-16), a = Kn(e, t, n, c, r);\n                if (!fs(u, a)) throw new Error(\"invalid tag\");\n                return i.set(s.subarray(0, -16)), e(t, n, i, i, 1), Ee(a), i;\n            }\n        }), Fn = ls({\n    blockSize: 64,\n    nonceLength: 12,\n    tagLength: 16\n}, Ss(Is));\nclass qn extends it {\n    constructor(t, n){\n        super(), this.finished = !1, this.destroyed = !1, ot(t);\n        const r = we(n);\n        if (this.iHash = t.create(), typeof this.iHash.update != \"function\") throw new Error(\"Expected instance of class which extends utils.Hash\");\n        this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;\n        const o = this.blockLen, s = new Uint8Array(o);\n        s.set(r.length > o ? t.create().update(r).digest() : r);\n        for(let i = 0; i < s.length; i++)s[i] ^= 54;\n        this.iHash.update(s), this.oHash = t.create();\n        for(let i = 0; i < s.length; i++)s[i] ^= 106;\n        this.oHash.update(s), s.fill(0);\n    }\n    update(t) {\n        return me(this), this.iHash.update(t), this;\n    }\n    digestInto(t) {\n        me(this), je(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();\n    }\n    digest() {\n        const t = new Uint8Array(this.oHash.outputLen);\n        return this.digestInto(t), t;\n    }\n    _cloneInto(t) {\n        t || (t = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash: n, iHash: r, finished: o, destroyed: s, blockLen: i, outputLen: c } = this;\n        return t = t, t.finished = o, t.destroyed = s, t.blockLen = i, t.outputLen = c, t.oHash = n._cloneInto(t.oHash), t.iHash = r._cloneInto(t.iHash), t;\n    }\n    destroy() {\n        this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();\n    }\n}\nconst mt = (e, t, n)=>new qn(e, t).update(n).digest();\nmt.create = (e, t)=>new qn(e, t);\nfunction Us(e, t, n) {\n    return ot(e), n === void 0 && (n = new Uint8Array(e.outputLen)), mt(e, we(n), we(t));\n}\nconst bt = new Uint8Array([\n    0\n]), Gn = new Uint8Array;\nfunction _s(e, t, n, r = 32) {\n    if (ot(e), Ne(r), r > 255 * e.outputLen) throw new Error(\"Length should be <= 255*HashLen\");\n    const o = Math.ceil(r / e.outputLen);\n    n === void 0 && (n = Gn);\n    const s = new Uint8Array(o * e.outputLen), i = mt.create(e, t), c = i._cloneInto(), u = new Uint8Array(i.outputLen);\n    for(let a = 0; a < o; a++)bt[0] = a + 1, c.update(a === 0 ? Gn : u).update(n).update(bt).digestInto(u), s.set(u, e.outputLen * a), i._cloneInto(c);\n    return i.destroy(), c.destroy(), u.fill(0), bt.fill(0), s.slice(0, r);\n}\nconst Ts = (e, t, n, r, o)=>_s(e, Us(e, t, n), r, o);\nfunction $s(e, t, n, r) {\n    if (typeof e.setBigUint64 == \"function\") return e.setBigUint64(t, n, r);\n    const o = BigInt(32), s = BigInt(4294967295), i = Number(n >> o & s), c = Number(n & s), u = r ? 4 : 0, a = r ? 0 : 4;\n    e.setUint32(t + u, i, r), e.setUint32(t + a, c, r);\n}\nfunction Rs(e, t, n) {\n    return e & t ^ ~e & n;\n}\nfunction Ps(e, t, n) {\n    return e & t ^ e & n ^ t & n;\n}\nclass Ls extends it {\n    constructor(t, n, r, o){\n        super(), this.blockLen = t, this.outputLen = n, this.padOffset = r, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = st(this.buffer);\n    }\n    update(t) {\n        me(this);\n        const { view: n, buffer: r, blockLen: o } = this;\n        t = we(t);\n        const s = t.length;\n        for(let i = 0; i < s;){\n            const c = Math.min(o - this.pos, s - i);\n            if (c === o) {\n                const u = st(t);\n                for(; o <= s - i; i += o)this.process(u, i);\n                continue;\n            }\n            r.set(t.subarray(i, i + c), this.pos), this.pos += c, i += c, this.pos === o && (this.process(n, 0), this.pos = 0);\n        }\n        return this.length += t.length, this.roundClean(), this;\n    }\n    digestInto(t) {\n        me(this), sn(t, this), this.finished = !0;\n        const { buffer: n, view: r, blockLen: o, isLE: s } = this;\n        let { pos: i } = this;\n        n[i++] = 128, this.buffer.subarray(i).fill(0), this.padOffset > o - i && (this.process(r, 0), i = 0);\n        for(let f = i; f < o; f++)n[f] = 0;\n        $s(r, o - 8, BigInt(this.length * 8), s), this.process(r, 0);\n        const c = st(t), u = this.outputLen;\n        if (u % 4) throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n        const a = u / 4, l = this.get();\n        if (a > l.length) throw new Error(\"_sha2: outputLen bigger than state\");\n        for(let f = 0; f < a; f++)c.setUint32(4 * f, l[f], s);\n    }\n    digest() {\n        const { buffer: t, outputLen: n } = this;\n        this.digestInto(t);\n        const r = t.slice(0, n);\n        return this.destroy(), r;\n    }\n    _cloneInto(t) {\n        t || (t = new this.constructor), t.set(...this.get());\n        const { blockLen: n, buffer: r, length: o, finished: s, destroyed: i, pos: c } = this;\n        return t.length = o, t.pos = c, t.finished = s, t.destroyed = i, o % n && t.buffer.set(r), t;\n    }\n}\nconst Bs = new Uint32Array([\n    1116352408,\n    1899447441,\n    3049323471,\n    3921009573,\n    961987163,\n    1508970993,\n    2453635748,\n    2870763221,\n    3624381080,\n    310598401,\n    607225278,\n    1426881987,\n    1925078388,\n    2162078206,\n    2614888103,\n    3248222580,\n    3835390401,\n    4022224774,\n    264347078,\n    604807628,\n    770255983,\n    1249150122,\n    1555081692,\n    1996064986,\n    2554220882,\n    2821834349,\n    2952996808,\n    3210313671,\n    3336571891,\n    3584528711,\n    113926993,\n    338241895,\n    666307205,\n    773529912,\n    1294757372,\n    1396182291,\n    1695183700,\n    1986661051,\n    2177026350,\n    2456956037,\n    2730485921,\n    2820302411,\n    3259730800,\n    3345764771,\n    3516065817,\n    3600352804,\n    4094571909,\n    275423344,\n    430227734,\n    506948616,\n    659060556,\n    883997877,\n    958139571,\n    1322822218,\n    1537002063,\n    1747873779,\n    1955562222,\n    2024104815,\n    2227730452,\n    2361852424,\n    2428436474,\n    2756734187,\n    3204031479,\n    3329325298\n]), ie = new Uint32Array([\n    1779033703,\n    3144134277,\n    1013904242,\n    2773480762,\n    1359893119,\n    2600822924,\n    528734635,\n    1541459225\n]), ce = new Uint32Array(64);\nclass js extends Ls {\n    constructor(){\n        super(64, 32, 8, !1), this.A = ie[0] | 0, this.B = ie[1] | 0, this.C = ie[2] | 0, this.D = ie[3] | 0, this.E = ie[4] | 0, this.F = ie[5] | 0, this.G = ie[6] | 0, this.H = ie[7] | 0;\n    }\n    get() {\n        const { A: t, B: n, C: r, D: o, E: s, F: i, G: c, H: u } = this;\n        return [\n            t,\n            n,\n            r,\n            o,\n            s,\n            i,\n            c,\n            u\n        ];\n    }\n    set(t, n, r, o, s, i, c, u) {\n        this.A = t | 0, this.B = n | 0, this.C = r | 0, this.D = o | 0, this.E = s | 0, this.F = i | 0, this.G = c | 0, this.H = u | 0;\n    }\n    process(t, n) {\n        for(let f = 0; f < 16; f++, n += 4)ce[f] = t.getUint32(n, !1);\n        for(let f = 16; f < 64; f++){\n            const d = ce[f - 15], g = ce[f - 2], y = J(d, 7) ^ J(d, 18) ^ d >>> 3, h = J(g, 17) ^ J(g, 19) ^ g >>> 10;\n            ce[f] = h + ce[f - 7] + y + ce[f - 16] | 0;\n        }\n        let { A: r, B: o, C: s, D: i, E: c, F: u, G: a, H: l } = this;\n        for(let f = 0; f < 64; f++){\n            const d = J(c, 6) ^ J(c, 11) ^ J(c, 25), g = l + d + Rs(c, u, a) + Bs[f] + ce[f] | 0, h = (J(r, 2) ^ J(r, 13) ^ J(r, 22)) + Ps(r, o, s) | 0;\n            l = a, a = u, u = c, c = i + g | 0, i = s, s = o, o = r, r = g + h | 0;\n        }\n        r = r + this.A | 0, o = o + this.B | 0, s = s + this.C | 0, i = i + this.D | 0, c = c + this.E | 0, u = u + this.F | 0, a = a + this.G | 0, l = l + this.H | 0, this.set(r, o, s, i, c, u, a, l);\n    }\n    roundClean() {\n        ce.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);\n    }\n}\nconst He = fn(()=>new js); /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \nconst Wn = BigInt(0);\nfunction wt(e) {\n    return e instanceof Uint8Array || ArrayBuffer.isView(e) && e.constructor.name === \"Uint8Array\";\n}\nfunction zn(e) {\n    if (!wt(e)) throw new Error(\"Uint8Array expected\");\n}\nconst Cs = Array.from({\n    length: 256\n}, (e, t)=>t.toString(16).padStart(2, \"0\"));\nfunction ks(e) {\n    zn(e);\n    let t = \"\";\n    for(let n = 0; n < e.length; n++)t += Cs[e[n]];\n    return t;\n}\nfunction Ds(e) {\n    if (typeof e != \"string\") throw new Error(\"hex string expected, got \" + typeof e);\n    return e === \"\" ? Wn : BigInt(\"0x\" + e);\n}\nconst ee = {\n    _0: 48,\n    _9: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction Jn(e) {\n    if (e >= ee._0 && e <= ee._9) return e - ee._0;\n    if (e >= ee.A && e <= ee.F) return e - (ee.A - 10);\n    if (e >= ee.a && e <= ee.f) return e - (ee.a - 10);\n}\nfunction Yn(e) {\n    if (typeof e != \"string\") throw new Error(\"hex string expected, got \" + typeof e);\n    const t = e.length, n = t / 2;\n    if (t % 2) throw new Error(\"hex string expected, got unpadded hex of length \" + t);\n    const r = new Uint8Array(n);\n    for(let o = 0, s = 0; o < n; o++, s += 2){\n        const i = Jn(e.charCodeAt(s)), c = Jn(e.charCodeAt(s + 1));\n        if (i === void 0 || c === void 0) {\n            const u = e[s] + e[s + 1];\n            throw new Error('hex string expected, got non-hex character \"' + u + '\" at index ' + s);\n        }\n        r[o] = i * 16 + c;\n    }\n    return r;\n}\nfunction Xn(e) {\n    return zn(e), Ds(ks(Uint8Array.from(e).reverse()));\n}\nfunction Ms(e, t) {\n    return Yn(e.toString(16).padStart(t * 2, \"0\"));\n}\nfunction Vs(e, t) {\n    return Ms(e, t).reverse();\n}\nfunction Zn(e, t, n) {\n    let r;\n    if (typeof t == \"string\") try {\n        r = Yn(t);\n    } catch (s) {\n        throw new Error(e + \" must be hex string or Uint8Array, cause: \" + s);\n    }\n    else if (wt(t)) r = Uint8Array.from(t);\n    else throw new Error(e + \" must be hex string or Uint8Array\");\n    const o = r.length;\n    if (typeof n == \"number\" && o !== n) throw new Error(e + \" of length \" + n + \" expected, got \" + o);\n    return r;\n}\nconst Et = (e)=>typeof e == \"bigint\" && Wn <= e;\nfunction Hs(e, t, n) {\n    return Et(e) && Et(t) && Et(n) && t <= e && e < n;\n}\nfunction Qn(e, t, n, r) {\n    if (!Hs(t, n, r)) throw new Error(\"expected valid \" + e + \": \" + n + \" <= n < \" + r + \", got \" + t);\n}\nconst Ks = {\n    bigint: (e)=>typeof e == \"bigint\",\n    function: (e)=>typeof e == \"function\",\n    boolean: (e)=>typeof e == \"boolean\",\n    string: (e)=>typeof e == \"string\",\n    stringOrUint8Array: (e)=>typeof e == \"string\" || wt(e),\n    isSafeInteger: (e)=>Number.isSafeInteger(e),\n    array: (e)=>Array.isArray(e),\n    field: (e, t)=>t.Fp.isValid(e),\n    hash: (e)=>typeof e == \"function\" && Number.isSafeInteger(e.outputLen)\n};\nfunction Fs(e, t, n = {}) {\n    const r = (o, s, i)=>{\n        const c = Ks[s];\n        if (typeof c != \"function\") throw new Error(\"invalid validator function\");\n        const u = e[o];\n        if (!(i && u === void 0) && !c(u, e)) throw new Error(\"param \" + String(o) + \" is invalid. Expected \" + s + \", got \" + u);\n    };\n    for (const [o, s] of Object.entries(t))r(o, s, !1);\n    for (const [o, s] of Object.entries(n))r(o, s, !0);\n    return e;\n}\nconst ve = BigInt(0), Ke = BigInt(1);\nfunction er(e, t) {\n    const n = e % t;\n    return n >= ve ? n : t + n;\n}\nfunction qs(e, t, n) {\n    if (t < ve) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (n <= ve) throw new Error(\"invalid modulus\");\n    if (n === Ke) return ve;\n    let r = Ke;\n    for(; t > ve;)t & Ke && (r = r * e % n), e = e * e % n, t >>= Ke;\n    return r;\n}\nfunction z(e, t, n) {\n    let r = e;\n    for(; t-- > ve;)r *= r, r %= n;\n    return r;\n}\nBigInt(0), BigInt(1), BigInt(0), BigInt(1), BigInt(2), BigInt(8);\nconst xe = BigInt(0), vt = BigInt(1);\nfunction Gs(e) {\n    return Fs(e, {\n        a: \"bigint\"\n    }, {\n        montgomeryBits: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\",\n        adjustScalarBytes: \"function\",\n        domain: \"function\",\n        powPminus2: \"function\",\n        Gu: \"bigint\"\n    }), Object.freeze({\n        ...e\n    });\n}\nfunction Ws(e) {\n    const t = Gs(e), { P: n } = t, r = (b)=>er(b, n), o = t.montgomeryBits, s = Math.ceil(o / 8), i = t.nByteLength, c = t.adjustScalarBytes || ((b)=>b), u = t.powPminus2 || ((b)=>qs(b, n - BigInt(2), n));\n    function a(b, _, I) {\n        const k = r(b * (_ - I));\n        return _ = r(_ - k), I = r(I + k), [\n            _,\n            I\n        ];\n    }\n    const l = (t.a - BigInt(2)) / BigInt(4);\n    function f(b, _) {\n        Qn(\"u\", b, xe, n), Qn(\"scalar\", _, xe, n);\n        const I = _, k = b;\n        let E = vt, L = xe, j = b, v = vt, O = xe, w;\n        for(let A = BigInt(o - 1); A >= xe; A--){\n            const T = I >> A & vt;\n            O ^= T, w = a(O, E, j), E = w[0], j = w[1], w = a(O, L, v), L = w[0], v = w[1], O = T;\n            const N = E + L, S = r(N * N), U = E - L, $ = r(U * U), p = S - $, C = j + v, D = j - v, P = r(D * N), G = r(C * U), X = P + G, Z = P - G;\n            j = r(X * X), v = r(k * r(Z * Z)), E = r(S * $), L = r(p * (S + r(l * p)));\n        }\n        w = a(O, E, j), E = w[0], j = w[1], w = a(O, L, v), L = w[0], v = w[1];\n        const R = u(L);\n        return r(E * R);\n    }\n    function d(b) {\n        return Vs(r(b), s);\n    }\n    function g(b) {\n        const _ = Zn(\"u coordinate\", b, s);\n        return i === 32 && (_[31] &= 127), Xn(_);\n    }\n    function y(b) {\n        const _ = Zn(\"scalar\", b), I = _.length;\n        if (I !== s && I !== i) {\n            let k = \"\" + s + \" or \" + i;\n            throw new Error(\"invalid scalar, expected \" + k + \" bytes, got \" + I);\n        }\n        return Xn(c(_));\n    }\n    function h(b, _) {\n        const I = g(_), k = y(b), E = f(I, k);\n        if (E === xe) throw new Error(\"invalid private or public key received\");\n        return d(E);\n    }\n    const m = d(t.Gu);\n    function B(b) {\n        return h(b, m);\n    }\n    return {\n        scalarMult: h,\n        scalarMultBase: B,\n        getSharedSecret: (b, _)=>h(b, _),\n        getPublicKey: (b)=>B(b),\n        utils: {\n            randomPrivateKey: ()=>t.randomBytes(t.nByteLength)\n        },\n        GuBytes: m\n    };\n}\nconst xt = BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\");\nBigInt(0);\nconst zs = BigInt(1), tr = BigInt(2), Js = BigInt(3), Ys = BigInt(5);\nBigInt(8);\nfunction Xs(e) {\n    const t = BigInt(10), n = BigInt(20), r = BigInt(40), o = BigInt(80), s = xt, c = e * e % s * e % s, u = z(c, tr, s) * c % s, a = z(u, zs, s) * e % s, l = z(a, Ys, s) * a % s, f = z(l, t, s) * l % s, d = z(f, n, s) * f % s, g = z(d, r, s) * d % s, y = z(g, o, s) * g % s, h = z(y, o, s) * g % s, m = z(h, t, s) * l % s;\n    return {\n        pow_p_5_8: z(m, tr, s) * e % s,\n        b2: c\n    };\n}\nfunction Zs(e) {\n    return e[0] &= 248, e[31] &= 127, e[31] |= 64, e;\n}\nconst Ot = Ws({\n    P: xt,\n    a: BigInt(486662),\n    montgomeryBits: 255,\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (e)=>{\n        const t = xt, { pow_p_5_8: n, b2: r } = Xs(e);\n        return er(z(n, Js, t) * r, t);\n    },\n    adjustScalarBytes: Zs,\n    randomBytes: Se\n}), It = \"base10\", V = \"base16\", At = \"base64pad\", Qs = \"base64url\", Oe = \"utf8\", Nt = 0, Ie = 1, _e = 2, ei = 0, nr = 1, Te = 12, St = 32;\nfunction ti() {\n    const e = Ot.utils.randomPrivateKey(), t = Ot.getPublicKey(e);\n    return {\n        privateKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(e, V),\n        publicKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(t, V)\n    };\n}\nfunction ni() {\n    const e = Se(St);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(e, V);\n}\nfunction ri(e, t) {\n    const n = Ot.getSharedSecret((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e, V), (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(t, V)), r = Ts(He, n, void 0, void 0, St);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(r, V);\n}\nfunction oi(e) {\n    const t = He((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e, V));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(t, V);\n}\nfunction si(e) {\n    const t = He((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e, Oe));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(t, V);\n}\nfunction Ut(e) {\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(`${e}`, It);\n}\nfunction fe(e) {\n    return Number((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(e, It));\n}\nfunction ii(e) {\n    const t = Ut(typeof e.type < \"u\" ? e.type : Nt);\n    if (fe(t) === Ie && typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n    const n = typeof e.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e.senderPublicKey, V) : void 0, r = typeof e.iv < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e.iv, V) : Se(Te), o = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e.symKey, V), s = Fn(o, r).encrypt((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e.message, Oe));\n    return _t({\n        type: t,\n        sealed: s,\n        iv: r,\n        senderPublicKey: n,\n        encoding: e.encoding\n    });\n}\nfunction ci(e) {\n    const t = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e.symKey, V), { sealed: n, iv: r } = Fe(e), o = Fn(t, r).decrypt(n);\n    if (o === null) throw new Error(\"Failed to decrypt\");\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(o, Oe);\n}\nfunction ai(e, t) {\n    const n = Ut(_e), r = Se(Te), o = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e, Oe);\n    return _t({\n        type: n,\n        sealed: o,\n        iv: r,\n        encoding: t\n    });\n}\nfunction ui(e, t) {\n    const { sealed: n } = Fe({\n        encoded: e,\n        encoding: t\n    });\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(n, Oe);\n}\nfunction _t(e) {\n    const { encoding: t = At } = e;\n    if (fe(e.type) === _e) return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.concat)([\n        e.type,\n        e.sealed\n    ]), t);\n    if (fe(e.type) === Ie) {\n        if (typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n        return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.concat)([\n            e.type,\n            e.senderPublicKey,\n            e.iv,\n            e.sealed\n        ]), t);\n    }\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.concat)([\n        e.type,\n        e.iv,\n        e.sealed\n    ]), t);\n}\nfunction Fe(e) {\n    const { encoded: t, encoding: n = At } = e, r = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(t, n), o = r.slice(ei, nr), s = nr;\n    if (fe(o) === Ie) {\n        const a = s + St, l = a + Te, f = r.slice(s, a), d = r.slice(a, l), g = r.slice(l);\n        return {\n            type: o,\n            sealed: g,\n            iv: d,\n            senderPublicKey: f\n        };\n    }\n    if (fe(o) === _e) {\n        const a = r.slice(s), l = Se(Te);\n        return {\n            type: o,\n            sealed: a,\n            iv: l\n        };\n    }\n    const i = s + Te, c = r.slice(s, i), u = r.slice(i);\n    return {\n        type: o,\n        sealed: u,\n        iv: c\n    };\n}\nfunction fi(e, t) {\n    const n = Fe({\n        encoded: e,\n        encoding: t?.encoding\n    });\n    return rr({\n        type: fe(n.type),\n        senderPublicKey: typeof n.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(n.senderPublicKey, V) : void 0,\n        receiverPublicKey: t?.receiverPublicKey\n    });\n}\nfunction rr(e) {\n    const t = e?.type || Nt;\n    if (t === Ie) {\n        if (typeof e?.senderPublicKey > \"u\") throw new Error(\"missing sender public key\");\n        if (typeof e?.receiverPublicKey > \"u\") throw new Error(\"missing receiver public key\");\n    }\n    return {\n        type: t,\n        senderPublicKey: e?.senderPublicKey,\n        receiverPublicKey: e?.receiverPublicKey\n    };\n}\nfunction li(e) {\n    return e.type === Ie && typeof e.senderPublicKey == \"string\" && typeof e.receiverPublicKey == \"string\";\n}\nfunction di(e) {\n    return e.type === _e;\n}\nfunction or(e) {\n    return new elliptic__WEBPACK_IMPORTED_MODULE_5__.ec(\"p256\").keyFromPublic({\n        x: Buffer.from(e.x, \"base64\").toString(\"hex\"),\n        y: Buffer.from(e.y, \"base64\").toString(\"hex\")\n    }, \"hex\");\n}\nfunction hi(e) {\n    let t = e.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const n = t.length % 4;\n    return n > 0 && (t += \"=\".repeat(4 - n)), t;\n}\nfunction pi(e) {\n    return Buffer.from(hi(e), \"base64\");\n}\nfunction gi(e, t) {\n    const [n, r, o] = e.split(\".\"), s = pi(o);\n    if (s.length !== 64) throw new Error(\"Invalid signature length\");\n    const i = s.slice(0, 32).toString(\"hex\"), c = s.slice(32, 64).toString(\"hex\"), u = `${n}.${r}`, a = He(u), l = or(t), f = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(a, V);\n    if (!l.verify(f, {\n        r: i,\n        s: c\n    })) throw new Error(\"Invalid signature\");\n    return (0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_3__.decodeJWT)(e).payload;\n}\nconst sr = \"irn\";\nfunction yi(e) {\n    return e?.relay || {\n        protocol: sr\n    };\n}\nfunction mi(e) {\n    const t = _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_6__.RELAY_JSONRPC[e];\n    if (typeof t > \"u\") throw new Error(`Relay Protocol not supported: ${e}`);\n    return t;\n}\nfunction ir(e, t = \"-\") {\n    const n = {}, r = \"relay\" + t;\n    return Object.keys(e).forEach((o)=>{\n        if (o.startsWith(r)) {\n            const s = o.replace(r, \"\"), i = e[o];\n            n[s] = i;\n        }\n    }), n;\n}\nfunction bi(e) {\n    if (!e.includes(\"wc:\")) {\n        const a = rt(e);\n        a != null && a.includes(\"wc:\") && (e = a);\n    }\n    e = e.includes(\"wc://\") ? e.replace(\"wc://\", \"\") : e, e = e.includes(\"wc:\") ? e.replace(\"wc:\", \"\") : e;\n    const t = e.indexOf(\":\"), n = e.indexOf(\"?\") !== -1 ? e.indexOf(\"?\") : void 0, r = e.substring(0, t), o = e.substring(t + 1, n).split(\"@\"), s = typeof n < \"u\" ? e.substring(n) : \"\", i = new URLSearchParams(s), c = {};\n    i.forEach((a, l)=>{\n        c[l] = a;\n    });\n    const u = typeof c.methods == \"string\" ? c.methods.split(\",\") : void 0;\n    return {\n        protocol: r,\n        topic: cr(o[0]),\n        version: parseInt(o[1], 10),\n        symKey: c.symKey,\n        relay: ir(c),\n        methods: u,\n        expiryTimestamp: c.expiryTimestamp ? parseInt(c.expiryTimestamp, 10) : void 0\n    };\n}\nfunction cr(e) {\n    return e.startsWith(\"//\") ? e.substring(2) : e;\n}\nfunction ar(e, t = \"-\") {\n    const n = \"relay\", r = {};\n    return Object.keys(e).forEach((o)=>{\n        const s = o, i = n + t + s;\n        e[s] && (r[i] = e[s]);\n    }), r;\n}\nfunction wi(e) {\n    const t = new URLSearchParams, n = ar(e.relay);\n    Object.keys(n).sort().forEach((o)=>{\n        t.set(o, n[o]);\n    }), t.set(\"symKey\", e.symKey), e.expiryTimestamp && t.set(\"expiryTimestamp\", e.expiryTimestamp.toString()), e.methods && t.set(\"methods\", e.methods.join(\",\"));\n    const r = t.toString();\n    return `${e.protocol}:${e.topic}@${e.version}?${r}`;\n}\nfunction Ei(e, t, n) {\n    return `${e}?wc_ev=${n}&topic=${t}`;\n}\nvar vi = Object.defineProperty, xi = Object.defineProperties, Oi = Object.getOwnPropertyDescriptors, ur = Object.getOwnPropertySymbols, Ii = Object.prototype.hasOwnProperty, Ai = Object.prototype.propertyIsEnumerable, fr = (e, t, n)=>t in e ? vi(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: n\n    }) : e[t] = n, Ni = (e, t)=>{\n    for(var n in t || (t = {}))Ii.call(t, n) && fr(e, n, t[n]);\n    if (ur) for (var n of ur(t))Ai.call(t, n) && fr(e, n, t[n]);\n    return e;\n}, Si = (e, t)=>xi(e, Oi(t));\nfunction le(e) {\n    const t = [];\n    return e.forEach((n)=>{\n        const [r, o] = n.split(\":\");\n        t.push(`${r}:${o}`);\n    }), t;\n}\nfunction lr(e) {\n    const t = [];\n    return Object.values(e).forEach((n)=>{\n        t.push(...le(n.accounts));\n    }), t;\n}\nfunction dr(e, t) {\n    const n = [];\n    return Object.values(e).forEach((r)=>{\n        le(r.accounts).includes(t) && n.push(...r.methods);\n    }), n;\n}\nfunction hr(e, t) {\n    const n = [];\n    return Object.values(e).forEach((r)=>{\n        le(r.accounts).includes(t) && n.push(...r.events);\n    }), n;\n}\nfunction Ui(e, t) {\n    const n = Ir(e, t);\n    if (n) throw new Error(n.message);\n    const r = {};\n    for (const [o, s] of Object.entries(e))r[o] = {\n        methods: s.methods,\n        events: s.events,\n        chains: s.accounts.map((i)=>`${i.split(\":\")[0]}:${i.split(\":\")[1]}`)\n    };\n    return r;\n}\nfunction _i(e) {\n    const { proposal: { requiredNamespaces: t, optionalNamespaces: n = {} }, supportedNamespaces: r } = e, o = $t(t), s = $t(n), i = {};\n    Object.keys(r).forEach((a)=>{\n        const l = r[a].chains, f = r[a].methods, d = r[a].events, g = r[a].accounts;\n        l.forEach((y)=>{\n            if (!g.some((h)=>h.includes(y))) throw new Error(`No accounts provided for chain ${y} in namespace ${a}`);\n        }), i[a] = {\n            chains: l,\n            methods: f,\n            events: d,\n            accounts: g\n        };\n    });\n    const c = Nr(t, i, \"approve()\");\n    if (c) throw new Error(c.message);\n    const u = {};\n    return !Object.keys(t).length && !Object.keys(n).length ? i : (Object.keys(o).forEach((a)=>{\n        const l = r[a].chains.filter((y)=>{\n            var h, m;\n            return (m = (h = o[a]) == null ? void 0 : h.chains) == null ? void 0 : m.includes(y);\n        }), f = r[a].methods.filter((y)=>{\n            var h, m;\n            return (m = (h = o[a]) == null ? void 0 : h.methods) == null ? void 0 : m.includes(y);\n        }), d = r[a].events.filter((y)=>{\n            var h, m;\n            return (m = (h = o[a]) == null ? void 0 : h.events) == null ? void 0 : m.includes(y);\n        }), g = l.map((y)=>r[a].accounts.filter((h)=>h.includes(`${y}:`))).flat();\n        u[a] = {\n            chains: l,\n            methods: f,\n            events: d,\n            accounts: g\n        };\n    }), Object.keys(s).forEach((a)=>{\n        var l, f, d, g, y, h;\n        if (!r[a]) return;\n        const m = (f = (l = s[a]) == null ? void 0 : l.chains) == null ? void 0 : f.filter((I)=>r[a].chains.includes(I)), B = r[a].methods.filter((I)=>{\n            var k, E;\n            return (E = (k = s[a]) == null ? void 0 : k.methods) == null ? void 0 : E.includes(I);\n        }), b = r[a].events.filter((I)=>{\n            var k, E;\n            return (E = (k = s[a]) == null ? void 0 : k.events) == null ? void 0 : E.includes(I);\n        }), _ = m?.map((I)=>r[a].accounts.filter((k)=>k.includes(`${I}:`))).flat();\n        u[a] = {\n            chains: Q((d = u[a]) == null ? void 0 : d.chains, m),\n            methods: Q((g = u[a]) == null ? void 0 : g.methods, B),\n            events: Q((y = u[a]) == null ? void 0 : y.events, b),\n            accounts: Q((h = u[a]) == null ? void 0 : h.accounts, _)\n        };\n    }), u);\n}\nfunction Tt(e) {\n    return e.includes(\":\");\n}\nfunction pr(e) {\n    return Tt(e) ? e.split(\":\")[0] : e;\n}\nfunction $t(e) {\n    var t, n, r;\n    const o = {};\n    if (!qe(e)) return o;\n    for (const [s, i] of Object.entries(e)){\n        const c = Tt(s) ? [\n            s\n        ] : i.chains, u = i.methods || [], a = i.events || [], l = pr(s);\n        o[l] = Si(Ni({}, o[l]), {\n            chains: Q(c, (t = o[l]) == null ? void 0 : t.chains),\n            methods: Q(u, (n = o[l]) == null ? void 0 : n.methods),\n            events: Q(a, (r = o[l]) == null ? void 0 : r.events)\n        });\n    }\n    return o;\n}\nfunction gr(e) {\n    const t = {};\n    return e?.forEach((n)=>{\n        var r;\n        const [o, s] = n.split(\":\");\n        t[o] || (t[o] = {\n            accounts: [],\n            chains: [],\n            events: [],\n            methods: []\n        }), t[o].accounts.push(n), (r = t[o].chains) == null || r.push(`${o}:${s}`);\n    }), t;\n}\nfunction Ti(e, t) {\n    t = t.map((r)=>r.replace(\"did:pkh:\", \"\"));\n    const n = gr(t);\n    for (const [r, o] of Object.entries(n))o.methods ? o.methods = Q(o.methods, e) : o.methods = e, o.events = [\n        \"chainChanged\",\n        \"accountsChanged\"\n    ];\n    return n;\n}\nconst yr = {\n    INVALID_METHOD: {\n        message: \"Invalid method.\",\n        code: 1001\n    },\n    INVALID_EVENT: {\n        message: \"Invalid event.\",\n        code: 1002\n    },\n    INVALID_UPDATE_REQUEST: {\n        message: \"Invalid update request.\",\n        code: 1003\n    },\n    INVALID_EXTEND_REQUEST: {\n        message: \"Invalid extend request.\",\n        code: 1004\n    },\n    INVALID_SESSION_SETTLE_REQUEST: {\n        message: \"Invalid session settle request.\",\n        code: 1005\n    },\n    UNAUTHORIZED_METHOD: {\n        message: \"Unauthorized method.\",\n        code: 3001\n    },\n    UNAUTHORIZED_EVENT: {\n        message: \"Unauthorized event.\",\n        code: 3002\n    },\n    UNAUTHORIZED_UPDATE_REQUEST: {\n        message: \"Unauthorized update request.\",\n        code: 3003\n    },\n    UNAUTHORIZED_EXTEND_REQUEST: {\n        message: \"Unauthorized extend request.\",\n        code: 3004\n    },\n    USER_REJECTED: {\n        message: \"User rejected.\",\n        code: 5e3\n    },\n    USER_REJECTED_CHAINS: {\n        message: \"User rejected chains.\",\n        code: 5001\n    },\n    USER_REJECTED_METHODS: {\n        message: \"User rejected methods.\",\n        code: 5002\n    },\n    USER_REJECTED_EVENTS: {\n        message: \"User rejected events.\",\n        code: 5003\n    },\n    UNSUPPORTED_CHAINS: {\n        message: \"Unsupported chains.\",\n        code: 5100\n    },\n    UNSUPPORTED_METHODS: {\n        message: \"Unsupported methods.\",\n        code: 5101\n    },\n    UNSUPPORTED_EVENTS: {\n        message: \"Unsupported events.\",\n        code: 5102\n    },\n    UNSUPPORTED_ACCOUNTS: {\n        message: \"Unsupported accounts.\",\n        code: 5103\n    },\n    UNSUPPORTED_NAMESPACE_KEY: {\n        message: \"Unsupported namespace key.\",\n        code: 5104\n    },\n    USER_DISCONNECTED: {\n        message: \"User disconnected.\",\n        code: 6e3\n    },\n    SESSION_SETTLEMENT_FAILED: {\n        message: \"Session settlement failed.\",\n        code: 7e3\n    },\n    WC_METHOD_UNSUPPORTED: {\n        message: \"Unsupported wc_ method.\",\n        code: 10001\n    }\n}, mr = {\n    NOT_INITIALIZED: {\n        message: \"Not initialized.\",\n        code: 1\n    },\n    NO_MATCHING_KEY: {\n        message: \"No matching key.\",\n        code: 2\n    },\n    RESTORE_WILL_OVERRIDE: {\n        message: \"Restore will override.\",\n        code: 3\n    },\n    RESUBSCRIBED: {\n        message: \"Resubscribed.\",\n        code: 4\n    },\n    MISSING_OR_INVALID: {\n        message: \"Missing or invalid.\",\n        code: 5\n    },\n    EXPIRED: {\n        message: \"Expired.\",\n        code: 6\n    },\n    UNKNOWN_TYPE: {\n        message: \"Unknown type.\",\n        code: 7\n    },\n    MISMATCHED_TOPIC: {\n        message: \"Mismatched topic.\",\n        code: 8\n    },\n    NON_CONFORMING_NAMESPACES: {\n        message: \"Non conforming namespaces.\",\n        code: 9\n    }\n};\nfunction te(e, t) {\n    const { message: n, code: r } = mr[e];\n    return {\n        message: t ? `${n} ${t}` : n,\n        code: r\n    };\n}\nfunction de(e, t) {\n    const { message: n, code: r } = yr[e];\n    return {\n        message: t ? `${n} ${t}` : n,\n        code: r\n    };\n}\nfunction $e(e, t) {\n    return Array.isArray(e) ? typeof t < \"u\" && e.length ? e.every(t) : !0 : !1;\n}\nfunction qe(e) {\n    return Object.getPrototypeOf(e) === Object.prototype && Object.keys(e).length;\n}\nfunction ae(e) {\n    return typeof e > \"u\";\n}\nfunction q(e, t) {\n    return t && ae(e) ? !0 : typeof e == \"string\" && !!e.trim().length;\n}\nfunction Ge(e, t) {\n    return t && ae(e) ? !0 : typeof e == \"number\" && !isNaN(e);\n}\nfunction $i(e, t) {\n    const { requiredNamespaces: n } = t, r = Object.keys(e.namespaces), o = Object.keys(n);\n    let s = !0;\n    return re(o, r) ? (r.forEach((i)=>{\n        const { accounts: c, methods: u, events: a } = e.namespaces[i], l = le(c), f = n[i];\n        (!re(Le(i, f), l) || !re(f.methods, u) || !re(f.events, a)) && (s = !1);\n    }), s) : !1;\n}\nfunction Re(e) {\n    return q(e, !1) && e.includes(\":\") ? e.split(\":\").length === 2 : !1;\n}\nfunction br(e) {\n    if (q(e, !1) && e.includes(\":\")) {\n        const t = e.split(\":\");\n        if (t.length === 3) {\n            const n = t[0] + \":\" + t[1];\n            return !!t[2] && Re(n);\n        }\n    }\n    return !1;\n}\nfunction Ri(e) {\n    function t(n) {\n        try {\n            return typeof new URL(n) < \"u\";\n        } catch  {\n            return !1;\n        }\n    }\n    try {\n        if (q(e, !1)) {\n            if (t(e)) return !0;\n            const n = rt(e);\n            return t(n);\n        }\n    } catch  {}\n    return !1;\n}\nfunction Pi(e) {\n    var t;\n    return (t = e?.proposer) == null ? void 0 : t.publicKey;\n}\nfunction Li(e) {\n    return e?.topic;\n}\nfunction Bi(e, t) {\n    let n = null;\n    return q(e?.publicKey, !1) || (n = te(\"MISSING_OR_INVALID\", `${t} controller public key should be a string`)), n;\n}\nfunction Rt(e) {\n    let t = !0;\n    return $e(e) ? e.length && (t = e.every((n)=>q(n, !1))) : t = !1, t;\n}\nfunction wr(e, t, n) {\n    let r = null;\n    return $e(t) && t.length ? t.forEach((o)=>{\n        r || Re(o) || (r = de(\"UNSUPPORTED_CHAINS\", `${n}, chain ${o} should be a string and conform to \"namespace:chainId\" format`));\n    }) : Re(e) || (r = de(\"UNSUPPORTED_CHAINS\", `${n}, chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }`)), r;\n}\nfunction Er(e, t, n) {\n    let r = null;\n    return Object.entries(e).forEach(([o, s])=>{\n        if (r) return;\n        const i = wr(o, Le(o, s), `${t} ${n}`);\n        i && (r = i);\n    }), r;\n}\nfunction vr(e, t) {\n    let n = null;\n    return $e(e) ? e.forEach((r)=>{\n        n || br(r) || (n = de(\"UNSUPPORTED_ACCOUNTS\", `${t}, account ${r} should be a string and conform to \"namespace:chainId:address\" format`));\n    }) : n = de(\"UNSUPPORTED_ACCOUNTS\", `${t}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`), n;\n}\nfunction xr(e, t) {\n    let n = null;\n    return Object.values(e).forEach((r)=>{\n        if (n) return;\n        const o = vr(r?.accounts, `${t} namespace`);\n        o && (n = o);\n    }), n;\n}\nfunction Or(e, t) {\n    let n = null;\n    return Rt(e?.methods) ? Rt(e?.events) || (n = de(\"UNSUPPORTED_EVENTS\", `${t}, events should be an array of strings or empty array for no events`)) : n = de(\"UNSUPPORTED_METHODS\", `${t}, methods should be an array of strings or empty array for no methods`), n;\n}\nfunction Pt(e, t) {\n    let n = null;\n    return Object.values(e).forEach((r)=>{\n        if (n) return;\n        const o = Or(r, `${t}, namespace`);\n        o && (n = o);\n    }), n;\n}\nfunction ji(e, t, n) {\n    let r = null;\n    if (e && qe(e)) {\n        const o = Pt(e, t);\n        o && (r = o);\n        const s = Er(e, t, n);\n        s && (r = s);\n    } else r = te(\"MISSING_OR_INVALID\", `${t}, ${n} should be an object with data`);\n    return r;\n}\nfunction Ir(e, t) {\n    let n = null;\n    if (e && qe(e)) {\n        const r = Pt(e, t);\n        r && (n = r);\n        const o = xr(e, t);\n        o && (n = o);\n    } else n = te(\"MISSING_OR_INVALID\", `${t}, namespaces should be an object with data`);\n    return n;\n}\nfunction Ar(e) {\n    return q(e.protocol, !0);\n}\nfunction Ci(e, t) {\n    let n = !1;\n    return t && !e ? n = !0 : e && $e(e) && e.length && e.forEach((r)=>{\n        n = Ar(r);\n    }), n;\n}\nfunction ki(e) {\n    return typeof e == \"number\";\n}\nfunction Di(e) {\n    return typeof e < \"u\" && typeof e !== null;\n}\nfunction Mi(e) {\n    return !(!e || typeof e != \"object\" || !e.code || !Ge(e.code, !1) || !e.message || !q(e.message, !1));\n}\nfunction Vi(e) {\n    return !(ae(e) || !q(e.method, !1));\n}\nfunction Hi(e) {\n    return !(ae(e) || ae(e.result) && ae(e.error) || !Ge(e.id, !1) || !q(e.jsonrpc, !1));\n}\nfunction Ki(e) {\n    return !(ae(e) || !q(e.name, !1));\n}\nfunction Fi(e, t) {\n    return !(!Re(t) || !lr(e).includes(t));\n}\nfunction qi(e, t, n) {\n    return q(n, !1) ? dr(e, t).includes(n) : !1;\n}\nfunction Gi(e, t, n) {\n    return q(n, !1) ? hr(e, t).includes(n) : !1;\n}\nfunction Nr(e, t, n) {\n    let r = null;\n    const o = Wi(e), s = zi(t), i = Object.keys(o), c = Object.keys(s), u = Sr(Object.keys(e)), a = Sr(Object.keys(t)), l = u.filter((f)=>!a.includes(f));\n    return l.length && (r = te(\"NON_CONFORMING_NAMESPACES\", `${n} namespaces keys don't satisfy requiredNamespaces.\n      Required: ${l.toString()}\n      Received: ${Object.keys(t).toString()}`)), re(i, c) || (r = te(\"NON_CONFORMING_NAMESPACES\", `${n} namespaces chains don't satisfy required namespaces.\n      Required: ${i.toString()}\n      Approved: ${c.toString()}`)), Object.keys(t).forEach((f)=>{\n        if (!f.includes(\":\") || r) return;\n        const d = le(t[f].accounts);\n        d.includes(f) || (r = te(\"NON_CONFORMING_NAMESPACES\", `${n} namespaces accounts don't satisfy namespace accounts for ${f}\n        Required: ${f}\n        Approved: ${d.toString()}`));\n    }), i.forEach((f)=>{\n        r || (re(o[f].methods, s[f].methods) ? re(o[f].events, s[f].events) || (r = te(\"NON_CONFORMING_NAMESPACES\", `${n} namespaces events don't satisfy namespace events for ${f}`)) : r = te(\"NON_CONFORMING_NAMESPACES\", `${n} namespaces methods don't satisfy namespace methods for ${f}`));\n    }), r;\n}\nfunction Wi(e) {\n    const t = {};\n    return Object.keys(e).forEach((n)=>{\n        var r;\n        n.includes(\":\") ? t[n] = e[n] : (r = e[n].chains) == null || r.forEach((o)=>{\n            t[o] = {\n                methods: e[n].methods,\n                events: e[n].events\n            };\n        });\n    }), t;\n}\nfunction Sr(e) {\n    return [\n        ...new Set(e.map((t)=>t.includes(\":\") ? t.split(\":\")[0] : t))\n    ];\n}\nfunction zi(e) {\n    const t = {};\n    return Object.keys(e).forEach((n)=>{\n        if (n.includes(\":\")) t[n] = e[n];\n        else {\n            const r = le(e[n].accounts);\n            r?.forEach((o)=>{\n                t[o] = {\n                    accounts: e[n].accounts.filter((s)=>s.includes(`${o}:`)),\n                    methods: e[n].methods,\n                    events: e[n].events\n                };\n            });\n        }\n    }), t;\n}\nfunction Ji(e, t) {\n    return Ge(e, !1) && e <= t.max && e >= t.min;\n}\nfunction Yi() {\n    const e = ue();\n    return new Promise((t)=>{\n        switch(e){\n            case H.browser:\n                t(Ur());\n                break;\n            case H.reactNative:\n                t(_r());\n                break;\n            case H.node:\n                t(Tr());\n                break;\n            default:\n                t(!0);\n        }\n    });\n}\nfunction Ur() {\n    return Ae() && navigator?.onLine;\n}\nasync function _r() {\n    if (ne() && typeof global < \"u\" && global != null && global.NetInfo) {\n        const e = await (global == null ? void 0 : global.NetInfo.fetch());\n        return e?.isConnected;\n    }\n    return !0;\n}\nfunction Tr() {\n    return !0;\n}\nfunction Xi(e) {\n    switch(ue()){\n        case H.browser:\n            $r(e);\n            break;\n        case H.reactNative:\n            Rr(e);\n            break;\n        case H.node:\n            break;\n    }\n}\nfunction $r(e) {\n    !ne() && Ae() && (window.addEventListener(\"online\", ()=>e(!0)), window.addEventListener(\"offline\", ()=>e(!1)));\n}\nfunction Rr(e) {\n    ne() && typeof global < \"u\" && global != null && global.NetInfo && global?.NetInfo.addEventListener((t)=>e(t?.isConnected));\n}\nconst Lt = {};\nclass Zi {\n    static get(t) {\n        return Lt[t];\n    }\n    static set(t, n) {\n        Lt[t] = n;\n    }\n    static delete(t) {\n        delete Lt[t];\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/window-getters/dist/cjs/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;\nfunction getFromWindow(name) {\n    let res = undefined;\n    if (false) {}\n    return res;\n}\nexports.getFromWindow = getFromWindow;\nfunction getFromWindowOrThrow(name) {\n    const res = getFromWindow(name);\n    if (!res) {\n        throw new Error(`${name} is not defined in Window`);\n    }\n    return res;\n}\nexports.getFromWindowOrThrow = getFromWindowOrThrow;\nfunction getDocumentOrThrow() {\n    return getFromWindowOrThrow(\"document\");\n}\nexports.getDocumentOrThrow = getDocumentOrThrow;\nfunction getDocument() {\n    return getFromWindow(\"document\");\n}\nexports.getDocument = getDocument;\nfunction getNavigatorOrThrow() {\n    return getFromWindowOrThrow(\"navigator\");\n}\nexports.getNavigatorOrThrow = getNavigatorOrThrow;\nfunction getNavigator() {\n    return getFromWindow(\"navigator\");\n}\nexports.getNavigator = getNavigator;\nfunction getLocationOrThrow() {\n    return getFromWindowOrThrow(\"location\");\n}\nexports.getLocationOrThrow = getLocationOrThrow;\nfunction getLocation() {\n    return getFromWindow(\"location\");\n}\nexports.getLocation = getLocation;\nfunction getCryptoOrThrow() {\n    return getFromWindowOrThrow(\"crypto\");\n}\nexports.getCryptoOrThrow = getCryptoOrThrow;\nfunction getCrypto() {\n    return getFromWindow(\"crypto\");\n}\nexports.getCrypto = getCrypto;\nfunction getLocalStorageOrThrow() {\n    return getFromWindowOrThrow(\"localStorage\");\n}\nexports.getLocalStorageOrThrow = getLocalStorageOrThrow;\nfunction getLocalStorage() {\n    return getFromWindow(\"localStorage\");\n}\nexports.getLocalStorage = getLocalStorage; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2luZG93LWdldHRlcnMvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHQSw4QkFBOEIsR0FBR0EsaUJBQWlCLEdBQUdBLHdCQUF3QixHQUFHQSxtQkFBbUIsR0FBR0EsMEJBQTBCLEdBQUdBLG9CQUFvQixHQUFHQSwyQkFBMkIsR0FBR0EsbUJBQW1CLEdBQUdBLDBCQUEwQixHQUFHQSw0QkFBNEIsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUNqVSxTQUFTYSxjQUFjQyxJQUFJO0lBQ3ZCLElBQUlDLE1BQU1DO0lBQ1YsSUFBSSxLQUFvRSxFQUFFLEVBRXpFO0lBQ0QsT0FBT0Q7QUFDWDtBQUNBZixxQkFBcUIsR0FBR2E7QUFDeEIsU0FBU0QscUJBQXFCRSxJQUFJO0lBQzlCLE1BQU1DLE1BQU1GLGNBQWNDO0lBQzFCLElBQUksQ0FBQ0MsS0FBSztRQUNOLE1BQU0sSUFBSUcsTUFBTSxDQUFDLEVBQUVKLEtBQUsseUJBQXlCLENBQUM7SUFDdEQ7SUFDQSxPQUFPQztBQUNYO0FBQ0FmLDRCQUE0QixHQUFHWTtBQUMvQixTQUFTRDtJQUNMLE9BQU9DLHFCQUFxQjtBQUNoQztBQUNBWiwwQkFBMEIsR0FBR1c7QUFDN0IsU0FBU0Q7SUFDTCxPQUFPRyxjQUFjO0FBQ3pCO0FBQ0FiLG1CQUFtQixHQUFHVTtBQUN0QixTQUFTRDtJQUNMLE9BQU9HLHFCQUFxQjtBQUNoQztBQUNBWiwyQkFBMkIsR0FBR1M7QUFDOUIsU0FBU0Q7SUFDTCxPQUFPSyxjQUFjO0FBQ3pCO0FBQ0FiLG9CQUFvQixHQUFHUTtBQUN2QixTQUFTRDtJQUNMLE9BQU9LLHFCQUFxQjtBQUNoQztBQUNBWiwwQkFBMEIsR0FBR087QUFDN0IsU0FBU0Q7SUFDTCxPQUFPTyxjQUFjO0FBQ3pCO0FBQ0FiLG1CQUFtQixHQUFHTTtBQUN0QixTQUFTRDtJQUNMLE9BQU9PLHFCQUFxQjtBQUNoQztBQUNBWix3QkFBd0IsR0FBR0s7QUFDM0IsU0FBU0Q7SUFDTCxPQUFPUyxjQUFjO0FBQ3pCO0FBQ0FiLGlCQUFpQixHQUFHSTtBQUNwQixTQUFTRDtJQUNMLE9BQU9TLHFCQUFxQjtBQUNoQztBQUNBWiw4QkFBOEIsR0FBR0c7QUFDakMsU0FBU0Q7SUFDTCxPQUFPVyxjQUFjO0FBQ3pCO0FBQ0FiLHVCQUF1QixHQUFHRSxpQkFDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzL2Rpc3QvY2pzL2luZGV4LmpzPzdiMjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZSA9IGV4cG9ydHMuZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdyA9IGV4cG9ydHMuZ2V0Q3J5cHRvID0gZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZXhwb3J0cy5nZXROYXZpZ2F0b3IgPSBleHBvcnRzLmdldE5hdmlnYXRvck9yVGhyb3cgPSBleHBvcnRzLmdldERvY3VtZW50ID0gZXhwb3J0cy5nZXREb2N1bWVudE9yVGhyb3cgPSBleHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZXhwb3J0cy5nZXRGcm9tV2luZG93ID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0RnJvbVdpbmRvdyhuYW1lKSB7XG4gICAgbGV0IHJlcyA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJlcyA9IHdpbmRvd1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0RnJvbVdpbmRvdyA9IGdldEZyb21XaW5kb3c7XG5mdW5jdGlvbiBnZXRGcm9tV2luZG93T3JUaHJvdyhuYW1lKSB7XG4gICAgY29uc3QgcmVzID0gZ2V0RnJvbVdpbmRvdyhuYW1lKTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gaXMgbm90IGRlZmluZWQgaW4gV2luZG93YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZ2V0RnJvbVdpbmRvd09yVGhyb3c7XG5mdW5jdGlvbiBnZXREb2N1bWVudE9yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50T3JUaHJvdyA9IGdldERvY3VtZW50T3JUaHJvdztcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50ID0gZ2V0RG9jdW1lbnQ7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3JPclRocm93KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93T3JUaHJvdyhcIm5hdmlnYXRvclwiKTtcbn1cbmV4cG9ydHMuZ2V0TmF2aWdhdG9yT3JUaHJvdyA9IGdldE5hdmlnYXRvck9yVGhyb3c7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3IoKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJuYXZpZ2F0b3JcIik7XG59XG5leHBvcnRzLmdldE5hdmlnYXRvciA9IGdldE5hdmlnYXRvcjtcbmZ1bmN0aW9uIGdldExvY2F0aW9uT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZ2V0TG9jYXRpb25PclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb24gPSBnZXRMb2NhdGlvbjtcbmZ1bmN0aW9uIGdldENyeXB0b09yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiY3J5cHRvXCIpO1xufVxuZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZ2V0Q3J5cHRvT3JUaHJvdztcbmZ1bmN0aW9uIGdldENyeXB0bygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvdyhcImNyeXB0b1wiKTtcbn1cbmV4cG9ydHMuZ2V0Q3J5cHRvID0gZ2V0Q3J5cHRvO1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhbFN0b3JhZ2VcIik7XG59XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZU9yVGhyb3cgPSBnZXRMb2NhbFN0b3JhZ2VPclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlKCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwibG9jYWxTdG9yYWdlXCIpO1xufVxuZXhwb3J0cy5nZXRMb2NhbFN0b3JhZ2UgPSBnZXRMb2NhbFN0b3JhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRMb2NhbFN0b3JhZ2UiLCJnZXRMb2NhbFN0b3JhZ2VPclRocm93IiwiZ2V0Q3J5cHRvIiwiZ2V0Q3J5cHRvT3JUaHJvdyIsImdldExvY2F0aW9uIiwiZ2V0TG9jYXRpb25PclRocm93IiwiZ2V0TmF2aWdhdG9yIiwiZ2V0TmF2aWdhdG9yT3JUaHJvdyIsImdldERvY3VtZW50IiwiZ2V0RG9jdW1lbnRPclRocm93IiwiZ2V0RnJvbVdpbmRvd09yVGhyb3ciLCJnZXRGcm9tV2luZG93IiwibmFtZSIsInJlcyIsInVuZGVmaW5lZCIsIndpbmRvdyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/window-metadata/dist/cjs/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getWindowMetadata = void 0;\nconst window_getters_1 = __webpack_require__(/*! @walletconnect/window-getters */ \"(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\nfunction getWindowMetadata() {\n    let doc;\n    let loc;\n    try {\n        doc = window_getters_1.getDocumentOrThrow();\n        loc = window_getters_1.getLocationOrThrow();\n    } catch (e) {\n        return null;\n    }\n    function getIcons() {\n        const links = doc.getElementsByTagName(\"link\");\n        const icons = [];\n        for(let i = 0; i < links.length; i++){\n            const link = links[i];\n            const rel = link.getAttribute(\"rel\");\n            if (rel) {\n                if (rel.toLowerCase().indexOf(\"icon\") > -1) {\n                    const href = link.getAttribute(\"href\");\n                    if (href) {\n                        if (href.toLowerCase().indexOf(\"https:\") === -1 && href.toLowerCase().indexOf(\"http:\") === -1 && href.indexOf(\"//\") !== 0) {\n                            let absoluteHref = loc.protocol + \"//\" + loc.host;\n                            if (href.indexOf(\"/\") === 0) {\n                                absoluteHref += href;\n                            } else {\n                                const path = loc.pathname.split(\"/\");\n                                path.pop();\n                                const finalPath = path.join(\"/\");\n                                absoluteHref += finalPath + \"/\" + href;\n                            }\n                            icons.push(absoluteHref);\n                        } else if (href.indexOf(\"//\") === 0) {\n                            const absoluteUrl = loc.protocol + href;\n                            icons.push(absoluteUrl);\n                        } else {\n                            icons.push(href);\n                        }\n                    }\n                }\n            }\n        }\n        return icons;\n    }\n    function getWindowMetadataOfAny(...args) {\n        const metaTags = doc.getElementsByTagName(\"meta\");\n        for(let i = 0; i < metaTags.length; i++){\n            const tag = metaTags[i];\n            const attributes = [\n                \"itemprop\",\n                \"property\",\n                \"name\"\n            ].map((target)=>tag.getAttribute(target)).filter((attr)=>{\n                if (attr) {\n                    return args.includes(attr);\n                }\n                return false;\n            });\n            if (attributes.length && attributes) {\n                const content = tag.getAttribute(\"content\");\n                if (content) {\n                    return content;\n                }\n            }\n        }\n        return \"\";\n    }\n    function getName() {\n        let name = getWindowMetadataOfAny(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n        if (!name) {\n            name = doc.title;\n        }\n        return name;\n    }\n    function getDescription() {\n        const description = getWindowMetadataOfAny(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n        return description;\n    }\n    const name = getName();\n    const description = getDescription();\n    const url = loc.origin;\n    const icons = getIcons();\n    const meta = {\n        description,\n        url,\n        icons,\n        name\n    };\n    return meta;\n}\nexports.getWindowMetadata = getWindowMetadata; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   builtinDrivers: () => (/* binding */ builtinDrivers),\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   defineDriver: () => (/* binding */ defineDriver),\n/* harmony export */   filterKeyByBase: () => (/* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.c),\n/* harmony export */   filterKeyByDepth: () => (/* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.f),\n/* harmony export */   joinKeys: () => (/* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.j),\n/* harmony export */   normalizeBaseKey: () => (/* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n),\n/* harmony export */   normalizeKey: () => (/* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a),\n/* harmony export */   prefixStorage: () => (/* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.p),\n/* harmony export */   restoreSnapshot: () => (/* binding */ restoreSnapshot),\n/* harmony export */   snapshot: () => (/* binding */ snapshot)\n/* harmony export */ });\n/* harmony import */ var destr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! destr */ \"(ssr)/./node_modules/destr/dist/index.mjs\");\n/* harmony import */ var _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/unstorage.mNKHTF5Y.mjs */ \"(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.mNKHTF5Y.mjs\");\n\n\n\nfunction defineDriver(factory) {\n    return factory;\n}\nconst DRIVER_NAME = \"memory\";\nconst memory = defineDriver(()=>{\n    const data = /* @__PURE__ */ new Map();\n    return {\n        name: DRIVER_NAME,\n        getInstance: ()=>data,\n        hasItem (key) {\n            return data.has(key);\n        },\n        getItem (key) {\n            return data.get(key) ?? null;\n        },\n        getItemRaw (key) {\n            return data.get(key) ?? null;\n        },\n        setItem (key, value) {\n            data.set(key, value);\n        },\n        setItemRaw (key, value) {\n            data.set(key, value);\n        },\n        removeItem (key) {\n            data.delete(key);\n        },\n        getKeys () {\n            return [\n                ...data.keys()\n            ];\n        },\n        clear () {\n            data.clear();\n        },\n        dispose () {\n            data.clear();\n        }\n    };\n});\nfunction createStorage(options = {}) {\n    const context = {\n        mounts: {\n            \"\": options.driver || memory()\n        },\n        mountpoints: [\n            \"\"\n        ],\n        watching: false,\n        watchListeners: [],\n        unwatch: {}\n    };\n    const getMount = (key)=>{\n        for (const base of context.mountpoints){\n            if (key.startsWith(base)) {\n                return {\n                    base,\n                    relativeKey: key.slice(base.length),\n                    driver: context.mounts[base]\n                };\n            }\n        }\n        return {\n            base: \"\",\n            relativeKey: key,\n            driver: context.mounts[\"\"]\n        };\n    };\n    const getMounts = (base, includeParent)=>{\n        return context.mountpoints.filter((mountpoint)=>mountpoint.startsWith(base) || includeParent && base.startsWith(mountpoint)).map((mountpoint)=>({\n                relativeBase: base.length > mountpoint.length ? base.slice(mountpoint.length) : void 0,\n                mountpoint,\n                driver: context.mounts[mountpoint]\n            }));\n    };\n    const onChange = (event, key)=>{\n        if (!context.watching) {\n            return;\n        }\n        key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n        for (const listener of context.watchListeners){\n            listener(event, key);\n        }\n    };\n    const startWatch = async ()=>{\n        if (context.watching) {\n            return;\n        }\n        context.watching = true;\n        for(const mountpoint in context.mounts){\n            context.unwatch[mountpoint] = await watch(context.mounts[mountpoint], onChange, mountpoint);\n        }\n    };\n    const stopWatch = async ()=>{\n        if (!context.watching) {\n            return;\n        }\n        for(const mountpoint in context.unwatch){\n            await context.unwatch[mountpoint]();\n        }\n        context.unwatch = {};\n        context.watching = false;\n    };\n    const runBatch = (items, commonOptions, cb)=>{\n        const batches = /* @__PURE__ */ new Map();\n        const getBatch = (mount)=>{\n            let batch = batches.get(mount.base);\n            if (!batch) {\n                batch = {\n                    driver: mount.driver,\n                    base: mount.base,\n                    items: []\n                };\n                batches.set(mount.base, batch);\n            }\n            return batch;\n        };\n        for (const item of items){\n            const isStringItem = typeof item === \"string\";\n            const key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(isStringItem ? item : item.key);\n            const value = isStringItem ? void 0 : item.value;\n            const options2 = isStringItem || !item.options ? commonOptions : {\n                ...commonOptions,\n                ...item.options\n            };\n            const mount = getMount(key);\n            getBatch(mount).items.push({\n                key,\n                value,\n                relativeKey: mount.relativeKey,\n                options: options2\n            });\n        }\n        return Promise.all([\n            ...batches.values()\n        ].map((batch)=>cb(batch))).then((r)=>r.flat());\n    };\n    const storage = {\n        // Item\n        hasItem (key, opts = {}) {\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.hasItem, relativeKey, opts);\n        },\n        getItem (key, opts = {}) {\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value));\n        },\n        getItems (items, commonOptions = {}) {\n            return runBatch(items, commonOptions, (batch)=>{\n                if (batch.driver.getItems) {\n                    return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            options: item.options\n                        })), commonOptions).then((r)=>r.map((item)=>({\n                                key: (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(batch.base, item.key),\n                                value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(item.value)\n                            })));\n                }\n                return Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItem, item.relativeKey, item.options).then((value)=>({\n                            key: item.key,\n                            value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value)\n                        }));\n                }));\n            });\n        },\n        getItemRaw (key, opts = {}) {\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.getItemRaw) {\n                return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItemRaw, relativeKey, opts);\n            }\n            return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(value));\n        },\n        async setItem (key, value, opts = {}) {\n            if (value === void 0) {\n                return storage.removeItem(key);\n            }\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.setItem) {\n                return;\n            }\n            await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(value), opts);\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async setItems (items, commonOptions) {\n            await runBatch(items, commonOptions, async (batch)=>{\n                if (batch.driver.setItems) {\n                    return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            value: (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(item.value),\n                            options: item.options\n                        })), commonOptions);\n                }\n                if (!batch.driver.setItem) {\n                    return;\n                }\n                await Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItem, item.relativeKey, (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(item.value), item.options);\n                }));\n            });\n        },\n        async setItemRaw (key, value, opts = {}) {\n            if (value === void 0) {\n                return storage.removeItem(key, opts);\n            }\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.setItemRaw) {\n                await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItemRaw, relativeKey, value, opts);\n            } else if (driver.setItem) {\n                await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(value), opts);\n            } else {\n                return;\n            }\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async removeItem (key, opts = {}) {\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    removeMeta: opts\n                };\n            }\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.removeItem) {\n                return;\n            }\n            await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey, opts);\n            if (opts.removeMeta || opts.removeMata) {\n                await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey + \"$\", opts);\n            }\n            if (!driver.watch) {\n                onChange(\"remove\", key);\n            }\n        },\n        // Meta\n        async getMeta (key, opts = {}) {\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    nativeOnly: opts\n                };\n            }\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            const meta = /* @__PURE__ */ Object.create(null);\n            if (driver.getMeta) {\n                Object.assign(meta, await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getMeta, relativeKey, opts));\n            }\n            if (!opts.nativeOnly) {\n                const value = await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey + \"$\", opts).then((value_)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value_));\n                if (value && typeof value === \"object\") {\n                    if (typeof value.atime === \"string\") {\n                        value.atime = new Date(value.atime);\n                    }\n                    if (typeof value.mtime === \"string\") {\n                        value.mtime = new Date(value.mtime);\n                    }\n                    Object.assign(meta, value);\n                }\n            }\n            return meta;\n        },\n        setMeta (key, value, opts = {}) {\n            return this.setItem(key + \"$\", value, opts);\n        },\n        removeMeta (key, opts = {}) {\n            return this.removeItem(key + \"$\", opts);\n        },\n        // Keys\n        async getKeys (base, opts = {}) {\n            base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            const mounts = getMounts(base, true);\n            let maskedMounts = [];\n            const allKeys = [];\n            let allMountsSupportMaxDepth = true;\n            for (const mount of mounts){\n                if (!mount.driver.flags?.maxDepth) {\n                    allMountsSupportMaxDepth = false;\n                }\n                const rawKeys = await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(mount.driver.getKeys, mount.relativeBase, opts);\n                for (const key of rawKeys){\n                    const fullKey = mount.mountpoint + (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n                    if (!maskedMounts.some((p)=>fullKey.startsWith(p))) {\n                        allKeys.push(fullKey);\n                    }\n                }\n                maskedMounts = [\n                    mount.mountpoint,\n                    ...maskedMounts.filter((p)=>!p.startsWith(mount.mountpoint))\n                ];\n            }\n            const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;\n            return allKeys.filter((key)=>(!shouldFilterByDepth || (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(key, opts.maxDepth)) && (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(key, base));\n        },\n        // Utils\n        async clear (base, opts = {}) {\n            base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            await Promise.all(getMounts(base, false).map(async (m)=>{\n                if (m.driver.clear) {\n                    return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(m.driver.clear, m.relativeBase, opts);\n                }\n                if (m.driver.removeItem) {\n                    const keys = await m.driver.getKeys(m.relativeBase || \"\", opts);\n                    return Promise.all(keys.map((key)=>m.driver.removeItem(key, opts)));\n                }\n            }));\n        },\n        async dispose () {\n            await Promise.all(Object.values(context.mounts).map((driver)=>dispose(driver)));\n        },\n        async watch (callback) {\n            await startWatch();\n            context.watchListeners.push(callback);\n            return async ()=>{\n                context.watchListeners = context.watchListeners.filter((listener)=>listener !== callback);\n                if (context.watchListeners.length === 0) {\n                    await stopWatch();\n                }\n            };\n        },\n        async unwatch () {\n            context.watchListeners = [];\n            await stopWatch();\n        },\n        // Mount\n        mount (base, driver) {\n            base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (base && context.mounts[base]) {\n                throw new Error(`already mounted at ${base}`);\n            }\n            if (base) {\n                context.mountpoints.push(base);\n                context.mountpoints.sort((a, b)=>b.length - a.length);\n            }\n            context.mounts[base] = driver;\n            if (context.watching) {\n                Promise.resolve(watch(driver, onChange, base)).then((unwatcher)=>{\n                    context.unwatch[base] = unwatcher;\n                }).catch(console.error);\n            }\n            return storage;\n        },\n        async unmount (base, _dispose = true) {\n            base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (!base || !context.mounts[base]) {\n                return;\n            }\n            if (context.watching && base in context.unwatch) {\n                context.unwatch[base]?.();\n                delete context.unwatch[base];\n            }\n            if (_dispose) {\n                await dispose(context.mounts[base]);\n            }\n            context.mountpoints = context.mountpoints.filter((key)=>key !== base);\n            delete context.mounts[base];\n        },\n        getMount (key = \"\") {\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key) + \":\";\n            const m = getMount(key);\n            return {\n                driver: m.driver,\n                base: m.base\n            };\n        },\n        getMounts (base = \"\", opts = {}) {\n            base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(base);\n            const mounts = getMounts(base, opts.parents);\n            return mounts.map((m)=>({\n                    driver: m.driver,\n                    base: m.mountpoint\n                }));\n        },\n        // Aliases\n        keys: (base, opts = {})=>storage.getKeys(base, opts),\n        get: (key, opts = {})=>storage.getItem(key, opts),\n        set: (key, value, opts = {})=>storage.setItem(key, value, opts),\n        has: (key, opts = {})=>storage.hasItem(key, opts),\n        del: (key, opts = {})=>storage.removeItem(key, opts),\n        remove: (key, opts = {})=>storage.removeItem(key, opts)\n    };\n    return storage;\n}\nasync function snapshot(storage, base) {\n    base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    const keys = await storage.getKeys(base);\n    const snapshot2 = {};\n    await Promise.all(keys.map(async (key)=>{\n        snapshot2[key.slice(base.length)] = await storage.getItem(key);\n    }));\n    return snapshot2;\n}\nasync function restoreSnapshot(driver, snapshot2, base = \"\") {\n    base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    await Promise.all(Object.entries(snapshot2).map((e)=>driver.setItem(base + e[0], e[1])));\n}\nfunction watch(driver, onChange, base) {\n    return driver.watch ? driver.watch((event, key)=>onChange(event, base + key)) : ()=>{};\n}\nasync function dispose(driver) {\n    if (typeof driver.dispose === \"function\") {\n        await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.dispose);\n    }\n}\nconst builtinDrivers = {\n    \"azure-app-configuration\": \"unstorage/drivers/azure-app-configuration\",\n    \"azureAppConfiguration\": \"unstorage/drivers/azure-app-configuration\",\n    \"azure-cosmos\": \"unstorage/drivers/azure-cosmos\",\n    \"azureCosmos\": \"unstorage/drivers/azure-cosmos\",\n    \"azure-key-vault\": \"unstorage/drivers/azure-key-vault\",\n    \"azureKeyVault\": \"unstorage/drivers/azure-key-vault\",\n    \"azure-storage-blob\": \"unstorage/drivers/azure-storage-blob\",\n    \"azureStorageBlob\": \"unstorage/drivers/azure-storage-blob\",\n    \"azure-storage-table\": \"unstorage/drivers/azure-storage-table\",\n    \"azureStorageTable\": \"unstorage/drivers/azure-storage-table\",\n    \"capacitor-preferences\": \"unstorage/drivers/capacitor-preferences\",\n    \"capacitorPreferences\": \"unstorage/drivers/capacitor-preferences\",\n    \"cloudflare-kv-binding\": \"unstorage/drivers/cloudflare-kv-binding\",\n    \"cloudflareKVBinding\": \"unstorage/drivers/cloudflare-kv-binding\",\n    \"cloudflare-kv-http\": \"unstorage/drivers/cloudflare-kv-http\",\n    \"cloudflareKVHttp\": \"unstorage/drivers/cloudflare-kv-http\",\n    \"cloudflare-r2-binding\": \"unstorage/drivers/cloudflare-r2-binding\",\n    \"cloudflareR2Binding\": \"unstorage/drivers/cloudflare-r2-binding\",\n    \"db0\": \"unstorage/drivers/db0\",\n    \"deno-kv-node\": \"unstorage/drivers/deno-kv-node\",\n    \"denoKVNode\": \"unstorage/drivers/deno-kv-node\",\n    \"deno-kv\": \"unstorage/drivers/deno-kv\",\n    \"denoKV\": \"unstorage/drivers/deno-kv\",\n    \"fs-lite\": \"unstorage/drivers/fs-lite\",\n    \"fsLite\": \"unstorage/drivers/fs-lite\",\n    \"fs\": \"unstorage/drivers/fs\",\n    \"github\": \"unstorage/drivers/github\",\n    \"http\": \"unstorage/drivers/http\",\n    \"indexedb\": \"unstorage/drivers/indexedb\",\n    \"localstorage\": \"unstorage/drivers/localstorage\",\n    \"lru-cache\": \"unstorage/drivers/lru-cache\",\n    \"lruCache\": \"unstorage/drivers/lru-cache\",\n    \"memory\": \"unstorage/drivers/memory\",\n    \"mongodb\": \"unstorage/drivers/mongodb\",\n    \"netlify-blobs\": \"unstorage/drivers/netlify-blobs\",\n    \"netlifyBlobs\": \"unstorage/drivers/netlify-blobs\",\n    \"null\": \"unstorage/drivers/null\",\n    \"overlay\": \"unstorage/drivers/overlay\",\n    \"planetscale\": \"unstorage/drivers/planetscale\",\n    \"redis\": \"unstorage/drivers/redis\",\n    \"s3\": \"unstorage/drivers/s3\",\n    \"session-storage\": \"unstorage/drivers/session-storage\",\n    \"sessionStorage\": \"unstorage/drivers/session-storage\",\n    \"uploadthing\": \"unstorage/drivers/uploadthing\",\n    \"upstash\": \"unstorage/drivers/upstash\",\n    \"vercel-blob\": \"unstorage/drivers/vercel-blob\",\n    \"vercelBlob\": \"unstorage/drivers/vercel-blob\",\n    \"vercel-kv\": \"unstorage/drivers/vercel-kv\",\n    \"vercelKV\": \"unstorage/drivers/vercel-kv\"\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.mNKHTF5Y.mjs":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.mNKHTF5Y.mjs ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ normalizeKey),\n/* harmony export */   b: () => (/* binding */ asyncCall),\n/* harmony export */   c: () => (/* binding */ filterKeyByBase),\n/* harmony export */   d: () => (/* binding */ stringify),\n/* harmony export */   e: () => (/* binding */ deserializeRaw),\n/* harmony export */   f: () => (/* binding */ filterKeyByDepth),\n/* harmony export */   j: () => (/* binding */ joinKeys),\n/* harmony export */   n: () => (/* binding */ normalizeBaseKey),\n/* harmony export */   p: () => (/* binding */ prefixStorage),\n/* harmony export */   s: () => (/* binding */ serializeRaw)\n/* harmony export */ });\nfunction wrapToPromise(value) {\n    if (!value || typeof value.then !== \"function\") {\n        return Promise.resolve(value);\n    }\n    return value;\n}\nfunction asyncCall(function_, ...arguments_) {\n    try {\n        return wrapToPromise(function_(...arguments_));\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\nfunction isPrimitive(value) {\n    const type = typeof value;\n    return value === null || type !== \"object\" && type !== \"function\";\n}\nfunction isPureObject(value) {\n    const proto = Object.getPrototypeOf(value);\n    return !proto || proto.isPrototypeOf(Object);\n}\nfunction stringify(value) {\n    if (isPrimitive(value)) {\n        return String(value);\n    }\n    if (isPureObject(value) || Array.isArray(value)) {\n        return JSON.stringify(value);\n    }\n    if (typeof value.toJSON === \"function\") {\n        return stringify(value.toJSON());\n    }\n    throw new Error(\"[unstorage] Cannot stringify value!\");\n}\nconst BASE64_PREFIX = \"base64:\";\nfunction serializeRaw(value) {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return BASE64_PREFIX + base64Encode(value);\n}\nfunction deserializeRaw(value) {\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    if (!value.startsWith(BASE64_PREFIX)) {\n        return value;\n    }\n    return base64Decode(value.slice(BASE64_PREFIX.length));\n}\nfunction base64Decode(input) {\n    if (globalThis.Buffer) {\n        return Buffer.from(input, \"base64\");\n    }\n    return Uint8Array.from(globalThis.atob(input), (c)=>c.codePointAt(0));\n}\nfunction base64Encode(input) {\n    if (globalThis.Buffer) {\n        return Buffer.from(input).toString(\"base64\");\n    }\n    return globalThis.btoa(String.fromCodePoint(...input));\n}\nconst storageKeyProperties = [\n    \"has\",\n    \"hasItem\",\n    \"get\",\n    \"getItem\",\n    \"getItemRaw\",\n    \"set\",\n    \"setItem\",\n    \"setItemRaw\",\n    \"del\",\n    \"remove\",\n    \"removeItem\",\n    \"getMeta\",\n    \"setMeta\",\n    \"removeMeta\",\n    \"getKeys\",\n    \"clear\",\n    \"mount\",\n    \"unmount\"\n];\nfunction prefixStorage(storage, base) {\n    base = normalizeBaseKey(base);\n    if (!base) {\n        return storage;\n    }\n    const nsStorage = {\n        ...storage\n    };\n    for (const property of storageKeyProperties){\n        nsStorage[property] = (key = \"\", ...args)=>// @ts-ignore\n            storage[property](base + key, ...args);\n    }\n    nsStorage.getKeys = (key = \"\", ...arguments_)=>storage.getKeys(base + key, ...arguments_).then((keys)=>keys.map((key2)=>key2.slice(base.length)));\n    return nsStorage;\n}\nfunction normalizeKey(key) {\n    if (!key) {\n        return \"\";\n    }\n    return key.split(\"?\")[0]?.replace(/[/\\\\]/g, \":\").replace(/:+/g, \":\").replace(/^:|:$/g, \"\") || \"\";\n}\nfunction joinKeys(...keys) {\n    return normalizeKey(keys.join(\":\"));\n}\nfunction normalizeBaseKey(base) {\n    base = normalizeKey(base);\n    return base ? base + \":\" : \"\";\n}\nfunction filterKeyByDepth(key, depth) {\n    if (depth === void 0) {\n        return true;\n    }\n    let substrCount = 0;\n    let index = key.indexOf(\":\");\n    while(index > -1){\n        substrCount++;\n        index = key.indexOf(\":\", index + 1);\n    }\n    return substrCount <= depth;\n}\nfunction filterKeyByBase(key, base) {\n    if (base) {\n        return key.startsWith(base) && key[key.length - 1] !== \"$\";\n    }\n    return key[key.length - 1] !== \"$\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.mNKHTF5Y.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/modal-core/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@walletconnect/modal-core/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigCtrl: () => (/* binding */ ConfigCtrl),\n/* harmony export */   CoreUtil: () => (/* binding */ CoreUtil),\n/* harmony export */   EventsCtrl: () => (/* binding */ EventsCtrl),\n/* harmony export */   ExplorerCtrl: () => (/* binding */ ExplorerCtrl),\n/* harmony export */   ModalCtrl: () => (/* binding */ ModalCtrl),\n/* harmony export */   OptionsCtrl: () => (/* binding */ OptionsCtrl),\n/* harmony export */   RouterCtrl: () => (/* binding */ RouterCtrl),\n/* harmony export */   ThemeCtrl: () => (/* binding */ ThemeCtrl),\n/* harmony export */   ToastCtrl: () => (/* binding */ ToastCtrl)\n/* harmony export */ });\n/* harmony import */ var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! valtio/vanilla */ \"(ssr)/./node_modules/valtio/esm/vanilla.mjs\");\n\nconst state$7 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    history: [\n        \"ConnectWallet\"\n    ],\n    view: \"ConnectWallet\",\n    data: void 0\n});\nconst RouterCtrl = {\n    state: state$7,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$7, ()=>callback(state$7));\n    },\n    push (view, data) {\n        if (view !== state$7.view) {\n            state$7.view = view;\n            if (data) {\n                state$7.data = data;\n            }\n            state$7.history.push(view);\n        }\n    },\n    reset (view) {\n        state$7.view = view;\n        state$7.history = [\n            view\n        ];\n    },\n    replace (view) {\n        if (state$7.history.length > 1) {\n            state$7.history[state$7.history.length - 1] = view;\n            state$7.view = view;\n        }\n    },\n    goBack () {\n        if (state$7.history.length > 1) {\n            state$7.history.pop();\n            const [last] = state$7.history.slice(-1);\n            state$7.view = last;\n        }\n    },\n    setData (data) {\n        state$7.data = data;\n    }\n};\nconst CoreUtil = {\n    WALLETCONNECT_DEEPLINK_CHOICE: \"WALLETCONNECT_DEEPLINK_CHOICE\",\n    WCM_VERSION: \"WCM_VERSION\",\n    RECOMMENDED_WALLET_AMOUNT: 9,\n    isMobile () {\n        if (false) {}\n        return false;\n    },\n    isAndroid () {\n        return CoreUtil.isMobile() && navigator.userAgent.toLowerCase().includes(\"android\");\n    },\n    isIos () {\n        const ua = navigator.userAgent.toLowerCase();\n        return CoreUtil.isMobile() && (ua.includes(\"iphone\") || ua.includes(\"ipad\"));\n    },\n    isHttpUrl (url) {\n        return url.startsWith(\"http://\") || url.startsWith(\"https://\");\n    },\n    isArray (data) {\n        return Array.isArray(data) && data.length > 0;\n    },\n    isTelegram () {\n        return  false && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (0);\n    },\n    formatNativeUrl (appUrl, wcUri, name) {\n        if (CoreUtil.isHttpUrl(appUrl)) {\n            return this.formatUniversalUrl(appUrl, wcUri, name);\n        }\n        let safeAppUrl = appUrl;\n        if (!safeAppUrl.includes(\"://\")) {\n            safeAppUrl = appUrl.replaceAll(\"/\", \"\").replaceAll(\":\", \"\");\n            safeAppUrl = `${safeAppUrl}://`;\n        }\n        if (!safeAppUrl.endsWith(\"/\")) {\n            safeAppUrl = `${safeAppUrl}/`;\n        }\n        this.setWalletConnectDeepLink(safeAppUrl, name);\n        const encodedWcUrl = encodeURIComponent(wcUri);\n        return `${safeAppUrl}wc?uri=${encodedWcUrl}`;\n    },\n    formatUniversalUrl (appUrl, wcUri, name) {\n        if (!CoreUtil.isHttpUrl(appUrl)) {\n            return this.formatNativeUrl(appUrl, wcUri, name);\n        }\n        let safeAppUrl = appUrl;\n        if (safeAppUrl.startsWith(\"https://t.me\")) {\n            const formattedUri = Buffer.from(wcUri).toString(\"base64\").replace(/[=]/g, \"\");\n            if (safeAppUrl.endsWith(\"/\")) {\n                safeAppUrl = safeAppUrl.slice(0, -1);\n            }\n            this.setWalletConnectDeepLink(safeAppUrl, name);\n            const url = new URL(safeAppUrl);\n            url.searchParams.set(\"startapp\", formattedUri);\n            const link = url.toString();\n            return link;\n        }\n        if (!safeAppUrl.endsWith(\"/\")) {\n            safeAppUrl = `${safeAppUrl}/`;\n        }\n        this.setWalletConnectDeepLink(safeAppUrl, name);\n        const encodedWcUrl = encodeURIComponent(wcUri);\n        return `${safeAppUrl}wc?uri=${encodedWcUrl}`;\n    },\n    async wait (miliseconds) {\n        return new Promise((resolve)=>{\n            setTimeout(resolve, miliseconds);\n        });\n    },\n    openHref (href, target) {\n        const adjustedTarget = this.isTelegram() ? \"_blank\" : target;\n        window.open(href, adjustedTarget, \"noreferrer noopener\");\n    },\n    setWalletConnectDeepLink (href, name) {\n        try {\n            localStorage.setItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({\n                href,\n                name\n            }));\n        } catch (e) {\n            console.info(\"Unable to set WalletConnect deep link\");\n        }\n    },\n    setWalletConnectAndroidDeepLink (wcUri) {\n        try {\n            const [href] = wcUri.split(\"?\");\n            localStorage.setItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({\n                href,\n                name: \"Android\"\n            }));\n        } catch (e) {\n            console.info(\"Unable to set WalletConnect android deep link\");\n        }\n    },\n    removeWalletConnectDeepLink () {\n        try {\n            localStorage.removeItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE);\n        } catch (e) {\n            console.info(\"Unable to remove WalletConnect deep link\");\n        }\n    },\n    setModalVersionInStorage () {\n        try {\n            if (typeof localStorage !== \"undefined\") {\n                localStorage.setItem(CoreUtil.WCM_VERSION, \"2.7.0\");\n            }\n        } catch (e) {\n            console.info(\"Unable to set Web3Modal version in storage\");\n        }\n    },\n    getWalletRouterData () {\n        var _a;\n        const routerData = (_a = RouterCtrl.state.data) == null ? void 0 : _a.Wallet;\n        if (!routerData) {\n            throw new Error('Missing \"Wallet\" view data');\n        }\n        return routerData;\n    }\n};\nconst isEnabled = typeof location !== \"undefined\" && (location.hostname.includes(\"localhost\") || location.protocol.includes(\"https\"));\nconst state$6 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    enabled: isEnabled,\n    userSessionId: \"\",\n    events: [],\n    connectedWalletId: void 0\n});\nconst EventsCtrl = {\n    state: state$6,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$6.events, ()=>callback((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(state$6.events[state$6.events.length - 1])));\n    },\n    initialize () {\n        if (state$6.enabled && typeof (crypto == null ? void 0 : crypto.randomUUID) !== \"undefined\") {\n            state$6.userSessionId = crypto.randomUUID();\n        }\n    },\n    setConnectedWalletId (connectedWalletId) {\n        state$6.connectedWalletId = connectedWalletId;\n    },\n    click (data) {\n        if (state$6.enabled) {\n            const event = {\n                type: \"CLICK\",\n                name: data.name,\n                userSessionId: state$6.userSessionId,\n                timestamp: Date.now(),\n                data\n            };\n            state$6.events.push(event);\n        }\n    },\n    track (data) {\n        if (state$6.enabled) {\n            const event = {\n                type: \"TRACK\",\n                name: data.name,\n                userSessionId: state$6.userSessionId,\n                timestamp: Date.now(),\n                data\n            };\n            state$6.events.push(event);\n        }\n    },\n    view (data) {\n        if (state$6.enabled) {\n            const event = {\n                type: \"VIEW\",\n                name: data.name,\n                userSessionId: state$6.userSessionId,\n                timestamp: Date.now(),\n                data\n            };\n            state$6.events.push(event);\n        }\n    }\n};\nconst state$5 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    chains: void 0,\n    walletConnectUri: void 0,\n    isAuth: false,\n    isCustomDesktop: false,\n    isCustomMobile: false,\n    isDataLoaded: false,\n    isUiLoaded: false\n});\nconst OptionsCtrl = {\n    state: state$5,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$5, ()=>callback(state$5));\n    },\n    setChains (chains) {\n        state$5.chains = chains;\n    },\n    setWalletConnectUri (walletConnectUri) {\n        state$5.walletConnectUri = walletConnectUri;\n    },\n    setIsCustomDesktop (isCustomDesktop) {\n        state$5.isCustomDesktop = isCustomDesktop;\n    },\n    setIsCustomMobile (isCustomMobile) {\n        state$5.isCustomMobile = isCustomMobile;\n    },\n    setIsDataLoaded (isDataLoaded) {\n        state$5.isDataLoaded = isDataLoaded;\n    },\n    setIsUiLoaded (isUiLoaded) {\n        state$5.isUiLoaded = isUiLoaded;\n    },\n    setIsAuth (isAuth) {\n        state$5.isAuth = isAuth;\n    }\n};\nconst state$4 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    projectId: \"\",\n    mobileWallets: void 0,\n    desktopWallets: void 0,\n    walletImages: void 0,\n    chains: void 0,\n    enableAuthMode: false,\n    enableExplorer: true,\n    explorerExcludedWalletIds: void 0,\n    explorerRecommendedWalletIds: void 0,\n    termsOfServiceUrl: void 0,\n    privacyPolicyUrl: void 0\n});\nconst ConfigCtrl = {\n    state: state$4,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$4, ()=>callback(state$4));\n    },\n    setConfig (config) {\n        var _a, _b;\n        EventsCtrl.initialize();\n        OptionsCtrl.setChains(config.chains);\n        OptionsCtrl.setIsAuth(Boolean(config.enableAuthMode));\n        OptionsCtrl.setIsCustomMobile(Boolean((_a = config.mobileWallets) == null ? void 0 : _a.length));\n        OptionsCtrl.setIsCustomDesktop(Boolean((_b = config.desktopWallets) == null ? void 0 : _b.length));\n        CoreUtil.setModalVersionInStorage();\n        Object.assign(state$4, config);\n    }\n};\nvar __defProp$2 = Object.defineProperty;\nvar __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$2 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$2 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$2 = (obj, key, value)=>key in obj ? __defProp$2(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues$2 = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp$2.call(b, prop)) __defNormalProp$2(a, prop, b[prop]);\n    if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b)){\n        if (__propIsEnum$2.call(b, prop)) __defNormalProp$2(a, prop, b[prop]);\n    }\n    return a;\n};\nconst W3M_API = \"https://explorer-api.walletconnect.com\";\nconst SDK_TYPE = \"wcm\";\nconst SDK_VERSION = `js-${\"2.7.0\"}`;\nasync function fetchListings(endpoint, params) {\n    const allParams = __spreadValues$2({\n        sdkType: SDK_TYPE,\n        sdkVersion: SDK_VERSION\n    }, params);\n    const url = new URL(endpoint, W3M_API);\n    url.searchParams.append(\"projectId\", ConfigCtrl.state.projectId);\n    Object.entries(allParams).forEach(([key, value])=>{\n        if (value) {\n            url.searchParams.append(key, String(value));\n        }\n    });\n    const request = await fetch(url);\n    return request.json();\n}\nconst ExplorerUtil = {\n    async getDesktopListings (params) {\n        return fetchListings(\"/w3m/v1/getDesktopListings\", params);\n    },\n    async getMobileListings (params) {\n        return fetchListings(\"/w3m/v1/getMobileListings\", params);\n    },\n    async getInjectedListings (params) {\n        return fetchListings(\"/w3m/v1/getInjectedListings\", params);\n    },\n    async getAllListings (params) {\n        return fetchListings(\"/w3m/v1/getAllListings\", params);\n    },\n    getWalletImageUrl (imageId) {\n        return `${W3M_API}/w3m/v1/getWalletImage/${imageId}?projectId=${ConfigCtrl.state.projectId}&sdkType=${SDK_TYPE}&sdkVersion=${SDK_VERSION}`;\n    },\n    getAssetImageUrl (imageId) {\n        return `${W3M_API}/w3m/v1/getAssetImage/${imageId}?projectId=${ConfigCtrl.state.projectId}&sdkType=${SDK_TYPE}&sdkVersion=${SDK_VERSION}`;\n    }\n};\nvar __defProp$1 = Object.defineProperty;\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$1 = (obj, key, value)=>key in obj ? __defProp$1(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues$1 = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n    if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)){\n        if (__propIsEnum$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n    }\n    return a;\n};\nconst isMobile = CoreUtil.isMobile();\nconst state$3 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    wallets: {\n        listings: [],\n        total: 0,\n        page: 1\n    },\n    search: {\n        listings: [],\n        total: 0,\n        page: 1\n    },\n    recomendedWallets: []\n});\nconst ExplorerCtrl = {\n    state: state$3,\n    async getRecomendedWallets () {\n        const { explorerRecommendedWalletIds, explorerExcludedWalletIds } = ConfigCtrl.state;\n        if (explorerRecommendedWalletIds === \"NONE\" || explorerExcludedWalletIds === \"ALL\" && !explorerRecommendedWalletIds) {\n            return state$3.recomendedWallets;\n        }\n        if (CoreUtil.isArray(explorerRecommendedWalletIds)) {\n            const recommendedIds = explorerRecommendedWalletIds.join(\",\");\n            const params = {\n                recommendedIds\n            };\n            const { listings } = await ExplorerUtil.getAllListings(params);\n            const listingsArr = Object.values(listings);\n            listingsArr.sort((a, b)=>{\n                const aIndex = explorerRecommendedWalletIds.indexOf(a.id);\n                const bIndex = explorerRecommendedWalletIds.indexOf(b.id);\n                return aIndex - bIndex;\n            });\n            state$3.recomendedWallets = listingsArr;\n        } else {\n            const { chains, isAuth } = OptionsCtrl.state;\n            const chainsFilter = chains == null ? void 0 : chains.join(\",\");\n            const isExcluded = CoreUtil.isArray(explorerExcludedWalletIds);\n            const params = {\n                page: 1,\n                sdks: isAuth ? \"auth_v1\" : void 0,\n                entries: CoreUtil.RECOMMENDED_WALLET_AMOUNT,\n                chains: chainsFilter,\n                version: 2,\n                excludedIds: isExcluded ? explorerExcludedWalletIds.join(\",\") : void 0\n            };\n            const { listings } = isMobile ? await ExplorerUtil.getMobileListings(params) : await ExplorerUtil.getDesktopListings(params);\n            state$3.recomendedWallets = Object.values(listings);\n        }\n        return state$3.recomendedWallets;\n    },\n    async getWallets (params) {\n        const extendedParams = __spreadValues$1({}, params);\n        const { explorerRecommendedWalletIds, explorerExcludedWalletIds } = ConfigCtrl.state;\n        const { recomendedWallets } = state$3;\n        if (explorerExcludedWalletIds === \"ALL\") {\n            return state$3.wallets;\n        }\n        if (recomendedWallets.length) {\n            extendedParams.excludedIds = recomendedWallets.map((wallet)=>wallet.id).join(\",\");\n        } else if (CoreUtil.isArray(explorerRecommendedWalletIds)) {\n            extendedParams.excludedIds = explorerRecommendedWalletIds.join(\",\");\n        }\n        if (CoreUtil.isArray(explorerExcludedWalletIds)) {\n            extendedParams.excludedIds = [\n                extendedParams.excludedIds,\n                explorerExcludedWalletIds\n            ].filter(Boolean).join(\",\");\n        }\n        if (OptionsCtrl.state.isAuth) {\n            extendedParams.sdks = \"auth_v1\";\n        }\n        const { page, search } = params;\n        const { listings: listingsObj, total } = isMobile ? await ExplorerUtil.getMobileListings(extendedParams) : await ExplorerUtil.getDesktopListings(extendedParams);\n        const listings = Object.values(listingsObj);\n        const type = search ? \"search\" : \"wallets\";\n        state$3[type] = {\n            listings: [\n                ...state$3[type].listings,\n                ...listings\n            ],\n            total,\n            page: page != null ? page : 1\n        };\n        return {\n            listings,\n            total\n        };\n    },\n    getWalletImageUrl (imageId) {\n        return ExplorerUtil.getWalletImageUrl(imageId);\n    },\n    getAssetImageUrl (imageId) {\n        return ExplorerUtil.getAssetImageUrl(imageId);\n    },\n    resetSearch () {\n        state$3.search = {\n            listings: [],\n            total: 0,\n            page: 1\n        };\n    }\n};\nconst state$2 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    open: false\n});\nconst ModalCtrl = {\n    state: state$2,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$2, ()=>callback(state$2));\n    },\n    async open (options) {\n        return new Promise((resolve)=>{\n            const { isUiLoaded, isDataLoaded } = OptionsCtrl.state;\n            CoreUtil.removeWalletConnectDeepLink();\n            OptionsCtrl.setWalletConnectUri(options == null ? void 0 : options.uri);\n            OptionsCtrl.setChains(options == null ? void 0 : options.chains);\n            RouterCtrl.reset(\"ConnectWallet\");\n            if (isUiLoaded && isDataLoaded) {\n                state$2.open = true;\n                resolve();\n            } else {\n                const interval = setInterval(()=>{\n                    const opts = OptionsCtrl.state;\n                    if (opts.isUiLoaded && opts.isDataLoaded) {\n                        clearInterval(interval);\n                        state$2.open = true;\n                        resolve();\n                    }\n                }, 200);\n            }\n        });\n    },\n    close () {\n        state$2.open = false;\n    }\n};\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nfunction isDarkMode() {\n    return typeof matchMedia !== \"undefined\" && matchMedia(\"(prefers-color-scheme: dark)\").matches;\n}\nconst state$1 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    themeMode: isDarkMode() ? \"dark\" : \"light\"\n});\nconst ThemeCtrl = {\n    state: state$1,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$1, ()=>callback(state$1));\n    },\n    setThemeConfig (theme) {\n        const { themeMode, themeVariables } = theme;\n        if (themeMode) {\n            state$1.themeMode = themeMode;\n        }\n        if (themeVariables) {\n            state$1.themeVariables = __spreadValues({}, themeVariables);\n        }\n    }\n};\nconst state = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    open: false,\n    message: \"\",\n    variant: \"success\"\n});\nconst ToastCtrl = {\n    state,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state, ()=>callback(state));\n    },\n    openToast (message, variant) {\n        state.open = true;\n        state.message = message;\n        state.variant = variant;\n    },\n    closeToast () {\n        state.open = false;\n    }\n};\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/modal-core/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/modal/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@walletconnect/modal/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletConnectModal: () => (/* binding */ WalletConnectModal)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/modal-core */ \"(ssr)/./node_modules/@walletconnect/modal-core/dist/index.js\");\n\nclass WalletConnectModal {\n    constructor(config){\n        this.openModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ModalCtrl.open;\n        this.closeModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ModalCtrl.close;\n        this.subscribeModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ModalCtrl.subscribe;\n        this.setTheme = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ThemeCtrl.setThemeConfig;\n        _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ThemeCtrl.setThemeConfig(config);\n        _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ConfigCtrl.setConfig(config);\n        this.initUi();\n    }\n    async initUi() {\n        if (false) {}\n    }\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbW9kYWwvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwRjtBQUUxRixNQUFNSTtJQUNKQyxZQUFZQyxNQUFNLENBQUU7UUFDbEIsSUFBSSxDQUFDQyxTQUFTLEdBQUdQLGdFQUFTQSxDQUFDUSxJQUFJO1FBQy9CLElBQUksQ0FBQ0MsVUFBVSxHQUFHVCxnRUFBU0EsQ0FBQ1UsS0FBSztRQUNqQyxJQUFJLENBQUNDLGNBQWMsR0FBR1gsZ0VBQVNBLENBQUNZLFNBQVM7UUFDekMsSUFBSSxDQUFDQyxRQUFRLEdBQUdaLGdFQUFTQSxDQUFDYSxjQUFjO1FBQ3hDYixnRUFBU0EsQ0FBQ2EsY0FBYyxDQUFDUjtRQUN6QkosaUVBQVVBLENBQUNhLFNBQVMsQ0FBQ1Q7UUFDckIsSUFBSSxDQUFDVSxNQUFNO0lBQ2I7SUFDQSxNQUFNQSxTQUFTO1FBQ2IsSUFBSSxLQUE2QixFQUFFLEVBS2xDO0lBQ0g7QUFDRjtBQUU4QixDQUM5QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbW9kYWwvZGlzdC9pbmRleC5qcz9kZTFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZGFsQ3RybCwgVGhlbWVDdHJsLCBDb25maWdDdHJsLCBPcHRpb25zQ3RybCB9IGZyb20gJ0B3YWxsZXRjb25uZWN0L21vZGFsLWNvcmUnO1xuXG5jbGFzcyBXYWxsZXRDb25uZWN0TW9kYWwge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLm9wZW5Nb2RhbCA9IE1vZGFsQ3RybC5vcGVuO1xuICAgIHRoaXMuY2xvc2VNb2RhbCA9IE1vZGFsQ3RybC5jbG9zZTtcbiAgICB0aGlzLnN1YnNjcmliZU1vZGFsID0gTW9kYWxDdHJsLnN1YnNjcmliZTtcbiAgICB0aGlzLnNldFRoZW1lID0gVGhlbWVDdHJsLnNldFRoZW1lQ29uZmlnO1xuICAgIFRoZW1lQ3RybC5zZXRUaGVtZUNvbmZpZyhjb25maWcpO1xuICAgIENvbmZpZ0N0cmwuc2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy5pbml0VWkoKTtcbiAgfVxuICBhc3luYyBpbml0VWkoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGF3YWl0IGltcG9ydCgnQHdhbGxldGNvbm5lY3QvbW9kYWwtdWknKTtcbiAgICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIndjbS1tb2RhbFwiKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlZW5kXCIsIG1vZGFsKTtcbiAgICAgIE9wdGlvbnNDdHJsLnNldElzVWlMb2FkZWQodHJ1ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IFdhbGxldENvbm5lY3RNb2RhbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTW9kYWxDdHJsIiwiVGhlbWVDdHJsIiwiQ29uZmlnQ3RybCIsIk9wdGlvbnNDdHJsIiwiV2FsbGV0Q29ubmVjdE1vZGFsIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJvcGVuTW9kYWwiLCJvcGVuIiwiY2xvc2VNb2RhbCIsImNsb3NlIiwic3Vic2NyaWJlTW9kYWwiLCJzdWJzY3JpYmUiLCJzZXRUaGVtZSIsInNldFRoZW1lQ29uZmlnIiwic2V0Q29uZmlnIiwiaW5pdFVpIiwibW9kYWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50Iiwic2V0SXNVaUxvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/modal/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyToAddress: () => (/* binding */ publicKeyToAddress)\n/* harmony export */ });\n/* harmony import */ var _utils_address_getAddress_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/address/getAddress.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var _utils_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/hash/keccak256.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js\");\n\n\n/**\n * @description Converts an ECDSA public key to an address.\n *\n * @param publicKey The public key to convert.\n *\n * @returns The address.\n */ function publicKeyToAddress(publicKey) {\n    const address = (0,_utils_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(`0x${publicKey.substring(4)}`).substring(26);\n    return (0,_utils_address_getAddress_js__WEBPACK_IMPORTED_MODULE_1__.checksumAddress)(`0x${address}`);\n} //# sourceMappingURL=publicKeyToAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9hY2NvdW50cy91dGlscy9wdWJsaWNLZXlUb0FkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFFO0FBQ1Y7QUFDM0Q7Ozs7OztDQU1DLEdBQ00sU0FBU0UsbUJBQW1CQyxTQUFTO0lBQ3hDLE1BQU1DLFVBQVVILG1FQUFTQSxDQUFDLENBQUMsRUFBRSxFQUFFRSxVQUFVRSxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUVBLFNBQVMsQ0FBQztJQUNuRSxPQUFPTCw2RUFBZUEsQ0FBQyxDQUFDLEVBQUUsRUFBRUksUUFBUSxDQUFDO0FBQ3pDLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vYWNjb3VudHMvdXRpbHMvcHVibGljS2V5VG9BZGRyZXNzLmpzPzBhMDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2hlY2tzdW1BZGRyZXNzLCB9IGZyb20gJy4uLy4uL3V0aWxzL2FkZHJlc3MvZ2V0QWRkcmVzcy5qcyc7XG5pbXBvcnQgeyBrZWNjYWsyNTYsIH0gZnJvbSAnLi4vLi4vdXRpbHMvaGFzaC9rZWNjYWsyNTYuanMnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgYW4gRUNEU0EgcHVibGljIGtleSB0byBhbiBhZGRyZXNzLlxuICpcbiAqIEBwYXJhbSBwdWJsaWNLZXkgVGhlIHB1YmxpYyBrZXkgdG8gY29udmVydC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgYWRkcmVzcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1YmxpY0tleVRvQWRkcmVzcyhwdWJsaWNLZXkpIHtcbiAgICBjb25zdCBhZGRyZXNzID0ga2VjY2FrMjU2KGAweCR7cHVibGljS2V5LnN1YnN0cmluZyg0KX1gKS5zdWJzdHJpbmcoMjYpO1xuICAgIHJldHVybiBjaGVja3N1bUFkZHJlc3MoYDB4JHthZGRyZXNzfWApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGljS2V5VG9BZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6WyJjaGVja3N1bUFkZHJlc3MiLCJrZWNjYWsyNTYiLCJwdWJsaWNLZXlUb0FkZHJlc3MiLCJwdWJsaWNLZXkiLCJhZGRyZXNzIiwic3Vic3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidAddressError: () => (/* binding */ InvalidAddressError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n\nclass InvalidAddressError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ address }){\n        super(`Address \"${address}\" is invalid.`, {\n            metaMessages: [\n                \"- Address must be a hex value of 20 bytes (40 hex characters).\",\n                \"- Address must match its checksum counterpart.\"\n            ],\n            name: \"InvalidAddressError\"\n        });\n    }\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUMvQixNQUFNQyw0QkFBNEJELCtDQUFTQTtJQUM5Q0UsWUFBWSxFQUFFQyxPQUFPLEVBQUUsQ0FBRTtRQUNyQixLQUFLLENBQUMsQ0FBQyxTQUFTLEVBQUVBLFFBQVEsYUFBYSxDQUFDLEVBQUU7WUFDdENDLGNBQWM7Z0JBQ1Y7Z0JBQ0E7YUFDSDtZQUNEQyxNQUFNO1FBQ1Y7SUFDSjtBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vZXJyb3JzL2FkZHJlc3MuanM/YTIwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRXJyb3IgfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNsYXNzIEludmFsaWRBZGRyZXNzRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgYWRkcmVzcyB9KSB7XG4gICAgICAgIHN1cGVyKGBBZGRyZXNzIFwiJHthZGRyZXNzfVwiIGlzIGludmFsaWQuYCwge1xuICAgICAgICAgICAgbWV0YU1lc3NhZ2VzOiBbXG4gICAgICAgICAgICAgICAgJy0gQWRkcmVzcyBtdXN0IGJlIGEgaGV4IHZhbHVlIG9mIDIwIGJ5dGVzICg0MCBoZXggY2hhcmFjdGVycykuJyxcbiAgICAgICAgICAgICAgICAnLSBBZGRyZXNzIG11c3QgbWF0Y2ggaXRzIGNoZWNrc3VtIGNvdW50ZXJwYXJ0LicsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbmFtZTogJ0ludmFsaWRBZGRyZXNzRXJyb3InLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6WyJCYXNlRXJyb3IiLCJJbnZhbGlkQWRkcmVzc0Vycm9yIiwiY29uc3RydWN0b3IiLCJhZGRyZXNzIiwibWV0YU1lc3NhZ2VzIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseError: () => (/* binding */ BaseError),\n/* harmony export */   setErrorConfig: () => (/* binding */ setErrorConfig)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js\");\n\nlet errorConfig = {\n    getDocsUrl: ({ docsBaseUrl, docsPath = \"\", docsSlug })=>docsPath ? `${docsBaseUrl ?? \"https://viem.sh\"}${docsPath}${docsSlug ? `#${docsSlug}` : \"\"}` : undefined,\n    version: `viem@${_version_js__WEBPACK_IMPORTED_MODULE_0__.version}`\n};\nfunction setErrorConfig(config) {\n    errorConfig = config;\n}\nclass BaseError extends Error {\n    constructor(shortMessage, args = {}){\n        const details = (()=>{\n            if (args.cause instanceof BaseError) return args.cause.details;\n            if (args.cause?.message) return args.cause.message;\n            return args.details;\n        })();\n        const docsPath = (()=>{\n            if (args.cause instanceof BaseError) return args.cause.docsPath || args.docsPath;\n            return args.docsPath;\n        })();\n        const docsUrl = errorConfig.getDocsUrl?.({\n            ...args,\n            docsPath\n        });\n        const message = [\n            shortMessage || \"An error occurred.\",\n            \"\",\n            ...args.metaMessages ? [\n                ...args.metaMessages,\n                \"\"\n            ] : [],\n            ...docsUrl ? [\n                `Docs: ${docsUrl}`\n            ] : [],\n            ...details ? [\n                `Details: ${details}`\n            ] : [],\n            ...errorConfig.version ? [\n                `Version: ${errorConfig.version}`\n            ] : []\n        ].join(\"\\n\");\n        super(message, args.cause ? {\n            cause: args.cause\n        } : undefined);\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metaMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"shortMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"BaseError\"\n        });\n        this.details = details;\n        this.docsPath = docsPath;\n        this.metaMessages = args.metaMessages;\n        this.name = args.name ?? this.name;\n        this.shortMessage = shortMessage;\n        this.version = _version_js__WEBPACK_IMPORTED_MODULE_0__.version;\n    }\n    walk(fn) {\n        return walk(this, fn);\n    }\n}\nfunction walk(err, fn) {\n    if (fn?.(err)) return err;\n    if (err && typeof err === \"object\" && \"cause\" in err && err.cause !== undefined) return walk(err.cause, fn);\n    return fn ? null : err;\n} //# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvYmFzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUM7QUFDdkMsSUFBSUMsY0FBYztJQUNkQyxZQUFZLENBQUMsRUFBRUMsV0FBVyxFQUFFQyxXQUFXLEVBQUUsRUFBRUMsUUFBUSxFQUFHLEdBQUtELFdBQ3JELENBQUMsRUFBRUQsZUFBZSxrQkFBa0IsRUFBRUMsU0FBUyxFQUFFQyxXQUFXLENBQUMsQ0FBQyxFQUFFQSxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUMsR0FDakZDO0lBQ05OLFNBQVMsQ0FBQyxLQUFLLEVBQUVBLGdEQUFPQSxDQUFDLENBQUM7QUFDOUI7QUFDTyxTQUFTTyxlQUFlQyxNQUFNO0lBQ2pDUCxjQUFjTztBQUNsQjtBQUNPLE1BQU1DLGtCQUFrQkM7SUFDM0JDLFlBQVlDLFlBQVksRUFBRUMsT0FBTyxDQUFDLENBQUMsQ0FBRTtRQUNqQyxNQUFNQyxVQUFVLENBQUM7WUFDYixJQUFJRCxLQUFLRSxLQUFLLFlBQVlOLFdBQ3RCLE9BQU9JLEtBQUtFLEtBQUssQ0FBQ0QsT0FBTztZQUM3QixJQUFJRCxLQUFLRSxLQUFLLEVBQUVDLFNBQ1osT0FBT0gsS0FBS0UsS0FBSyxDQUFDQyxPQUFPO1lBQzdCLE9BQU9ILEtBQUtDLE9BQU87UUFDdkI7UUFDQSxNQUFNVixXQUFXLENBQUM7WUFDZCxJQUFJUyxLQUFLRSxLQUFLLFlBQVlOLFdBQ3RCLE9BQU9JLEtBQUtFLEtBQUssQ0FBQ1gsUUFBUSxJQUFJUyxLQUFLVCxRQUFRO1lBQy9DLE9BQU9TLEtBQUtULFFBQVE7UUFDeEI7UUFDQSxNQUFNYSxVQUFVaEIsWUFBWUMsVUFBVSxHQUFHO1lBQUUsR0FBR1csSUFBSTtZQUFFVDtRQUFTO1FBQzdELE1BQU1ZLFVBQVU7WUFDWkosZ0JBQWdCO1lBQ2hCO2VBQ0lDLEtBQUtLLFlBQVksR0FBRzttQkFBSUwsS0FBS0ssWUFBWTtnQkFBRTthQUFHLEdBQUcsRUFBRTtlQUNuREQsVUFBVTtnQkFBQyxDQUFDLE1BQU0sRUFBRUEsUUFBUSxDQUFDO2FBQUMsR0FBRyxFQUFFO2VBQ25DSCxVQUFVO2dCQUFDLENBQUMsU0FBUyxFQUFFQSxRQUFRLENBQUM7YUFBQyxHQUFHLEVBQUU7ZUFDdENiLFlBQVlELE9BQU8sR0FBRztnQkFBQyxDQUFDLFNBQVMsRUFBRUMsWUFBWUQsT0FBTyxDQUFDLENBQUM7YUFBQyxHQUFHLEVBQUU7U0FDckUsQ0FBQ21CLElBQUksQ0FBQztRQUNQLEtBQUssQ0FBQ0gsU0FBU0gsS0FBS0UsS0FBSyxHQUFHO1lBQUVBLE9BQU9GLEtBQUtFLEtBQUs7UUFBQyxJQUFJVDtRQUNwRGMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXO1lBQ25DQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO1lBQ3BDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVztZQUNuQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDWCxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDVixRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ2MsWUFBWSxHQUFHTCxLQUFLSyxZQUFZO1FBQ3JDLElBQUksQ0FBQ1EsSUFBSSxHQUFHYixLQUFLYSxJQUFJLElBQUksSUFBSSxDQUFDQSxJQUFJO1FBQ2xDLElBQUksQ0FBQ2QsWUFBWSxHQUFHQTtRQUNwQixJQUFJLENBQUNaLE9BQU8sR0FBR0EsZ0RBQU9BO0lBQzFCO0lBQ0EyQixLQUFLQyxFQUFFLEVBQUU7UUFDTCxPQUFPRCxLQUFLLElBQUksRUFBRUM7SUFDdEI7QUFDSjtBQUNBLFNBQVNELEtBQUtFLEdBQUcsRUFBRUQsRUFBRTtJQUNqQixJQUFJQSxLQUFLQyxNQUNMLE9BQU9BO0lBQ1gsSUFBSUEsT0FDQSxPQUFPQSxRQUFRLFlBQ2YsV0FBV0EsT0FDWEEsSUFBSWQsS0FBSyxLQUFLVCxXQUNkLE9BQU9xQixLQUFLRSxJQUFJZCxLQUFLLEVBQUVhO0lBQzNCLE9BQU9BLEtBQUssT0FBT0M7QUFDdkIsRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvYmFzZS5qcz81N2RiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24uanMnO1xubGV0IGVycm9yQ29uZmlnID0ge1xuICAgIGdldERvY3NVcmw6ICh7IGRvY3NCYXNlVXJsLCBkb2NzUGF0aCA9ICcnLCBkb2NzU2x1ZywgfSkgPT4gZG9jc1BhdGhcbiAgICAgICAgPyBgJHtkb2NzQmFzZVVybCA/PyAnaHR0cHM6Ly92aWVtLnNoJ30ke2RvY3NQYXRofSR7ZG9jc1NsdWcgPyBgIyR7ZG9jc1NsdWd9YCA6ICcnfWBcbiAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgdmVyc2lvbjogYHZpZW1AJHt2ZXJzaW9ufWAsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVycm9yQ29uZmlnKGNvbmZpZykge1xuICAgIGVycm9yQ29uZmlnID0gY29uZmlnO1xufVxuZXhwb3J0IGNsYXNzIEJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihzaG9ydE1lc3NhZ2UsIGFyZ3MgPSB7fSkge1xuICAgICAgICBjb25zdCBkZXRhaWxzID0gKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChhcmdzLmNhdXNlIGluc3RhbmNlb2YgQmFzZUVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBhcmdzLmNhdXNlLmRldGFpbHM7XG4gICAgICAgICAgICBpZiAoYXJncy5jYXVzZT8ubWVzc2FnZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJncy5jYXVzZS5tZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3MuZGV0YWlscztcbiAgICAgICAgfSkoKTtcbiAgICAgICAgY29uc3QgZG9jc1BhdGggPSAoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGFyZ3MuY2F1c2UgaW5zdGFuY2VvZiBCYXNlRXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MuY2F1c2UuZG9jc1BhdGggfHwgYXJncy5kb2NzUGF0aDtcbiAgICAgICAgICAgIHJldHVybiBhcmdzLmRvY3NQYXRoO1xuICAgICAgICB9KSgpO1xuICAgICAgICBjb25zdCBkb2NzVXJsID0gZXJyb3JDb25maWcuZ2V0RG9jc1VybD8uKHsgLi4uYXJncywgZG9jc1BhdGggfSk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBbXG4gICAgICAgICAgICBzaG9ydE1lc3NhZ2UgfHwgJ0FuIGVycm9yIG9jY3VycmVkLicsXG4gICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIC4uLihhcmdzLm1ldGFNZXNzYWdlcyA/IFsuLi5hcmdzLm1ldGFNZXNzYWdlcywgJyddIDogW10pLFxuICAgICAgICAgICAgLi4uKGRvY3NVcmwgPyBbYERvY3M6ICR7ZG9jc1VybH1gXSA6IFtdKSxcbiAgICAgICAgICAgIC4uLihkZXRhaWxzID8gW2BEZXRhaWxzOiAke2RldGFpbHN9YF0gOiBbXSksXG4gICAgICAgICAgICAuLi4oZXJyb3JDb25maWcudmVyc2lvbiA/IFtgVmVyc2lvbjogJHtlcnJvckNvbmZpZy52ZXJzaW9ufWBdIDogW10pLFxuICAgICAgICBdLmpvaW4oJ1xcbicpO1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBhcmdzLmNhdXNlID8geyBjYXVzZTogYXJncy5jYXVzZSB9IDogdW5kZWZpbmVkKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGV0YWlsc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkb2NzUGF0aFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZXRhTWVzc2FnZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2hvcnRNZXNzYWdlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInZlcnNpb25cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ0Jhc2VFcnJvcidcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IGRldGFpbHM7XG4gICAgICAgIHRoaXMuZG9jc1BhdGggPSBkb2NzUGF0aDtcbiAgICAgICAgdGhpcy5tZXRhTWVzc2FnZXMgPSBhcmdzLm1ldGFNZXNzYWdlcztcbiAgICAgICAgdGhpcy5uYW1lID0gYXJncy5uYW1lID8/IHRoaXMubmFtZTtcbiAgICAgICAgdGhpcy5zaG9ydE1lc3NhZ2UgPSBzaG9ydE1lc3NhZ2U7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgfVxuICAgIHdhbGsoZm4pIHtcbiAgICAgICAgcmV0dXJuIHdhbGsodGhpcywgZm4pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHdhbGsoZXJyLCBmbikge1xuICAgIGlmIChmbj8uKGVycikpXG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgaWYgKGVyciAmJlxuICAgICAgICB0eXBlb2YgZXJyID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAnY2F1c2UnIGluIGVyciAmJlxuICAgICAgICBlcnIuY2F1c2UgIT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHdhbGsoZXJyLmNhdXNlLCBmbik7XG4gICAgcmV0dXJuIGZuID8gbnVsbCA6IGVycjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwIl0sIm5hbWVzIjpbInZlcnNpb24iLCJlcnJvckNvbmZpZyIsImdldERvY3NVcmwiLCJkb2NzQmFzZVVybCIsImRvY3NQYXRoIiwiZG9jc1NsdWciLCJ1bmRlZmluZWQiLCJzZXRFcnJvckNvbmZpZyIsImNvbmZpZyIsIkJhc2VFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJzaG9ydE1lc3NhZ2UiLCJhcmdzIiwiZGV0YWlscyIsImNhdXNlIiwibWVzc2FnZSIsImRvY3NVcmwiLCJtZXRhTWVzc2FnZXMiLCJqb2luIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsIm5hbWUiLCJ3YWxrIiwiZm4iLCJlcnIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidBytesLengthError: () => (/* binding */ InvalidBytesLengthError),\n/* harmony export */   SizeExceedsPaddingSizeError: () => (/* binding */ SizeExceedsPaddingSizeError),\n/* harmony export */   SliceOffsetOutOfBoundsError: () => (/* binding */ SliceOffsetOutOfBoundsError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n\nclass SliceOffsetOutOfBoundsError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ offset, position, size }){\n        super(`Slice ${position === \"start\" ? \"starting\" : \"ending\"} at offset \"${offset}\" is out-of-bounds (size: ${size}).`, {\n            name: \"SliceOffsetOutOfBoundsError\"\n        });\n    }\n}\nclass SizeExceedsPaddingSizeError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ size, targetSize, type }){\n        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`, {\n            name: \"SizeExceedsPaddingSizeError\"\n        });\n    }\n}\nclass InvalidBytesLengthError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ size, targetSize, type }){\n        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`, {\n            name: \"InvalidBytesLengthError\"\n        });\n    }\n} //# sourceMappingURL=data.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNDO0FBQy9CLE1BQU1DLG9DQUFvQ0QsK0NBQVNBO0lBQ3RERSxZQUFZLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUcsQ0FBRTtRQUNyQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUVELGFBQWEsVUFBVSxhQUFhLFNBQVMsWUFBWSxFQUFFRCxPQUFPLDBCQUEwQixFQUFFRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1lBQUVDLE1BQU07UUFBOEI7SUFDaks7QUFDSjtBQUNPLE1BQU1DLG9DQUFvQ1AsK0NBQVNBO0lBQ3RERSxZQUFZLEVBQUVHLElBQUksRUFBRUcsVUFBVSxFQUFFQyxJQUFJLEVBQUcsQ0FBRTtRQUNyQyxLQUFLLENBQUMsQ0FBQyxFQUFFQSxLQUFLQyxNQUFNLENBQUMsR0FBR0MsV0FBVyxHQUFHLEVBQUVGLEtBQ25DRyxLQUFLLENBQUMsR0FDTkMsV0FBVyxHQUFHLE9BQU8sRUFBRVIsS0FBSyx3QkFBd0IsRUFBRUcsV0FBVyxFQUFFLENBQUMsRUFBRTtZQUFFRixNQUFNO1FBQThCO0lBQ3JIO0FBQ0o7QUFDTyxNQUFNUSxnQ0FBZ0NkLCtDQUFTQTtJQUNsREUsWUFBWSxFQUFFRyxJQUFJLEVBQUVHLFVBQVUsRUFBRUMsSUFBSSxFQUFHLENBQUU7UUFDckMsS0FBSyxDQUFDLENBQUMsRUFBRUEsS0FBS0MsTUFBTSxDQUFDLEdBQUdDLFdBQVcsR0FBRyxFQUFFRixLQUNuQ0csS0FBSyxDQUFDLEdBQ05DLFdBQVcsR0FBRyxtQkFBbUIsRUFBRUwsV0FBVyxDQUFDLEVBQUVDLEtBQUssY0FBYyxFQUFFSixLQUFLLENBQUMsRUFBRUksS0FBSyxNQUFNLENBQUMsRUFBRTtZQUFFSCxNQUFNO1FBQTBCO0lBQ3ZJO0FBQ0osRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvZGF0YS5qcz84MDM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VFcnJvciB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY2xhc3MgU2xpY2VPZmZzZXRPdXRPZkJvdW5kc0Vycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IG9mZnNldCwgcG9zaXRpb24sIHNpemUsIH0pIHtcbiAgICAgICAgc3VwZXIoYFNsaWNlICR7cG9zaXRpb24gPT09ICdzdGFydCcgPyAnc3RhcnRpbmcnIDogJ2VuZGluZyd9IGF0IG9mZnNldCBcIiR7b2Zmc2V0fVwiIGlzIG91dC1vZi1ib3VuZHMgKHNpemU6ICR7c2l6ZX0pLmAsIHsgbmFtZTogJ1NsaWNlT2Zmc2V0T3V0T2ZCb3VuZHNFcnJvcicgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFNpemVFeGNlZWRzUGFkZGluZ1NpemVFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBzaXplLCB0YXJnZXRTaXplLCB0eXBlLCB9KSB7XG4gICAgICAgIHN1cGVyKGAke3R5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCl9JHt0eXBlXG4gICAgICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpfSBzaXplICgke3NpemV9KSBleGNlZWRzIHBhZGRpbmcgc2l6ZSAoJHt0YXJnZXRTaXplfSkuYCwgeyBuYW1lOiAnU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yJyB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZEJ5dGVzTGVuZ3RoRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgc2l6ZSwgdGFyZ2V0U2l6ZSwgdHlwZSwgfSkge1xuICAgICAgICBzdXBlcihgJHt0eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpfSR7dHlwZVxuICAgICAgICAgICAgLnNsaWNlKDEpXG4gICAgICAgICAgICAudG9Mb3dlckNhc2UoKX0gaXMgZXhwZWN0ZWQgdG8gYmUgJHt0YXJnZXRTaXplfSAke3R5cGV9IGxvbmcsIGJ1dCBpcyAke3NpemV9ICR7dHlwZX0gbG9uZy5gLCB7IG5hbWU6ICdJbnZhbGlkQnl0ZXNMZW5ndGhFcnJvcicgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YS5qcy5tYXAiXSwibmFtZXMiOlsiQmFzZUVycm9yIiwiU2xpY2VPZmZzZXRPdXRPZkJvdW5kc0Vycm9yIiwiY29uc3RydWN0b3IiLCJvZmZzZXQiLCJwb3NpdGlvbiIsInNpemUiLCJuYW1lIiwiU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yIiwidGFyZ2V0U2l6ZSIsInR5cGUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwidG9Mb3dlckNhc2UiLCJJbnZhbGlkQnl0ZXNMZW5ndGhFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntegerOutOfRangeError: () => (/* binding */ IntegerOutOfRangeError),\n/* harmony export */   InvalidBytesBooleanError: () => (/* binding */ InvalidBytesBooleanError),\n/* harmony export */   InvalidHexBooleanError: () => (/* binding */ InvalidHexBooleanError),\n/* harmony export */   InvalidHexValueError: () => (/* binding */ InvalidHexValueError),\n/* harmony export */   SizeOverflowError: () => (/* binding */ SizeOverflowError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n\nclass IntegerOutOfRangeError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ max, min, signed, size, value }){\n        super(`Number \"${value}\" is not in safe ${size ? `${size * 8}-bit ${signed ? \"signed\" : \"unsigned\"} ` : \"\"}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`, {\n            name: \"IntegerOutOfRangeError\"\n        });\n    }\n}\nclass InvalidBytesBooleanError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(bytes){\n        super(`Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`, {\n            name: \"InvalidBytesBooleanError\"\n        });\n    }\n}\nclass InvalidHexBooleanError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(hex){\n        super(`Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`, {\n            name: \"InvalidHexBooleanError\"\n        });\n    }\n}\nclass InvalidHexValueError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(value){\n        super(`Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`, {\n            name: \"InvalidHexValueError\"\n        });\n    }\n}\nclass SizeOverflowError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ givenSize, maxSize }){\n        super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`, {\n            name: \"SizeOverflowError\"\n        });\n    }\n} //# sourceMappingURL=encoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvZW5jb2RpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXNDO0FBQy9CLE1BQU1DLCtCQUErQkQsK0NBQVNBO0lBQ2pERSxZQUFZLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFHLENBQUU7UUFDNUMsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFQSxNQUFNLGlCQUFpQixFQUFFRCxPQUFPLENBQUMsRUFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRUQsU0FBUyxXQUFXLFdBQVcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxjQUFjLEVBQUVGLE1BQU0sQ0FBQyxDQUFDLEVBQUVDLElBQUksSUFBSSxFQUFFRCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUFFSSxNQUFNO1FBQXlCO0lBQ2pOO0FBQ0o7QUFDTyxNQUFNQyxpQ0FBaUNULCtDQUFTQTtJQUNuREUsWUFBWVEsS0FBSyxDQUFFO1FBQ2YsS0FBSyxDQUFDLENBQUMsYUFBYSxFQUFFQSxNQUFNLDhGQUE4RixDQUFDLEVBQUU7WUFDekhGLE1BQU07UUFDVjtJQUNKO0FBQ0o7QUFDTyxNQUFNRywrQkFBK0JYLCtDQUFTQTtJQUNqREUsWUFBWVUsR0FBRyxDQUFFO1FBQ2IsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFQSxJQUFJLDhFQUE4RSxDQUFDLEVBQUU7WUFBRUosTUFBTTtRQUF5QjtJQUM5STtBQUNKO0FBQ08sTUFBTUssNkJBQTZCYiwrQ0FBU0E7SUFDL0NFLFlBQVlLLEtBQUssQ0FBRTtRQUNmLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRUEsTUFBTSxvQkFBb0IsRUFBRUEsTUFBTU8sTUFBTSxDQUFDLDZCQUE2QixDQUFDLEVBQUU7WUFBRU4sTUFBTTtRQUF1QjtJQUNoSTtBQUNKO0FBQ08sTUFBTU8sMEJBQTBCZiwrQ0FBU0E7SUFDNUNFLFlBQVksRUFBRWMsU0FBUyxFQUFFQyxPQUFPLEVBQUUsQ0FBRTtRQUNoQyxLQUFLLENBQUMsQ0FBQyxtQkFBbUIsRUFBRUEsUUFBUSxvQkFBb0IsRUFBRUQsVUFBVSxPQUFPLENBQUMsRUFBRTtZQUFFUixNQUFNO1FBQW9CO0lBQzlHO0FBQ0osRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvZW5jb2RpbmcuanM/ZjcyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRXJyb3IgfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNsYXNzIEludGVnZXJPdXRPZlJhbmdlRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgbWF4LCBtaW4sIHNpZ25lZCwgc2l6ZSwgdmFsdWUsIH0pIHtcbiAgICAgICAgc3VwZXIoYE51bWJlciBcIiR7dmFsdWV9XCIgaXMgbm90IGluIHNhZmUgJHtzaXplID8gYCR7c2l6ZSAqIDh9LWJpdCAke3NpZ25lZCA/ICdzaWduZWQnIDogJ3Vuc2lnbmVkJ30gYCA6ICcnfWludGVnZXIgcmFuZ2UgJHttYXggPyBgKCR7bWlufSB0byAke21heH0pYCA6IGAoYWJvdmUgJHttaW59KWB9YCwgeyBuYW1lOiAnSW50ZWdlck91dE9mUmFuZ2VFcnJvcicgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRCeXRlc0Jvb2xlYW5FcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoYnl0ZXMpIHtcbiAgICAgICAgc3VwZXIoYEJ5dGVzIHZhbHVlIFwiJHtieXRlc31cIiBpcyBub3QgYSB2YWxpZCBib29sZWFuLiBUaGUgYnl0ZXMgYXJyYXkgbXVzdCBjb250YWluIGEgc2luZ2xlIGJ5dGUgb2YgZWl0aGVyIGEgMCBvciAxIHZhbHVlLmAsIHtcbiAgICAgICAgICAgIG5hbWU6ICdJbnZhbGlkQnl0ZXNCb29sZWFuRXJyb3InLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZEhleEJvb2xlYW5FcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoaGV4KSB7XG4gICAgICAgIHN1cGVyKGBIZXggdmFsdWUgXCIke2hleH1cIiBpcyBub3QgYSB2YWxpZCBib29sZWFuLiBUaGUgaGV4IHZhbHVlIG11c3QgYmUgXCIweDBcIiAoZmFsc2UpIG9yIFwiMHgxXCIgKHRydWUpLmAsIHsgbmFtZTogJ0ludmFsaWRIZXhCb29sZWFuRXJyb3InIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkSGV4VmFsdWVFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgc3VwZXIoYEhleCB2YWx1ZSBcIiR7dmFsdWV9XCIgaXMgYW4gb2RkIGxlbmd0aCAoJHt2YWx1ZS5sZW5ndGh9KS4gSXQgbXVzdCBiZSBhbiBldmVuIGxlbmd0aC5gLCB7IG5hbWU6ICdJbnZhbGlkSGV4VmFsdWVFcnJvcicgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFNpemVPdmVyZmxvd0Vycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGdpdmVuU2l6ZSwgbWF4U2l6ZSB9KSB7XG4gICAgICAgIHN1cGVyKGBTaXplIGNhbm5vdCBleGNlZWQgJHttYXhTaXplfSBieXRlcy4gR2l2ZW4gc2l6ZTogJHtnaXZlblNpemV9IGJ5dGVzLmAsIHsgbmFtZTogJ1NpemVPdmVyZmxvd0Vycm9yJyB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmNvZGluZy5qcy5tYXAiXSwibmFtZXMiOlsiQmFzZUVycm9yIiwiSW50ZWdlck91dE9mUmFuZ2VFcnJvciIsImNvbnN0cnVjdG9yIiwibWF4IiwibWluIiwic2lnbmVkIiwic2l6ZSIsInZhbHVlIiwibmFtZSIsIkludmFsaWRCeXRlc0Jvb2xlYW5FcnJvciIsImJ5dGVzIiwiSW52YWxpZEhleEJvb2xlYW5FcnJvciIsImhleCIsIkludmFsaWRIZXhWYWx1ZUVycm9yIiwibGVuZ3RoIiwiU2l6ZU92ZXJmbG93RXJyb3IiLCJnaXZlblNpemUiLCJtYXhTaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = \"2.23.2\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxTQUFTLENBQ2hDLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy92ZXJzaW9uLmpzPzFiY2UiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnMi4yMy4yJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checksumAddress: () => (/* binding */ checksumAddress),\n/* harmony export */   getAddress: () => (/* binding */ getAddress)\n/* harmony export */ });\n/* harmony import */ var _errors_address_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../errors/address.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js\");\n/* harmony import */ var _encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/toBytes.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var _hash_keccak256_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hash/keccak256.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js\");\n/* harmony import */ var _lru_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lru.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js\");\n/* harmony import */ var _isAddress_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isAddress.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js\");\n\n\n\n\n\nconst checksumAddressCache = /*#__PURE__*/ new _lru_js__WEBPACK_IMPORTED_MODULE_0__.LruMap(8192);\nfunction checksumAddress(address_, /**\n * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n * that relies on EIP-55 checksum encoding (checksum without chainId).\n *\n * It is highly recommended to not use this feature unless you\n * know what you are doing.\n *\n * See more: https://github.com/ethereum/EIPs/issues/1121\n */ chainId) {\n    if (checksumAddressCache.has(`${address_}.${chainId}`)) return checksumAddressCache.get(`${address_}.${chainId}`);\n    const hexAddress = chainId ? `${chainId}${address_.toLowerCase()}` : address_.substring(2).toLowerCase();\n    const hash = (0,_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.stringToBytes)(hexAddress), \"bytes\");\n    const address = (chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress).split(\"\");\n    for(let i = 0; i < 40; i += 2){\n        if (hash[i >> 1] >> 4 >= 8 && address[i]) {\n            address[i] = address[i].toUpperCase();\n        }\n        if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\n            address[i + 1] = address[i + 1].toUpperCase();\n        }\n    }\n    const result = `0x${address.join(\"\")}`;\n    checksumAddressCache.set(`${address_}.${chainId}`, result);\n    return result;\n}\nfunction getAddress(address, /**\n * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n * that relies on EIP-55 checksum encoding (checksum without chainId).\n *\n * It is highly recommended to not use this feature unless you\n * know what you are doing.\n *\n * See more: https://github.com/ethereum/EIPs/issues/1121\n */ chainId) {\n    if (!(0,_isAddress_js__WEBPACK_IMPORTED_MODULE_3__.isAddress)(address, {\n        strict: false\n    })) throw new _errors_address_js__WEBPACK_IMPORTED_MODULE_4__.InvalidAddressError({\n        address\n    });\n    return checksumAddress(address, chainId);\n} //# sourceMappingURL=getAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9hZGRyZXNzL2dldEFkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE4RDtBQUNOO0FBQ1A7QUFDZDtBQUNRO0FBQzNDLE1BQU1LLHVCQUF1QixXQUFXLEdBQUcsSUFBSUYsMkNBQU1BLENBQUM7QUFDL0MsU0FBU0csZ0JBQWdCQyxRQUFRLEVBQ3hDOzs7Ozs7Ozs7Q0FTQyxHQUNEQyxPQUFPO0lBQ0gsSUFBSUgscUJBQXFCSSxHQUFHLENBQUMsQ0FBQyxFQUFFRixTQUFTLENBQUMsRUFBRUMsUUFBUSxDQUFDLEdBQ2pELE9BQU9ILHFCQUFxQkssR0FBRyxDQUFDLENBQUMsRUFBRUgsU0FBUyxDQUFDLEVBQUVDLFFBQVEsQ0FBQztJQUM1RCxNQUFNRyxhQUFhSCxVQUNiLENBQUMsRUFBRUEsUUFBUSxFQUFFRCxTQUFTSyxXQUFXLEdBQUcsQ0FBQyxHQUNyQ0wsU0FBU00sU0FBUyxDQUFDLEdBQUdELFdBQVc7SUFDdkMsTUFBTUUsT0FBT1osNkRBQVNBLENBQUNELG1FQUFhQSxDQUFDVSxhQUFhO0lBQ2xELE1BQU1JLFVBQVUsQ0FBQ1AsVUFBVUcsV0FBV0UsU0FBUyxDQUFDLENBQUMsRUFBRUwsUUFBUSxFQUFFLENBQUMsQ0FBQ1EsTUFBTSxJQUFJTCxVQUFTLEVBQUdNLEtBQUssQ0FBQztJQUMzRixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxJQUFJQSxLQUFLLEVBQUc7UUFDNUIsSUFBSUosSUFBSSxDQUFDSSxLQUFLLEVBQUUsSUFBSSxLQUFLLEtBQUtILE9BQU8sQ0FBQ0csRUFBRSxFQUFFO1lBQ3RDSCxPQUFPLENBQUNHLEVBQUUsR0FBR0gsT0FBTyxDQUFDRyxFQUFFLENBQUNDLFdBQVc7UUFDdkM7UUFDQSxJQUFJLENBQUNMLElBQUksQ0FBQ0ksS0FBSyxFQUFFLEdBQUcsSUFBRyxLQUFNLEtBQUtILE9BQU8sQ0FBQ0csSUFBSSxFQUFFLEVBQUU7WUFDOUNILE9BQU8sQ0FBQ0csSUFBSSxFQUFFLEdBQUdILE9BQU8sQ0FBQ0csSUFBSSxFQUFFLENBQUNDLFdBQVc7UUFDL0M7SUFDSjtJQUNBLE1BQU1DLFNBQVMsQ0FBQyxFQUFFLEVBQUVMLFFBQVFNLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDdENoQixxQkFBcUJpQixHQUFHLENBQUMsQ0FBQyxFQUFFZixTQUFTLENBQUMsRUFBRUMsUUFBUSxDQUFDLEVBQUVZO0lBQ25ELE9BQU9BO0FBQ1g7QUFDTyxTQUFTRyxXQUFXUixPQUFPLEVBQ2xDOzs7Ozs7Ozs7Q0FTQyxHQUNEUCxPQUFPO0lBQ0gsSUFBSSxDQUFDSix3REFBU0EsQ0FBQ1csU0FBUztRQUFFUyxRQUFRO0lBQU0sSUFDcEMsTUFBTSxJQUFJeEIsbUVBQW1CQSxDQUFDO1FBQUVlO0lBQVE7SUFDNUMsT0FBT1QsZ0JBQWdCUyxTQUFTUDtBQUNwQyxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2FkZHJlc3MvZ2V0QWRkcmVzcy5qcz84MjRjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEludmFsaWRBZGRyZXNzRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvcnMvYWRkcmVzcy5qcyc7XG5pbXBvcnQgeyBzdHJpbmdUb0J5dGVzLCB9IGZyb20gJy4uL2VuY29kaW5nL3RvQnl0ZXMuanMnO1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSAnLi4vaGFzaC9rZWNjYWsyNTYuanMnO1xuaW1wb3J0IHsgTHJ1TWFwIH0gZnJvbSAnLi4vbHJ1LmpzJztcbmltcG9ydCB7IGlzQWRkcmVzcyB9IGZyb20gJy4vaXNBZGRyZXNzLmpzJztcbmNvbnN0IGNoZWNrc3VtQWRkcmVzc0NhY2hlID0gLyojX19QVVJFX18qLyBuZXcgTHJ1TWFwKDgxOTIpO1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrc3VtQWRkcmVzcyhhZGRyZXNzXywgXG4vKipcbiAqIFdhcm5pbmc6IEVJUC0xMTkxIGNoZWNrc3VtIGFkZHJlc3NlcyBhcmUgZ2VuZXJhbGx5IG5vdCBiYWNrd2FyZHMgY29tcGF0aWJsZSB3aXRoIHRoZVxuICogd2lkZXIgRXRoZXJldW0gZWNvc3lzdGVtLCBtZWFuaW5nIGl0IHdpbGwgYnJlYWsgd2hlbiB2YWxpZGF0ZWQgYWdhaW5zdCBhbiBhcHBsaWNhdGlvbi90b29sXG4gKiB0aGF0IHJlbGllcyBvbiBFSVAtNTUgY2hlY2tzdW0gZW5jb2RpbmcgKGNoZWNrc3VtIHdpdGhvdXQgY2hhaW5JZCkuXG4gKlxuICogSXQgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHRvIG5vdCB1c2UgdGhpcyBmZWF0dXJlIHVubGVzcyB5b3VcbiAqIGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLlxuICpcbiAqIFNlZSBtb3JlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTEyMVxuICovXG5jaGFpbklkKSB7XG4gICAgaWYgKGNoZWNrc3VtQWRkcmVzc0NhY2hlLmhhcyhgJHthZGRyZXNzX30uJHtjaGFpbklkfWApKVxuICAgICAgICByZXR1cm4gY2hlY2tzdW1BZGRyZXNzQ2FjaGUuZ2V0KGAke2FkZHJlc3NffS4ke2NoYWluSWR9YCk7XG4gICAgY29uc3QgaGV4QWRkcmVzcyA9IGNoYWluSWRcbiAgICAgICAgPyBgJHtjaGFpbklkfSR7YWRkcmVzc18udG9Mb3dlckNhc2UoKX1gXG4gICAgICAgIDogYWRkcmVzc18uc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgaGFzaCA9IGtlY2NhazI1NihzdHJpbmdUb0J5dGVzKGhleEFkZHJlc3MpLCAnYnl0ZXMnKTtcbiAgICBjb25zdCBhZGRyZXNzID0gKGNoYWluSWQgPyBoZXhBZGRyZXNzLnN1YnN0cmluZyhgJHtjaGFpbklkfTB4YC5sZW5ndGgpIDogaGV4QWRkcmVzcykuc3BsaXQoJycpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDA7IGkgKz0gMikge1xuICAgICAgICBpZiAoaGFzaFtpID4+IDFdID4+IDQgPj0gOCAmJiBhZGRyZXNzW2ldKSB7XG4gICAgICAgICAgICBhZGRyZXNzW2ldID0gYWRkcmVzc1tpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaGFzaFtpID4+IDFdICYgMHgwZikgPj0gOCAmJiBhZGRyZXNzW2kgKyAxXSkge1xuICAgICAgICAgICAgYWRkcmVzc1tpICsgMV0gPSBhZGRyZXNzW2kgKyAxXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGAweCR7YWRkcmVzcy5qb2luKCcnKX1gO1xuICAgIGNoZWNrc3VtQWRkcmVzc0NhY2hlLnNldChgJHthZGRyZXNzX30uJHtjaGFpbklkfWAsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBZGRyZXNzKGFkZHJlc3MsIFxuLyoqXG4gKiBXYXJuaW5nOiBFSVAtMTE5MSBjaGVja3N1bSBhZGRyZXNzZXMgYXJlIGdlbmVyYWxseSBub3QgYmFja3dhcmRzIGNvbXBhdGlibGUgd2l0aCB0aGVcbiAqIHdpZGVyIEV0aGVyZXVtIGVjb3N5c3RlbSwgbWVhbmluZyBpdCB3aWxsIGJyZWFrIHdoZW4gdmFsaWRhdGVkIGFnYWluc3QgYW4gYXBwbGljYXRpb24vdG9vbFxuICogdGhhdCByZWxpZXMgb24gRUlQLTU1IGNoZWNrc3VtIGVuY29kaW5nIChjaGVja3N1bSB3aXRob3V0IGNoYWluSWQpLlxuICpcbiAqIEl0IGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byBub3QgdXNlIHRoaXMgZmVhdHVyZSB1bmxlc3MgeW91XG4gKiBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cbiAqXG4gKiBTZWUgbW9yZTogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzExMjFcbiAqL1xuY2hhaW5JZCkge1xuICAgIGlmICghaXNBZGRyZXNzKGFkZHJlc3MsIHsgc3RyaWN0OiBmYWxzZSB9KSlcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBZGRyZXNzRXJyb3IoeyBhZGRyZXNzIH0pO1xuICAgIHJldHVybiBjaGVja3N1bUFkZHJlc3MoYWRkcmVzcywgY2hhaW5JZCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6WyJJbnZhbGlkQWRkcmVzc0Vycm9yIiwic3RyaW5nVG9CeXRlcyIsImtlY2NhazI1NiIsIkxydU1hcCIsImlzQWRkcmVzcyIsImNoZWNrc3VtQWRkcmVzc0NhY2hlIiwiY2hlY2tzdW1BZGRyZXNzIiwiYWRkcmVzc18iLCJjaGFpbklkIiwiaGFzIiwiZ2V0IiwiaGV4QWRkcmVzcyIsInRvTG93ZXJDYXNlIiwic3Vic3RyaW5nIiwiaGFzaCIsImFkZHJlc3MiLCJsZW5ndGgiLCJzcGxpdCIsImkiLCJ0b1VwcGVyQ2FzZSIsInJlc3VsdCIsImpvaW4iLCJzZXQiLCJnZXRBZGRyZXNzIiwic3RyaWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAddress: () => (/* binding */ isAddress),\n/* harmony export */   isAddressCache: () => (/* binding */ isAddressCache)\n/* harmony export */ });\n/* harmony import */ var _lru_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lru.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js\");\n/* harmony import */ var _getAddress_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getAddress.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js\");\n\n\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/;\n/** @internal */ const isAddressCache = /*#__PURE__*/ new _lru_js__WEBPACK_IMPORTED_MODULE_0__.LruMap(8192);\nfunction isAddress(address, options) {\n    const { strict = true } = options ?? {};\n    const cacheKey = `${address}.${strict}`;\n    if (isAddressCache.has(cacheKey)) return isAddressCache.get(cacheKey);\n    const result = (()=>{\n        if (!addressRegex.test(address)) return false;\n        if (address.toLowerCase() === address) return true;\n        if (strict) return (0,_getAddress_js__WEBPACK_IMPORTED_MODULE_1__.checksumAddress)(address) === address;\n        return true;\n    })();\n    isAddressCache.set(cacheKey, result);\n    return result;\n} //# sourceMappingURL=isAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9hZGRyZXNzL2lzQWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1DO0FBQ2U7QUFDbEQsTUFBTUUsZUFBZTtBQUNyQixjQUFjLEdBQ1AsTUFBTUMsaUJBQWlCLFdBQVcsR0FBRyxJQUFJSCwyQ0FBTUEsQ0FBQyxNQUFNO0FBQ3RELFNBQVNJLFVBQVVDLE9BQU8sRUFBRUMsT0FBTztJQUN0QyxNQUFNLEVBQUVDLFNBQVMsSUFBSSxFQUFFLEdBQUdELFdBQVcsQ0FBQztJQUN0QyxNQUFNRSxXQUFXLENBQUMsRUFBRUgsUUFBUSxDQUFDLEVBQUVFLE9BQU8sQ0FBQztJQUN2QyxJQUFJSixlQUFlTSxHQUFHLENBQUNELFdBQ25CLE9BQU9MLGVBQWVPLEdBQUcsQ0FBQ0Y7SUFDOUIsTUFBTUcsU0FBUyxDQUFDO1FBQ1osSUFBSSxDQUFDVCxhQUFhVSxJQUFJLENBQUNQLFVBQ25CLE9BQU87UUFDWCxJQUFJQSxRQUFRUSxXQUFXLE9BQU9SLFNBQzFCLE9BQU87UUFDWCxJQUFJRSxRQUNBLE9BQU9OLCtEQUFlQSxDQUFDSSxhQUFhQTtRQUN4QyxPQUFPO0lBQ1g7SUFDQUYsZUFBZVcsR0FBRyxDQUFDTixVQUFVRztJQUM3QixPQUFPQTtBQUNYLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvYWRkcmVzcy9pc0FkZHJlc3MuanM/MDkxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMcnVNYXAgfSBmcm9tICcuLi9scnUuanMnO1xuaW1wb3J0IHsgY2hlY2tzdW1BZGRyZXNzIH0gZnJvbSAnLi9nZXRBZGRyZXNzLmpzJztcbmNvbnN0IGFkZHJlc3NSZWdleCA9IC9eMHhbYS1mQS1GMC05XXs0MH0kLztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc0FkZHJlc3NDYWNoZSA9IC8qI19fUFVSRV9fKi8gbmV3IExydU1hcCg4MTkyKTtcbmV4cG9ydCBmdW5jdGlvbiBpc0FkZHJlc3MoYWRkcmVzcywgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgc3RyaWN0ID0gdHJ1ZSB9ID0gb3B0aW9ucyA/PyB7fTtcbiAgICBjb25zdCBjYWNoZUtleSA9IGAke2FkZHJlc3N9LiR7c3RyaWN0fWA7XG4gICAgaWYgKGlzQWRkcmVzc0NhY2hlLmhhcyhjYWNoZUtleSkpXG4gICAgICAgIHJldHVybiBpc0FkZHJlc3NDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGNvbnN0IHJlc3VsdCA9ICgoKSA9PiB7XG4gICAgICAgIGlmICghYWRkcmVzc1JlZ2V4LnRlc3QoYWRkcmVzcykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChhZGRyZXNzLnRvTG93ZXJDYXNlKCkgPT09IGFkZHJlc3MpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHN0cmljdClcbiAgICAgICAgICAgIHJldHVybiBjaGVja3N1bUFkZHJlc3MoYWRkcmVzcykgPT09IGFkZHJlc3M7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pKCk7XG4gICAgaXNBZGRyZXNzQ2FjaGUuc2V0KGNhY2hlS2V5LCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbIkxydU1hcCIsImNoZWNrc3VtQWRkcmVzcyIsImFkZHJlc3NSZWdleCIsImlzQWRkcmVzc0NhY2hlIiwiaXNBZGRyZXNzIiwiYWRkcmVzcyIsIm9wdGlvbnMiLCJzdHJpY3QiLCJjYWNoZUtleSIsImhhcyIsImdldCIsInJlc3VsdCIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHex: () => (/* binding */ isHex)\n/* harmony export */ });\nfunction isHex(value, { strict = true } = {}) {\n    if (!value) return false;\n    if (typeof value !== \"string\") return false;\n    return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith(\"0x\");\n} //# sourceMappingURL=isHex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9kYXRhL2lzSGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxNQUFNQyxLQUFLLEVBQUUsRUFBRUMsU0FBUyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0MsSUFBSSxDQUFDRCxPQUNELE9BQU87SUFDWCxJQUFJLE9BQU9BLFVBQVUsVUFDakIsT0FBTztJQUNYLE9BQU9DLFNBQVMsbUJBQW1CQyxJQUFJLENBQUNGLFNBQVNBLE1BQU1HLFVBQVUsQ0FBQztBQUN0RSxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvaXNIZXguanM/ZWI1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNIZXgodmFsdWUsIHsgc3RyaWN0ID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBpZiAoIXZhbHVlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gc3RyaWN0ID8gL14weFswLTlhLWZBLUZdKiQvLnRlc3QodmFsdWUpIDogdmFsdWUuc3RhcnRzV2l0aCgnMHgnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJpc0hleCIsInZhbHVlIiwic3RyaWN0IiwidGVzdCIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pad: () => (/* binding */ pad),\n/* harmony export */   padBytes: () => (/* binding */ padBytes),\n/* harmony export */   padHex: () => (/* binding */ padHex)\n/* harmony export */ });\n/* harmony import */ var _errors_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../errors/data.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js\");\n\nfunction pad(hexOrBytes, { dir, size = 32 } = {}) {\n    if (typeof hexOrBytes === \"string\") return padHex(hexOrBytes, {\n        dir,\n        size\n    });\n    return padBytes(hexOrBytes, {\n        dir,\n        size\n    });\n}\nfunction padHex(hex_, { dir, size = 32 } = {}) {\n    if (size === null) return hex_;\n    const hex = hex_.replace(\"0x\", \"\");\n    if (hex.length > size * 2) throw new _errors_data_js__WEBPACK_IMPORTED_MODULE_0__.SizeExceedsPaddingSizeError({\n        size: Math.ceil(hex.length / 2),\n        targetSize: size,\n        type: \"hex\"\n    });\n    return `0x${hex[dir === \"right\" ? \"padEnd\" : \"padStart\"](size * 2, \"0\")}`;\n}\nfunction padBytes(bytes, { dir, size = 32 } = {}) {\n    if (size === null) return bytes;\n    if (bytes.length > size) throw new _errors_data_js__WEBPACK_IMPORTED_MODULE_0__.SizeExceedsPaddingSizeError({\n        size: bytes.length,\n        targetSize: size,\n        type: \"bytes\"\n    });\n    const paddedBytes = new Uint8Array(size);\n    for(let i = 0; i < size; i++){\n        const padEnd = dir === \"right\";\n        paddedBytes[padEnd ? i : size - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];\n    }\n    return paddedBytes;\n} //# sourceMappingURL=pad.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9kYXRhL3BhZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9FO0FBQzdELFNBQVNDLElBQUlDLFVBQVUsRUFBRSxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELElBQUksT0FBT0YsZUFBZSxVQUN0QixPQUFPRyxPQUFPSCxZQUFZO1FBQUVDO1FBQUtDO0lBQUs7SUFDMUMsT0FBT0UsU0FBU0osWUFBWTtRQUFFQztRQUFLQztJQUFLO0FBQzVDO0FBQ08sU0FBU0MsT0FBT0UsSUFBSSxFQUFFLEVBQUVKLEdBQUcsRUFBRUMsT0FBTyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDaEQsSUFBSUEsU0FBUyxNQUNULE9BQU9HO0lBQ1gsTUFBTUMsTUFBTUQsS0FBS0UsT0FBTyxDQUFDLE1BQU07SUFDL0IsSUFBSUQsSUFBSUUsTUFBTSxHQUFHTixPQUFPLEdBQ3BCLE1BQU0sSUFBSUosd0VBQTJCQSxDQUFDO1FBQ2xDSSxNQUFNTyxLQUFLQyxJQUFJLENBQUNKLElBQUlFLE1BQU0sR0FBRztRQUM3QkcsWUFBWVQ7UUFDWlUsTUFBTTtJQUNWO0lBQ0osT0FBTyxDQUFDLEVBQUUsRUFBRU4sR0FBRyxDQUFDTCxRQUFRLFVBQVUsV0FBVyxXQUFXLENBQUNDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDN0U7QUFDTyxTQUFTRSxTQUFTUyxLQUFLLEVBQUUsRUFBRVosR0FBRyxFQUFFQyxPQUFPLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNuRCxJQUFJQSxTQUFTLE1BQ1QsT0FBT1c7SUFDWCxJQUFJQSxNQUFNTCxNQUFNLEdBQUdOLE1BQ2YsTUFBTSxJQUFJSix3RUFBMkJBLENBQUM7UUFDbENJLE1BQU1XLE1BQU1MLE1BQU07UUFDbEJHLFlBQVlUO1FBQ1pVLE1BQU07SUFDVjtJQUNKLE1BQU1FLGNBQWMsSUFBSUMsV0FBV2I7SUFDbkMsSUFBSyxJQUFJYyxJQUFJLEdBQUdBLElBQUlkLE1BQU1jLElBQUs7UUFDM0IsTUFBTUMsU0FBU2hCLFFBQVE7UUFDdkJhLFdBQVcsQ0FBQ0csU0FBU0QsSUFBSWQsT0FBT2MsSUFBSSxFQUFFLEdBQ2xDSCxLQUFLLENBQUNJLFNBQVNELElBQUlILE1BQU1MLE1BQU0sR0FBR1EsSUFBSSxFQUFFO0lBQ2hEO0lBQ0EsT0FBT0Y7QUFDWCxFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvcGFkLmpzP2VlMjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yLCB9IGZyb20gJy4uLy4uL2Vycm9ycy9kYXRhLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwYWQoaGV4T3JCeXRlcywgeyBkaXIsIHNpemUgPSAzMiB9ID0ge30pIHtcbiAgICBpZiAodHlwZW9mIGhleE9yQnl0ZXMgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gcGFkSGV4KGhleE9yQnl0ZXMsIHsgZGlyLCBzaXplIH0pO1xuICAgIHJldHVybiBwYWRCeXRlcyhoZXhPckJ5dGVzLCB7IGRpciwgc2l6ZSB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWRIZXgoaGV4XywgeyBkaXIsIHNpemUgPSAzMiB9ID0ge30pIHtcbiAgICBpZiAoc2l6ZSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGhleF87XG4gICAgY29uc3QgaGV4ID0gaGV4Xy5yZXBsYWNlKCcweCcsICcnKTtcbiAgICBpZiAoaGV4Lmxlbmd0aCA+IHNpemUgKiAyKVxuICAgICAgICB0aHJvdyBuZXcgU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yKHtcbiAgICAgICAgICAgIHNpemU6IE1hdGguY2VpbChoZXgubGVuZ3RoIC8gMiksXG4gICAgICAgICAgICB0YXJnZXRTaXplOiBzaXplLFxuICAgICAgICAgICAgdHlwZTogJ2hleCcsXG4gICAgICAgIH0pO1xuICAgIHJldHVybiBgMHgke2hleFtkaXIgPT09ICdyaWdodCcgPyAncGFkRW5kJyA6ICdwYWRTdGFydCddKHNpemUgKiAyLCAnMCcpfWA7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFkQnl0ZXMoYnl0ZXMsIHsgZGlyLCBzaXplID0gMzIgfSA9IHt9KSB7XG4gICAgaWYgKHNpemUgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICBpZiAoYnl0ZXMubGVuZ3RoID4gc2l6ZSlcbiAgICAgICAgdGhyb3cgbmV3IFNpemVFeGNlZWRzUGFkZGluZ1NpemVFcnJvcih7XG4gICAgICAgICAgICBzaXplOiBieXRlcy5sZW5ndGgsXG4gICAgICAgICAgICB0YXJnZXRTaXplOiBzaXplLFxuICAgICAgICAgICAgdHlwZTogJ2J5dGVzJyxcbiAgICAgICAgfSk7XG4gICAgY29uc3QgcGFkZGVkQnl0ZXMgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICBjb25zdCBwYWRFbmQgPSBkaXIgPT09ICdyaWdodCc7XG4gICAgICAgIHBhZGRlZEJ5dGVzW3BhZEVuZCA/IGkgOiBzaXplIC0gaSAtIDFdID1cbiAgICAgICAgICAgIGJ5dGVzW3BhZEVuZCA/IGkgOiBieXRlcy5sZW5ndGggLSBpIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBwYWRkZWRCeXRlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZC5qcy5tYXAiXSwibmFtZXMiOlsiU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yIiwicGFkIiwiaGV4T3JCeXRlcyIsImRpciIsInNpemUiLCJwYWRIZXgiLCJwYWRCeXRlcyIsImhleF8iLCJoZXgiLCJyZXBsYWNlIiwibGVuZ3RoIiwiTWF0aCIsImNlaWwiLCJ0YXJnZXRTaXplIiwidHlwZSIsImJ5dGVzIiwicGFkZGVkQnl0ZXMiLCJVaW50OEFycmF5IiwiaSIsInBhZEVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   size: () => (/* binding */ size)\n/* harmony export */ });\n/* harmony import */ var _isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */ function size(value) {\n    if ((0,_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(value, {\n        strict: false\n    })) return Math.ceil((value.length - 2) / 2);\n    return value.length;\n} //# sourceMappingURL=size.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9kYXRhL3NpemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBbUM7QUFDbkM7Ozs7O0NBS0MsR0FDTSxTQUFTQyxLQUFLQyxLQUFLO0lBQ3RCLElBQUlGLGdEQUFLQSxDQUFDRSxPQUFPO1FBQUVDLFFBQVE7SUFBTSxJQUM3QixPQUFPQyxLQUFLQyxJQUFJLENBQUMsQ0FBQ0gsTUFBTUksTUFBTSxHQUFHLEtBQUs7SUFDMUMsT0FBT0osTUFBTUksTUFBTTtBQUN2QixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5cGVyZmxpcC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvc2l6ZS5qcz9kYTUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSGV4IH0gZnJvbSAnLi9pc0hleC5qcyc7XG4vKipcbiAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIHNpemUgb2YgdGhlIHZhbHVlIChpbiBieXRlcykuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSAoaGV4IG9yIGJ5dGUgYXJyYXkpIHRvIHJldHJpZXZlIHRoZSBzaXplIG9mLlxuICogQHJldHVybnMgVGhlIHNpemUgb2YgdGhlIHZhbHVlIChpbiBieXRlcykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplKHZhbHVlKSB7XG4gICAgaWYgKGlzSGV4KHZhbHVlLCB7IHN0cmljdDogZmFsc2UgfSkpXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoKHZhbHVlLmxlbmd0aCAtIDIpIC8gMik7XG4gICAgcmV0dXJuIHZhbHVlLmxlbmd0aDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpemUuanMubWFwIl0sIm5hbWVzIjpbImlzSGV4Iiwic2l6ZSIsInZhbHVlIiwic3RyaWN0IiwiTWF0aCIsImNlaWwiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trim: () => (/* binding */ trim)\n/* harmony export */ });\nfunction trim(hexOrBytes, { dir = \"left\" } = {}) {\n    let data = typeof hexOrBytes === \"string\" ? hexOrBytes.replace(\"0x\", \"\") : hexOrBytes;\n    let sliceLength = 0;\n    for(let i = 0; i < data.length - 1; i++){\n        if (data[dir === \"left\" ? i : data.length - i - 1].toString() === \"0\") sliceLength++;\n        else break;\n    }\n    data = dir === \"left\" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);\n    if (typeof hexOrBytes === \"string\") {\n        if (data.length === 1 && dir === \"right\") data = `${data}0`;\n        return `0x${data.length % 2 === 1 ? `0${data}` : data}`;\n    }\n    return data;\n} //# sourceMappingURL=trim.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9kYXRhL3RyaW0uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLEtBQUtDLFVBQVUsRUFBRSxFQUFFQyxNQUFNLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsRCxJQUFJQyxPQUFPLE9BQU9GLGVBQWUsV0FBV0EsV0FBV0csT0FBTyxDQUFDLE1BQU0sTUFBTUg7SUFDM0UsSUFBSUksY0FBYztJQUNsQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsS0FBS0ksTUFBTSxHQUFHLEdBQUdELElBQUs7UUFDdEMsSUFBSUgsSUFBSSxDQUFDRCxRQUFRLFNBQVNJLElBQUlILEtBQUtJLE1BQU0sR0FBR0QsSUFBSSxFQUFFLENBQUNFLFFBQVEsT0FBTyxLQUM5REg7YUFFQTtJQUNSO0lBQ0FGLE9BQ0lELFFBQVEsU0FDRkMsS0FBS00sS0FBSyxDQUFDSixlQUNYRixLQUFLTSxLQUFLLENBQUMsR0FBR04sS0FBS0ksTUFBTSxHQUFHRjtJQUN0QyxJQUFJLE9BQU9KLGVBQWUsVUFBVTtRQUNoQyxJQUFJRSxLQUFLSSxNQUFNLEtBQUssS0FBS0wsUUFBUSxTQUM3QkMsT0FBTyxDQUFDLEVBQUVBLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxFQUFFLEVBQUVBLEtBQUtJLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDLEVBQUVKLEtBQUssQ0FBQyxHQUFHQSxLQUFLLENBQUM7SUFDM0Q7SUFDQSxPQUFPQTtBQUNYLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvZGF0YS90cmltLmpzPzQzZjAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHRyaW0oaGV4T3JCeXRlcywgeyBkaXIgPSAnbGVmdCcgfSA9IHt9KSB7XG4gICAgbGV0IGRhdGEgPSB0eXBlb2YgaGV4T3JCeXRlcyA9PT0gJ3N0cmluZycgPyBoZXhPckJ5dGVzLnJlcGxhY2UoJzB4JywgJycpIDogaGV4T3JCeXRlcztcbiAgICBsZXQgc2xpY2VMZW5ndGggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgaWYgKGRhdGFbZGlyID09PSAnbGVmdCcgPyBpIDogZGF0YS5sZW5ndGggLSBpIC0gMV0udG9TdHJpbmcoKSA9PT0gJzAnKVxuICAgICAgICAgICAgc2xpY2VMZW5ndGgrKztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRhdGEgPVxuICAgICAgICBkaXIgPT09ICdsZWZ0J1xuICAgICAgICAgICAgPyBkYXRhLnNsaWNlKHNsaWNlTGVuZ3RoKVxuICAgICAgICAgICAgOiBkYXRhLnNsaWNlKDAsIGRhdGEubGVuZ3RoIC0gc2xpY2VMZW5ndGgpO1xuICAgIGlmICh0eXBlb2YgaGV4T3JCeXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAxICYmIGRpciA9PT0gJ3JpZ2h0JylcbiAgICAgICAgICAgIGRhdGEgPSBgJHtkYXRhfTBgO1xuICAgICAgICByZXR1cm4gYDB4JHtkYXRhLmxlbmd0aCAlIDIgPT09IDEgPyBgMCR7ZGF0YX1gIDogZGF0YX1gO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyaW0uanMubWFwIl0sIm5hbWVzIjpbInRyaW0iLCJoZXhPckJ5dGVzIiwiZGlyIiwiZGF0YSIsInJlcGxhY2UiLCJzbGljZUxlbmd0aCIsImkiLCJsZW5ndGgiLCJ0b1N0cmluZyIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertSize: () => (/* binding */ assertSize),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   hexToBigInt: () => (/* binding */ hexToBigInt),\n/* harmony export */   hexToBool: () => (/* binding */ hexToBool),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   hexToString: () => (/* binding */ hexToString)\n/* harmony export */ });\n/* harmony import */ var _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../errors/encoding.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js\");\n/* harmony import */ var _data_size_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/size.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js\");\n/* harmony import */ var _data_trim_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/trim.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js\");\n/* harmony import */ var _toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./toBytes.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n\n\n\n\nfunction assertSize(hexOrBytes, { size }) {\n    if ((0,_data_size_js__WEBPACK_IMPORTED_MODULE_0__.size)(hexOrBytes) > size) throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__.SizeOverflowError({\n        givenSize: (0,_data_size_js__WEBPACK_IMPORTED_MODULE_0__.size)(hexOrBytes),\n        maxSize: size\n    });\n}\n/**\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex\n * - Example: https://viem.sh/docs/utilities/fromHex#usage\n *\n * @param hex Hex string to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x1a4', 'number')\n * // 420\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\n * // 'Hello world'\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *   size: 32,\n *   to: 'string'\n * })\n * // 'Hello world'\n */ function fromHex(hex, toOrOpts) {\n    const opts = typeof toOrOpts === \"string\" ? {\n        to: toOrOpts\n    } : toOrOpts;\n    const to = opts.to;\n    if (to === \"number\") return hexToNumber(hex, opts);\n    if (to === \"bigint\") return hexToBigInt(hex, opts);\n    if (to === \"string\") return hexToString(hex, opts);\n    if (to === \"boolean\") return hexToBool(hex, opts);\n    return (0,_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(hex, opts);\n}\n/**\n * Decodes a hex value into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x1a4', { signed: true })\n * // 420n\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420n\n */ function hexToBigInt(hex, opts = {}) {\n    const { signed } = opts;\n    if (opts.size) assertSize(hex, {\n        size: opts.size\n    });\n    const value = BigInt(hex);\n    if (!signed) return value;\n    const size = (hex.length - 2) / 2;\n    const max = (1n << BigInt(size) * 8n - 1n) - 1n;\n    if (value <= max) return value;\n    return value - BigInt(`0x${\"f\".padStart(size * 2, \"f\")}`) - 1n;\n}\n/**\n * Decodes a hex value into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x01')\n * // true\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // true\n */ function hexToBool(hex_, opts = {}) {\n    let hex = hex_;\n    if (opts.size) {\n        assertSize(hex, {\n            size: opts.size\n        });\n        hex = (0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex);\n    }\n    if ((0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex) === \"0x00\") return false;\n    if ((0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex) === \"0x01\") return true;\n    throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__.InvalidHexBooleanError(hex);\n}\n/**\n * Decodes a hex string into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToNumber('0x1a4')\n * // 420\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420\n */ function hexToNumber(hex, opts = {}) {\n    return Number(hexToBigInt(hex, opts));\n}\n/**\n * Decodes a hex value into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c6421')\n * // 'Hello world!'\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // 'Hello world'\n */ function hexToString(hex, opts = {}) {\n    let bytes = (0,_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(hex);\n    if (opts.size) {\n        assertSize(bytes, {\n            size: opts.size\n        });\n        bytes = (0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(bytes, {\n            dir: \"right\"\n        });\n    }\n    return new TextDecoder().decode(bytes);\n} //# sourceMappingURL=fromHex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9lbmNvZGluZy9mcm9tSGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBc0Y7QUFDdEM7QUFDVDtBQUNHO0FBQ25DLFNBQVNNLFdBQVdDLFVBQVUsRUFBRSxFQUFFTCxJQUFJLEVBQUU7SUFDM0MsSUFBSUMsbURBQUtBLENBQUNJLGNBQWNMLE1BQ3BCLE1BQU0sSUFBSUQsa0VBQWlCQSxDQUFDO1FBQ3hCTyxXQUFXTCxtREFBS0EsQ0FBQ0k7UUFDakJFLFNBQVNQO0lBQ2I7QUFDUjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0EyQkMsR0FDTSxTQUFTUSxRQUFRQyxHQUFHLEVBQUVDLFFBQVE7SUFDakMsTUFBTUMsT0FBTyxPQUFPRCxhQUFhLFdBQVc7UUFBRUUsSUFBSUY7SUFBUyxJQUFJQTtJQUMvRCxNQUFNRSxLQUFLRCxLQUFLQyxFQUFFO0lBQ2xCLElBQUlBLE9BQU8sVUFDUCxPQUFPQyxZQUFZSixLQUFLRTtJQUM1QixJQUFJQyxPQUFPLFVBQ1AsT0FBT0UsWUFBWUwsS0FBS0U7SUFDNUIsSUFBSUMsT0FBTyxVQUNQLE9BQU9HLFlBQVlOLEtBQUtFO0lBQzVCLElBQUlDLE9BQU8sV0FDUCxPQUFPSSxVQUFVUCxLQUFLRTtJQUMxQixPQUFPUix1REFBVUEsQ0FBQ00sS0FBS0U7QUFDM0I7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0JDLEdBQ00sU0FBU0csWUFBWUwsR0FBRyxFQUFFRSxPQUFPLENBQUMsQ0FBQztJQUN0QyxNQUFNLEVBQUVNLE1BQU0sRUFBRSxHQUFHTjtJQUNuQixJQUFJQSxLQUFLWCxJQUFJLEVBQ1RJLFdBQVdLLEtBQUs7UUFBRVQsTUFBTVcsS0FBS1gsSUFBSTtJQUFDO0lBQ3RDLE1BQU1rQixRQUFRQyxPQUFPVjtJQUNyQixJQUFJLENBQUNRLFFBQ0QsT0FBT0M7SUFDWCxNQUFNbEIsT0FBTyxDQUFDUyxJQUFJVyxNQUFNLEdBQUcsS0FBSztJQUNoQyxNQUFNQyxNQUFNLENBQUMsRUFBRSxJQUFLRixPQUFPbkIsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFLLEVBQUU7SUFDakQsSUFBSWtCLFNBQVNHLEtBQ1QsT0FBT0g7SUFDWCxPQUFPQSxRQUFRQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUlHLFFBQVEsQ0FBQ3RCLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFO0FBQ2xFO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWtCQyxHQUNNLFNBQVNnQixVQUFVTyxJQUFJLEVBQUVaLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLElBQUlGLE1BQU1jO0lBQ1YsSUFBSVosS0FBS1gsSUFBSSxFQUFFO1FBQ1hJLFdBQVdLLEtBQUs7WUFBRVQsTUFBTVcsS0FBS1gsSUFBSTtRQUFDO1FBQ2xDUyxNQUFNUCxtREFBSUEsQ0FBQ087SUFDZjtJQUNBLElBQUlQLG1EQUFJQSxDQUFDTyxTQUFTLFFBQ2QsT0FBTztJQUNYLElBQUlQLG1EQUFJQSxDQUFDTyxTQUFTLFFBQ2QsT0FBTztJQUNYLE1BQU0sSUFBSVgsdUVBQXNCQSxDQUFDVztBQUNyQztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FrQkMsR0FDTSxTQUFTSSxZQUFZSixHQUFHLEVBQUVFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLE9BQU9hLE9BQU9WLFlBQVlMLEtBQUtFO0FBQ25DO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBb0JDLEdBQ00sU0FBU0ksWUFBWU4sR0FBRyxFQUFFRSxPQUFPLENBQUMsQ0FBQztJQUN0QyxJQUFJYyxRQUFRdEIsdURBQVVBLENBQUNNO0lBQ3ZCLElBQUlFLEtBQUtYLElBQUksRUFBRTtRQUNYSSxXQUFXcUIsT0FBTztZQUFFekIsTUFBTVcsS0FBS1gsSUFBSTtRQUFDO1FBQ3BDeUIsUUFBUXZCLG1EQUFJQSxDQUFDdUIsT0FBTztZQUFFQyxLQUFLO1FBQVE7SUFDdkM7SUFDQSxPQUFPLElBQUlDLGNBQWNDLE1BQU0sQ0FBQ0g7QUFDcEMsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9lbmNvZGluZy9mcm9tSGV4LmpzP2FiMDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW52YWxpZEhleEJvb2xlYW5FcnJvciwgU2l6ZU92ZXJmbG93RXJyb3IsIH0gZnJvbSAnLi4vLi4vZXJyb3JzL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IHNpemUgYXMgc2l6ZV8gfSBmcm9tICcuLi9kYXRhL3NpemUuanMnO1xuaW1wb3J0IHsgdHJpbSB9IGZyb20gJy4uL2RhdGEvdHJpbS5qcyc7XG5pbXBvcnQgeyBoZXhUb0J5dGVzIH0gZnJvbSAnLi90b0J5dGVzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRTaXplKGhleE9yQnl0ZXMsIHsgc2l6ZSB9KSB7XG4gICAgaWYgKHNpemVfKGhleE9yQnl0ZXMpID4gc2l6ZSlcbiAgICAgICAgdGhyb3cgbmV3IFNpemVPdmVyZmxvd0Vycm9yKHtcbiAgICAgICAgICAgIGdpdmVuU2l6ZTogc2l6ZV8oaGV4T3JCeXRlcyksXG4gICAgICAgICAgICBtYXhTaXplOiBzaXplLFxuICAgICAgICB9KTtcbn1cbi8qKlxuICogRGVjb2RlcyBhIGhleCBzdHJpbmcgaW50byBhIHN0cmluZywgbnVtYmVyLCBiaWdpbnQsIGJvb2xlYW4sIG9yIGJ5dGUgYXJyYXkuXG4gKlxuICogLSBEb2NzOiBodHRwczovL3ZpZW0uc2gvZG9jcy91dGlsaXRpZXMvZnJvbUhleFxuICogLSBFeGFtcGxlOiBodHRwczovL3ZpZW0uc2gvZG9jcy91dGlsaXRpZXMvZnJvbUhleCN1c2FnZVxuICpcbiAqIEBwYXJhbSBoZXggSGV4IHN0cmluZyB0byBkZWNvZGUuXG4gKiBAcGFyYW0gdG9Pck9wdHMgVHlwZSB0byBjb252ZXJ0IHRvIG9yIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBEZWNvZGVkIHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBmcm9tSGV4IH0gZnJvbSAndmllbSdcbiAqIGNvbnN0IGRhdGEgPSBmcm9tSGV4KCcweDFhNCcsICdudW1iZXInKVxuICogLy8gNDIwXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGZyb21IZXggfSBmcm9tICd2aWVtJ1xuICogY29uc3QgZGF0YSA9IGZyb21IZXgoJzB4NDg2NTZjNmM2ZjIwNTc2ZjcyNmM2NDIxJywgJ3N0cmluZycpXG4gKiAvLyAnSGVsbG8gd29ybGQnXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGZyb21IZXggfSBmcm9tICd2aWVtJ1xuICogY29uc3QgZGF0YSA9IGZyb21IZXgoJzB4NDg2NTZjNmM2ZjIwNTc2ZjcyNmM2NDIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsIHtcbiAqICAgc2l6ZTogMzIsXG4gKiAgIHRvOiAnc3RyaW5nJ1xuICogfSlcbiAqIC8vICdIZWxsbyB3b3JsZCdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21IZXgoaGV4LCB0b09yT3B0cykge1xuICAgIGNvbnN0IG9wdHMgPSB0eXBlb2YgdG9Pck9wdHMgPT09ICdzdHJpbmcnID8geyB0bzogdG9Pck9wdHMgfSA6IHRvT3JPcHRzO1xuICAgIGNvbnN0IHRvID0gb3B0cy50bztcbiAgICBpZiAodG8gPT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gaGV4VG9OdW1iZXIoaGV4LCBvcHRzKTtcbiAgICBpZiAodG8gPT09ICdiaWdpbnQnKVxuICAgICAgICByZXR1cm4gaGV4VG9CaWdJbnQoaGV4LCBvcHRzKTtcbiAgICBpZiAodG8gPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gaGV4VG9TdHJpbmcoaGV4LCBvcHRzKTtcbiAgICBpZiAodG8gPT09ICdib29sZWFuJylcbiAgICAgICAgcmV0dXJuIGhleFRvQm9vbChoZXgsIG9wdHMpO1xuICAgIHJldHVybiBoZXhUb0J5dGVzKGhleCwgb3B0cyk7XG59XG4vKipcbiAqIERlY29kZXMgYSBoZXggdmFsdWUgaW50byBhIGJpZ2ludC5cbiAqXG4gKiAtIERvY3M6IGh0dHBzOi8vdmllbS5zaC9kb2NzL3V0aWxpdGllcy9mcm9tSGV4I2hleHRvYmlnaW50XG4gKlxuICogQHBhcmFtIGhleCBIZXggdmFsdWUgdG8gZGVjb2RlLlxuICogQHBhcmFtIG9wdHMgT3B0aW9ucy5cbiAqIEByZXR1cm5zIEJpZ0ludCB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgaGV4VG9CaWdJbnQgfSBmcm9tICd2aWVtJ1xuICogY29uc3QgZGF0YSA9IGhleFRvQmlnSW50KCcweDFhNCcsIHsgc2lnbmVkOiB0cnVlIH0pXG4gKiAvLyA0MjBuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGhleFRvQmlnSW50IH0gZnJvbSAndmllbSdcbiAqIGNvbnN0IGRhdGEgPSBoZXhUb0JpZ0ludCgnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWE0JywgeyBzaXplOiAzMiB9KVxuICogLy8gNDIwblxuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9CaWdJbnQoaGV4LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCB7IHNpZ25lZCB9ID0gb3B0cztcbiAgICBpZiAob3B0cy5zaXplKVxuICAgICAgICBhc3NlcnRTaXplKGhleCwgeyBzaXplOiBvcHRzLnNpemUgfSk7XG4gICAgY29uc3QgdmFsdWUgPSBCaWdJbnQoaGV4KTtcbiAgICBpZiAoIXNpZ25lZClcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGNvbnN0IHNpemUgPSAoaGV4Lmxlbmd0aCAtIDIpIC8gMjtcbiAgICBjb25zdCBtYXggPSAoMW4gPDwgKEJpZ0ludChzaXplKSAqIDhuIC0gMW4pKSAtIDFuO1xuICAgIGlmICh2YWx1ZSA8PSBtYXgpXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWUgLSBCaWdJbnQoYDB4JHsnZicucGFkU3RhcnQoc2l6ZSAqIDIsICdmJyl9YCkgLSAxbjtcbn1cbi8qKlxuICogRGVjb2RlcyBhIGhleCB2YWx1ZSBpbnRvIGEgYm9vbGVhbi5cbiAqXG4gKiAtIERvY3M6IGh0dHBzOi8vdmllbS5zaC9kb2NzL3V0aWxpdGllcy9mcm9tSGV4I2hleHRvYm9vbFxuICpcbiAqIEBwYXJhbSBoZXggSGV4IHZhbHVlIHRvIGRlY29kZS5cbiAqIEBwYXJhbSBvcHRzIE9wdGlvbnMuXG4gKiBAcmV0dXJucyBCb29sZWFuIHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBoZXhUb0Jvb2wgfSBmcm9tICd2aWVtJ1xuICogY29uc3QgZGF0YSA9IGhleFRvQm9vbCgnMHgwMScpXG4gKiAvLyB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGhleFRvQm9vbCB9IGZyb20gJ3ZpZW0nXG4gKiBjb25zdCBkYXRhID0gaGV4VG9Cb29sKCcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEnLCB7IHNpemU6IDMyIH0pXG4gKiAvLyB0cnVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb0Jvb2woaGV4Xywgb3B0cyA9IHt9KSB7XG4gICAgbGV0IGhleCA9IGhleF87XG4gICAgaWYgKG9wdHMuc2l6ZSkge1xuICAgICAgICBhc3NlcnRTaXplKGhleCwgeyBzaXplOiBvcHRzLnNpemUgfSk7XG4gICAgICAgIGhleCA9IHRyaW0oaGV4KTtcbiAgICB9XG4gICAgaWYgKHRyaW0oaGV4KSA9PT0gJzB4MDAnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRyaW0oaGV4KSA9PT0gJzB4MDEnKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEhleEJvb2xlYW5FcnJvcihoZXgpO1xufVxuLyoqXG4gKiBEZWNvZGVzIGEgaGV4IHN0cmluZyBpbnRvIGEgbnVtYmVyLlxuICpcbiAqIC0gRG9jczogaHR0cHM6Ly92aWVtLnNoL2RvY3MvdXRpbGl0aWVzL2Zyb21IZXgjaGV4dG9udW1iZXJcbiAqXG4gKiBAcGFyYW0gaGV4IEhleCB2YWx1ZSB0byBkZWNvZGUuXG4gKiBAcGFyYW0gb3B0cyBPcHRpb25zLlxuICogQHJldHVybnMgTnVtYmVyIHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBoZXhUb051bWJlciB9IGZyb20gJ3ZpZW0nXG4gKiBjb25zdCBkYXRhID0gaGV4VG9OdW1iZXIoJzB4MWE0JylcbiAqIC8vIDQyMFxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBoZXhUb051bWJlciB9IGZyb20gJ3ZpZW0nXG4gKiBjb25zdCBkYXRhID0gaGV4VG9CaWdJbnQoJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFhNCcsIHsgc2l6ZTogMzIgfSlcbiAqIC8vIDQyMFxuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9OdW1iZXIoaGV4LCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gTnVtYmVyKGhleFRvQmlnSW50KGhleCwgb3B0cykpO1xufVxuLyoqXG4gKiBEZWNvZGVzIGEgaGV4IHZhbHVlIGludG8gYSBVVEYtOCBzdHJpbmcuXG4gKlxuICogLSBEb2NzOiBodHRwczovL3ZpZW0uc2gvZG9jcy91dGlsaXRpZXMvZnJvbUhleCNoZXh0b3N0cmluZ1xuICpcbiAqIEBwYXJhbSBoZXggSGV4IHZhbHVlIHRvIGRlY29kZS5cbiAqIEBwYXJhbSBvcHRzIE9wdGlvbnMuXG4gKiBAcmV0dXJucyBTdHJpbmcgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGhleFRvU3RyaW5nIH0gZnJvbSAndmllbSdcbiAqIGNvbnN0IGRhdGEgPSBoZXhUb1N0cmluZygnMHg0ODY1NmM2YzZmMjA1NzZmNzI2YzY0MjEnKVxuICogLy8gJ0hlbGxvIHdvcmxkISdcbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgaGV4VG9TdHJpbmcgfSBmcm9tICd2aWVtJ1xuICogY29uc3QgZGF0YSA9IGhleFRvU3RyaW5nKCcweDQ4NjU2YzZjNmYyMDU3NmY3MjZjNjQyMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLCB7XG4gKiAgc2l6ZTogMzIsXG4gKiB9KVxuICogLy8gJ0hlbGxvIHdvcmxkJ1xuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9TdHJpbmcoaGV4LCBvcHRzID0ge30pIHtcbiAgICBsZXQgYnl0ZXMgPSBoZXhUb0J5dGVzKGhleCk7XG4gICAgaWYgKG9wdHMuc2l6ZSkge1xuICAgICAgICBhc3NlcnRTaXplKGJ5dGVzLCB7IHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgICAgICAgYnl0ZXMgPSB0cmltKGJ5dGVzLCB7IGRpcjogJ3JpZ2h0JyB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShieXRlcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tSGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJJbnZhbGlkSGV4Qm9vbGVhbkVycm9yIiwiU2l6ZU92ZXJmbG93RXJyb3IiLCJzaXplIiwic2l6ZV8iLCJ0cmltIiwiaGV4VG9CeXRlcyIsImFzc2VydFNpemUiLCJoZXhPckJ5dGVzIiwiZ2l2ZW5TaXplIiwibWF4U2l6ZSIsImZyb21IZXgiLCJoZXgiLCJ0b09yT3B0cyIsIm9wdHMiLCJ0byIsImhleFRvTnVtYmVyIiwiaGV4VG9CaWdJbnQiLCJoZXhUb1N0cmluZyIsImhleFRvQm9vbCIsInNpZ25lZCIsInZhbHVlIiwiQmlnSW50IiwibGVuZ3RoIiwibWF4IiwicGFkU3RhcnQiLCJoZXhfIiwiTnVtYmVyIiwiYnl0ZXMiLCJkaXIiLCJUZXh0RGVjb2RlciIsImRlY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boolToBytes: () => (/* binding */ boolToBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   numberToBytes: () => (/* binding */ numberToBytes),\n/* harmony export */   stringToBytes: () => (/* binding */ stringToBytes),\n/* harmony export */   toBytes: () => (/* binding */ toBytes)\n/* harmony export */ });\n/* harmony import */ var _errors_base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors/base.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/isHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _data_pad_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/pad.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js\");\n/* harmony import */ var _fromHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n/* harmony import */ var _toHex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\n\n\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes\n * - Example: https://viem.sh/docs/utilities/toBytes#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */ function toBytes(value, opts = {}) {\n    if (typeof value === \"number\" || typeof value === \"bigint\") return numberToBytes(value, opts);\n    if (typeof value === \"boolean\") return boolToBytes(value, opts);\n    if ((0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(value)) return hexToBytes(value, opts);\n    return stringToBytes(value, opts);\n}\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */ function boolToBytes(value, opts = {}) {\n    const bytes = new Uint8Array(1);\n    bytes[0] = Number(value);\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(bytes, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(bytes, {\n            size: opts.size\n        });\n    }\n    return bytes;\n}\n// We use very optimized technique to convert hex string to byte array\nconst charCodeMap = {\n    zero: 48,\n    nine: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction charCodeToBase16(char) {\n    if (char >= charCodeMap.zero && char <= charCodeMap.nine) return char - charCodeMap.zero;\n    if (char >= charCodeMap.A && char <= charCodeMap.F) return char - (charCodeMap.A - 10);\n    if (char >= charCodeMap.a && char <= charCodeMap.f) return char - (charCodeMap.a - 10);\n    return undefined;\n}\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */ function hexToBytes(hex_, opts = {}) {\n    let hex = hex_;\n    if (opts.size) {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(hex, {\n            size: opts.size\n        });\n        hex = (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(hex, {\n            dir: \"right\",\n            size: opts.size\n        });\n    }\n    let hexString = hex.slice(2);\n    if (hexString.length % 2) hexString = `0${hexString}`;\n    const length = hexString.length / 2;\n    const bytes = new Uint8Array(length);\n    for(let index = 0, j = 0; index < length; index++){\n        const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));\n        const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));\n        if (nibbleLeft === undefined || nibbleRight === undefined) {\n            throw new _errors_base_js__WEBPACK_IMPORTED_MODULE_3__.BaseError(`Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`);\n        }\n        bytes[index] = nibbleLeft * 16 + nibbleRight;\n    }\n    return bytes;\n}\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */ function numberToBytes(value, opts) {\n    const hex = (0,_toHex_js__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(value, opts);\n    return hexToBytes(hex);\n}\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */ function stringToBytes(value, opts = {}) {\n    const bytes = encoder.encode(value);\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(bytes, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(bytes, {\n            dir: \"right\",\n            size: opts.size\n        });\n    }\n    return bytes;\n} //# sourceMappingURL=toBytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boolToHex: () => (/* binding */ boolToHex),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   numberToHex: () => (/* binding */ numberToHex),\n/* harmony export */   stringToHex: () => (/* binding */ stringToHex),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/* harmony import */ var _errors_encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors/encoding.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js\");\n/* harmony import */ var _data_pad_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/pad.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js\");\n/* harmony import */ var _fromHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n\n\n\nconst hexes = /*#__PURE__*/ Array.from({\n    length: 256\n}, (_v, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * Encodes a string, number, bigint, or ByteArray into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex\n * - Example: https://viem.sh/docs/utilities/toHex#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world')\n * // '0x48656c6c6f20776f726c6421'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex(420)\n * // '0x1a4'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world', { size: 32 })\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\n */ function toHex(value, opts = {}) {\n    if (typeof value === \"number\" || typeof value === \"bigint\") return numberToHex(value, opts);\n    if (typeof value === \"string\") {\n        return stringToHex(value, opts);\n    }\n    if (typeof value === \"boolean\") return boolToHex(value, opts);\n    return bytesToHex(value, opts);\n}\n/**\n * Encodes a boolean into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#booltohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true)\n * // '0x1'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(false)\n * // '0x0'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true, { size: 32 })\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\n */ function boolToHex(value, opts = {}) {\n    const hex = `0x${Number(value)}`;\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_0__.assertSize)(hex, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, {\n            size: opts.size\n        });\n    }\n    return hex;\n}\n/**\n * Encodes a bytes array into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */ function bytesToHex(value, opts = {}) {\n    let string = \"\";\n    for(let i = 0; i < value.length; i++){\n        string += hexes[value[i]];\n    }\n    const hex = `0x${string}`;\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_0__.assertSize)(hex, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, {\n            dir: \"right\",\n            size: opts.size\n        });\n    }\n    return hex;\n}\n/**\n * Encodes a number or bigint into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420)\n * // '0x1a4'\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420, { size: 32 })\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\n */ function numberToHex(value_, opts = {}) {\n    const { signed, size } = opts;\n    const value = BigInt(value_);\n    let maxValue;\n    if (size) {\n        if (signed) maxValue = (1n << BigInt(size) * 8n - 1n) - 1n;\n        else maxValue = 2n ** (BigInt(size) * 8n) - 1n;\n    } else if (typeof value_ === \"number\") {\n        maxValue = BigInt(Number.MAX_SAFE_INTEGER);\n    }\n    const minValue = typeof maxValue === \"bigint\" && signed ? -maxValue - 1n : 0;\n    if (maxValue && value > maxValue || value < minValue) {\n        const suffix = typeof value_ === \"bigint\" ? \"n\" : \"\";\n        throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_2__.IntegerOutOfRangeError({\n            max: maxValue ? `${maxValue}${suffix}` : undefined,\n            min: `${minValue}${suffix}`,\n            signed,\n            size,\n            value: `${value_}${suffix}`\n        });\n    }\n    const hex = `0x${(signed && value < 0 ? (1n << BigInt(size * 8)) + BigInt(value) : value).toString(16)}`;\n    if (size) return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, {\n        size\n    });\n    return hex;\n}\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */ function stringToHex(value_, opts = {}) {\n    const value = encoder.encode(value_);\n    return bytesToHex(value, opts);\n} //# sourceMappingURL=toHex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak256: () => (/* binding */ keccak256)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/isHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/toBytes.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var _encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encoding/toHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\n\nfunction keccak256(value, to_) {\n    const to = to_ || \"hex\";\n    const bytes = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__.keccak_256)((0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_1__.isHex)(value, {\n        strict: false\n    }) ? (0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(value) : value);\n    if (to === \"bytes\") return bytes;\n    return (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__.toHex)(bytes);\n} //# sourceMappingURL=keccak256.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9oYXNoL2tlY2NhazI1Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFnRDtBQUNQO0FBQ1E7QUFDSjtBQUN0QyxTQUFTSSxVQUFVQyxLQUFLLEVBQUVDLEdBQUc7SUFDaEMsTUFBTUMsS0FBS0QsT0FBTztJQUNsQixNQUFNRSxRQUFRUiw4REFBVUEsQ0FBQ0MscURBQUtBLENBQUNJLE9BQU87UUFBRUksUUFBUTtJQUFNLEtBQUtQLDZEQUFPQSxDQUFDRyxTQUFTQTtJQUM1RSxJQUFJRSxPQUFPLFNBQ1AsT0FBT0M7SUFDWCxPQUFPTCx5REFBS0EsQ0FBQ0s7QUFDakIsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9oYXNoL2tlY2NhazI1Ni5qcz9kMDQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGtlY2Nha18yNTYgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3NoYTMnO1xuaW1wb3J0IHsgaXNIZXggfSBmcm9tICcuLi9kYXRhL2lzSGV4LmpzJztcbmltcG9ydCB7IHRvQnl0ZXMgfSBmcm9tICcuLi9lbmNvZGluZy90b0J5dGVzLmpzJztcbmltcG9ydCB7IHRvSGV4IH0gZnJvbSAnLi4vZW5jb2RpbmcvdG9IZXguanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGtlY2NhazI1Nih2YWx1ZSwgdG9fKSB7XG4gICAgY29uc3QgdG8gPSB0b18gfHwgJ2hleCc7XG4gICAgY29uc3QgYnl0ZXMgPSBrZWNjYWtfMjU2KGlzSGV4KHZhbHVlLCB7IHN0cmljdDogZmFsc2UgfSkgPyB0b0J5dGVzKHZhbHVlKSA6IHZhbHVlKTtcbiAgICBpZiAodG8gPT09ICdieXRlcycpXG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICByZXR1cm4gdG9IZXgoYnl0ZXMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VjY2FrMjU2LmpzLm1hcCJdLCJuYW1lcyI6WyJrZWNjYWtfMjU2IiwiaXNIZXgiLCJ0b0J5dGVzIiwidG9IZXgiLCJrZWNjYWsyNTYiLCJ2YWx1ZSIsInRvXyIsInRvIiwiYnl0ZXMiLCJzdHJpY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LruMap: () => (/* binding */ LruMap)\n/* harmony export */ });\n/**\n * Map with a LRU (Least recently used) policy.\n *\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */ class LruMap extends Map {\n    constructor(size){\n        super();\n        Object.defineProperty(this, \"maxSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxSize = size;\n    }\n    get(key) {\n        const value = super.get(key);\n        if (super.has(key) && value !== undefined) {\n            this.delete(key);\n            super.set(key, value);\n        }\n        return value;\n    }\n    set(key, value) {\n        super.set(key, value);\n        if (this.maxSize && this.size > this.maxSize) {\n            const firstKey = this.keys().next().value;\n            if (firstKey) this.delete(firstKey);\n        }\n        return this;\n    }\n} //# sourceMappingURL=lru.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9scnUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDTSxNQUFNQSxlQUFlQztJQUN4QkMsWUFBWUMsSUFBSSxDQUFFO1FBQ2QsS0FBSztRQUNMQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVc7WUFDbkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsT0FBTyxHQUFHUDtJQUNuQjtJQUNBUSxJQUFJQyxHQUFHLEVBQUU7UUFDTCxNQUFNSCxRQUFRLEtBQUssQ0FBQ0UsSUFBSUM7UUFDeEIsSUFBSSxLQUFLLENBQUNDLElBQUlELFFBQVFILFVBQVVLLFdBQVc7WUFDdkMsSUFBSSxDQUFDQyxNQUFNLENBQUNIO1lBQ1osS0FBSyxDQUFDSSxJQUFJSixLQUFLSDtRQUNuQjtRQUNBLE9BQU9BO0lBQ1g7SUFDQU8sSUFBSUosR0FBRyxFQUFFSCxLQUFLLEVBQUU7UUFDWixLQUFLLENBQUNPLElBQUlKLEtBQUtIO1FBQ2YsSUFBSSxJQUFJLENBQUNDLE9BQU8sSUFBSSxJQUFJLENBQUNQLElBQUksR0FBRyxJQUFJLENBQUNPLE9BQU8sRUFBRTtZQUMxQyxNQUFNTyxXQUFXLElBQUksQ0FBQ0MsSUFBSSxHQUFHQyxJQUFJLEdBQUdWLEtBQUs7WUFDekMsSUFBSVEsVUFDQSxJQUFJLENBQUNGLE1BQU0sQ0FBQ0U7UUFDcEI7UUFDQSxPQUFPLElBQUk7SUFDZjtBQUNKLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvbHJ1LmpzPzRmMWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYXAgd2l0aCBhIExSVSAoTGVhc3QgcmVjZW50bHkgdXNlZCkgcG9saWN5LlxuICpcbiAqIEBsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhY2hlX3JlcGxhY2VtZW50X3BvbGljaWVzI0xSVVxuICovXG5leHBvcnQgY2xhc3MgTHJ1TWFwIGV4dGVuZHMgTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihzaXplKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1heFNpemVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tYXhTaXplID0gc2l6ZTtcbiAgICB9XG4gICAgZ2V0KGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN1cGVyLmdldChrZXkpO1xuICAgICAgICBpZiAoc3VwZXIuaGFzKGtleSkgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIHN1cGVyLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHN1cGVyLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMubWF4U2l6ZSAmJiB0aGlzLnNpemUgPiB0aGlzLm1heFNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0S2V5ID0gdGhpcy5rZXlzKCkubmV4dCgpLnZhbHVlO1xuICAgICAgICAgICAgaWYgKGZpcnN0S2V5KVxuICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlKGZpcnN0S2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1scnUuanMubWFwIl0sIm5hbWVzIjpbIkxydU1hcCIsIk1hcCIsImNvbnN0cnVjdG9yIiwic2l6ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJtYXhTaXplIiwiZ2V0Iiwia2V5IiwiaGFzIiwidW5kZWZpbmVkIiwiZGVsZXRlIiwic2V0IiwiZmlyc3RLZXkiLCJrZXlzIiwibmV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recoverAddress: () => (/* binding */ recoverAddress)\n/* harmony export */ });\n/* harmony import */ var _accounts_utils_publicKeyToAddress_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../accounts/utils/publicKeyToAddress.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js\");\n/* harmony import */ var _recoverPublicKey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./recoverPublicKey.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js\");\n\n\nasync function recoverAddress({ hash, signature }) {\n    return (0,_accounts_utils_publicKeyToAddress_js__WEBPACK_IMPORTED_MODULE_0__.publicKeyToAddress)(await (0,_recoverPublicKey_js__WEBPACK_IMPORTED_MODULE_1__.recoverPublicKey)({\n        hash: hash,\n        signature\n    }));\n} //# sourceMappingURL=recoverAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9zaWduYXR1cmUvcmVjb3ZlckFkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdGO0FBQ3ZCO0FBQ2xELGVBQWVFLGVBQWUsRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUc7SUFDckQsT0FBT0oseUZBQWtCQSxDQUFDLE1BQU1DLHNFQUFnQkEsQ0FBQztRQUFFRSxNQUFNQTtRQUFNQztJQUFVO0FBQzdFLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlwZXJmbGlwLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvc2lnbmF0dXJlL3JlY292ZXJBZGRyZXNzLmpzPzRhMWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHVibGljS2V5VG9BZGRyZXNzIH0gZnJvbSAnLi4vLi4vYWNjb3VudHMvdXRpbHMvcHVibGljS2V5VG9BZGRyZXNzLmpzJztcbmltcG9ydCB7IHJlY292ZXJQdWJsaWNLZXkgfSBmcm9tICcuL3JlY292ZXJQdWJsaWNLZXkuanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlY292ZXJBZGRyZXNzKHsgaGFzaCwgc2lnbmF0dXJlLCB9KSB7XG4gICAgcmV0dXJuIHB1YmxpY0tleVRvQWRkcmVzcyhhd2FpdCByZWNvdmVyUHVibGljS2V5KHsgaGFzaDogaGFzaCwgc2lnbmF0dXJlIH0pKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlY292ZXJBZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6WyJwdWJsaWNLZXlUb0FkZHJlc3MiLCJyZWNvdmVyUHVibGljS2V5IiwicmVjb3ZlckFkZHJlc3MiLCJoYXNoIiwic2lnbmF0dXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recoverPublicKey: () => (/* binding */ recoverPublicKey)\n/* harmony export */ });\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/isHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/fromHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n/* harmony import */ var _encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoding/toHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\nasync function recoverPublicKey({ hash, signature }) {\n    const hashHex = (0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(hash) ? hash : (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(hash);\n    const { secp256k1 } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\"));\n    const signature_ = (()=>{\n        // typeof signature: `Signature`\n        if (typeof signature === \"object\" && \"r\" in signature && \"s\" in signature) {\n            const { r, s, v, yParity } = signature;\n            const yParityOrV = Number(yParity ?? v);\n            const recoveryBit = toRecoveryBit(yParityOrV);\n            return new secp256k1.Signature((0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(r), (0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(s)).addRecoveryBit(recoveryBit);\n        }\n        // typeof signature: `Hex | ByteArray`\n        const signatureHex = (0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(signature) ? signature : (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(signature);\n        const yParityOrV = (0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToNumber)(`0x${signatureHex.slice(130)}`);\n        const recoveryBit = toRecoveryBit(yParityOrV);\n        return secp256k1.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);\n    })();\n    const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);\n    return `0x${publicKey}`;\n}\nfunction toRecoveryBit(yParityOrV) {\n    if (yParityOrV === 0 || yParityOrV === 1) return yParityOrV;\n    if (yParityOrV === 27) return 0;\n    if (yParityOrV === 28) return 1;\n    throw new Error(\"Invalid yParityOrV value\");\n} //# sourceMappingURL=recoverPublicKey.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9zaWduYXR1cmUvcmVjb3ZlclB1YmxpY0tleS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlDO0FBQzBCO0FBQ3RCO0FBQ3RDLGVBQWVJLGlCQUFpQixFQUFFQyxJQUFJLEVBQUVDLFNBQVMsRUFBRztJQUN2RCxNQUFNQyxVQUFVUCxxREFBS0EsQ0FBQ0ssUUFBUUEsT0FBT0YseURBQUtBLENBQUNFO0lBQzNDLE1BQU0sRUFBRUcsU0FBUyxFQUFFLEdBQUcsTUFBTSwwS0FBTztJQUNuQyxNQUFNQyxhQUFhLENBQUM7UUFDaEIsZ0NBQWdDO1FBQ2hDLElBQUksT0FBT0gsY0FBYyxZQUFZLE9BQU9BLGFBQWEsT0FBT0EsV0FBVztZQUN2RSxNQUFNLEVBQUVJLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLE9BQU8sRUFBRSxHQUFHUDtZQUM3QixNQUFNUSxhQUFhQyxPQUFPRixXQUFXRDtZQUNyQyxNQUFNSSxjQUFjQyxjQUFjSDtZQUNsQyxPQUFPLElBQUlOLFVBQVVVLFNBQVMsQ0FBQ2pCLGlFQUFXQSxDQUFDUyxJQUFJVCxpRUFBV0EsQ0FBQ1UsSUFBSVEsY0FBYyxDQUFDSDtRQUNsRjtRQUNBLHNDQUFzQztRQUN0QyxNQUFNSSxlQUFlcEIscURBQUtBLENBQUNNLGFBQWFBLFlBQVlILHlEQUFLQSxDQUFDRztRQUMxRCxNQUFNUSxhQUFhWixpRUFBV0EsQ0FBQyxDQUFDLEVBQUUsRUFBRWtCLGFBQWFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDN0QsTUFBTUwsY0FBY0MsY0FBY0g7UUFDbEMsT0FBT04sVUFBVVUsU0FBUyxDQUFDSSxXQUFXLENBQUNGLGFBQWFHLFNBQVMsQ0FBQyxHQUFHLE1BQU1KLGNBQWMsQ0FBQ0g7SUFDMUY7SUFDQSxNQUFNUSxZQUFZZixXQUNiTCxnQkFBZ0IsQ0FBQ0csUUFBUWdCLFNBQVMsQ0FBQyxJQUNuQ3BCLEtBQUssQ0FBQztJQUNYLE9BQU8sQ0FBQyxFQUFFLEVBQUVxQixVQUFVLENBQUM7QUFDM0I7QUFDQSxTQUFTUCxjQUFjSCxVQUFVO0lBQzdCLElBQUlBLGVBQWUsS0FBS0EsZUFBZSxHQUNuQyxPQUFPQTtJQUNYLElBQUlBLGVBQWUsSUFDZixPQUFPO0lBQ1gsSUFBSUEsZUFBZSxJQUNmLE9BQU87SUFDWCxNQUFNLElBQUlXLE1BQU07QUFDcEIsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeXBlcmZsaXAtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9zaWduYXR1cmUvcmVjb3ZlclB1YmxpY0tleS5qcz8xM2YzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSGV4IH0gZnJvbSAnLi4vZGF0YS9pc0hleC5qcyc7XG5pbXBvcnQgeyBoZXhUb0JpZ0ludCwgaGV4VG9OdW1iZXIsIH0gZnJvbSAnLi4vZW5jb2RpbmcvZnJvbUhleC5qcyc7XG5pbXBvcnQgeyB0b0hleCB9IGZyb20gJy4uL2VuY29kaW5nL3RvSGV4LmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWNvdmVyUHVibGljS2V5KHsgaGFzaCwgc2lnbmF0dXJlLCB9KSB7XG4gICAgY29uc3QgaGFzaEhleCA9IGlzSGV4KGhhc2gpID8gaGFzaCA6IHRvSGV4KGhhc2gpO1xuICAgIGNvbnN0IHsgc2VjcDI1NmsxIH0gPSBhd2FpdCBpbXBvcnQoJ0Bub2JsZS9jdXJ2ZXMvc2VjcDI1NmsxJyk7XG4gICAgY29uc3Qgc2lnbmF0dXJlXyA9ICgoKSA9PiB7XG4gICAgICAgIC8vIHR5cGVvZiBzaWduYXR1cmU6IGBTaWduYXR1cmVgXG4gICAgICAgIGlmICh0eXBlb2Ygc2lnbmF0dXJlID09PSAnb2JqZWN0JyAmJiAncicgaW4gc2lnbmF0dXJlICYmICdzJyBpbiBzaWduYXR1cmUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgciwgcywgdiwgeVBhcml0eSB9ID0gc2lnbmF0dXJlO1xuICAgICAgICAgICAgY29uc3QgeVBhcml0eU9yViA9IE51bWJlcih5UGFyaXR5ID8/IHYpO1xuICAgICAgICAgICAgY29uc3QgcmVjb3ZlcnlCaXQgPSB0b1JlY292ZXJ5Qml0KHlQYXJpdHlPclYpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBzZWNwMjU2azEuU2lnbmF0dXJlKGhleFRvQmlnSW50KHIpLCBoZXhUb0JpZ0ludChzKSkuYWRkUmVjb3ZlcnlCaXQocmVjb3ZlcnlCaXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHR5cGVvZiBzaWduYXR1cmU6IGBIZXggfCBCeXRlQXJyYXlgXG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZUhleCA9IGlzSGV4KHNpZ25hdHVyZSkgPyBzaWduYXR1cmUgOiB0b0hleChzaWduYXR1cmUpO1xuICAgICAgICBjb25zdCB5UGFyaXR5T3JWID0gaGV4VG9OdW1iZXIoYDB4JHtzaWduYXR1cmVIZXguc2xpY2UoMTMwKX1gKTtcbiAgICAgICAgY29uc3QgcmVjb3ZlcnlCaXQgPSB0b1JlY292ZXJ5Qml0KHlQYXJpdHlPclYpO1xuICAgICAgICByZXR1cm4gc2VjcDI1NmsxLlNpZ25hdHVyZS5mcm9tQ29tcGFjdChzaWduYXR1cmVIZXguc3Vic3RyaW5nKDIsIDEzMCkpLmFkZFJlY292ZXJ5Qml0KHJlY292ZXJ5Qml0KTtcbiAgICB9KSgpO1xuICAgIGNvbnN0IHB1YmxpY0tleSA9IHNpZ25hdHVyZV9cbiAgICAgICAgLnJlY292ZXJQdWJsaWNLZXkoaGFzaEhleC5zdWJzdHJpbmcoMikpXG4gICAgICAgIC50b0hleChmYWxzZSk7XG4gICAgcmV0dXJuIGAweCR7cHVibGljS2V5fWA7XG59XG5mdW5jdGlvbiB0b1JlY292ZXJ5Qml0KHlQYXJpdHlPclYpIHtcbiAgICBpZiAoeVBhcml0eU9yViA9PT0gMCB8fCB5UGFyaXR5T3JWID09PSAxKVxuICAgICAgICByZXR1cm4geVBhcml0eU9yVjtcbiAgICBpZiAoeVBhcml0eU9yViA9PT0gMjcpXG4gICAgICAgIHJldHVybiAwO1xuICAgIGlmICh5UGFyaXR5T3JWID09PSAyOClcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHlQYXJpdHlPclYgdmFsdWUnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlY292ZXJQdWJsaWNLZXkuanMubWFwIl0sIm5hbWVzIjpbImlzSGV4IiwiaGV4VG9CaWdJbnQiLCJoZXhUb051bWJlciIsInRvSGV4IiwicmVjb3ZlclB1YmxpY0tleSIsImhhc2giLCJzaWduYXR1cmUiLCJoYXNoSGV4Iiwic2VjcDI1NmsxIiwic2lnbmF0dXJlXyIsInIiLCJzIiwidiIsInlQYXJpdHkiLCJ5UGFyaXR5T3JWIiwiTnVtYmVyIiwicmVjb3ZlcnlCaXQiLCJ0b1JlY292ZXJ5Qml0IiwiU2lnbmF0dXJlIiwiYWRkUmVjb3ZlcnlCaXQiLCJzaWduYXR1cmVIZXgiLCJzbGljZSIsImZyb21Db21wYWN0Iiwic3Vic3RyaW5nIiwicHVibGljS2V5IiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js\n");

/***/ })

};
;