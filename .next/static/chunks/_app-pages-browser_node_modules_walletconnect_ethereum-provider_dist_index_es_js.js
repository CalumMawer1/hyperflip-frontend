/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_walletconnect_ethereum-provider_dist_index_es_js"],{

/***/ "?8d7a":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "?1fc4":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/core/dist/index.es.js":
/*!***********************************************************!*\
  !*** ./node_modules/@walletconnect/core/dist/index.es.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_CONTEXT: function() { return /* binding */ he; },\n/* harmony export */   CORE_DEFAULT: function() { return /* binding */ mt; },\n/* harmony export */   CORE_PROTOCOL: function() { return /* binding */ xe; },\n/* harmony export */   CORE_STORAGE_OPTIONS: function() { return /* binding */ vt; },\n/* harmony export */   CORE_STORAGE_PREFIX: function() { return /* binding */ B; },\n/* harmony export */   CORE_VERSION: function() { return /* binding */ Oe; },\n/* harmony export */   CRYPTO_CLIENT_SEED: function() { return /* binding */ Ae; },\n/* harmony export */   CRYPTO_CONTEXT: function() { return /* binding */ ft; },\n/* harmony export */   CRYPTO_JWT_TTL: function() { return /* binding */ _t; },\n/* harmony export */   Core: function() { return /* binding */ co; },\n/* harmony export */   Crypto: function() { return /* binding */ bi; },\n/* harmony export */   ECHO_CONTEXT: function() { return /* binding */ Ht; },\n/* harmony export */   ECHO_URL: function() { return /* binding */ Yt; },\n/* harmony export */   EVENTS_CLIENT_API_URL: function() { return /* binding */ Zt; },\n/* harmony export */   EVENTS_STORAGE_CLEANUP_INTERVAL: function() { return /* binding */ Wt; },\n/* harmony export */   EVENTS_STORAGE_CONTEXT: function() { return /* binding */ Xt; },\n/* harmony export */   EVENTS_STORAGE_VERSION: function() { return /* binding */ Jt; },\n/* harmony export */   EVENT_CLIENT_AUTHENTICATE_ERRORS: function() { return /* binding */ Ys; },\n/* harmony export */   EVENT_CLIENT_AUTHENTICATE_TRACES: function() { return /* binding */ Hs; },\n/* harmony export */   EVENT_CLIENT_CONTEXT: function() { return /* binding */ Vs; },\n/* harmony export */   EVENT_CLIENT_PAIRING_ERRORS: function() { return /* binding */ J; },\n/* harmony export */   EVENT_CLIENT_PAIRING_TRACES: function() { return /* binding */ q; },\n/* harmony export */   EVENT_CLIENT_SESSION_ERRORS: function() { return /* binding */ Gs; },\n/* harmony export */   EVENT_CLIENT_SESSION_TRACES: function() { return /* binding */ qs; },\n/* harmony export */   EXPIRER_CONTEXT: function() { return /* binding */ Kt; },\n/* harmony export */   EXPIRER_DEFAULT_TTL: function() { return /* binding */ Bs; },\n/* harmony export */   EXPIRER_EVENTS: function() { return /* binding */ M; },\n/* harmony export */   EXPIRER_STORAGE_VERSION: function() { return /* binding */ Bt; },\n/* harmony export */   EchoClient: function() { return /* binding */ Ai; },\n/* harmony export */   EventClient: function() { return /* binding */ $i; },\n/* harmony export */   Expirer: function() { return /* binding */ Ri; },\n/* harmony export */   HISTORY_CONTEXT: function() { return /* binding */ Ft; },\n/* harmony export */   HISTORY_EVENTS: function() { return /* binding */ F; },\n/* harmony export */   HISTORY_STORAGE_VERSION: function() { return /* binding */ Mt; },\n/* harmony export */   JsonRpcHistory: function() { return /* binding */ Si; },\n/* harmony export */   KEYCHAIN_CONTEXT: function() { return /* binding */ Et; },\n/* harmony export */   KEYCHAIN_STORAGE_VERSION: function() { return /* binding */ wt; },\n/* harmony export */   KeyChain: function() { return /* binding */ yi; },\n/* harmony export */   MESSAGES_CONTEXT: function() { return /* binding */ It; },\n/* harmony export */   MESSAGES_STORAGE_VERSION: function() { return /* binding */ Tt; },\n/* harmony export */   MessageTracker: function() { return /* binding */ Di; },\n/* harmony export */   PAIRING_CONTEXT: function() { return /* binding */ kt; },\n/* harmony export */   PAIRING_DEFAULT_TTL: function() { return /* binding */ Ks; },\n/* harmony export */   PAIRING_EVENTS: function() { return /* binding */ se; },\n/* harmony export */   PAIRING_RPC_OPTS: function() { return /* binding */ ie; },\n/* harmony export */   PAIRING_STORAGE_VERSION: function() { return /* binding */ Ut; },\n/* harmony export */   PENDING_SUB_RESOLUTION_TIMEOUT: function() { return /* binding */ Lt; },\n/* harmony export */   PUBLISHER_CONTEXT: function() { return /* binding */ Ct; },\n/* harmony export */   PUBLISHER_DEFAULT_TTL: function() { return /* binding */ Ne; },\n/* harmony export */   Pairing: function() { return /* binding */ Pi; },\n/* harmony export */   RELAYER_CONTEXT: function() { return /* binding */ Rt; },\n/* harmony export */   RELAYER_DEFAULT_LOGGER: function() { return /* binding */ St; },\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: function() { return /* binding */ Pt; },\n/* harmony export */   RELAYER_DEFAULT_RELAY_URL: function() { return /* binding */ $e; },\n/* harmony export */   RELAYER_EVENTS: function() { return /* binding */ T; },\n/* harmony export */   RELAYER_PROVIDER_EVENTS: function() { return /* binding */ L; },\n/* harmony export */   RELAYER_RECONNECT_TIMEOUT: function() { return /* binding */ Ot; },\n/* harmony export */   RELAYER_SDK_VERSION: function() { return /* binding */ me; },\n/* harmony export */   RELAYER_STORAGE_OPTIONS: function() { return /* binding */ Us; },\n/* harmony export */   RELAYER_SUBSCRIBER_SUFFIX: function() { return /* binding */ xt; },\n/* harmony export */   RELAYER_TRANSPORT_CUTOFF: function() { return /* binding */ Fs; },\n/* harmony export */   Relayer: function() { return /* binding */ wi; },\n/* harmony export */   STORE_STORAGE_VERSION: function() { return /* binding */ At; },\n/* harmony export */   SUBSCRIBER_CONTEXT: function() { return /* binding */ $t; },\n/* harmony export */   SUBSCRIBER_DEFAULT_TTL: function() { return /* binding */ Ms; },\n/* harmony export */   SUBSCRIBER_EVENTS: function() { return /* binding */ $; },\n/* harmony export */   SUBSCRIBER_STORAGE_VERSION: function() { return /* binding */ zt; },\n/* harmony export */   Store: function() { return /* binding */ Ci; },\n/* harmony export */   Subscriber: function() { return /* binding */ fi; },\n/* harmony export */   TRANSPORT_TYPES: function() { return /* binding */ Q; },\n/* harmony export */   TRUSTED_VERIFY_URLS: function() { return /* binding */ Gt; },\n/* harmony export */   VERIFY_CONTEXT: function() { return /* binding */ jt; },\n/* harmony export */   VERIFY_SERVER: function() { return /* binding */ le; },\n/* harmony export */   VERIFY_SERVER_V3: function() { return /* binding */ qt; },\n/* harmony export */   Verify: function() { return /* binding */ xi; },\n/* harmony export */   WALLETCONNECT_CLIENT_ID: function() { return /* binding */ Nt; },\n/* harmony export */   WALLETCONNECT_LINK_MODE_APPS: function() { return /* binding */ ze; },\n/* harmony export */   \"default\": function() { return /* binding */ _e; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/heartbeat */ \"(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/index.es.js\");\n/* harmony import */ var _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/keyvaluestorage */ \"(app-pages-browser)/./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/logger */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @walletconnect/types */ \"(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/relay-auth */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uint8arrays */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/jsonrpc-ws-connection */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash.isequal */ \"(app-pages-browser)/./node_modules/lodash.isequal/index.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_isequal__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @walletconnect/window-getters */ \"(app-pages-browser)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst xe = \"wc\", Oe = 2, he = \"core\", B = \"\".concat(xe, \"@2:\").concat(he, \":\"), mt = {\n    name: he,\n    logger: \"error\"\n}, vt = {\n    database: \":memory:\"\n}, ft = \"crypto\", Ae = \"client_ed25519_seed\", _t = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY, Et = \"keychain\", wt = \"0.3\", It = \"messages\", Tt = \"0.3\", Ne = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.SIX_HOURS, Ct = \"publisher\", Pt = \"irn\", St = \"error\", $e = \"wss://relay.walletconnect.org\", Rt = \"relayer\", T = {\n    message: \"relayer_message\",\n    message_ack: \"relayer_message_ack\",\n    connect: \"relayer_connect\",\n    disconnect: \"relayer_disconnect\",\n    error: \"relayer_error\",\n    connection_stalled: \"relayer_connection_stalled\",\n    transport_closed: \"relayer_transport_closed\",\n    publish: \"relayer_publish\"\n}, xt = \"_subscription\", L = {\n    payload: \"payload\",\n    connect: \"connect\",\n    disconnect: \"disconnect\",\n    error: \"error\"\n}, Ot = .1, Us = {\n    database: \":memory:\"\n}, me = \"2.19.0\", Fs = 1e4, Q = {\n    link_mode: \"link_mode\",\n    relay: \"relay\"\n}, At = \"0.3\", Nt = \"WALLETCONNECT_CLIENT_ID\", ze = \"WALLETCONNECT_LINK_MODE_APPS\", $ = {\n    created: \"subscription_created\",\n    deleted: \"subscription_deleted\",\n    expired: \"subscription_expired\",\n    disabled: \"subscription_disabled\",\n    sync: \"subscription_sync\",\n    resubscribed: \"subscription_resubscribed\"\n}, Ms = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_DAYS, $t = \"subscription\", zt = \"0.3\", Lt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_SECONDS * 1e3, kt = \"pairing\", Ut = \"0.3\", Ks = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_DAYS, ie = {\n    wc_pairingDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 1e3\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 1001\n        }\n    },\n    wc_pairingPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1002\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1003\n        }\n    },\n    unregistered_method: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        }\n    }\n}, se = {\n    create: \"pairing_create\",\n    expire: \"pairing_expire\",\n    delete: \"pairing_delete\",\n    ping: \"pairing_ping\"\n}, F = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, Ft = \"history\", Mt = \"0.3\", Kt = \"expirer\", M = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n}, Bt = \"0.3\", Bs = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY, jt = \"verify-api\", js = \"https://verify.walletconnect.com\", Vt = \"https://verify.walletconnect.org\", le = Vt, qt = \"\".concat(le, \"/v3\"), Gt = [\n    js,\n    Vt\n], Ht = \"echo\", Yt = \"https://echo.walletconnect.com\", Vs = \"event-client\", q = {\n    pairing_started: \"pairing_started\",\n    pairing_uri_validation_success: \"pairing_uri_validation_success\",\n    pairing_uri_not_expired: \"pairing_uri_not_expired\",\n    store_new_pairing: \"store_new_pairing\",\n    subscribing_pairing_topic: \"subscribing_pairing_topic\",\n    subscribe_pairing_topic_success: \"subscribe_pairing_topic_success\",\n    existing_pairing: \"existing_pairing\",\n    pairing_not_expired: \"pairing_not_expired\",\n    emit_inactive_pairing: \"emit_inactive_pairing\",\n    emit_session_proposal: \"emit_session_proposal\",\n    subscribing_to_pairing_topic: \"subscribing_to_pairing_topic\"\n}, J = {\n    no_wss_connection: \"no_wss_connection\",\n    no_internet_connection: \"no_internet_connection\",\n    malformed_pairing_uri: \"malformed_pairing_uri\",\n    active_pairing_already_exists: \"active_pairing_already_exists\",\n    subscribe_pairing_topic_failure: \"subscribe_pairing_topic_failure\",\n    pairing_expired: \"pairing_expired\",\n    proposal_expired: \"proposal_expired\",\n    proposal_listener_not_found: \"proposal_listener_not_found\"\n}, qs = {\n    session_approve_started: \"session_approve_started\",\n    proposal_not_expired: \"proposal_not_expired\",\n    session_namespaces_validation_success: \"session_namespaces_validation_success\",\n    create_session_topic: \"create_session_topic\",\n    subscribing_session_topic: \"subscribing_session_topic\",\n    subscribe_session_topic_success: \"subscribe_session_topic_success\",\n    publishing_session_approve: \"publishing_session_approve\",\n    session_approve_publish_success: \"session_approve_publish_success\",\n    store_session: \"store_session\",\n    publishing_session_settle: \"publishing_session_settle\",\n    session_settle_publish_success: \"session_settle_publish_success\"\n}, Gs = {\n    no_internet_connection: \"no_internet_connection\",\n    no_wss_connection: \"no_wss_connection\",\n    proposal_expired: \"proposal_expired\",\n    subscribe_session_topic_failure: \"subscribe_session_topic_failure\",\n    session_approve_publish_failure: \"session_approve_publish_failure\",\n    session_settle_publish_failure: \"session_settle_publish_failure\",\n    session_approve_namespace_validation_failure: \"session_approve_namespace_validation_failure\",\n    proposal_not_found: \"proposal_not_found\"\n}, Hs = {\n    authenticated_session_approve_started: \"authenticated_session_approve_started\",\n    authenticated_session_not_expired: \"authenticated_session_not_expired\",\n    chains_caip2_compliant: \"chains_caip2_compliant\",\n    chains_evm_compliant: \"chains_evm_compliant\",\n    create_authenticated_session_topic: \"create_authenticated_session_topic\",\n    cacaos_verified: \"cacaos_verified\",\n    store_authenticated_session: \"store_authenticated_session\",\n    subscribing_authenticated_session_topic: \"subscribing_authenticated_session_topic\",\n    subscribe_authenticated_session_topic_success: \"subscribe_authenticated_session_topic_success\",\n    publishing_authenticated_session_approve: \"publishing_authenticated_session_approve\",\n    authenticated_session_approve_publish_success: \"authenticated_session_approve_publish_success\"\n}, Ys = {\n    no_internet_connection: \"no_internet_connection\",\n    no_wss_connection: \"no_wss_connection\",\n    missing_session_authenticate_request: \"missing_session_authenticate_request\",\n    session_authenticate_request_expired: \"session_authenticate_request_expired\",\n    chains_caip2_compliant_failure: \"chains_caip2_compliant_failure\",\n    chains_evm_compliant_failure: \"chains_evm_compliant_failure\",\n    invalid_cacao: \"invalid_cacao\",\n    subscribe_authenticated_session_topic_failure: \"subscribe_authenticated_session_topic_failure\",\n    authenticated_session_approve_publish_failure: \"authenticated_session_approve_publish_failure\",\n    authenticated_session_pending_request_not_found: \"authenticated_session_pending_request_not_found\"\n}, Jt = .1, Xt = \"event-client\", Wt = 86400, Zt = \"https://pulse.walletconnect.org/batch\";\nfunction Js(n, e) {\n    if (n.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var t = new Uint8Array(256), s = 0; s < t.length; s++)t[s] = 255;\n    for(var i = 0; i < n.length; i++){\n        var r = n.charAt(i), o = r.charCodeAt(0);\n        if (t[o] !== 255) throw new TypeError(r + \" is ambiguous\");\n        t[o] = i;\n    }\n    var a = n.length, c = n.charAt(0), h = Math.log(a) / Math.log(256), u = Math.log(256) / Math.log(a);\n    function g(l) {\n        if (l instanceof Uint8Array || (ArrayBuffer.isView(l) ? l = new Uint8Array(l.buffer, l.byteOffset, l.byteLength) : Array.isArray(l) && (l = Uint8Array.from(l))), !(l instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (l.length === 0) return \"\";\n        for(var y = 0, O = 0, w = 0, v = l.length; w !== v && l[w] === 0;)w++, y++;\n        for(var k = (v - w) * u + 1 >>> 0, I = new Uint8Array(k); w !== v;){\n            for(var V = l[w], X = 0, K = k - 1; (V !== 0 || X < O) && K !== -1; K--, X++)V += 256 * I[K] >>> 0, I[K] = V % a >>> 0, V = V / a >>> 0;\n            if (V !== 0) throw new Error(\"Non-zero carry\");\n            O = X, w++;\n        }\n        for(var Y = k - O; Y !== k && I[Y] === 0;)Y++;\n        for(var ge = c.repeat(y); Y < k; ++Y)ge += n.charAt(I[Y]);\n        return ge;\n    }\n    function m(l) {\n        if (typeof l != \"string\") throw new TypeError(\"Expected String\");\n        if (l.length === 0) return new Uint8Array;\n        var y = 0;\n        if (l[y] !== \" \") {\n            for(var O = 0, w = 0; l[y] === c;)O++, y++;\n            for(var v = (l.length - y) * h + 1 >>> 0, k = new Uint8Array(v); l[y];){\n                var I = t[l.charCodeAt(y)];\n                if (I === 255) return;\n                for(var V = 0, X = v - 1; (I !== 0 || V < w) && X !== -1; X--, V++)I += a * k[X] >>> 0, k[X] = I % 256 >>> 0, I = I / 256 >>> 0;\n                if (I !== 0) throw new Error(\"Non-zero carry\");\n                w = V, y++;\n            }\n            if (l[y] !== \" \") {\n                for(var K = v - w; K !== v && k[K] === 0;)K++;\n                for(var Y = new Uint8Array(O + (v - K)), ge = O; K !== v;)Y[ge++] = k[K++];\n                return Y;\n            }\n        }\n    }\n    function A(l) {\n        var y = m(l);\n        if (y) return y;\n        throw new Error(\"Non-\".concat(e, \" character\"));\n    }\n    return {\n        encode: g,\n        decodeUnsafe: m,\n        decode: A\n    };\n}\n_c = Js;\nvar Xs = Js, Ws = Xs;\nconst Qt = (n)=>{\n    if (n instanceof Uint8Array && n.constructor.name === \"Uint8Array\") return n;\n    if (n instanceof ArrayBuffer) return new Uint8Array(n);\n    if (ArrayBuffer.isView(n)) return new Uint8Array(n.buffer, n.byteOffset, n.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, Zs = (n)=>new TextEncoder().encode(n), Qs = (n)=>new TextDecoder().decode(n);\nclass er {\n    encode(e) {\n        if (e instanceof Uint8Array) return \"\".concat(this.prefix).concat(this.baseEncode(e));\n        throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, t, s){\n        this.name = e, this.prefix = t, this.baseEncode = s;\n    }\n}\nclass tr {\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", \").concat(this.name, \" decoder only supports inputs prefixed with \").concat(this.prefix));\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return ei(this, e);\n    }\n    constructor(e, t, s){\n        if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;\n    }\n}\nclass ir {\n    or(e) {\n        return ei(this, e);\n    }\n    decode(e) {\n        const t = e[0], s = this.decoders[t];\n        if (s) return s.decode(e);\n        throw RangeError(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", only inputs prefixed with \").concat(Object.keys(this.decoders), \" are supported\"));\n    }\n    constructor(e){\n        this.decoders = e;\n    }\n}\nconst ei = (n, e)=>new ir({\n        ...n.decoders || {\n            [n.prefix]: n\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nclass sr {\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n    constructor(e, t, s, i){\n        this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = i, this.encoder = new er(e, t, s), this.decoder = new tr(e, t, i);\n    }\n}\nconst ve = (param)=>{\n    let { name: n, prefix: e, encode: t, decode: s } = param;\n    return new sr(n, e, t, s);\n}, ue = (param)=>{\n    let { prefix: n, name: e, alphabet: t } = param;\n    const { encode: s, decode: i } = Ws(t, e);\n    return ve({\n        prefix: n,\n        name: e,\n        encode: s,\n        decode: (r)=>Qt(i(r))\n    });\n}, rr = (n, e, t, s)=>{\n    const i = {};\n    for(let u = 0; u < e.length; ++u)i[e[u]] = u;\n    let r = n.length;\n    for(; n[r - 1] === \"=\";)--r;\n    const o = new Uint8Array(r * t / 8 | 0);\n    let a = 0, c = 0, h = 0;\n    for(let u = 0; u < r; ++u){\n        const g = i[n[u]];\n        if (g === void 0) throw new SyntaxError(\"Non-\".concat(s, \" character\"));\n        c = c << t | g, a += t, a >= 8 && (a -= 8, o[h++] = 255 & c >> a);\n    }\n    if (a >= t || 255 & c << 8 - a) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, nr = (n, e, t)=>{\n    const s = e[e.length - 1] === \"=\", i = (1 << t) - 1;\n    let r = \"\", o = 0, a = 0;\n    for(let c = 0; c < n.length; ++c)for(a = a << 8 | n[c], o += 8; o > t;)o -= t, r += e[i & a >> o];\n    if (o && (r += e[i & a << t - o]), s) for(; r.length * t & 7;)r += \"=\";\n    return r;\n}, C = (param)=>{\n    let { name: n, prefix: e, bitsPerChar: t, alphabet: s } = param;\n    return ve({\n        prefix: e,\n        name: n,\n        encode (i) {\n            return nr(i, s, t);\n        },\n        decode (i) {\n            return rr(i, s, t, n);\n        }\n    });\n}, or = ve({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (n)=>Qs(n),\n    decode: (n)=>Zs(n)\n});\nvar ar = Object.freeze({\n    __proto__: null,\n    identity: or\n});\nconst cr = C({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar hr = Object.freeze({\n    __proto__: null,\n    base2: cr\n});\nconst lr = C({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar ur = Object.freeze({\n    __proto__: null,\n    base8: lr\n});\nconst dr = ue({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar pr = Object.freeze({\n    __proto__: null,\n    base10: dr\n});\nconst gr = C({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), yr = C({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar br = Object.freeze({\n    __proto__: null,\n    base16: gr,\n    base16upper: yr\n});\nconst Dr = C({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), mr = C({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), vr = C({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), fr = C({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), _r = C({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), Er = C({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), wr = C({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), Ir = C({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), Tr = C({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar Cr = Object.freeze({\n    __proto__: null,\n    base32: Dr,\n    base32upper: mr,\n    base32pad: vr,\n    base32padupper: fr,\n    base32hex: _r,\n    base32hexupper: Er,\n    base32hexpad: wr,\n    base32hexpadupper: Ir,\n    base32z: Tr\n});\nconst Pr = ue({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), Sr = ue({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar Rr = Object.freeze({\n    __proto__: null,\n    base36: Pr,\n    base36upper: Sr\n});\nconst xr = ue({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Or = ue({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar Ar = Object.freeze({\n    __proto__: null,\n    base58btc: xr,\n    base58flickr: Or\n});\nconst Nr = C({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), $r = C({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), zr = C({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), Lr = C({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar kr = Object.freeze({\n    __proto__: null,\n    base64: Nr,\n    base64pad: $r,\n    base64url: zr,\n    base64urlpad: Lr\n});\nconst ti = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), Ur = ti.reduce((n, e, t)=>(n[t] = e, n), []), Fr = ti.reduce((n, e, t)=>(n[e.codePointAt(0)] = t, n), []);\nfunction Mr(n) {\n    return n.reduce((e, t)=>(e += Ur[t], e), \"\");\n}\n_c1 = Mr;\nfunction Kr(n) {\n    const e = [];\n    for (const t of n){\n        const s = Fr[t.codePointAt(0)];\n        if (s === void 0) throw new Error(\"Non-base256emoji character: \".concat(t));\n        e.push(s);\n    }\n    return new Uint8Array(e);\n}\n_c2 = Kr;\nconst Br = ve({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: Mr,\n    decode: Kr\n});\nvar jr = Object.freeze({\n    __proto__: null,\n    base256emoji: Br\n}), Vr = si, ii = 128, qr = 127, Gr = ~qr, Hr = Math.pow(2, 31);\nfunction si(n, e, t) {\n    e = e || [], t = t || 0;\n    for(var s = t; n >= Hr;)e[t++] = n & 255 | ii, n /= 128;\n    for(; n & Gr;)e[t++] = n & 255 | ii, n >>>= 7;\n    return e[t] = n | 0, si.bytes = t - s + 1, e;\n}\nvar Yr = Le, Jr = 128, ri = 127;\nfunction Le(n, s) {\n    var t = 0, s = s || 0, i = 0, r = s, o, a = n.length;\n    do {\n        if (r >= a) throw Le.bytes = 0, new RangeError(\"Could not decode varint\");\n        o = n[r++], t += i < 28 ? (o & ri) << i : (o & ri) * Math.pow(2, i), i += 7;\n    }while (o >= Jr);\n    return Le.bytes = r - s, t;\n}\n_c3 = Le;\nvar Xr = Math.pow(2, 7), Wr = Math.pow(2, 14), Zr = Math.pow(2, 21), Qr = Math.pow(2, 28), en = Math.pow(2, 35), tn = Math.pow(2, 42), sn = Math.pow(2, 49), rn = Math.pow(2, 56), nn = Math.pow(2, 63), on = function(n) {\n    return n < Xr ? 1 : n < Wr ? 2 : n < Zr ? 3 : n < Qr ? 4 : n < en ? 5 : n < tn ? 6 : n < sn ? 7 : n < rn ? 8 : n < nn ? 9 : 10;\n}, an = {\n    encode: Vr,\n    decode: Yr,\n    encodingLength: on\n}, ni = an;\nconst oi = function(n, e) {\n    let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    return ni.encode(n, e, t), e;\n}, ai = (n)=>ni.encodingLength(n), ke = (n, e)=>{\n    const t = e.byteLength, s = ai(n), i = s + ai(t), r = new Uint8Array(i + t);\n    return oi(n, r, 0), oi(t, r, s), r.set(e, i), new cn(n, t, e, r);\n};\nclass cn {\n    constructor(e, t, s, i){\n        this.code = e, this.size = t, this.digest = s, this.bytes = i;\n    }\n}\nconst ci = (param)=>{\n    let { name: n, code: e, encode: t } = param;\n    return new hn(n, e, t);\n};\nclass hn {\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const t = this.encode(e);\n            return t instanceof Uint8Array ? ke(this.code, t) : t.then((s)=>ke(this.code, s));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, t, s){\n        this.name = e, this.code = t, this.encode = s;\n    }\n}\nconst hi = (n)=>async (e)=>new Uint8Array(await crypto.subtle.digest(n, e)), ln = ci({\n    name: \"sha2-256\",\n    code: 18,\n    encode: hi(\"SHA-256\")\n}), un = ci({\n    name: \"sha2-512\",\n    code: 19,\n    encode: hi(\"SHA-512\")\n});\nvar dn = Object.freeze({\n    __proto__: null,\n    sha256: ln,\n    sha512: un\n});\nconst li = 0, pn = \"identity\", ui = Qt, gn = (n)=>ke(li, ui(n)), yn = {\n    code: li,\n    name: pn,\n    encode: ui,\n    digest: gn\n};\nvar bn = Object.freeze({\n    __proto__: null,\n    identity: yn\n});\nnew TextEncoder, new TextDecoder;\nconst di = {\n    ...ar,\n    ...hr,\n    ...ur,\n    ...pr,\n    ...br,\n    ...Cr,\n    ...Rr,\n    ...Ar,\n    ...kr,\n    ...jr\n};\n({\n    ...dn,\n    ...bn\n});\nfunction Dn() {\n    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(n) : new Uint8Array(n);\n}\n_c4 = Dn;\nfunction pi(n, e, t, s) {\n    return {\n        name: n,\n        prefix: e,\n        encoder: {\n            name: n,\n            prefix: e,\n            encode: t\n        },\n        decoder: {\n            decode: s\n        }\n    };\n}\nconst gi = pi(\"utf8\", \"u\", (n)=>\"u\" + new TextDecoder(\"utf8\").decode(n), (n)=>new TextEncoder().encode(n.substring(1))), Ue = pi(\"ascii\", \"a\", (n)=>{\n    let e = \"a\";\n    for(let t = 0; t < n.length; t++)e += String.fromCharCode(n[t]);\n    return e;\n}, (n)=>{\n    n = n.substring(1);\n    const e = Dn(n.length);\n    for(let t = 0; t < n.length; t++)e[t] = n.charCodeAt(t);\n    return e;\n}), mn = {\n    utf8: gi,\n    \"utf-8\": gi,\n    hex: di.base16,\n    latin1: Ue,\n    ascii: Ue,\n    binary: Ue,\n    ...di\n};\nfunction vn(n) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n    const t = mn[e];\n    if (!t) throw new Error('Unsupported encoding \"'.concat(e, '\"'));\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(n, \"utf8\") : t.decoder.decode(\"\".concat(t.prefix).concat(n));\n}\nvar fn = Object.defineProperty, _n = (n, e, t)=>e in n ? fn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, G = (n, e, t)=>_n(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass yi {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setKeyChain(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.mapToObj)(e));\n    }\n    async getKeyChain() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setKeyChain(this.keychain);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        this.core = e, this.logger = t, G(this, \"keychain\", new Map), G(this, \"name\", Et), G(this, \"version\", wt), G(this, \"initialized\", !1), G(this, \"storagePrefix\", B), G(this, \"init\", async ()=>{\n            if (!this.initialized) {\n                const s = await this.getKeyChain();\n                typeof s < \"u\" && (this.keychain = s), this.initialized = !0;\n            }\n        }), G(this, \"has\", (s)=>(this.isInitialized(), this.keychain.has(s))), G(this, \"set\", async (s, i)=>{\n            this.isInitialized(), this.keychain.set(s, i), await this.persist();\n        }), G(this, \"get\", (s)=>{\n            this.isInitialized();\n            const i = this.keychain.get(s);\n            if (typeof i > \"u\") {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(s));\n                throw new Error(r);\n            }\n            return i;\n        }), G(this, \"del\", async (s)=>{\n            this.isInitialized(), this.keychain.delete(s), await this.persist();\n        }), this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n}\nvar En = Object.defineProperty, wn = (n, e, t)=>e in n ? En(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, P = (n, e, t)=>wn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass bi {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async setPrivateKey(e, t) {\n        return await this.keychain.set(e, t), e;\n    }\n    getPrivateKey(e) {\n        return this.keychain.get(e);\n    }\n    async getClientSeed() {\n        let e = \"\";\n        try {\n            e = this.keychain.get(Ae);\n        } catch (e1) {\n            e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)(), await this.keychain.set(Ae, e);\n        }\n        return vn(e, \"base16\");\n    }\n    getSymKey(e) {\n        return this.keychain.get(e);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t, s){\n        this.core = e, this.logger = t, P(this, \"name\", ft), P(this, \"keychain\"), P(this, \"randomSessionIdentifier\", (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)()), P(this, \"initialized\", !1), P(this, \"init\", async ()=>{\n            this.initialized || (await this.keychain.init(), this.initialized = !0);\n        }), P(this, \"hasKeys\", (i)=>(this.isInitialized(), this.keychain.has(i))), P(this, \"getClientId\", async ()=>{\n            this.isInitialized();\n            const i = await this.getClientSeed(), r = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.generateKeyPair(i);\n            return _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.encodeIss(r.publicKey);\n        }), P(this, \"generateKeyPair\", ()=>{\n            this.isInitialized();\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateKeyPair)();\n            return this.setPrivateKey(i.publicKey, i.privateKey);\n        }), P(this, \"signJWT\", async (i)=>{\n            this.isInitialized();\n            const r = await this.getClientSeed(), o = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.generateKeyPair(r), a = this.randomSessionIdentifier, c = _t;\n            return await _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.signJWT(a, i, c, o);\n        }), P(this, \"generateSharedKey\", (i, r, o)=>{\n            this.isInitialized();\n            const a = this.getPrivateKey(i), c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deriveSymKey)(a, r);\n            return this.setSymKey(c, o);\n        }), P(this, \"setSymKey\", async (i, r)=>{\n            this.isInitialized();\n            const o = r || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashKey)(i);\n            return await this.keychain.set(o, i), o;\n        }), P(this, \"deleteKeyPair\", async (i)=>{\n            this.isInitialized(), await this.keychain.del(i);\n        }), P(this, \"deleteSymKey\", async (i)=>{\n            this.isInitialized(), await this.keychain.del(i);\n        }), P(this, \"encode\", async (i, r, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.validateEncoding)(o), c = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__.safeJsonStringify)(r);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeTwoEnvelope)(a)) return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.encodeTypeTwoEnvelope)(c, o === null || o === void 0 ? void 0 : o.encoding);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeOneEnvelope)(a)) {\n                const m = a.senderPublicKey, A = a.receiverPublicKey;\n                i = await this.generateSharedKey(m, A);\n            }\n            const h = this.getSymKey(i), { type: u, senderPublicKey: g } = a;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.encrypt)({\n                type: u,\n                symKey: h,\n                message: c,\n                senderPublicKey: g,\n                encoding: o === null || o === void 0 ? void 0 : o.encoding\n            });\n        }), P(this, \"decode\", async (i, r, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.validateDecoding)(r, o);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeTwoEnvelope)(a)) {\n                const c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.decodeTypeTwoEnvelope)(r, o === null || o === void 0 ? void 0 : o.encoding);\n                return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__.safeJsonParse)(c);\n            }\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeOneEnvelope)(a)) {\n                const c = a.receiverPublicKey, h = a.senderPublicKey;\n                i = await this.generateSharedKey(c, h);\n            }\n            try {\n                const c = this.getSymKey(i), h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.decrypt)({\n                    symKey: c,\n                    encoded: r,\n                    encoding: o === null || o === void 0 ? void 0 : o.encoding\n                });\n                return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__.safeJsonParse)(h);\n            } catch (c) {\n                this.logger.error(\"Failed to decode message from topic: '\".concat(i, \"', clientId: '\").concat(await this.getClientId(), \"'\")), this.logger.error(c);\n            }\n        }), P(this, \"getPayloadType\", function(i) {\n            let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.BASE64;\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deserialize)({\n                encoded: i,\n                encoding: r\n            });\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.decodeTypeByte)(o.type);\n        }), P(this, \"getPayloadSenderPublicKey\", function(i) {\n            let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.BASE64;\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deserialize)({\n                encoded: i,\n                encoding: r\n            });\n            return o.senderPublicKey ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_7__.toString)(o.senderPublicKey, _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.BASE16) : void 0;\n        }), this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.keychain = s || new yi(this.core, this.logger);\n    }\n}\nvar In = Object.defineProperty, Tn = (n, e, t)=>e in n ? In(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, H = (n, e, t)=>Tn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Di extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IMessageTracker {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setRelayerMessages(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.mapToObj)(e));\n    }\n    async getRelayerMessages() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setRelayerMessages(this.messages);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        super(e, t), this.logger = e, this.core = t, H(this, \"messages\", new Map), H(this, \"name\", It), H(this, \"version\", Tt), H(this, \"initialized\", !1), H(this, \"storagePrefix\", B), H(this, \"init\", async ()=>{\n            if (!this.initialized) {\n                this.logger.trace(\"Initialized\");\n                try {\n                    const s = await this.getRelayerMessages();\n                    typeof s < \"u\" && (this.messages = s), this.logger.debug(\"Successfully Restored records for \".concat(this.name)), this.logger.trace({\n                        type: \"method\",\n                        method: \"restore\",\n                        size: this.messages.size\n                    });\n                } catch (s) {\n                    this.logger.debug(\"Failed to Restore records for \".concat(this.name)), this.logger.error(s);\n                } finally{\n                    this.initialized = !0;\n                }\n            }\n        }), H(this, \"set\", async (s, i)=>{\n            this.isInitialized();\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(i);\n            let o = this.messages.get(s);\n            return typeof o > \"u\" && (o = {}), typeof o[r] < \"u\" || (o[r] = i, this.messages.set(s, o), await this.persist()), r;\n        }), H(this, \"get\", (s)=>{\n            this.isInitialized();\n            let i = this.messages.get(s);\n            return typeof i > \"u\" && (i = {}), i;\n        }), H(this, \"has\", (s, i)=>{\n            this.isInitialized();\n            const r = this.get(s), o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(i);\n            return typeof r[o] < \"u\";\n        }), H(this, \"del\", async (s)=>{\n            this.isInitialized(), this.messages.delete(s), await this.persist();\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e, this.name), this.core = t;\n    }\n}\nvar Cn = Object.defineProperty, Pn = Object.defineProperties, Sn = Object.getOwnPropertyDescriptors, mi = Object.getOwnPropertySymbols, Rn = Object.prototype.hasOwnProperty, xn = Object.prototype.propertyIsEnumerable, Fe = (n, e, t)=>e in n ? Cn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, fe = (n, e)=>{\n    for(var t in e || (e = {}))Rn.call(e, t) && Fe(n, t, e[t]);\n    if (mi) for (var t of mi(e))xn.call(e, t) && Fe(n, t, e[t]);\n    return n;\n}, Me = (n, e)=>Pn(n, Sn(e)), j = (n, e, t)=>Fe(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass On extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IPublisher {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async rpcPublish(e) {\n        var t, s, i, r;\n        const { topic: o, message: a, ttl: c = Ne, prompt: h, tag: u, id: g, attestation: m, tvf: A } = e, l = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)().protocol).publish,\n            params: fe({\n                topic: o,\n                message: a,\n                ttl: c,\n                prompt: h,\n                tag: u,\n                attestation: m\n            }, A),\n            id: g\n        };\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)((t = l.params) == null ? void 0 : t.prompt) && ((s = l.params) == null || delete s.prompt), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)((i = l.params) == null ? void 0 : i.tag) && ((r = l.params) == null || delete r.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"message\",\n            direction: \"outgoing\",\n            request: l\n        });\n        const y = await this.relayer.request(l);\n        return this.relayer.events.emit(T.publish, e), this.logger.debug(\"Successfully Published Payload\"), y;\n    }\n    removeRequestFromQueue(e) {\n        this.queue.delete(e);\n    }\n    checkQueue() {\n        this.queue.forEach(async (e, t)=>{\n            const s = e.attempt + 1;\n            this.queue.set(t, Me(fe({}, e), {\n                attempt: s\n            }));\n            const { topic: i, message: r, opts: o, attestation: a } = e;\n            this.logger.warn({}, \"Publisher: queue->publishing: \".concat(e.opts.id, \", tag: \").concat(e.opts.tag, \", attempt: \").concat(s)), await this.rpcPublish(Me(fe({}, e), {\n                topic: i,\n                message: r,\n                ttl: o.ttl,\n                prompt: o.prompt,\n                tag: o.tag,\n                id: o.id,\n                attestation: a,\n                tvf: o.tvf\n            })), this.logger.warn({}, \"Publisher: queue->published: \".concat(e.opts.id));\n        });\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, ()=>{\n            if (this.needsTransportRestart) {\n                this.needsTransportRestart = !1, this.relayer.events.emit(T.connection_stalled);\n                return;\n            }\n            this.checkQueue();\n        }), this.relayer.on(T.message_ack, (e)=>{\n            this.removeRequestFromQueue(e.id.toString());\n        });\n    }\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, j(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), j(this, \"name\", Ct), j(this, \"queue\", new Map), j(this, \"publishTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_MINUTE)), j(this, \"initialPublishTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 15)), j(this, \"needsTransportRestart\", !1), j(this, \"publish\", async (s, i, r)=>{\n            var o;\n            this.logger.debug(\"Publishing Payload\"), this.logger.trace({\n                type: \"method\",\n                method: \"publish\",\n                params: {\n                    topic: s,\n                    message: i,\n                    opts: r\n                }\n            });\n            const a = (r === null || r === void 0 ? void 0 : r.ttl) || Ne, c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(r), h = (r === null || r === void 0 ? void 0 : r.prompt) || !1, u = (r === null || r === void 0 ? void 0 : r.tag) || 0, g = (r === null || r === void 0 ? void 0 : r.id) || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString(), m = {\n                topic: s,\n                message: i,\n                opts: {\n                    ttl: a,\n                    relay: c,\n                    prompt: h,\n                    tag: u,\n                    id: g,\n                    attestation: r === null || r === void 0 ? void 0 : r.attestation,\n                    tvf: r === null || r === void 0 ? void 0 : r.tvf\n                }\n            }, A = \"Failed to publish payload, please try again. id:\".concat(g, \" tag:\").concat(u);\n            try {\n                const l = new Promise(async (y)=>{\n                    const O = (param)=>{\n                        let { id: v } = param;\n                        m.opts.id === v && (this.removeRequestFromQueue(v), this.relayer.events.removeListener(T.publish, O), y(m));\n                    };\n                    this.relayer.events.on(T.publish, O);\n                    const w = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(new Promise((v, k)=>{\n                        this.rpcPublish({\n                            topic: s,\n                            message: i,\n                            ttl: a,\n                            prompt: h,\n                            tag: u,\n                            id: g,\n                            attestation: r === null || r === void 0 ? void 0 : r.attestation,\n                            tvf: r === null || r === void 0 ? void 0 : r.tvf\n                        }).then(v).catch((I)=>{\n                            this.logger.warn(I, I === null || I === void 0 ? void 0 : I.message), k(I);\n                        });\n                    }), this.initialPublishTimeout, \"Failed initial publish, retrying.... id:\".concat(g, \" tag:\").concat(u));\n                    try {\n                        await w, this.events.removeListener(T.publish, O);\n                    } catch (v) {\n                        this.queue.set(g, Me(fe({}, m), {\n                            attempt: 1\n                        })), this.logger.warn(v, v === null || v === void 0 ? void 0 : v.message);\n                    }\n                });\n                this.logger.trace({\n                    type: \"method\",\n                    method: \"publish\",\n                    params: {\n                        id: g,\n                        topic: s,\n                        message: i,\n                        opts: r\n                    }\n                }), await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(l, this.publishTimeout, A);\n            } catch (l) {\n                if (this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(l), (o = r === null || r === void 0 ? void 0 : r.internal) != null && o.throwOnFailedPublish) throw l;\n            } finally{\n                this.queue.delete(g);\n            }\n        }), j(this, \"on\", (s, i)=>{\n            this.events.on(s, i);\n        }), j(this, \"once\", (s, i)=>{\n            this.events.once(s, i);\n        }), j(this, \"off\", (s, i)=>{\n            this.events.off(s, i);\n        }), j(this, \"removeListener\", (s, i)=>{\n            this.events.removeListener(s, i);\n        }), this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.registerEventListeners();\n    }\n}\nvar An = Object.defineProperty, Nn = (n, e, t)=>e in n ? An(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, re = (n, e, t)=>Nn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass $n {\n    get topics() {\n        return Array.from(this.map.keys());\n    }\n    constructor(){\n        re(this, \"map\", new Map), re(this, \"set\", (e, t)=>{\n            const s = this.get(e);\n            this.exists(e, t) || this.map.set(e, [\n                ...s,\n                t\n            ]);\n        }), re(this, \"get\", (e)=>this.map.get(e) || []), re(this, \"exists\", (e, t)=>this.get(e).includes(t)), re(this, \"delete\", (e, t)=>{\n            if (typeof t > \"u\") {\n                this.map.delete(e);\n                return;\n            }\n            if (!this.map.has(e)) return;\n            const s = this.get(e);\n            if (!this.exists(e, t)) return;\n            const i = s.filter((r)=>r !== t);\n            if (!i.length) {\n                this.map.delete(e);\n                return;\n            }\n            this.map.set(e, i);\n        }), re(this, \"clear\", ()=>{\n            this.map.clear();\n        });\n    }\n}\nvar zn = Object.defineProperty, Ln = Object.defineProperties, kn = Object.getOwnPropertyDescriptors, vi = Object.getOwnPropertySymbols, Un = Object.prototype.hasOwnProperty, Fn = Object.prototype.propertyIsEnumerable, Ke = (n, e, t)=>e in n ? zn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, de = (n, e)=>{\n    for(var t in e || (e = {}))Un.call(e, t) && Ke(n, t, e[t]);\n    if (vi) for (var t of vi(e))Fn.call(e, t) && Ke(n, t, e[t]);\n    return n;\n}, Be = (n, e)=>Ln(n, kn(e)), D = (n, e, t)=>Ke(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass fi extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.ISubscriber {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.subscriptions.size;\n    }\n    get ids() {\n        return Array.from(this.subscriptions.keys());\n    }\n    get values() {\n        return Array.from(this.subscriptions.values());\n    }\n    get topics() {\n        return this.topicMap.topics;\n    }\n    get hasAnyTopics() {\n        return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;\n    }\n    hasSubscription(e, t) {\n        let s = !1;\n        try {\n            s = this.getSubscription(e).topic === t;\n        } catch (e) {}\n        return s;\n    }\n    reset() {\n        this.cached = [], this.initialized = !0;\n    }\n    onDisable() {\n        this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n    }\n    async unsubscribeByTopic(e, t) {\n        const s = this.topicMap.get(e);\n        await Promise.all(s.map(async (i)=>await this.unsubscribeById(e, i, t)));\n    }\n    async unsubscribeById(e, t, s) {\n        this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({\n            type: \"method\",\n            method: \"unsubscribe\",\n            params: {\n                topic: e,\n                id: t,\n                opts: s\n            }\n        });\n        try {\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(s);\n            await this.restartToComplete({\n                topic: e,\n                id: t,\n                relay: i\n            }), await this.rpcUnsubscribe(e, t, i);\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\", \"\".concat(this.name, \", \").concat(e));\n            await this.onUnsubscribe(e, t, r), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"unsubscribe\",\n                params: {\n                    topic: e,\n                    id: t,\n                    opts: s\n                }\n            });\n        } catch (i) {\n            throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(i), i;\n        }\n    }\n    async rpcSubscribe(e, t, s) {\n        var i;\n        (!s || (s === null || s === void 0 ? void 0 : s.transportType) === Q.relay) && await this.restartToComplete({\n            topic: e,\n            id: e,\n            relay: t\n        });\n        const r = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(t.protocol).subscribe,\n            params: {\n                topic: e\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: r\n        });\n        const o = (i = s === null || s === void 0 ? void 0 : s.internal) == null ? void 0 : i.throwOnFailedPublish;\n        try {\n            const a = await this.getSubscriptionId(e);\n            if ((s === null || s === void 0 ? void 0 : s.transportType) === Q.link_mode) return setTimeout(()=>{\n                (this.relayer.connected || this.relayer.connecting) && this.relayer.request(r).catch((u)=>this.logger.warn(u));\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND)), a;\n            const c = new Promise(async (u)=>{\n                const g = (m)=>{\n                    m.topic === e && (this.events.removeListener($.created, g), u(m.id));\n                };\n                this.events.on($.created, g);\n                try {\n                    const m = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(new Promise((A, l)=>{\n                        this.relayer.request(r).catch((y)=>{\n                            this.logger.warn(y, y === null || y === void 0 ? void 0 : y.message), l(y);\n                        }).then(A);\n                    }), this.initialSubscribeTimeout, \"Subscribing to \".concat(e, \" failed, please try again\"));\n                    this.events.removeListener($.created, g), u(m);\n                } catch (e) {}\n            }), h = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(c, this.subscribeTimeout, \"Subscribing to \".concat(e, \" failed, please try again\"));\n            if (!h && o) throw new Error(\"Subscribing to \".concat(e, \" failed, please try again\"));\n            return h ? a : null;\n        } catch (a) {\n            if (this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(T.connection_stalled), o) throw a;\n        }\n        return null;\n    }\n    async rpcBatchSubscribe(e) {\n        if (!e.length) return;\n        const t = e[0].relay, s = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(t.protocol).batchSubscribe,\n            params: {\n                topics: e.map((i)=>i.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        });\n        try {\n            await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(new Promise((i)=>{\n                this.relayer.request(s).catch((r)=>this.logger.warn(r)).then(i);\n            }), this.subscribeTimeout, \"rpcBatchSubscribe failed, please try again\");\n        } catch (e) {\n            this.relayer.events.emit(T.connection_stalled);\n        }\n    }\n    async rpcBatchFetchMessages(e) {\n        if (!e.length) return;\n        const t = e[0].relay, s = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(t.protocol).batchFetchMessages,\n            params: {\n                topics: e.map((r)=>r.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        });\n        let i;\n        try {\n            i = await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(new Promise((r, o)=>{\n                this.relayer.request(s).catch((a)=>{\n                    this.logger.warn(a), o(a);\n                }).then(r);\n            }), this.subscribeTimeout, \"rpcBatchFetchMessages failed, please try again\");\n        } catch (e) {\n            this.relayer.events.emit(T.connection_stalled);\n        }\n        return i;\n    }\n    rpcUnsubscribe(e, t, s) {\n        const i = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(s.protocol).unsubscribe,\n            params: {\n                topic: e,\n                id: t\n            }\n        };\n        return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: i\n        }), this.relayer.request(i);\n    }\n    onSubscribe(e, t) {\n        this.setSubscription(e, Be(de({}, t), {\n            id: e\n        })), this.pending.delete(t.topic);\n    }\n    onBatchSubscribe(e) {\n        e.length && e.forEach((t)=>{\n            this.setSubscription(t.id, de({}, t)), this.pending.delete(t.topic);\n        });\n    }\n    async onUnsubscribe(e, t, s) {\n        this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, s), await this.relayer.messages.del(e);\n    }\n    async setRelayerSubscriptions(e) {\n        await this.relayer.core.storage.setItem(this.storageKey, e);\n    }\n    async getRelayerSubscriptions() {\n        return await this.relayer.core.storage.getItem(this.storageKey);\n    }\n    setSubscription(e, t) {\n        this.logger.debug(\"Setting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"setSubscription\",\n            id: e,\n            subscription: t\n        }), this.addSubscription(e, t);\n    }\n    addSubscription(e, t) {\n        this.subscriptions.set(e, de({}, t)), this.topicMap.set(t.topic, e), this.events.emit($.created, t);\n    }\n    getSubscription(e) {\n        this.logger.debug(\"Getting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"getSubscription\",\n            id: e\n        });\n        const t = this.subscriptions.get(e);\n        if (!t) {\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw new Error(s);\n        }\n        return t;\n    }\n    deleteSubscription(e, t) {\n        this.logger.debug(\"Deleting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"deleteSubscription\",\n            id: e,\n            reason: t\n        });\n        const s = this.getSubscription(e);\n        this.subscriptions.delete(e), this.topicMap.delete(s.topic, e), this.events.emit($.deleted, Be(de({}, s), {\n            reason: t\n        }));\n    }\n    async persist() {\n        await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);\n    }\n    async onRestart() {\n        if (this.cached.length) {\n            const e = [\n                ...this.cached\n            ], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n            for(let s = 0; s < t; s++){\n                const i = e.splice(0, this.batchSubscribeTopicsLimit);\n                await this.batchSubscribe(i);\n            }\n        }\n        this.events.emit($.resubscribed);\n    }\n    async restore() {\n        try {\n            const e = await this.getRelayerSubscriptions();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.subscriptions.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), this.logger.error(\"\".concat(this.name, \": \").concat(JSON.stringify(this.values))), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored subscriptions for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                subscriptions: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore subscriptions for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    async batchSubscribe(e) {\n        e.length && (await this.rpcBatchSubscribe(e), this.onBatchSubscribe(await Promise.all(e.map(async (t)=>Be(de({}, t), {\n                id: await this.getSubscriptionId(t.topic)\n            })))));\n    }\n    async batchFetchMessages(e) {\n        if (!e.length) return;\n        this.logger.trace(\"Fetching batch messages for \".concat(e.length, \" subscriptions\"));\n        const t = await this.rpcBatchFetchMessages(e);\n        t && t.messages && (await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.sleep)((0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));\n    }\n    async onConnect() {\n        await this.restart(), this.reset();\n    }\n    onDisconnect() {\n        this.onDisable();\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async restartToComplete(e) {\n        !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e), await this.relayer.transportOpen());\n    }\n    async getClientId() {\n        return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;\n    }\n    async getSubscriptionId(e) {\n        return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(e + await this.getClientId());\n    }\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, D(this, \"subscriptions\", new Map), D(this, \"topicMap\", new $n), D(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), D(this, \"name\", $t), D(this, \"version\", zt), D(this, \"pending\", new Map), D(this, \"cached\", []), D(this, \"initialized\", !1), D(this, \"pendingSubscriptionWatchLabel\", \"pending_sub_watch_label\"), D(this, \"pollingInterval\", 20), D(this, \"storagePrefix\", B), D(this, \"subscribeTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_MINUTE)), D(this, \"initialSubscribeTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 15)), D(this, \"clientId\"), D(this, \"batchSubscribeTopicsLimit\", 500), D(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), this.registerEventListeners(), await this.restore()), this.initialized = !0;\n        }), D(this, \"subscribe\", async (s, i)=>{\n            this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"subscribe\",\n                params: {\n                    topic: s,\n                    opts: i\n                }\n            });\n            try {\n                const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(i), o = {\n                    topic: s,\n                    relay: r,\n                    transportType: i === null || i === void 0 ? void 0 : i.transportType\n                };\n                this.pending.set(s, o);\n                const a = await this.rpcSubscribe(s, r, i);\n                return typeof a == \"string\" && (this.onSubscribe(a, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"subscribe\",\n                    params: {\n                        topic: s,\n                        opts: i\n                    }\n                })), a;\n            } catch (r) {\n                throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(r), r;\n            }\n        }), D(this, \"unsubscribe\", async (s, i)=>{\n            this.isInitialized(), typeof (i === null || i === void 0 ? void 0 : i.id) < \"u\" ? await this.unsubscribeById(s, i.id, i) : await this.unsubscribeByTopic(s, i);\n        }), D(this, \"isSubscribed\", async (s)=>{\n            if (this.topics.includes(s)) return !0;\n            const i = \"\".concat(this.pendingSubscriptionWatchLabel, \"_\").concat(s);\n            return await new Promise((r, o)=>{\n                const a = new _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.Watch;\n                a.start(i);\n                const c = setInterval(()=>{\n                    (!this.pending.has(s) && this.topics.includes(s) || this.cached.some((h)=>h.topic === s)) && (clearInterval(c), a.stop(i), r(!0)), a.elapsed(i) >= Lt && (clearInterval(c), a.stop(i), o(new Error(\"Subscription resolution timeout\")));\n                }, this.pollingInterval);\n            }).catch(()=>!1);\n        }), D(this, \"on\", (s, i)=>{\n            this.events.on(s, i);\n        }), D(this, \"once\", (s, i)=>{\n            this.events.once(s, i);\n        }), D(this, \"off\", (s, i)=>{\n            this.events.off(s, i);\n        }), D(this, \"removeListener\", (s, i)=>{\n            this.events.removeListener(s, i);\n        }), D(this, \"start\", async ()=>{\n            await this.onConnect();\n        }), D(this, \"stop\", async ()=>{\n            await this.onDisconnect();\n        }), D(this, \"restart\", async ()=>{\n            await this.restore(), await this.onRestart();\n        }), D(this, \"checkPending\", async ()=>{\n            if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;\n            const s = [];\n            this.pending.forEach((i)=>{\n                s.push(i);\n            }), await this.batchSubscribe(s);\n        }), D(this, \"registerEventListeners\", ()=>{\n            this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, async ()=>{\n                await this.checkPending();\n            }), this.events.on($.created, async (s)=>{\n                const i = $.created;\n                this.logger.info(\"Emitting \".concat(i)), this.logger.debug({\n                    type: \"event\",\n                    event: i,\n                    data: s\n                }), await this.persist();\n            }), this.events.on($.deleted, async (s)=>{\n                const i = $.deleted;\n                this.logger.info(\"Emitting \".concat(i)), this.logger.debug({\n                    type: \"event\",\n                    event: i,\n                    data: s\n                }), await this.persist();\n            });\n        }), this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.clientId = \"\";\n    }\n}\nvar Mn = Object.defineProperty, _i = Object.getOwnPropertySymbols, Kn = Object.prototype.hasOwnProperty, Bn = Object.prototype.propertyIsEnumerable, je = (n, e, t)=>e in n ? Mn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, Ei = (n, e)=>{\n    for(var t in e || (e = {}))Kn.call(e, t) && je(n, t, e[t]);\n    if (_i) for (var t of _i(e))Bn.call(e, t) && je(n, t, e[t]);\n    return n;\n}, p = (n, e, t)=>je(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass wi extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IRelayer {\n    async init() {\n        if (this.logger.trace(\"Initialized\"), this.registerEventListeners(), await Promise.all([\n            this.messages.init(),\n            this.subscriber.init()\n        ]), this.initialized = !0, this.subscriber.hasAnyTopics) try {\n            await this.transportOpen();\n        } catch (e) {\n            this.logger.warn(e, e === null || e === void 0 ? void 0 : e.message);\n        }\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get connected() {\n        var e, t, s;\n        return ((s = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : s.readyState) === 1 || !1;\n    }\n    get connecting() {\n        var e, t, s;\n        return ((s = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : s.readyState) === 0 || this.connectPromise !== void 0 || !1;\n    }\n    async publish(e, t, s) {\n        this.isInitialized(), await this.publisher.publish(e, t, s), await this.recordMessageEvent({\n            topic: e,\n            message: t,\n            publishedAt: Date.now(),\n            transportType: Q.relay\n        });\n    }\n    async subscribe(e, t) {\n        var s, i, r;\n        this.isInitialized(), (!(t != null && t.transportType) || (t === null || t === void 0 ? void 0 : t.transportType) === \"relay\") && await this.toEstablishConnection();\n        const o = typeof ((s = t === null || t === void 0 ? void 0 : t.internal) == null ? void 0 : s.throwOnFailedPublish) > \"u\" ? !0 : (i = t === null || t === void 0 ? void 0 : t.internal) == null ? void 0 : i.throwOnFailedPublish;\n        let a = ((r = this.subscriber.topicMap.get(e)) == null ? void 0 : r[0]) || \"\", c;\n        const h = (u)=>{\n            u.topic === e && (this.subscriber.off($.created, h), c());\n        };\n        return await Promise.all([\n            new Promise((u)=>{\n                c = u, this.subscriber.on($.created, h);\n            }),\n            new Promise(async (u, g)=>{\n                a = await this.subscriber.subscribe(e, Ei({\n                    internal: {\n                        throwOnFailedPublish: o\n                    }\n                }, t)).catch((m)=>{\n                    o && g(m);\n                }) || a, u();\n            })\n        ]), a;\n    }\n    async unsubscribe(e, t) {\n        this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async transportDisconnect() {\n        this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.provider.disconnect(), 2e3, \"provider.disconnect()\").catch(()=>this.onProviderDisconnect()) : this.onProviderDisconnect();\n    }\n    async transportClose() {\n        this.transportExplicitlyClosed = !0, await this.transportDisconnect();\n    }\n    async transportOpen(e) {\n        if (!this.subscriber.hasAnyTopics) {\n            this.logger.warn(\"Starting WS connection skipped because the client has no topics to work with.\");\n            return;\n        }\n        if (this.connectPromise ? (this.logger.debug({}, \"Waiting for existing connection attempt to resolve...\"), await this.connectPromise, this.logger.debug({}, \"Existing connection attempt resolved\")) : (this.connectPromise = new Promise(async (t, s)=>{\n            await this.connect(e).then(t).catch(s).finally(()=>{\n                this.connectPromise = void 0;\n            });\n        }), await this.connectPromise), !this.connected) throw new Error(\"Couldn't establish socket connection to the relay server: \".concat(this.relayUrl));\n    }\n    async restartTransport(e) {\n        this.logger.debug({}, \"Restarting transport...\"), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());\n    }\n    async confirmOnlineStateOrThrow() {\n        if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isOnline)()) throw new Error(\"No internet connection detected. Please restart your network and try again.\");\n    }\n    async handleBatchMessageEvents(e) {\n        if ((e === null || e === void 0 ? void 0 : e.length) === 0) {\n            this.logger.trace(\"Batch message events is empty. Ignoring...\");\n            return;\n        }\n        const t = e.sort((s, i)=>s.publishedAt - i.publishedAt);\n        this.logger.debug(\"Batch of \".concat(t.length, \" message events sorted\"));\n        for (const s of t)try {\n            await this.onMessageEvent(s);\n        } catch (i) {\n            this.logger.warn(i, \"Error while processing batch message event: \" + (i === null || i === void 0 ? void 0 : i.message));\n        }\n        this.logger.trace(\"Batch of \".concat(t.length, \" message events processed\"));\n    }\n    async onLinkMessageEvent(e, t) {\n        const { topic: s } = e;\n        if (!t.sessionExists) {\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES), r = {\n                topic: s,\n                expiry: i,\n                relay: {\n                    protocol: \"irn\"\n                },\n                active: !1\n            };\n            await this.core.pairing.pairings.set(s, r);\n        }\n        this.events.emit(T.message, e), await this.recordMessageEvent(e);\n    }\n    async connect(e) {\n        await this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, await this.transportDisconnect()), this.connectionAttemptInProgress = !0, this.transportExplicitlyClosed = !1;\n        let t = 1;\n        for(; t < 6;){\n            try {\n                if (this.transportExplicitlyClosed) break;\n                this.logger.debug({}, \"Connecting to \".concat(this.relayUrl, \", attempt: \").concat(t, \"...\")), await this.createProvider(), await new Promise(async (s, i)=>{\n                    const r = ()=>{\n                        i(new Error(\"Connection interrupted while trying to subscribe\"));\n                    };\n                    this.provider.once(L.disconnect, r), await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(new Promise((o, a)=>{\n                        this.provider.connect().then(o).catch(a);\n                    }), this.connectTimeout, \"Socket stalled when trying to connect to \".concat(this.relayUrl)).catch((o)=>{\n                        i(o);\n                    }).finally(()=>{\n                        this.provider.off(L.disconnect, r), clearTimeout(this.reconnectTimeout);\n                    }), await new Promise(async (o, a)=>{\n                        const c = ()=>{\n                            a(new Error(\"Connection interrupted while trying to subscribe\"));\n                        };\n                        this.provider.once(L.disconnect, c), await this.subscriber.start().then(o).catch(a).finally(()=>{\n                            this.provider.off(L.disconnect, c);\n                        });\n                    }), this.hasExperiencedNetworkDisruption = !1, s();\n                });\n            } catch (s) {\n                await this.subscriber.stop();\n                const i = s;\n                this.logger.warn({}, i.message), this.hasExperiencedNetworkDisruption = !0;\n            } finally{\n                this.connectionAttemptInProgress = !1;\n            }\n            if (this.connected) {\n                this.logger.debug({}, \"Connected to \".concat(this.relayUrl, \" successfully on attempt: \").concat(t));\n                break;\n            }\n            await new Promise((s)=>setTimeout(s, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(t * 1))), t++;\n        }\n    }\n    startPingTimeout() {\n        var e, t, s, i, r;\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isNode)()) try {\n            (t = (e = this.provider) == null ? void 0 : e.connection) != null && t.socket && ((r = (i = (s = this.provider) == null ? void 0 : s.connection) == null ? void 0 : i.socket) == null || r.on(\"ping\", ()=>{\n                this.resetPingTimeout();\n            })), this.resetPingTimeout();\n        } catch (o) {\n            this.logger.warn(o, o === null || o === void 0 ? void 0 : o.message);\n        }\n    }\n    async createProvider() {\n        this.provider.connection && this.unregisterProviderListeners();\n        const e = await this.core.crypto.signJWT(this.relayUrl);\n        this.provider = new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__.JsonRpcProvider(new _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__[\"default\"]((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatRelayRpcUrl)({\n            sdkVersion: me,\n            protocol: this.protocol,\n            version: this.version,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId,\n            auth: e,\n            useOnCloseEvent: !0,\n            bundleId: this.bundleId,\n            packageName: this.packageName\n        }))), this.registerProviderListeners();\n    }\n    async recordMessageEvent(e) {\n        const { topic: t, message: s } = e;\n        await this.messages.set(t, s);\n    }\n    async shouldIgnoreMessageEvent(e) {\n        const { topic: t, message: s } = e;\n        if (!s || s.length === 0) return this.logger.warn(\"Ignoring invalid/empty message: \".concat(s)), !0;\n        if (!await this.subscriber.isSubscribed(t)) return this.logger.warn(\"Ignoring message for non-subscribed topic \".concat(t)), !0;\n        const i = this.messages.has(t, s);\n        return i && this.logger.warn(\"Ignoring duplicate message: \".concat(s)), i;\n    }\n    async onProviderPayload(e) {\n        if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"incoming\",\n            payload: e\n        }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(e)) {\n            if (!e.method.endsWith(xt)) return;\n            const t = e.params, { topic: s, message: i, publishedAt: r, attestation: o } = t.data, a = {\n                topic: s,\n                message: i,\n                publishedAt: r,\n                transportType: Q.relay,\n                attestation: o\n            };\n            this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(Ei({\n                type: \"event\",\n                event: t.id\n            }, a)), this.events.emit(t.id, a), await this.acknowledgePayload(e), await this.onMessageEvent(a);\n        } else (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(e) && this.events.emit(T.message_ack, e);\n    }\n    async onMessageEvent(e) {\n        await this.shouldIgnoreMessageEvent(e) || (this.events.emit(T.message, e), await this.recordMessageEvent(e));\n    }\n    async acknowledgePayload(e) {\n        const t = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(e.id, !0);\n        await this.provider.connection.send(t);\n    }\n    unregisterProviderListeners() {\n        this.provider.off(L.payload, this.onPayloadHandler), this.provider.off(L.connect, this.onConnectHandler), this.provider.off(L.disconnect, this.onDisconnectHandler), this.provider.off(L.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);\n    }\n    async registerEventListeners() {\n        let e = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isOnline)();\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.subscribeToNetworkChange)(async (t)=>{\n            e !== t && (e = t, t ? await this.transportOpen().catch((s)=>this.logger.error(s, s === null || s === void 0 ? void 0 : s.message)) : (this.hasExperiencedNetworkDisruption = !0, await this.transportDisconnect(), this.transportExplicitlyClosed = !1));\n        });\n    }\n    async onProviderDisconnect() {\n        clearTimeout(this.pingTimeout), this.events.emit(T.disconnect), this.connectionAttemptInProgress = !1, !this.reconnectInProgress && (this.reconnectInProgress = !0, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async ()=>{\n            await this.transportOpen().catch((e)=>this.logger.error(e, e === null || e === void 0 ? void 0 : e.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = !1;\n        }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(Ot)))));\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async toEstablishConnection() {\n        await this.confirmOnlineStateOrThrow(), !this.connected && await this.connect();\n    }\n    constructor(e){\n        super(e), p(this, \"protocol\", \"wc\"), p(this, \"version\", 2), p(this, \"core\"), p(this, \"logger\"), p(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), p(this, \"provider\"), p(this, \"messages\"), p(this, \"subscriber\"), p(this, \"publisher\"), p(this, \"name\", Rt), p(this, \"transportExplicitlyClosed\", !1), p(this, \"initialized\", !1), p(this, \"connectionAttemptInProgress\", !1), p(this, \"relayUrl\"), p(this, \"projectId\"), p(this, \"packageName\"), p(this, \"bundleId\"), p(this, \"hasExperiencedNetworkDisruption\", !1), p(this, \"pingTimeout\"), p(this, \"heartBeatTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_SECONDS + _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_SECONDS)), p(this, \"reconnectTimeout\"), p(this, \"connectPromise\"), p(this, \"reconnectInProgress\", !1), p(this, \"requestsInFlight\", []), p(this, \"connectTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 15)), p(this, \"request\", async (t)=>{\n            var s, i;\n            this.logger.debug(\"Publishing Request Payload\");\n            const r = t.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString();\n            await this.toEstablishConnection();\n            try {\n                this.logger.trace({\n                    id: r,\n                    method: t.method,\n                    topic: (s = t.params) == null ? void 0 : s.topic\n                }, \"relayer.request - publishing...\");\n                const o = \"\".concat(r, \":\").concat(((i = t.params) == null ? void 0 : i.tag) || \"\");\n                this.requestsInFlight.push(o);\n                const a = await this.provider.request(t);\n                return this.requestsInFlight = this.requestsInFlight.filter((c)=>c !== o), a;\n            } catch (o) {\n                throw this.logger.debug(\"Failed to Publish Request: \".concat(r)), o;\n            }\n        }), p(this, \"resetPingTimeout\", ()=>{\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isNode)()) try {\n                clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(()=>{\n                    var t, s, i;\n                    this.logger.debug({}, \"pingTimeout: Connection stalled, terminating...\"), (i = (s = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : s.socket) == null || i.terminate();\n                }, this.heartBeatTimeout);\n            } catch (t) {\n                this.logger.warn(t, t === null || t === void 0 ? void 0 : t.message);\n            }\n        }), p(this, \"onPayloadHandler\", (t)=>{\n            this.onProviderPayload(t), this.resetPingTimeout();\n        }), p(this, \"onConnectHandler\", ()=>{\n            this.logger.warn({}, \"Relayer connected \\uD83D\\uDEDC\"), this.startPingTimeout(), this.events.emit(T.connect);\n        }), p(this, \"onDisconnectHandler\", ()=>{\n            this.logger.warn({}, \"Relayer disconnected \\uD83D\\uDED1\"), this.requestsInFlight = [], this.onProviderDisconnect();\n        }), p(this, \"onProviderErrorHandler\", (t)=>{\n            this.logger.fatal(\"Fatal socket error: \".concat(t.message)), this.events.emit(T.error, t), this.logger.fatal(\"Fatal socket error received, closing transport\"), this.transportClose();\n        }), p(this, \"registerProviderListeners\", ()=>{\n            this.provider.on(L.payload, this.onPayloadHandler), this.provider.on(L.connect, this.onConnectHandler), this.provider.on(L.disconnect, this.onDisconnectHandler), this.provider.on(L.error, this.onProviderErrorHandler);\n        }), this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e.logger, this.name) : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: e.logger || St\n        })), this.messages = new Di(this.logger, e.core), this.subscriber = new fi(this, this.logger), this.publisher = new On(this, this.logger), this.relayUrl = (e === null || e === void 0 ? void 0 : e.relayUrl) || $e, this.projectId = e.projectId, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isAndroid)() ? this.packageName = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getAppId)() : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isIos)() && (this.bundleId = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getAppId)()), this.provider = {};\n    }\n}\nvar jn = Object.defineProperty, Ii = Object.getOwnPropertySymbols, Vn = Object.prototype.hasOwnProperty, qn = Object.prototype.propertyIsEnumerable, Ve = (n, e, t)=>e in n ? jn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, Ti = (n, e)=>{\n    for(var t in e || (e = {}))Vn.call(e, t) && Ve(n, t, e[t]);\n    if (Ii) for (var t of Ii(e))qn.call(e, t) && Ve(n, t, e[t]);\n    return n;\n}, z = (n, e, t)=>Ve(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Ci extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IStore {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.map.size;\n    }\n    get keys() {\n        return Array.from(this.map.keys());\n    }\n    get values() {\n        return Array.from(this.map.values());\n    }\n    addToRecentlyDeleted(e) {\n        this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);\n    }\n    async setDataStore(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getDataStore() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getData(e) {\n        const t = this.map.get(e);\n        if (!t) {\n            if (this.recentlyDeleted.includes(e)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"Record was recently deleted - \".concat(this.name, \": \").concat(e));\n                throw this.logger.error(i), new Error(i);\n            }\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw this.logger.error(s), new Error(s);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setDataStore(this.values);\n    }\n    async restore() {\n        try {\n            const e = await this.getDataStore();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.map.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored value for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                value: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore value for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t, s, i = B, r = void 0){\n        super(e, t, s, i), this.core = e, this.logger = t, this.name = s, z(this, \"map\", new Map), z(this, \"version\", At), z(this, \"cached\", []), z(this, \"initialized\", !1), z(this, \"getKey\"), z(this, \"storagePrefix\", B), z(this, \"recentlyDeleted\", []), z(this, \"recentlyDeletedLimit\", 200), z(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((o)=>{\n                this.getKey && o !== null && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)(o) ? this.map.set(this.getKey(o), o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isProposalStruct)(o) ? this.map.set(o.id, o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isSessionStruct)(o) && this.map.set(o.topic, o);\n            }), this.cached = [], this.initialized = !0);\n        }), z(this, \"set\", async (o, a)=>{\n            this.isInitialized(), this.map.has(o) ? await this.update(o, a) : (this.logger.debug(\"Setting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                key: o,\n                value: a\n            }), this.map.set(o, a), await this.persist());\n        }), z(this, \"get\", (o)=>(this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                key: o\n            }), this.getData(o))), z(this, \"getAll\", (o)=>(this.isInitialized(), o ? this.values.filter((a)=>Object.keys(o).every((c)=>lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default()(a[c], o[c]))) : this.values)), z(this, \"update\", async (o, a)=>{\n            this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                key: o,\n                update: a\n            });\n            const c = Ti(Ti({}, this.getData(o)), a);\n            this.map.set(o, c), await this.persist();\n        }), z(this, \"delete\", async (o, a)=>{\n            this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                key: o,\n                reason: a\n            }), this.map.delete(o), this.addToRecentlyDeleted(o), await this.persist());\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.storagePrefix = i, this.getKey = r;\n    }\n}\nvar Gn = Object.defineProperty, Hn = (n, e, t)=>e in n ? Gn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, d = (n, e, t)=>Hn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Pi {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    registerRelayerEvents() {\n        this.core.relayer.on(T.message, async (e)=>{\n            const { topic: t, message: s, transportType: i } = e;\n            if (!this.pairings.keys.includes(t) || i === Q.link_mode || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s))) return;\n            const r = await this.core.crypto.decode(t, s);\n            try {\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(r) ? (this.core.history.set(t, r), this.onRelayEventRequest({\n                    topic: t,\n                    payload: r\n                })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(r) && (await this.core.history.resolve(r), await this.onRelayEventResponse({\n                    topic: t,\n                    payload: r\n                }), this.core.history.delete(t, r.id));\n            } catch (o) {\n                this.logger.error(o);\n            }\n        });\n    }\n    registerExpirerEvents() {\n        this.core.expirer.on(M.expired, async (e)=>{\n            const { topic: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseExpirerTarget)(e.target);\n            t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(se.expire, {\n                topic: t\n            }));\n        });\n    }\n    constructor(e, t){\n        this.core = e, this.logger = t, d(this, \"name\", kt), d(this, \"version\", Ut), d(this, \"events\", new (events__WEBPACK_IMPORTED_MODULE_0___default())), d(this, \"pairings\"), d(this, \"initialized\", !1), d(this, \"storagePrefix\", B), d(this, \"ignoredPayloadTypes\", [\n            _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.TYPE_1\n        ]), d(this, \"registeredMethods\", []), d(this, \"init\", async ()=>{\n            this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n        }), d(this, \"register\", (param)=>{\n            let { methods: s } = param;\n            this.isInitialized(), this.registeredMethods = [\n                ...new Set([\n                    ...this.registeredMethods,\n                    ...s\n                ])\n            ];\n        }), d(this, \"create\", async (s)=>{\n            this.isInitialized();\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)(), r = await this.core.crypto.setSymKey(i), o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES), a = {\n                protocol: Pt\n            }, c = {\n                topic: r,\n                expiry: o,\n                relay: a,\n                active: !1,\n                methods: s === null || s === void 0 ? void 0 : s.methods\n            }, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatUri)({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: r,\n                symKey: i,\n                relay: a,\n                expiryTimestamp: o,\n                methods: s === null || s === void 0 ? void 0 : s.methods\n            });\n            return this.events.emit(se.create, c), this.core.expirer.set(r, o), await this.pairings.set(r, c), await this.core.relayer.subscribe(r, {\n                transportType: s === null || s === void 0 ? void 0 : s.transportType\n            }), {\n                topic: r,\n                uri: h\n            };\n        }), d(this, \"pair\", async (s)=>{\n            this.isInitialized();\n            const i = this.core.eventClient.createEvent({\n                properties: {\n                    topic: s === null || s === void 0 ? void 0 : s.uri,\n                    trace: [\n                        q.pairing_started\n                    ]\n                }\n            });\n            this.isValidPair(s, i);\n            const { topic: r, symKey: o, relay: a, expiryTimestamp: c, methods: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseUri)(s.uri);\n            i.props.properties.topic = r, i.addTrace(q.pairing_uri_validation_success), i.addTrace(q.pairing_uri_not_expired);\n            let u;\n            if (this.pairings.keys.includes(r)) {\n                if (u = this.pairings.get(r), i.addTrace(q.existing_pairing), u.active) throw i.setError(J.active_pairing_already_exists), new Error(\"Pairing already exists: \".concat(r, \". Please try again with a new connection URI.\"));\n                i.addTrace(q.pairing_not_expired);\n            }\n            const g = c || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES), m = {\n                topic: r,\n                relay: a,\n                expiry: g,\n                active: !1,\n                methods: h\n            };\n            this.core.expirer.set(r, g), await this.pairings.set(r, m), i.addTrace(q.store_new_pairing), s.activatePairing && await this.activate({\n                topic: r\n            }), this.events.emit(se.create, m), i.addTrace(q.emit_inactive_pairing), this.core.crypto.keychain.has(r) || await this.core.crypto.setSymKey(o, r), i.addTrace(q.subscribing_pairing_topic);\n            try {\n                await this.core.relayer.confirmOnlineStateOrThrow();\n            } catch (e) {\n                i.setError(J.no_internet_connection);\n            }\n            try {\n                await this.core.relayer.subscribe(r, {\n                    relay: a\n                });\n            } catch (A) {\n                throw i.setError(J.subscribe_pairing_topic_failure), A;\n            }\n            return i.addTrace(q.subscribe_pairing_topic_success), m;\n        }), d(this, \"activate\", async (param)=>{\n            let { topic: s } = param;\n            this.isInitialized();\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES);\n            this.core.expirer.set(s, i), await this.pairings.update(s, {\n                active: !0,\n                expiry: i\n            });\n        }), d(this, \"ping\", async (s)=>{\n            this.isInitialized(), await this.isValidPing(s), this.logger.warn(\"ping() is deprecated and will be removed in the next major release.\");\n            const { topic: i } = s;\n            if (this.pairings.keys.includes(i)) {\n                const r = await this.sendRequest(i, \"wc_pairingPing\", {}), { done: o, resolve: a, reject: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", r), (param)=>{\n                    let { error: h } = param;\n                    h ? c(h) : a();\n                }), await o();\n            }\n        }), d(this, \"updateExpiry\", async (param)=>{\n            let { topic: s, expiry: i } = param;\n            this.isInitialized(), await this.pairings.update(s, {\n                expiry: i\n            });\n        }), d(this, \"updateMetadata\", async (param)=>{\n            let { topic: s, metadata: i } = param;\n            this.isInitialized(), await this.pairings.update(s, {\n                peerMetadata: i\n            });\n        }), d(this, \"getPairings\", ()=>(this.isInitialized(), this.pairings.values)), d(this, \"disconnect\", async (s)=>{\n            this.isInitialized(), await this.isValidDisconnect(s);\n            const { topic: i } = s;\n            this.pairings.keys.includes(i) && (await this.sendRequest(i, \"wc_pairingDelete\", (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\")), await this.deletePairing(i));\n        }), d(this, \"formatUriFromPairing\", (s)=>{\n            this.isInitialized();\n            const { topic: i, relay: r, expiry: o, methods: a } = s, c = this.core.crypto.keychain.get(i);\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatUri)({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: i,\n                symKey: c,\n                relay: r,\n                expiryTimestamp: o,\n                methods: a\n            });\n        }), d(this, \"sendRequest\", async (s, i, r)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(i, r), a = await this.core.crypto.encode(s, o), c = ie[i].req;\n            return this.core.history.set(s, o), this.core.relayer.publish(s, a, c), o.id;\n        }), d(this, \"sendResult\", async (s, i, r)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(s, r), a = await this.core.crypto.encode(i, o), c = (await this.core.history.get(i, s)).request.method, h = ie[c].res;\n            await this.core.relayer.publish(i, a, h), await this.core.history.resolve(o);\n        }), d(this, \"sendError\", async (s, i, r)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcError)(s, r), a = await this.core.crypto.encode(i, o), c = (await this.core.history.get(i, s)).request.method, h = ie[c] ? ie[c].res : ie.unregistered_method.res;\n            await this.core.relayer.publish(i, a, h), await this.core.history.resolve(o);\n        }), d(this, \"deletePairing\", async (s, i)=>{\n            await this.core.relayer.unsubscribe(s), await Promise.all([\n                this.pairings.delete(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\")),\n                this.core.crypto.deleteSymKey(s),\n                i ? Promise.resolve() : this.core.expirer.del(s)\n            ]);\n        }), d(this, \"cleanup\", async ()=>{\n            const s = this.pairings.getAll().filter((i)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isExpired)(i.expiry));\n            await Promise.all(s.map((i)=>this.deletePairing(i.topic)));\n        }), d(this, \"onRelayEventRequest\", (s)=>{\n            const { topic: i, payload: r } = s;\n            switch(r.method){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingRequest(i, r);\n                case \"wc_pairingDelete\":\n                    return this.onPairingDeleteRequest(i, r);\n                default:\n                    return this.onUnknownRpcMethodRequest(i, r);\n            }\n        }), d(this, \"onRelayEventResponse\", async (s)=>{\n            const { topic: i, payload: r } = s, o = (await this.core.history.get(i, r.id)).request.method;\n            switch(o){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingResponse(i, r);\n                default:\n                    return this.onUnknownRpcMethodResponse(o);\n            }\n        }), d(this, \"onPairingPingRequest\", async (s, i)=>{\n            const { id: r } = i;\n            try {\n                this.isValidPing({\n                    topic: s\n                }), await this.sendResult(r, s, !0), this.events.emit(se.ping, {\n                    id: r,\n                    topic: s\n                });\n            } catch (o) {\n                await this.sendError(r, s, o), this.logger.error(o);\n            }\n        }), d(this, \"onPairingPingResponse\", (s, i)=>{\n            const { id: r } = i;\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResult)(i) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", r), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(i) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", r), {\n                    error: i.error\n                });\n            }, 500);\n        }), d(this, \"onPairingDeleteRequest\", async (s, i)=>{\n            const { id: r } = i;\n            try {\n                this.isValidDisconnect({\n                    topic: s\n                }), await this.deletePairing(s), this.events.emit(se.delete, {\n                    id: r,\n                    topic: s\n                });\n            } catch (o) {\n                await this.sendError(r, s, o), this.logger.error(o);\n            }\n        }), d(this, \"onUnknownRpcMethodRequest\", async (s, i)=>{\n            const { id: r, method: o } = i;\n            try {\n                if (this.registeredMethods.includes(o)) return;\n                const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", o);\n                await this.sendError(r, s, a), this.logger.error(a);\n            } catch (a) {\n                await this.sendError(r, s, a), this.logger.error(a);\n            }\n        }), d(this, \"onUnknownRpcMethodResponse\", (s)=>{\n            this.registeredMethods.includes(s) || this.logger.error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", s));\n        }), d(this, \"isValidPair\", (s, i)=>{\n            var r;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(s)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() params: \".concat(s));\n                throw i.setError(J.malformed_pairing_uri), new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidUrl)(s.uri)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri: \".concat(s.uri));\n                throw i.setError(J.malformed_pairing_uri), new Error(a);\n            }\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseUri)(s === null || s === void 0 ? void 0 : s.uri);\n            if (!((r = o === null || o === void 0 ? void 0 : o.relay) != null && r.protocol)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#relay-protocol\");\n                throw i.setError(J.malformed_pairing_uri), new Error(a);\n            }\n            if (!(o != null && o.symKey)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#symKey\");\n                throw i.setError(J.malformed_pairing_uri), new Error(a);\n            }\n            if (o != null && o.expiryTimestamp && (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(o === null || o === void 0 ? void 0 : o.expiryTimestamp) < Date.now()) {\n                i.setError(J.pairing_expired);\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"EXPIRED\", \"pair() URI has expired. Please try again with a new connection URI.\");\n                throw new Error(a);\n            }\n        }), d(this, \"isValidPing\", async (s)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(s)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"ping() params: \".concat(s));\n                throw new Error(r);\n            }\n            const { topic: i } = s;\n            await this.isValidPairingTopic(i);\n        }), d(this, \"isValidDisconnect\", async (s)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(s)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"disconnect() params: \".concat(s));\n                throw new Error(r);\n            }\n            const { topic: i } = s;\n            await this.isValidPairingTopic(i);\n        }), d(this, \"isValidPairingTopic\", async (s)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidString)(s, !1)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pairing topic should be a string: \".concat(s));\n                throw new Error(i);\n            }\n            if (!this.pairings.keys.includes(s)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"pairing topic doesn't exist: \".concat(s));\n                throw new Error(i);\n            }\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isExpired)(this.pairings.get(s).expiry)) {\n                await this.deletePairing(s);\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"EXPIRED\", \"pairing topic: \".concat(s));\n                throw new Error(i);\n            }\n        }), this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.pairings = new Ci(this.core, this.logger, this.name, this.storagePrefix);\n    }\n}\nvar Yn = Object.defineProperty, Jn = (n, e, t)=>e in n ? Yn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, S = (n, e, t)=>Jn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Si extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IJsonRpcHistory {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get size() {\n        return this.records.size;\n    }\n    get keys() {\n        return Array.from(this.records.keys());\n    }\n    get values() {\n        return Array.from(this.records.values());\n    }\n    get pending() {\n        const e = [];\n        return this.values.forEach((t)=>{\n            if (typeof t.response < \"u\") return;\n            const s = {\n                topic: t.topic,\n                request: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(t.request.method, t.request.params, t.id),\n                chainId: t.chainId\n            };\n            return e.push(s);\n        }), e;\n    }\n    async setJsonRpcRecords(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getJsonRpcRecords() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getRecord(e) {\n        this.isInitialized();\n        const t = this.records.get(e);\n        if (!t) {\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw new Error(s);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setJsonRpcRecords(this.values), this.events.emit(F.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getJsonRpcRecords();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.records.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored records for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                records: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore records for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    registerEventListeners() {\n        this.events.on(F.created, (e)=>{\n            const t = F.created;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.events.on(F.updated, (e)=>{\n            const t = F.updated;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.events.on(F.deleted, (e)=>{\n            const t = F.deleted;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, ()=>{\n            this.cleanup();\n        });\n    }\n    cleanup() {\n        try {\n            this.isInitialized();\n            let e = !1;\n            this.records.forEach((t)=>{\n                (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(\"Deleting expired history log: \".concat(t.id)), this.records.delete(t.id), this.events.emit(F.deleted, t, !1), e = !0);\n            }), e && this.persist();\n        } catch (e) {\n            this.logger.warn(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, S(this, \"records\", new Map), S(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), S(this, \"name\", Ft), S(this, \"version\", Mt), S(this, \"cached\", []), S(this, \"initialized\", !1), S(this, \"storagePrefix\", B), S(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s)=>this.records.set(s.id, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }), S(this, \"set\", (s, i, r)=>{\n            if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                topic: s,\n                request: i,\n                chainId: r\n            }), this.records.has(i.id)) return;\n            const o = {\n                id: i.id,\n                topic: s,\n                request: {\n                    method: i.method,\n                    params: i.params || null\n                },\n                chainId: r,\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_DAYS)\n            };\n            this.records.set(o.id, o), this.persist(), this.events.emit(F.created, o);\n        }), S(this, \"resolve\", async (s)=>{\n            if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                response: s\n            }), !this.records.has(s.id)) return;\n            const i = await this.getRecord(s.id);\n            typeof i.response > \"u\" && (i.response = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(s) ? {\n                error: s.error\n            } : {\n                result: s.result\n            }, this.records.set(i.id, i), this.persist(), this.events.emit(F.updated, i));\n        }), S(this, \"get\", async (s, i)=>(this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                topic: s,\n                id: i\n            }), await this.getRecord(i))), S(this, \"delete\", (s, i)=>{\n            this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                id: i\n            }), this.values.forEach((r)=>{\n                if (r.topic === s) {\n                    if (typeof i < \"u\" && r.id !== i) return;\n                    this.records.delete(r.id), this.events.emit(F.deleted, r);\n                }\n            }), this.persist();\n        }), S(this, \"exists\", async (s, i)=>(this.isInitialized(), this.records.has(i) ? (await this.getRecord(i)).topic === s : !1)), S(this, \"on\", (s, i)=>{\n            this.events.on(s, i);\n        }), S(this, \"once\", (s, i)=>{\n            this.events.once(s, i);\n        }), S(this, \"off\", (s, i)=>{\n            this.events.off(s, i);\n        }), S(this, \"removeListener\", (s, i)=>{\n            this.events.removeListener(s, i);\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n}\nvar Xn = Object.defineProperty, Wn = (n, e, t)=>e in n ? Xn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, x = (n, e, t)=>Wn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Ri extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IExpirer {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.expirations.size;\n    }\n    get keys() {\n        return Array.from(this.expirations.keys());\n    }\n    get values() {\n        return Array.from(this.expirations.values());\n    }\n    formatTarget(e) {\n        if (typeof e == \"string\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatTopicTarget)(e);\n        if (typeof e == \"number\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatIdTarget)(e);\n        const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"UNKNOWN_TYPE\", \"Target type: \".concat(typeof e));\n        throw new Error(t);\n    }\n    async setExpirations(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getExpirations() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    async persist() {\n        await this.setExpirations(this.values), this.events.emit(M.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getExpirations();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.expirations.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored expirations for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                expirations: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore expirations for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    getExpiration(e) {\n        const t = this.expirations.get(e);\n        if (!t) {\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw this.logger.warn(s), new Error(s);\n        }\n        return t;\n    }\n    checkExpiry(e, t) {\n        const { expiry: s } = t;\n        (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(s) - Date.now() <= 0 && this.expire(e, t);\n    }\n    expire(e, t) {\n        this.expirations.delete(e), this.events.emit(M.expired, {\n            target: e,\n            expiration: t\n        });\n    }\n    checkExpirations() {\n        this.core.relayer.connected && this.expirations.forEach((e, t)=>this.checkExpiry(t, e));\n    }\n    registerEventListeners() {\n        this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, ()=>this.checkExpirations()), this.events.on(M.created, (e)=>{\n            const t = M.created;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(M.expired, (e)=>{\n            const t = M.expired;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(M.deleted, (e)=>{\n            const t = M.deleted;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, x(this, \"expirations\", new Map), x(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), x(this, \"name\", Kt), x(this, \"version\", Bt), x(this, \"cached\", []), x(this, \"initialized\", !1), x(this, \"storagePrefix\", B), x(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s)=>this.expirations.set(s.target, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }), x(this, \"has\", (s)=>{\n            try {\n                const i = this.formatTarget(s);\n                return typeof this.getExpiration(i) < \"u\";\n            } catch (e) {\n                return !1;\n            }\n        }), x(this, \"set\", (s, i)=>{\n            this.isInitialized();\n            const r = this.formatTarget(s), o = {\n                target: r,\n                expiry: i\n            };\n            this.expirations.set(r, o), this.checkExpiry(r, o), this.events.emit(M.created, {\n                target: r,\n                expiration: o\n            });\n        }), x(this, \"get\", (s)=>{\n            this.isInitialized();\n            const i = this.formatTarget(s);\n            return this.getExpiration(i);\n        }), x(this, \"del\", (s)=>{\n            if (this.isInitialized(), this.has(s)) {\n                const i = this.formatTarget(s), r = this.getExpiration(i);\n                this.expirations.delete(i), this.events.emit(M.deleted, {\n                    target: i,\n                    expiration: r\n                });\n            }\n        }), x(this, \"on\", (s, i)=>{\n            this.events.on(s, i);\n        }), x(this, \"once\", (s, i)=>{\n            this.events.once(s, i);\n        }), x(this, \"off\", (s, i)=>{\n            this.events.off(s, i);\n        }), x(this, \"removeListener\", (s, i)=>{\n            this.events.removeListener(s, i);\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n}\nvar Zn = Object.defineProperty, Qn = (n, e, t)=>e in n ? Zn(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, _ = (n, e, t)=>Qn(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass xi extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IVerify {\n    get storeKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//verify:public:key\";\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    startAbortTimer(e) {\n        return this.abortController = new AbortController, setTimeout(()=>this.abortController.abort(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(e));\n    }\n    constructor(e, t, s){\n        super(e, t, s), this.core = e, this.logger = t, this.store = s, _(this, \"name\", jt), _(this, \"abortController\"), _(this, \"isDevEnv\"), _(this, \"verifyUrlV3\", qt), _(this, \"storagePrefix\", B), _(this, \"version\", Oe), _(this, \"publicKey\"), _(this, \"fetchPromise\"), _(this, \"init\", async ()=>{\n            var i;\n            this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)((i = this.publicKey) == null ? void 0 : i.expiresAt) < Date.now() && (this.logger.debug(\"verify v2 public key expired\"), await this.removePublicKey()));\n        }), _(this, \"register\", async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isBrowser)() || this.isDevEnv) return;\n            const r = window.location.origin, { id: o, decryptedId: a } = i, c = \"\".concat(this.verifyUrlV3, \"/attestation?projectId=\").concat(this.core.projectId, \"&origin=\").concat(r, \"&id=\").concat(o, \"&decryptedId=\").concat(a);\n            try {\n                const h = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_12__.getDocument)(), u = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 5), g = await new Promise((m, A)=>{\n                    const l = ()=>{\n                        window.removeEventListener(\"message\", O), h.body.removeChild(y), A(\"attestation aborted\");\n                    };\n                    this.abortController.signal.addEventListener(\"abort\", l);\n                    const y = h.createElement(\"iframe\");\n                    y.src = c, y.style.display = \"none\", y.addEventListener(\"error\", l, {\n                        signal: this.abortController.signal\n                    });\n                    const O = (w)=>{\n                        if (w.data && typeof w.data == \"string\") try {\n                            const v = JSON.parse(w.data);\n                            if (v.type === \"verify_attestation\") {\n                                if ((0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.decodeJWT)(v.attestation).payload.id !== o) return;\n                                clearInterval(u), h.body.removeChild(y), this.abortController.signal.removeEventListener(\"abort\", l), window.removeEventListener(\"message\", O), m(v.attestation === null ? \"\" : v.attestation);\n                            }\n                        } catch (v) {\n                            this.logger.warn(v);\n                        }\n                    };\n                    h.body.appendChild(y), window.addEventListener(\"message\", O, {\n                        signal: this.abortController.signal\n                    });\n                });\n                return this.logger.debug(\"jwt attestation\", g), g;\n            } catch (h) {\n                this.logger.warn(h);\n            }\n            return \"\";\n        }), _(this, \"resolve\", async (i)=>{\n            if (this.isDevEnv) return \"\";\n            const { attestationId: r, hash: o, encryptedId: a } = i;\n            if (r === \"\") {\n                this.logger.debug(\"resolve: attestationId is empty, skipping\");\n                return;\n            }\n            if (r) {\n                if ((0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.decodeJWT)(r).payload.id !== a) return;\n                const h = await this.isValidJwtAttestation(r);\n                if (h) {\n                    if (!h.isVerified) {\n                        this.logger.warn(\"resolve: jwt attestation: origin url not verified\");\n                        return;\n                    }\n                    return h;\n                }\n            }\n            if (!o) return;\n            const c = this.getVerifyUrl(i === null || i === void 0 ? void 0 : i.verifyUrl);\n            return this.fetchAttestation(o, c);\n        }), _(this, \"fetchAttestation\", async (i, r)=>{\n            this.logger.debug(\"resolving attestation: \".concat(i, \" from url: \").concat(r));\n            const o = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 5), a = await fetch(\"\".concat(r, \"/attestation/\").concat(i, \"?v2Supported=true\"), {\n                signal: this.abortController.signal\n            });\n            return clearTimeout(o), a.status === 200 ? await a.json() : void 0;\n        }), _(this, \"getVerifyUrl\", (i)=>{\n            let r = i || le;\n            return Gt.includes(r) || (this.logger.info(\"verify url: \".concat(r, \", not included in trusted list, assigning default: \").concat(le)), r = le), r;\n        }), _(this, \"fetchPublicKey\", async ()=>{\n            try {\n                this.logger.debug(\"fetching public key from: \".concat(this.verifyUrlV3));\n                const i = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_SECONDS), r = await fetch(\"\".concat(this.verifyUrlV3, \"/public-key\"), {\n                    signal: this.abortController.signal\n                });\n                return clearTimeout(i), await r.json();\n            } catch (i) {\n                this.logger.warn(i);\n            }\n        }), _(this, \"persistPublicKey\", async (i)=>{\n            this.logger.debug(\"persisting public key to local storage\", i), await this.store.setItem(this.storeKey, i), this.publicKey = i;\n        }), _(this, \"removePublicKey\", async ()=>{\n            this.logger.debug(\"removing verify v2 public key from storage\"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;\n        }), _(this, \"isValidJwtAttestation\", async (i)=>{\n            const r = await this.getPublicKey();\n            try {\n                if (r) return this.validateAttestation(i, r);\n            } catch (a) {\n                this.logger.error(a), this.logger.warn(\"error validating attestation\");\n            }\n            const o = await this.fetchAndPersistPublicKey();\n            try {\n                if (o) return this.validateAttestation(i, o);\n            } catch (a) {\n                this.logger.error(a), this.logger.warn(\"error validating attestation\");\n            }\n        }), _(this, \"getPublicKey\", async ()=>this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), _(this, \"fetchAndPersistPublicKey\", async ()=>{\n            if (this.fetchPromise) return await this.fetchPromise, this.publicKey;\n            this.fetchPromise = new Promise(async (r)=>{\n                const o = await this.fetchPublicKey();\n                o && (await this.persistPublicKey(o), r(o));\n            });\n            const i = await this.fetchPromise;\n            return this.fetchPromise = void 0, i;\n        }), _(this, \"validateAttestation\", (i, r)=>{\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.verifyP256Jwt)(i, r.publicKey), a = {\n                hasExpired: (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(o.exp) < Date.now(),\n                payload: o\n            };\n            if (a.hasExpired) throw this.logger.warn(\"resolve: jwt attestation expired\"), new Error(\"JWT attestation expired\");\n            return {\n                origin: a.payload.origin,\n                isScam: a.payload.isScam,\n                isVerified: a.payload.isVerified\n            };\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.abortController = new AbortController, this.isDevEnv = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTestRun)(), this.init();\n    }\n}\nvar eo = Object.defineProperty, to = (n, e, t)=>e in n ? eo(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, Oi = (n, e, t)=>to(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Ai extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IEchoClient {\n    constructor(e, t){\n        super(e, t), this.projectId = e, this.logger = t, Oi(this, \"context\", Ht), Oi(this, \"registerDeviceToken\", async (s)=>{\n            const { clientId: i, token: r, notificationType: o, enableEncrypted: a = !1 } = s, c = \"\".concat(Yt, \"/\").concat(this.projectId, \"/clients\");\n            await fetch(c, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    client_id: i,\n                    type: o,\n                    token: r,\n                    always_raw: a\n                })\n            });\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.context);\n    }\n}\nvar io = Object.defineProperty, Ni = Object.getOwnPropertySymbols, so = Object.prototype.hasOwnProperty, ro = Object.prototype.propertyIsEnumerable, qe = (n, e, t)=>e in n ? io(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, pe = (n, e)=>{\n    for(var t in e || (e = {}))so.call(e, t) && qe(n, t, e[t]);\n    if (Ni) for (var t of Ni(e))ro.call(e, t) && qe(n, t, e[t]);\n    return n;\n}, E = (n, e, t)=>qe(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass $i extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IEventClient {\n    get storageKey() {\n        return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + \"//\" + this.context;\n    }\n    constructor(e, t, s = !0){\n        super(e, t, s), this.core = e, this.logger = t, E(this, \"context\", Xt), E(this, \"storagePrefix\", B), E(this, \"storageVersion\", Jt), E(this, \"events\", new Map), E(this, \"shouldPersist\", !1), E(this, \"init\", async ()=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTestRun)()) try {\n                const i = {\n                    eventId: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.uuidv4)(),\n                    timestamp: Date.now(),\n                    domain: this.getAppDomain(),\n                    props: {\n                        event: \"INIT\",\n                        type: \"\",\n                        properties: {\n                            client_id: await this.core.crypto.getClientId(),\n                            user_agent: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatUA)(this.core.relayer.protocol, this.core.relayer.version, me)\n                        }\n                    }\n                };\n                await this.sendEvent([\n                    i\n                ]);\n            } catch (i) {\n                this.logger.warn(i);\n            }\n        }), E(this, \"createEvent\", (i)=>{\n            const { event: r = \"ERROR\", type: o = \"\", properties: { topic: a, trace: c } } = i, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.uuidv4)(), u = this.core.projectId || \"\", g = Date.now(), m = pe({\n                eventId: h,\n                timestamp: g,\n                props: {\n                    event: r,\n                    type: o,\n                    properties: {\n                        topic: a,\n                        trace: c\n                    }\n                },\n                bundleId: u,\n                domain: this.getAppDomain()\n            }, this.setMethods(h));\n            return this.telemetryEnabled && (this.events.set(h, m), this.shouldPersist = !0), m;\n        }), E(this, \"getEvent\", (i)=>{\n            const { eventId: r, topic: o } = i;\n            if (r) return this.events.get(r);\n            const a = Array.from(this.events.values()).find((c)=>c.props.properties.topic === o);\n            if (a) return pe(pe({}, a), this.setMethods(a.eventId));\n        }), E(this, \"deleteEvent\", (i)=>{\n            const { eventId: r } = i;\n            this.events.delete(r), this.shouldPersist = !0;\n        }), E(this, \"setEventListeners\", ()=>{\n            this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, async ()=>{\n                this.shouldPersist && await this.persist(), this.events.forEach((i)=>{\n                    (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.fromMiliseconds)(Date.now()) - (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.fromMiliseconds)(i.timestamp) > Wt && (this.events.delete(i.eventId), this.shouldPersist = !0);\n                });\n            });\n        }), E(this, \"setMethods\", (i)=>({\n                addTrace: (r)=>this.addTrace(i, r),\n                setError: (r)=>this.setError(i, r)\n            })), E(this, \"addTrace\", (i, r)=>{\n            const o = this.events.get(i);\n            o && (o.props.properties.trace.push(r), this.events.set(i, o), this.shouldPersist = !0);\n        }), E(this, \"setError\", (i, r)=>{\n            const o = this.events.get(i);\n            o && (o.props.type = r, o.timestamp = Date.now(), this.events.set(i, o), this.shouldPersist = !0);\n        }), E(this, \"persist\", async ()=>{\n            await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = !1;\n        }), E(this, \"restore\", async ()=>{\n            try {\n                const i = await this.core.storage.getItem(this.storageKey) || [];\n                if (!i.length) return;\n                i.forEach((r)=>{\n                    this.events.set(r.eventId, pe(pe({}, r), this.setMethods(r.eventId)));\n                });\n            } catch (i) {\n                this.logger.warn(i);\n            }\n        }), E(this, \"submit\", async ()=>{\n            if (!this.telemetryEnabled || this.events.size === 0) return;\n            const i = [];\n            for (const [r, o] of this.events)o.props.type && i.push(o);\n            if (i.length !== 0) try {\n                if ((await this.sendEvent(i)).ok) for (const r of i)this.events.delete(r.eventId), this.shouldPersist = !0;\n            } catch (r) {\n                this.logger.warn(r);\n            }\n        }), E(this, \"sendEvent\", async (i)=>{\n            const r = this.getAppDomain() ? \"\" : \"&sp=desktop\";\n            return await fetch(\"\".concat(Zt, \"?projectId=\").concat(this.core.projectId, \"&st=events_sdk&sv=js-\").concat(me).concat(r), {\n                method: \"POST\",\n                body: JSON.stringify(i)\n            });\n        }), E(this, \"getAppDomain\", ()=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getAppMetadata)().url), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.context), this.telemetryEnabled = s, s ? this.restore().then(async ()=>{\n            await this.submit(), this.setEventListeners();\n        }) : this.persist();\n    }\n}\nvar no = Object.defineProperty, zi = Object.getOwnPropertySymbols, oo = Object.prototype.hasOwnProperty, ao = Object.prototype.propertyIsEnumerable, Ge = (n, e, t)=>e in n ? no(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, Li = (n, e)=>{\n    for(var t in e || (e = {}))oo.call(e, t) && Ge(n, t, e[t]);\n    if (zi) for (var t of zi(e))ao.call(e, t) && Ge(n, t, e[t]);\n    return n;\n}, f = (n, e, t)=>Ge(n, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass _e extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.ICore {\n    static async init(e) {\n        const t = new _e(e);\n        await t.initialize();\n        const s = await t.crypto.getClientId();\n        return await t.storage.setItem(Nt, s), t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async start() {\n        this.initialized || await this.initialize();\n    }\n    async getLogsBlob() {\n        var e;\n        return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({\n            clientId: await this.crypto.getClientId()\n        });\n    }\n    async addLinkModeSupportedApp(e) {\n        this.linkModeSupportedApps.includes(e) || (this.linkModeSupportedApps.push(e), await this.storage.setItem(ze, this.linkModeSupportedApps));\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(ze) || [], this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n        } catch (e) {\n            throw this.logger.warn(\"Core Initialization Failure at epoch \".concat(Date.now()), e), this.logger.error(e.message), e;\n        }\n    }\n    constructor(e){\n        var t;\n        super(e), f(this, \"protocol\", xe), f(this, \"version\", Oe), f(this, \"name\", he), f(this, \"relayUrl\"), f(this, \"projectId\"), f(this, \"customStoragePrefix\"), f(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), f(this, \"logger\"), f(this, \"heartbeat\"), f(this, \"relayer\"), f(this, \"crypto\"), f(this, \"storage\"), f(this, \"history\"), f(this, \"expirer\"), f(this, \"pairing\"), f(this, \"verify\"), f(this, \"echoClient\"), f(this, \"linkModeSupportedApps\"), f(this, \"eventClient\"), f(this, \"initialized\", !1), f(this, \"logChunkController\"), f(this, \"on\", (o, a)=>this.events.on(o, a)), f(this, \"once\", (o, a)=>this.events.once(o, a)), f(this, \"off\", (o, a)=>this.events.off(o, a)), f(this, \"removeListener\", (o, a)=>this.events.removeListener(o, a)), f(this, \"dispatchEnvelope\", (param)=>{\n            let { topic: o, message: a, sessionExists: c } = param;\n            if (!o || !a) return;\n            const h = {\n                topic: o,\n                message: a,\n                publishedAt: Date.now(),\n                transportType: Q.link_mode\n            };\n            this.relayer.onLinkMessageEvent(h, {\n                sessionExists: c\n            });\n        }), this.projectId = e === null || e === void 0 ? void 0 : e.projectId, this.relayUrl = (e === null || e === void 0 ? void 0 : e.relayUrl) || $e, this.customStoragePrefix = e != null && e.customStoragePrefix ? \":\".concat(e.customStoragePrefix) : \"\";\n        const s = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: typeof (e === null || e === void 0 ? void 0 : e.logger) == \"string\" && e.logger ? e.logger : mt.logger,\n            name: he\n        }), { logger: i, chunkLoggerController: r } = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generatePlatformLogger)({\n            opts: s,\n            maxSizeInBytes: e === null || e === void 0 ? void 0 : e.maxLogBlobSizeInBytes,\n            loggerOverride: e === null || e === void 0 ? void 0 : e.logger\n        });\n        this.logChunkController = r, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async ()=>{\n            var o, a;\n            (o = this.logChunkController) != null && o.downloadLogsBlobInBrowser && ((a = this.logChunkController) == null || a.downloadLogsBlobInBrowser({\n                clientId: await this.crypto.getClientId()\n            }));\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(i, this.name), this.heartbeat = new _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HeartBeat, this.crypto = new bi(this, this.logger, e === null || e === void 0 ? void 0 : e.keychain), this.history = new Si(this, this.logger), this.expirer = new Ri(this, this.logger), this.storage = e != null && e.storage ? e.storage : new _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_2__[\"default\"](Li(Li({}, vt), e === null || e === void 0 ? void 0 : e.storageOptions)), this.relayer = new wi({\n            core: this,\n            logger: this.logger,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId\n        }), this.pairing = new Pi(this, this.logger), this.verify = new xi(this, this.logger, this.storage), this.echoClient = new Ai(this.projectId || \"\", this.logger), this.linkModeSupportedApps = [], this.eventClient = new $i(this, this.logger, e === null || e === void 0 ? void 0 : e.telemetryEnabled);\n    }\n}\nconst co = _e;\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Js\");\n$RefreshReg$(_c1, \"Mr\");\n$RefreshReg$(_c2, \"Kr\");\n$RefreshReg$(_c3, \"Le\");\n$RefreshReg$(_c4, \"Dn\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/core/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyValueStorage: function() { return /* binding */ h; },\n/* harmony export */   \"default\": function() { return /* binding */ h; }\n/* harmony export */ });\n/* harmony import */ var unstorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unstorage */ \"(app-pages-browser)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs\");\n/* harmony import */ var idb_keyval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! idb-keyval */ \"(app-pages-browser)/./node_modules/idb-keyval/dist/index.js\");\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\n\nfunction C(i) {\n    return i;\n}\n_c = C;\nconst x = \"idb-keyval\";\nvar z = function() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const t = i.base && i.base.length > 0 ? \"\".concat(i.base, \":\") : \"\", e = (s)=>t + s;\n    let n;\n    return i.dbName && i.storeName && (n = (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.createStore)(i.dbName, i.storeName)), {\n        name: x,\n        options: i,\n        async hasItem (s) {\n            return !(typeof await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get)(e(s), n) > \"u\");\n        },\n        async getItem (s) {\n            var _ref;\n            return (_ref = await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get)(e(s), n)) !== null && _ref !== void 0 ? _ref : null;\n        },\n        setItem (s, a) {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.set)(e(s), a, n);\n        },\n        removeItem (s) {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.del)(e(s), n);\n        },\n        getKeys () {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.keys)(n);\n        },\n        clear () {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.clear)(n);\n        }\n    };\n};\nconst D = \"WALLET_CONNECT_V2_INDEXED_DB\", E = \"keyvaluestorage\";\nclass _ {\n    async getKeys() {\n        return this.indexedDb.getKeys();\n    }\n    async getEntries() {\n        return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t)=>[\n                t.key,\n                t.value\n            ]);\n    }\n    async getItem(t) {\n        const e = await this.indexedDb.getItem(t);\n        if (e !== null) return e;\n    }\n    async setItem(t, e) {\n        await this.indexedDb.setItem(t, (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonStringify)(e));\n    }\n    async removeItem(t) {\n        await this.indexedDb.removeItem(t);\n    }\n    constructor(){\n        this.indexedDb = (0,unstorage__WEBPACK_IMPORTED_MODULE_2__.createStorage)({\n            driver: z({\n                dbName: D,\n                storeName: E\n            })\n        });\n    }\n}\nvar l = typeof globalThis < \"u\" ? globalThis :  true ? window : 0, c = {\n    exports: {}\n};\n(function() {\n    let i;\n    function t() {}\n    i = t, i.prototype.getItem = function(e) {\n        return this.hasOwnProperty(e) ? String(this[e]) : null;\n    }, i.prototype.setItem = function(e, n) {\n        this[e] = String(n);\n    }, i.prototype.removeItem = function(e) {\n        delete this[e];\n    }, i.prototype.clear = function() {\n        const e = this;\n        Object.keys(e).forEach(function(n) {\n            e[n] = void 0, delete e[n];\n        });\n    }, i.prototype.key = function(e) {\n        return e = e || 0, Object.keys(this)[e];\n    }, i.prototype.__defineGetter__(\"length\", function() {\n        return Object.keys(this).length;\n    }), typeof l < \"u\" && l.localStorage ? c.exports = l.localStorage :  true && window.localStorage ? c.exports = window.localStorage : c.exports = new t;\n})();\nfunction k(i) {\n    var t;\n    return [\n        i[0],\n        (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonParse)((t = i[1]) != null ? t : \"\")\n    ];\n}\nclass K {\n    async getKeys() {\n        return Object.keys(this.localStorage);\n    }\n    async getEntries() {\n        return Object.entries(this.localStorage).map(k);\n    }\n    async getItem(t) {\n        const e = this.localStorage.getItem(t);\n        if (e !== null) return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonParse)(e);\n    }\n    async setItem(t, e) {\n        this.localStorage.setItem(t, (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonStringify)(e));\n    }\n    async removeItem(t) {\n        this.localStorage.removeItem(t);\n    }\n    constructor(){\n        this.localStorage = c.exports;\n    }\n}\nconst N = \"wc_storage_version\", y = 1, O = async (i, t, e)=>{\n    const n = N, s = await t.getItem(n);\n    if (s && s >= y) {\n        e(t);\n        return;\n    }\n    const a = await i.getKeys();\n    if (!a.length) {\n        e(t);\n        return;\n    }\n    const m = [];\n    for(; a.length;){\n        const r = a.shift();\n        if (!r) continue;\n        const o = r.toLowerCase();\n        if (o.includes(\"wc@\") || o.includes(\"walletconnect\") || o.includes(\"wc_\") || o.includes(\"wallet_connect\")) {\n            const f = await i.getItem(r);\n            await t.setItem(r, f), m.push(r);\n        }\n    }\n    await t.setItem(n, y), e(t), j(i, m);\n}, j = async (i, t)=>{\n    t.length && t.forEach(async (e)=>{\n        await i.removeItem(e);\n    });\n};\nclass h {\n    async getKeys() {\n        return await this.initialize(), this.storage.getKeys();\n    }\n    async getEntries() {\n        return await this.initialize(), this.storage.getEntries();\n    }\n    async getItem(t) {\n        return await this.initialize(), this.storage.getItem(t);\n    }\n    async setItem(t, e) {\n        return await this.initialize(), this.storage.setItem(t, e);\n    }\n    async removeItem(t) {\n        return await this.initialize(), this.storage.removeItem(t);\n    }\n    async initialize() {\n        this.initialized || await new Promise((t)=>{\n            const e = setInterval(()=>{\n                this.initialized && (clearInterval(e), t());\n            }, 20);\n        });\n    }\n    constructor(){\n        this.initialized = !1, this.setInitialized = (e)=>{\n            this.storage = e, this.initialized = !0;\n        };\n        const t = new K;\n        this.storage = t;\n        try {\n            const e = new _;\n            O(t, e, this.setInitialized);\n        } catch (e) {\n            this.initialized = !0;\n        }\n    }\n}\n //# sourceMappingURL=index.es.js.map\nvar _c;\n$RefreshReg$(_c, \"C\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/crypto.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;\nfunction getBrowerCrypto() {\n    return (__webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.crypto) || (__webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.msCrypto) || {};\n}\nexports.getBrowerCrypto = getBrowerCrypto;\nfunction getSubtleCrypto() {\n    const browserCrypto = getBrowerCrypto();\n    return browserCrypto.subtle || browserCrypto.webkitSubtle;\n}\nexports.getSubtleCrypto = getSubtleCrypto;\nfunction isBrowserCryptoAvailable() {\n    return !!getBrowerCrypto() && !!getSubtleCrypto();\n}\nexports.isBrowserCryptoAvailable = isBrowserCryptoAvailable; //# sourceMappingURL=crypto.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9jcnlwdG8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHQSx1QkFBdUIsR0FBR0EsdUJBQXVCLEdBQUcsS0FBSztBQUM1RixTQUFTSTtJQUNMLE9BQU8sQ0FBQ0MscUJBQU1BLEtBQUssUUFBUUEscUJBQU1BLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSUEscUJBQU1BLENBQUNDLE1BQU0sS0FBTUQsQ0FBQUEscUJBQU1BLEtBQUssUUFBUUEscUJBQU1BLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSUEscUJBQU1BLENBQUNFLFFBQVEsS0FBSyxDQUFDO0FBQ3BKO0FBQ0FQLHVCQUF1QixHQUFHSTtBQUMxQixTQUFTRDtJQUNMLE1BQU1LLGdCQUFnQko7SUFDdEIsT0FBT0ksY0FBY0MsTUFBTSxJQUFJRCxjQUFjRSxZQUFZO0FBQzdEO0FBQ0FWLHVCQUF1QixHQUFHRztBQUMxQixTQUFTRDtJQUNMLE9BQU8sQ0FBQyxDQUFDRSxxQkFBcUIsQ0FBQyxDQUFDRDtBQUNwQztBQUNBSCxnQ0FBZ0MsR0FBR0UsMEJBQ25DLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvY3J5cHRvLmpzPzZkZDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSA9IGV4cG9ydHMuZ2V0U3VidGxlQ3J5cHRvID0gZXhwb3J0cy5nZXRCcm93ZXJDcnlwdG8gPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXRCcm93ZXJDcnlwdG8oKSB7XG4gICAgcmV0dXJuIChnbG9iYWwgPT09IG51bGwgfHwgZ2xvYmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWwuY3J5cHRvKSB8fCAoZ2xvYmFsID09PSBudWxsIHx8IGdsb2JhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2xvYmFsLm1zQ3J5cHRvKSB8fCB7fTtcbn1cbmV4cG9ydHMuZ2V0QnJvd2VyQ3J5cHRvID0gZ2V0QnJvd2VyQ3J5cHRvO1xuZnVuY3Rpb24gZ2V0U3VidGxlQ3J5cHRvKCkge1xuICAgIGNvbnN0IGJyb3dzZXJDcnlwdG8gPSBnZXRCcm93ZXJDcnlwdG8oKTtcbiAgICByZXR1cm4gYnJvd3NlckNyeXB0by5zdWJ0bGUgfHwgYnJvd3NlckNyeXB0by53ZWJraXRTdWJ0bGU7XG59XG5leHBvcnRzLmdldFN1YnRsZUNyeXB0byA9IGdldFN1YnRsZUNyeXB0bztcbmZ1bmN0aW9uIGlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSgpIHtcbiAgICByZXR1cm4gISFnZXRCcm93ZXJDcnlwdG8oKSAmJiAhIWdldFN1YnRsZUNyeXB0bygpO1xufVxuZXhwb3J0cy5pc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGUgPSBpc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG8uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlIiwiZ2V0U3VidGxlQ3J5cHRvIiwiZ2V0QnJvd2VyQ3J5cHRvIiwiZ2xvYmFsIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJicm93c2VyQ3J5cHRvIiwic3VidGxlIiwid2Via2l0U3VidGxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/env.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/env.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowser = exports.isNode = exports.isReactNative = void 0;\nfunction isReactNative() {\n    return typeof document === \"undefined\" && typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\";\n}\nexports.isReactNative = isReactNative;\nfunction isNode() {\n    return typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\";\n}\nexports.isNode = isNode;\nfunction isBrowser() {\n    return !isReactNative() && !isNode();\n}\nexports.isBrowser = isBrowser; //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9lbnYuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0EsY0FBYyxHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQ2xFLFNBQVNJO0lBQ0wsT0FBUSxPQUFPQyxhQUFhLGVBQ3hCLE9BQU9DLGNBQWMsZUFDckJBLFVBQVVDLE9BQU8sS0FBSztBQUM5QjtBQUNBUCxxQkFBcUIsR0FBR0k7QUFDeEIsU0FBU0Q7SUFDTCxPQUFRLE9BQU9LLE9BQU9BLEtBQUssZUFDdkIsT0FBT0EsT0FBT0EsQ0FBQ0MsUUFBUSxLQUFLLGVBQzVCLE9BQU9ELE9BQU9BLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxLQUFLO0FBQ3pDO0FBQ0FWLGNBQWMsR0FBR0c7QUFDakIsU0FBU0Q7SUFDTCxPQUFPLENBQUNFLG1CQUFtQixDQUFDRDtBQUNoQztBQUNBSCxpQkFBaUIsR0FBR0UsV0FDcEIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9lbnYuanM/NDM4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNCcm93c2VyID0gZXhwb3J0cy5pc05vZGUgPSBleHBvcnRzLmlzUmVhY3ROYXRpdmUgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc1JlYWN0TmF0aXZlKCkge1xuICAgIHJldHVybiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09IFwiUmVhY3ROYXRpdmVcIik7XG59XG5leHBvcnRzLmlzUmVhY3ROYXRpdmUgPSBpc1JlYWN0TmF0aXZlO1xuZnVuY3Rpb24gaXNOb2RlKCkge1xuICAgIHJldHVybiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPT0gXCJ1bmRlZmluZWRcIik7XG59XG5leHBvcnRzLmlzTm9kZSA9IGlzTm9kZTtcbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgICByZXR1cm4gIWlzUmVhY3ROYXRpdmUoKSAmJiAhaXNOb2RlKCk7XG59XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3Nlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0Jyb3dzZXIiLCJpc05vZGUiLCJpc1JlYWN0TmF0aXZlIiwiZG9jdW1lbnQiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwicHJvY2VzcyIsInZlcnNpb25zIiwibm9kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/env.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./crypto */ \"(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./env */ \"(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/env.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyw0R0FBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxrR0FBVSxHQUFHSDtBQUMxQ0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyw0RkFBTyxHQUFHSCxVQUN2QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50L2Rpc3QvY2pzL2luZGV4LmpzPzVjMjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY3J5cHRvXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudlwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: function() { return /* binding */ __assign; },\n/* harmony export */   __asyncDelegator: function() { return /* binding */ __asyncDelegator; },\n/* harmony export */   __asyncGenerator: function() { return /* binding */ __asyncGenerator; },\n/* harmony export */   __asyncValues: function() { return /* binding */ __asyncValues; },\n/* harmony export */   __await: function() { return /* binding */ __await; },\n/* harmony export */   __awaiter: function() { return /* binding */ __awaiter; },\n/* harmony export */   __classPrivateFieldGet: function() { return /* binding */ __classPrivateFieldGet; },\n/* harmony export */   __classPrivateFieldSet: function() { return /* binding */ __classPrivateFieldSet; },\n/* harmony export */   __createBinding: function() { return /* binding */ __createBinding; },\n/* harmony export */   __decorate: function() { return /* binding */ __decorate; },\n/* harmony export */   __exportStar: function() { return /* binding */ __exportStar; },\n/* harmony export */   __extends: function() { return /* binding */ __extends; },\n/* harmony export */   __generator: function() { return /* binding */ __generator; },\n/* harmony export */   __importDefault: function() { return /* binding */ __importDefault; },\n/* harmony export */   __importStar: function() { return /* binding */ __importStar; },\n/* harmony export */   __makeTemplateObject: function() { return /* binding */ __makeTemplateObject; },\n/* harmony export */   __metadata: function() { return /* binding */ __metadata; },\n/* harmony export */   __param: function() { return /* binding */ __param; },\n/* harmony export */   __read: function() { return /* binding */ __read; },\n/* harmony export */   __rest: function() { return /* binding */ __rest; },\n/* harmony export */   __spread: function() { return /* binding */ __spread; },\n/* harmony export */   __spreadArrays: function() { return /* binding */ __spreadArrays; },\n/* harmony export */   __values: function() { return /* binding */ __values; }\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __createBinding(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}\nfunction __exportStar(m, exports) {\n    for(var p in m)if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n;\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result.default = mod;\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js":
/*!************************************************************************!*\
  !*** ./node_modules/@walletconnect/ethereum-provider/dist/index.es.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumProvider: function() { return /* binding */ z; },\n/* harmony export */   OPTIONAL_EVENTS: function() { return /* binding */ O; },\n/* harmony export */   OPTIONAL_METHODS: function() { return /* binding */ M; },\n/* harmony export */   REQUIRED_EVENTS: function() { return /* binding */ m; },\n/* harmony export */   REQUIRED_METHODS: function() { return /* binding */ u; },\n/* harmony export */   \"default\": function() { return /* binding */ w; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/universal-provider */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\");\n\n\n\nconst T = \"wc\", $ = \"ethereum_provider\", j = \"\".concat(T, \"@2:\").concat($, \":\"), q = \"https://rpc.walletconnect.org/v1/\", u = [\n    \"eth_sendTransaction\",\n    \"personal_sign\"\n], M = [\n    \"eth_accounts\",\n    \"eth_requestAccounts\",\n    \"eth_sendRawTransaction\",\n    \"eth_sign\",\n    \"eth_signTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_addEthereumChain\",\n    \"wallet_getPermissions\",\n    \"wallet_requestPermissions\",\n    \"wallet_registerOnboarding\",\n    \"wallet_watchAsset\",\n    \"wallet_scanQRCode\",\n    \"wallet_sendCalls\",\n    \"wallet_getCapabilities\",\n    \"wallet_getCallsStatus\",\n    \"wallet_showCallsStatus\"\n], m = [\n    \"chainChanged\",\n    \"accountsChanged\"\n], O = [\n    \"chainChanged\",\n    \"accountsChanged\",\n    \"message\",\n    \"disconnect\",\n    \"connect\"\n];\nvar N = Object.defineProperty, D = Object.defineProperties, U = Object.getOwnPropertyDescriptors, P = Object.getOwnPropertySymbols, Q = Object.prototype.hasOwnProperty, L = Object.prototype.propertyIsEnumerable, y = (a, t, s)=>t in a ? N(a, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : a[t] = s, g = (a, t)=>{\n    for(var s in t || (t = {}))Q.call(t, s) && y(a, s, t[s]);\n    if (P) for (var s of P(t))L.call(t, s) && y(a, s, t[s]);\n    return a;\n}, _ = (a, t)=>D(a, U(t)), o = (a, t, s)=>y(a, typeof t != \"symbol\" ? t + \"\" : t, s);\nfunction v(a) {\n    return Number(a[0].split(\":\")[1]);\n}\nfunction C(a) {\n    return \"0x\".concat(a.toString(16));\n}\n_c = C;\nfunction x(a) {\n    const { chains: t, optionalChains: s, methods: i, optionalMethods: e, events: n, optionalEvents: h, rpcMap: l } = a;\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(t)) throw new Error(\"Invalid chains\");\n    const r = {\n        chains: t,\n        methods: i || u,\n        events: n || m,\n        rpcMap: g({}, t.length ? {\n            [v(t)]: l[v(t)]\n        } : {})\n    }, c = n === null || n === void 0 ? void 0 : n.filter((d)=>!m.includes(d)), p = i === null || i === void 0 ? void 0 : i.filter((d)=>!u.includes(d));\n    if (!s && !h && !e && !(c != null && c.length) && !(p != null && p.length)) return {\n        required: t.length ? r : void 0\n    };\n    const I = (c === null || c === void 0 ? void 0 : c.length) && (p === null || p === void 0 ? void 0 : p.length) || !s, f = {\n        chains: [\n            ...new Set(I ? r.chains.concat(s || []) : s)\n        ],\n        methods: [\n            ...new Set(r.methods.concat(e != null && e.length ? e : M))\n        ],\n        events: [\n            ...new Set(r.events.concat(h != null && h.length ? h : O))\n        ],\n        rpcMap: l\n    };\n    return {\n        required: t.length ? r : void 0,\n        optional: s.length ? f : void 0\n    };\n}\nclass w {\n    static async init(t) {\n        const s = new w;\n        return await s.initialize(t), s;\n    }\n    async request(t, s) {\n        return await this.signer.request(t, this.formatChainId(this.chainId), s);\n    }\n    sendAsync(t, s, i) {\n        this.signer.sendAsync(t, s, this.formatChainId(this.chainId), i);\n    }\n    get connected() {\n        return this.signer.client ? this.signer.client.core.relayer.connected : !1;\n    }\n    get connecting() {\n        return this.signer.client ? this.signer.client.core.relayer.connecting : !1;\n    }\n    async enable() {\n        return this.session || await this.connect(), await this.request({\n            method: \"eth_requestAccounts\"\n        });\n    }\n    async connect(t) {\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts(t);\n        const { required: s, optional: i } = x(this.rpc);\n        try {\n            const e = await new Promise(async (h, l)=>{\n                var r;\n                this.rpc.showQrModal && ((r = this.modal) == null || r.subscribeModal((c)=>{\n                    !c.open && !this.signer.session && (this.signer.abortPairingAttempt(), l(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.connect(_(g({\n                    namespaces: g({}, s && {\n                        [this.namespace]: s\n                    })\n                }, i && {\n                    optionalNamespaces: {\n                        [this.namespace]: i\n                    }\n                }), {\n                    pairingTopic: t === null || t === void 0 ? void 0 : t.pairingTopic\n                })).then((c)=>{\n                    h(c);\n                }).catch((c)=>{\n                    l(new Error(c.message));\n                });\n            });\n            if (!e) return;\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(e.namespaces, [\n                this.namespace\n            ]);\n            this.setChainIds(this.rpc.chains.length ? this.rpc.chains : n), this.setAccounts(n), this.events.emit(\"connect\", {\n                chainId: C(this.chainId)\n            });\n        } catch (e) {\n            throw this.signer.logger.error(e), e;\n        } finally{\n            this.modal && this.modal.closeModal();\n        }\n    }\n    async authenticate(t, s) {\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts({\n            chains: t === null || t === void 0 ? void 0 : t.chains\n        });\n        try {\n            const i = await new Promise(async (n, h)=>{\n                var l;\n                this.rpc.showQrModal && ((l = this.modal) == null || l.subscribeModal((r)=>{\n                    !r.open && !this.signer.session && (this.signer.abortPairingAttempt(), h(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.authenticate(_(g({}, t), {\n                    chains: this.rpc.chains\n                }), s).then((r)=>{\n                    n(r);\n                }).catch((r)=>{\n                    h(new Error(r.message));\n                });\n            }), e = i.session;\n            if (e) {\n                const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(e.namespaces, [\n                    this.namespace\n                ]);\n                this.setChainIds(this.rpc.chains.length ? this.rpc.chains : n), this.setAccounts(n), this.events.emit(\"connect\", {\n                    chainId: C(this.chainId)\n                });\n            }\n            return i;\n        } catch (i) {\n            throw this.signer.logger.error(i), i;\n        } finally{\n            this.modal && this.modal.closeModal();\n        }\n    }\n    async disconnect() {\n        this.session && await this.signer.disconnect(), this.reset();\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    get session() {\n        return this.signer.session;\n    }\n    registerEventListeners() {\n        this.signer.on(\"session_event\", (t)=>{\n            const { params: s } = t, { event: i } = s;\n            i.name === \"accountsChanged\" ? (this.accounts = this.parseAccounts(i.data), this.events.emit(\"accountsChanged\", this.accounts)) : i.name === \"chainChanged\" ? this.setChainId(this.formatChainId(i.data)) : this.events.emit(i.name, i.data), this.events.emit(\"session_event\", t);\n        }), this.signer.on(\"chainChanged\", (t)=>{\n            const s = parseInt(t);\n            this.chainId = s, this.events.emit(\"chainChanged\", C(this.chainId)), this.persist();\n        }), this.signer.on(\"session_update\", (t)=>{\n            this.events.emit(\"session_update\", t);\n        }), this.signer.on(\"session_delete\", (t)=>{\n            this.reset(), this.events.emit(\"session_delete\", t), this.events.emit(\"disconnect\", _(g({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: t.topic,\n                name: \"USER_DISCONNECTED\"\n            }));\n        }), this.signer.on(\"display_uri\", (t)=>{\n            var s, i;\n            this.rpc.showQrModal && ((s = this.modal) == null || s.closeModal(), (i = this.modal) == null || i.openModal({\n                uri: t\n            })), this.events.emit(\"display_uri\", t);\n        });\n    }\n    switchEthereumChain(t) {\n        this.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [\n                {\n                    chainId: t.toString(16)\n                }\n            ]\n        });\n    }\n    isCompatibleChainId(t) {\n        return typeof t == \"string\" ? t.startsWith(\"\".concat(this.namespace, \":\")) : !1;\n    }\n    formatChainId(t) {\n        return \"\".concat(this.namespace, \":\").concat(t);\n    }\n    parseChainId(t) {\n        return Number(t.split(\":\")[1]);\n    }\n    setChainIds(t) {\n        const s = t.filter((i)=>this.isCompatibleChainId(i)).map((i)=>this.parseChainId(i));\n        s.length && (this.chainId = s[0], this.events.emit(\"chainChanged\", C(this.chainId)), this.persist());\n    }\n    setChainId(t) {\n        if (this.isCompatibleChainId(t)) {\n            const s = this.parseChainId(t);\n            this.chainId = s, this.switchEthereumChain(s);\n        }\n    }\n    parseAccountId(t) {\n        const [s, i, e] = t.split(\":\");\n        return {\n            chainId: \"\".concat(s, \":\").concat(i),\n            address: e\n        };\n    }\n    setAccounts(t) {\n        this.accounts = t.filter((s)=>this.parseChainId(this.parseAccountId(s).chainId) === this.chainId).map((s)=>this.parseAccountId(s).address), this.events.emit(\"accountsChanged\", this.accounts);\n    }\n    getRpcConfig(t) {\n        var s, i;\n        const e = (s = t === null || t === void 0 ? void 0 : t.chains) != null ? s : [], n = (i = t === null || t === void 0 ? void 0 : t.optionalChains) != null ? i : [], h = e.concat(n);\n        if (!h.length) throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n        const l = e.length ? (t === null || t === void 0 ? void 0 : t.methods) || u : [], r = e.length ? (t === null || t === void 0 ? void 0 : t.events) || m : [], c = (t === null || t === void 0 ? void 0 : t.optionalMethods) || [], p = (t === null || t === void 0 ? void 0 : t.optionalEvents) || [], I = (t === null || t === void 0 ? void 0 : t.rpcMap) || this.buildRpcMap(h, t.projectId), f = (t === null || t === void 0 ? void 0 : t.qrModalOptions) || void 0;\n        return {\n            chains: e === null || e === void 0 ? void 0 : e.map((d)=>this.formatChainId(d)),\n            optionalChains: n.map((d)=>this.formatChainId(d)),\n            methods: l,\n            events: r,\n            optionalMethods: c,\n            optionalEvents: p,\n            rpcMap: I,\n            showQrModal: !!(t != null && t.showQrModal),\n            qrModalOptions: f,\n            projectId: t.projectId,\n            metadata: t.metadata\n        };\n    }\n    buildRpcMap(t, s) {\n        const i = {};\n        return t.forEach((e)=>{\n            i[e] = this.getRpcUrl(e, s);\n        }), i;\n    }\n    async initialize(t) {\n        if (this.rpc = this.getRpcConfig(t), this.chainId = this.rpc.chains.length ? v(this.rpc.chains) : v(this.rpc.optionalChains), this.signer = await _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__.UniversalProvider.init({\n            projectId: this.rpc.projectId,\n            metadata: this.rpc.metadata,\n            disableProviderPing: t.disableProviderPing,\n            relayUrl: t.relayUrl,\n            storage: t.storage,\n            storageOptions: t.storageOptions,\n            customStoragePrefix: t.customStoragePrefix,\n            telemetryEnabled: t.telemetryEnabled,\n            logger: t.logger\n        }), this.registerEventListeners(), await this.loadPersistedSession(), this.rpc.showQrModal) {\n            let s;\n            try {\n                const { WalletConnectModal: i } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_walletconnect_modal_dist_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/modal */ \"(app-pages-browser)/./node_modules/@walletconnect/modal/dist/index.js\"));\n                s = i;\n            } catch (e) {\n                throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\n            }\n            if (s) try {\n                this.modal = new s(g({\n                    projectId: this.rpc.projectId\n                }, this.rpc.qrModalOptions));\n            } catch (i) {\n                throw this.signer.logger.error(i), new Error(\"Could not generate WalletConnectModal Instance\");\n            }\n        }\n    }\n    loadConnectOpts(t) {\n        if (!t) return;\n        const { chains: s, optionalChains: i, rpcMap: e } = t;\n        s && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(s) && (this.rpc.chains = s.map((n)=>this.formatChainId(n)), s.forEach((n)=>{\n            this.rpc.rpcMap[n] = (e === null || e === void 0 ? void 0 : e[n]) || this.getRpcUrl(n);\n        })), i && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(i) && (this.rpc.optionalChains = [], this.rpc.optionalChains = i === null || i === void 0 ? void 0 : i.map((n)=>this.formatChainId(n)), i.forEach((n)=>{\n            this.rpc.rpcMap[n] = (e === null || e === void 0 ? void 0 : e[n]) || this.getRpcUrl(n);\n        }));\n    }\n    getRpcUrl(t, s) {\n        var i;\n        return ((i = this.rpc.rpcMap) == null ? void 0 : i[t]) || \"\".concat(q, \"?chainId=eip155:\").concat(t, \"&projectId=\").concat(s || this.rpc.projectId);\n    }\n    async loadPersistedSession() {\n        if (this.session) try {\n            const t = await this.signer.client.core.storage.getItem(\"\".concat(this.STORAGE_KEY, \"/chainId\")), s = this.session.namespaces[\"\".concat(this.namespace, \":\").concat(t)] ? this.session.namespaces[\"\".concat(this.namespace, \":\").concat(t)] : this.session.namespaces[this.namespace];\n            this.setChainIds(t ? [\n                this.formatChainId(t)\n            ] : s === null || s === void 0 ? void 0 : s.accounts), this.setAccounts(s === null || s === void 0 ? void 0 : s.accounts);\n        } catch (t) {\n            this.signer.logger.error(\"Failed to load persisted session, clearing state...\"), this.signer.logger.error(t), await this.disconnect().catch((s)=>this.signer.logger.warn(s));\n        }\n    }\n    reset() {\n        this.chainId = 1, this.accounts = [];\n    }\n    persist() {\n        this.session && this.signer.client.core.storage.setItem(\"\".concat(this.STORAGE_KEY, \"/chainId\"), this.chainId);\n    }\n    parseAccounts(t) {\n        return typeof t == \"string\" || t instanceof String ? [\n            this.parseAccount(t)\n        ] : t.map((s)=>this.parseAccount(s));\n    }\n    constructor(){\n        o(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), o(this, \"namespace\", \"eip155\"), o(this, \"accounts\", []), o(this, \"signer\"), o(this, \"chainId\", 1), o(this, \"modal\"), o(this, \"rpc\"), o(this, \"STORAGE_KEY\", j), o(this, \"on\", (t, s)=>(this.events.on(t, s), this)), o(this, \"once\", (t, s)=>(this.events.once(t, s), this)), o(this, \"removeListener\", (t, s)=>(this.events.removeListener(t, s), this)), o(this, \"off\", (t, s)=>(this.events.off(t, s), this)), o(this, \"parseAccount\", (t)=>this.isCompatibleChainId(t) ? this.parseAccountId(t).address : t), this.signer = {}, this.rpc = {};\n    }\n}\nconst z = w;\n //# sourceMappingURL=index.es.js.map\nvar _c;\n$RefreshReg$(_c, \"C\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/events.js":
/*!***************************************************************!*\
  !*** ./node_modules/@walletconnect/events/dist/esm/events.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: function() { return /* binding */ IEvents; }\n/* harmony export */ });\nclass IEvents {\n} //# sourceMappingURL=events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vZXZlbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQTtBQUNiLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vZXZlbnRzLmpzPzEwNTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIElFdmVudHMge1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJJRXZlbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/events.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@walletconnect/events/dist/esm/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: function() { return /* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_0__.IEvents; }\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/events.js\");\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUIsQ0FDekIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vaW5kZXguanM/ZDMwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9ldmVudHNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/index.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/heartbeat/dist/index.es.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HEARTBEAT_EVENTS: function() { return /* binding */ r; },\n/* harmony export */   HEARTBEAT_INTERVAL: function() { return /* binding */ s; },\n/* harmony export */   HeartBeat: function() { return /* binding */ i; },\n/* harmony export */   IHeartBeat: function() { return /* binding */ n; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/events */ \"(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/index.js\");\n\n\n\nclass n extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_2__.IEvents {\n    constructor(e){\n        super();\n    }\n}\nconst s = _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_SECONDS, r = {\n    pulse: \"heartbeat_pulse\"\n};\nclass i extends n {\n    static async init(e) {\n        const t = new i(e);\n        return await t.init(), t;\n    }\n    async init() {\n        await this.initialize();\n    }\n    stop() {\n        clearInterval(this.intervalRef);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async initialize() {\n        this.intervalRef = setInterval(()=>this.pulse(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(this.interval));\n    }\n    pulse() {\n        this.events.emit(r.pulse);\n    }\n    constructor(e){\n        super(e), this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.interval = s, this.interval = (e === null || e === void 0 ? void 0 : e.interval) || s;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9pbmRleC5lcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBc0M7QUFBc0U7QUFBZ0Q7QUFBQSxNQUFNUSxVQUFVRCwwREFBQ0E7SUFBQ0UsWUFBWUMsQ0FBQyxDQUFDO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNQyxJQUFFUiw2REFBQ0EsRUFBQ1MsSUFBRTtJQUFDQyxPQUFNO0FBQWlCO0FBQUUsTUFBTUMsVUFBVU47SUFBeUYsYUFBYU8sS0FBS0wsQ0FBQyxFQUFDO1FBQUMsTUFBTU0sSUFBRSxJQUFJRixFQUFFSjtRQUFHLE9BQU8sTUFBTU0sRUFBRUQsSUFBSSxJQUFHQztJQUFDO0lBQUMsTUFBTUQsT0FBTTtRQUFDLE1BQU0sSUFBSSxDQUFDRSxVQUFVO0lBQUU7SUFBQ0MsT0FBTTtRQUFDQyxjQUFjLElBQUksQ0FBQ0MsV0FBVztJQUFDO0lBQUNDLEdBQUdYLENBQUMsRUFBQ00sQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDTSxNQUFNLENBQUNELEVBQUUsQ0FBQ1gsR0FBRU07SUFBRTtJQUFDTyxLQUFLYixDQUFDLEVBQUNNLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ00sTUFBTSxDQUFDQyxJQUFJLENBQUNiLEdBQUVNO0lBQUU7SUFBQ1EsSUFBSWQsQ0FBQyxFQUFDTSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNNLE1BQU0sQ0FBQ0UsR0FBRyxDQUFDZCxHQUFFTTtJQUFFO0lBQUNTLGVBQWVmLENBQUMsRUFBQ00sQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDTSxNQUFNLENBQUNHLGNBQWMsQ0FBQ2YsR0FBRU07SUFBRTtJQUFDLE1BQU1DLGFBQVk7UUFBQyxJQUFJLENBQUNHLFdBQVcsR0FBQ00sWUFBWSxJQUFJLElBQUksQ0FBQ2IsS0FBSyxJQUFHUixrRUFBQ0EsQ0FBQyxJQUFJLENBQUNzQixRQUFRO0lBQUU7SUFBQ2QsUUFBTztRQUFDLElBQUksQ0FBQ1MsTUFBTSxDQUFDTSxJQUFJLENBQUNoQixFQUFFQyxLQUFLO0lBQUM7SUFBbmVKLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUssQ0FBQ0EsSUFBRyxJQUFJLENBQUNZLE1BQU0sR0FBQyxJQUFJckIsZ0RBQUNBLEVBQUMsSUFBSSxDQUFDMEIsUUFBUSxHQUFDaEIsR0FBRSxJQUFJLENBQUNnQixRQUFRLEdBQUNqQixDQUFBQSxjQUFBQSx3QkFBQUEsRUFBR2lCLFFBQVEsS0FBRWhCO0lBQUM7QUFBOFk7QUFBc0YsQ0FDeHpCLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaGVhcnRiZWF0L2Rpc3QvaW5kZXguZXMuanM/ZDMwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7RXZlbnRFbWl0dGVyIGFzIGF9ZnJvbVwiZXZlbnRzXCI7aW1wb3J0e0ZJVkVfU0VDT05EUyBhcyBvLHRvTWlsaXNlY29uZHMgYXMgbH1mcm9tXCJAd2FsbGV0Y29ubmVjdC90aW1lXCI7aW1wb3J0e0lFdmVudHMgYXMgdn1mcm9tXCJAd2FsbGV0Y29ubmVjdC9ldmVudHNcIjtjbGFzcyBuIGV4dGVuZHMgdntjb25zdHJ1Y3RvcihlKXtzdXBlcigpfX1jb25zdCBzPW8scj17cHVsc2U6XCJoZWFydGJlYXRfcHVsc2VcIn07Y2xhc3MgaSBleHRlbmRzIG57Y29uc3RydWN0b3IoZSl7c3VwZXIoZSksdGhpcy5ldmVudHM9bmV3IGEsdGhpcy5pbnRlcnZhbD1zLHRoaXMuaW50ZXJ2YWw9ZT8uaW50ZXJ2YWx8fHN9c3RhdGljIGFzeW5jIGluaXQoZSl7Y29uc3QgdD1uZXcgaShlKTtyZXR1cm4gYXdhaXQgdC5pbml0KCksdH1hc3luYyBpbml0KCl7YXdhaXQgdGhpcy5pbml0aWFsaXplKCl9c3RvcCgpe2NsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbFJlZil9b24oZSx0KXt0aGlzLmV2ZW50cy5vbihlLHQpfW9uY2UoZSx0KXt0aGlzLmV2ZW50cy5vbmNlKGUsdCl9b2ZmKGUsdCl7dGhpcy5ldmVudHMub2ZmKGUsdCl9cmVtb3ZlTGlzdGVuZXIoZSx0KXt0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihlLHQpfWFzeW5jIGluaXRpYWxpemUoKXt0aGlzLmludGVydmFsUmVmPXNldEludGVydmFsKCgpPT50aGlzLnB1bHNlKCksbCh0aGlzLmludGVydmFsKSl9cHVsc2UoKXt0aGlzLmV2ZW50cy5lbWl0KHIucHVsc2UpfX1leHBvcnR7ciBhcyBIRUFSVEJFQVRfRVZFTlRTLHMgYXMgSEVBUlRCRUFUX0lOVEVSVkFMLGkgYXMgSGVhcnRCZWF0LG4gYXMgSUhlYXJ0QmVhdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJhIiwiRklWRV9TRUNPTkRTIiwibyIsInRvTWlsaXNlY29uZHMiLCJsIiwiSUV2ZW50cyIsInYiLCJuIiwiY29uc3RydWN0b3IiLCJlIiwicyIsInIiLCJwdWxzZSIsImkiLCJpbml0IiwidCIsImluaXRpYWxpemUiLCJzdG9wIiwiY2xlYXJJbnRlcnZhbCIsImludGVydmFsUmVmIiwib24iLCJldmVudHMiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJzZXRJbnRlcnZhbCIsImludGVydmFsIiwiZW1pdCIsIkhFQVJUQkVBVF9FVkVOVFMiLCJIRUFSVEJFQVRfSU5URVJWQUwiLCJIZWFydEJlYXQiLCJJSGVhcnRCZWF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpConnection: function() { return /* binding */ f; },\n/* harmony export */   \"default\": function() { return /* binding */ f; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cross-fetch */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\nvar P = Object.defineProperty, w = Object.defineProperties, E = Object.getOwnPropertyDescriptors, c = Object.getOwnPropertySymbols, L = Object.prototype.hasOwnProperty, O = Object.prototype.propertyIsEnumerable, l = (r, t, e)=>t in r ? P(r, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : r[t] = e, p = (r, t)=>{\n    for(var e in t || (t = {}))L.call(t, e) && l(r, e, t[e]);\n    if (c) for (var e of c(t))O.call(t, e) && l(r, e, t[e]);\n    return r;\n}, v = (r, t)=>w(r, E(t));\nconst j = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n}, T = \"POST\", d = {\n    headers: j,\n    method: T\n}, g = 10;\nclass f {\n    get connected() {\n        return this.isAvailable;\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(t, e) {\n        this.events.on(t, e);\n    }\n    once(t, e) {\n        this.events.once(t, e);\n    }\n    off(t, e) {\n        this.events.off(t, e);\n    }\n    removeListener(t, e) {\n        this.events.removeListener(t, e);\n    }\n    async open() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        await this.register(t);\n    }\n    async close() {\n        if (!this.isAvailable) throw new Error(\"Connection already closed\");\n        this.onClose();\n    }\n    async send(t) {\n        this.isAvailable || await this.register();\n        try {\n            const e = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)(t), s = await (await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(this.url, v(p({}, d), {\n                body: e\n            }))).json();\n            this.onPayload({\n                data: s\n            });\n        } catch (e) {\n            this.onError(t.id, e);\n        }\n    }\n    async register() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(t)) throw new Error(\"Provided URL is not compatible with HTTP connection: \".concat(t));\n        if (this.registering) {\n            const e = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= e || this.events.listenerCount(\"open\") >= e) && this.events.setMaxListeners(e + 1), new Promise((s, i)=>{\n                this.events.once(\"register_error\", (n)=>{\n                    this.resetMaxListeners(), i(n);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.isAvailable > \"u\") return i(new Error(\"HTTP connection is missing or invalid\"));\n                    s();\n                });\n            });\n        }\n        this.url = t, this.registering = !0;\n        try {\n            if (!this.disableProviderPing) {\n                const e = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)({\n                    id: 1,\n                    jsonrpc: \"2.0\",\n                    method: \"test\",\n                    params: []\n                });\n                await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(t, v(p({}, d), {\n                    body: e\n                }));\n            }\n            this.onOpen();\n        } catch (e) {\n            const s = this.parseError(e);\n            throw this.events.emit(\"register_error\", s), this.onClose(), s;\n        }\n    }\n    onOpen() {\n        this.isAvailable = !0, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose() {\n        this.isAvailable = !1, this.registering = !1, this.events.emit(\"close\");\n    }\n    onPayload(t) {\n        if (typeof t.data > \"u\") return;\n        const e = typeof t.data == \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonParse)(t.data) : t.data;\n        this.events.emit(\"payload\", e);\n    }\n    onError(t, e) {\n        const s = this.parseError(e), i = s.message || s.toString(), n = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(t, i);\n        this.events.emit(\"payload\", n);\n    }\n    parseError(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.url;\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.parseConnectionError)(t, e, \"HTTP\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > g && this.events.setMaxListeners(g);\n    }\n    constructor(t, e = !1){\n        if (this.url = t, this.disableProviderPing = e, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.isAvailable = !1, this.registering = !1, !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(t)) throw new Error(\"Provided URL is not compatible with HTTP connection: \".concat(t));\n        this.url = t, this.disableProviderPing = e;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Save global object in a variable\n\nvar __global__ = typeof globalThis !== \"undefined\" && globalThis || typeof self !== \"undefined\" && self || typeof __webpack_require__.g !== \"undefined\" && __webpack_require__.g;\n// Create an object that extends from __global__ without the fetch function\nvar __globalThis__ = function() {\n    function F() {\n        this.fetch = false;\n        this.DOMException = __global__.DOMException;\n    }\n    F.prototype = __global__; // Needed for feature detection on whatwg-fetch's code\n    return new F();\n}();\n// Wraps whatwg-fetch with a function scope to hijack the global object\n// \"globalThis\" that's going to be patched\n(function(globalThis1) {\n    var irrelevant = function(exports1) {\n        /* eslint-disable no-prototype-builtins */ var g = typeof globalThis1 !== \"undefined\" && globalThis1 || typeof self !== \"undefined\" && self || // eslint-disable-next-line no-undef\n        typeof __webpack_require__.g !== \"undefined\" && __webpack_require__.g || {};\n        var support = {\n            searchParams: \"URLSearchParams\" in g,\n            iterable: \"Symbol\" in g && \"iterator\" in Symbol,\n            blob: \"FileReader\" in g && \"Blob\" in g && function() {\n                try {\n                    new Blob();\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            }(),\n            formData: \"FormData\" in g,\n            arrayBuffer: \"ArrayBuffer\" in g\n        };\n        function isDataView(obj) {\n            return obj && DataView.prototype.isPrototypeOf(obj);\n        }\n        if (support.arrayBuffer) {\n            var viewClasses = [\n                \"[object Int8Array]\",\n                \"[object Uint8Array]\",\n                \"[object Uint8ClampedArray]\",\n                \"[object Int16Array]\",\n                \"[object Uint16Array]\",\n                \"[object Int32Array]\",\n                \"[object Uint32Array]\",\n                \"[object Float32Array]\",\n                \"[object Float64Array]\"\n            ];\n            var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n            };\n        }\n        function normalizeName(name) {\n            if (typeof name !== \"string\") {\n                name = String(name);\n            }\n            if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === \"\") {\n                throw new TypeError('Invalid character in header field name: \"' + name + '\"');\n            }\n            return name.toLowerCase();\n        }\n        function normalizeValue(value) {\n            if (typeof value !== \"string\") {\n                value = String(value);\n            }\n            return value;\n        }\n        // Build a destructive iterator for the value list\n        function iteratorFor(items) {\n            var iterator = {\n                next: function() {\n                    var value = items.shift();\n                    return {\n                        done: value === undefined,\n                        value: value\n                    };\n                }\n            };\n            if (support.iterable) {\n                iterator[Symbol.iterator] = function() {\n                    return iterator;\n                };\n            }\n            return iterator;\n        }\n        function Headers(headers) {\n            this.map = {};\n            if (headers instanceof Headers) {\n                headers.forEach(function(value, name) {\n                    this.append(name, value);\n                }, this);\n            } else if (Array.isArray(headers)) {\n                headers.forEach(function(header) {\n                    if (header.length != 2) {\n                        throw new TypeError(\"Headers constructor: expected name/value pair to be length 2, found\" + header.length);\n                    }\n                    this.append(header[0], header[1]);\n                }, this);\n            } else if (headers) {\n                Object.getOwnPropertyNames(headers).forEach(function(name) {\n                    this.append(name, headers[name]);\n                }, this);\n            }\n        }\n        Headers.prototype.append = function(name, value) {\n            name = normalizeName(name);\n            value = normalizeValue(value);\n            var oldValue = this.map[name];\n            this.map[name] = oldValue ? oldValue + \", \" + value : value;\n        };\n        Headers.prototype[\"delete\"] = function(name) {\n            delete this.map[normalizeName(name)];\n        };\n        Headers.prototype.get = function(name) {\n            name = normalizeName(name);\n            return this.has(name) ? this.map[name] : null;\n        };\n        Headers.prototype.has = function(name) {\n            return this.map.hasOwnProperty(normalizeName(name));\n        };\n        Headers.prototype.set = function(name, value) {\n            this.map[normalizeName(name)] = normalizeValue(value);\n        };\n        Headers.prototype.forEach = function(callback, thisArg) {\n            for(var name in this.map){\n                if (this.map.hasOwnProperty(name)) {\n                    callback.call(thisArg, this.map[name], name, this);\n                }\n            }\n        };\n        Headers.prototype.keys = function() {\n            var items = [];\n            this.forEach(function(value, name) {\n                items.push(name);\n            });\n            return iteratorFor(items);\n        };\n        Headers.prototype.values = function() {\n            var items = [];\n            this.forEach(function(value) {\n                items.push(value);\n            });\n            return iteratorFor(items);\n        };\n        Headers.prototype.entries = function() {\n            var items = [];\n            this.forEach(function(value, name) {\n                items.push([\n                    name,\n                    value\n                ]);\n            });\n            return iteratorFor(items);\n        };\n        if (support.iterable) {\n            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n        }\n        function consumed(body) {\n            if (body._noBody) return;\n            if (body.bodyUsed) {\n                return Promise.reject(new TypeError(\"Already read\"));\n            }\n            body.bodyUsed = true;\n        }\n        function fileReaderReady(reader) {\n            return new Promise(function(resolve, reject) {\n                reader.onload = function() {\n                    resolve(reader.result);\n                };\n                reader.onerror = function() {\n                    reject(reader.error);\n                };\n            });\n        }\n        function readBlobAsArrayBuffer(blob) {\n            var reader = new FileReader();\n            var promise = fileReaderReady(reader);\n            reader.readAsArrayBuffer(blob);\n            return promise;\n        }\n        function readBlobAsText(blob) {\n            var reader = new FileReader();\n            var promise = fileReaderReady(reader);\n            var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);\n            var encoding = match ? match[1] : \"utf-8\";\n            reader.readAsText(blob, encoding);\n            return promise;\n        }\n        function readArrayBufferAsText(buf) {\n            var view = new Uint8Array(buf);\n            var chars = new Array(view.length);\n            for(var i = 0; i < view.length; i++){\n                chars[i] = String.fromCharCode(view[i]);\n            }\n            return chars.join(\"\");\n        }\n        function bufferClone(buf) {\n            if (buf.slice) {\n                return buf.slice(0);\n            } else {\n                var view = new Uint8Array(buf.byteLength);\n                view.set(new Uint8Array(buf));\n                return view.buffer;\n            }\n        }\n        function Body() {\n            this.bodyUsed = false;\n            this._initBody = function(body) {\n                /*\n        fetch-mock wraps the Response object in an ES6 Proxy to\n        provide useful test harness features such as flush. However, on\n        ES5 browsers without fetch or Proxy support pollyfills must be used;\n        the proxy-pollyfill is unable to proxy an attribute unless it exists\n        on the object before the Proxy is created. This change ensures\n        Response.bodyUsed exists on the instance, while maintaining the\n        semantic of setting Request.bodyUsed in the constructor before\n        _initBody is called.\n      */ // eslint-disable-next-line no-self-assign\n                this.bodyUsed = this.bodyUsed;\n                this._bodyInit = body;\n                if (!body) {\n                    this._noBody = true;\n                    this._bodyText = \"\";\n                } else if (typeof body === \"string\") {\n                    this._bodyText = body;\n                } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n                    this._bodyBlob = body;\n                } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n                    this._bodyFormData = body;\n                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                    this._bodyText = body.toString();\n                } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n                    this._bodyArrayBuffer = bufferClone(body.buffer);\n                    // IE 10-11 can't handle a DataView body.\n                    this._bodyInit = new Blob([\n                        this._bodyArrayBuffer\n                    ]);\n                } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n                    this._bodyArrayBuffer = bufferClone(body);\n                } else {\n                    this._bodyText = body = Object.prototype.toString.call(body);\n                }\n                if (!this.headers.get(\"content-type\")) {\n                    if (typeof body === \"string\") {\n                        this.headers.set(\"content-type\", \"text/plain;charset=UTF-8\");\n                    } else if (this._bodyBlob && this._bodyBlob.type) {\n                        this.headers.set(\"content-type\", this._bodyBlob.type);\n                    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                        this.headers.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n                    }\n                }\n            };\n            if (support.blob) {\n                this.blob = function() {\n                    var rejected = consumed(this);\n                    if (rejected) {\n                        return rejected;\n                    }\n                    if (this._bodyBlob) {\n                        return Promise.resolve(this._bodyBlob);\n                    } else if (this._bodyArrayBuffer) {\n                        return Promise.resolve(new Blob([\n                            this._bodyArrayBuffer\n                        ]));\n                    } else if (this._bodyFormData) {\n                        throw new Error(\"could not read FormData body as blob\");\n                    } else {\n                        return Promise.resolve(new Blob([\n                            this._bodyText\n                        ]));\n                    }\n                };\n            }\n            this.arrayBuffer = function() {\n                if (this._bodyArrayBuffer) {\n                    var isConsumed = consumed(this);\n                    if (isConsumed) {\n                        return isConsumed;\n                    } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n                        return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));\n                    } else {\n                        return Promise.resolve(this._bodyArrayBuffer);\n                    }\n                } else if (support.blob) {\n                    return this.blob().then(readBlobAsArrayBuffer);\n                } else {\n                    throw new Error(\"could not read as ArrayBuffer\");\n                }\n            };\n            this.text = function() {\n                var rejected = consumed(this);\n                if (rejected) {\n                    return rejected;\n                }\n                if (this._bodyBlob) {\n                    return readBlobAsText(this._bodyBlob);\n                } else if (this._bodyArrayBuffer) {\n                    return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n                } else if (this._bodyFormData) {\n                    throw new Error(\"could not read FormData body as text\");\n                } else {\n                    return Promise.resolve(this._bodyText);\n                }\n            };\n            if (support.formData) {\n                this.formData = function() {\n                    return this.text().then(decode);\n                };\n            }\n            this.json = function() {\n                return this.text().then(JSON.parse);\n            };\n            return this;\n        }\n        // HTTP methods whose capitalization should be normalized\n        var methods = [\n            \"CONNECT\",\n            \"DELETE\",\n            \"GET\",\n            \"HEAD\",\n            \"OPTIONS\",\n            \"PATCH\",\n            \"POST\",\n            \"PUT\",\n            \"TRACE\"\n        ];\n        function normalizeMethod(method) {\n            var upcased = method.toUpperCase();\n            return methods.indexOf(upcased) > -1 ? upcased : method;\n        }\n        function Request(input, options) {\n            if (!(this instanceof Request)) {\n                throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.');\n            }\n            options = options || {};\n            var body = options.body;\n            if (input instanceof Request) {\n                if (input.bodyUsed) {\n                    throw new TypeError(\"Already read\");\n                }\n                this.url = input.url;\n                this.credentials = input.credentials;\n                if (!options.headers) {\n                    this.headers = new Headers(input.headers);\n                }\n                this.method = input.method;\n                this.mode = input.mode;\n                this.signal = input.signal;\n                if (!body && input._bodyInit != null) {\n                    body = input._bodyInit;\n                    input.bodyUsed = true;\n                }\n            } else {\n                this.url = String(input);\n            }\n            this.credentials = options.credentials || this.credentials || \"same-origin\";\n            if (options.headers || !this.headers) {\n                this.headers = new Headers(options.headers);\n            }\n            this.method = normalizeMethod(options.method || this.method || \"GET\");\n            this.mode = options.mode || this.mode || null;\n            this.signal = options.signal || this.signal || function() {\n                if (\"AbortController\" in g) {\n                    var ctrl = new AbortController();\n                    return ctrl.signal;\n                }\n            }();\n            this.referrer = null;\n            if ((this.method === \"GET\" || this.method === \"HEAD\") && body) {\n                throw new TypeError(\"Body not allowed for GET or HEAD requests\");\n            }\n            this._initBody(body);\n            if (this.method === \"GET\" || this.method === \"HEAD\") {\n                if (options.cache === \"no-store\" || options.cache === \"no-cache\") {\n                    // Search for a '_' parameter in the query string\n                    var reParamSearch = /([?&])_=[^&]*/;\n                    if (reParamSearch.test(this.url)) {\n                        // If it already exists then set the value with the current time\n                        this.url = this.url.replace(reParamSearch, \"$1_=\" + new Date().getTime());\n                    } else {\n                        // Otherwise add a new '_' parameter to the end with the current time\n                        var reQueryString = /\\?/;\n                        this.url += (reQueryString.test(this.url) ? \"&\" : \"?\") + \"_=\" + new Date().getTime();\n                    }\n                }\n            }\n        }\n        Request.prototype.clone = function() {\n            return new Request(this, {\n                body: this._bodyInit\n            });\n        };\n        function decode(body) {\n            var form = new FormData();\n            body.trim().split(\"&\").forEach(function(bytes) {\n                if (bytes) {\n                    var split = bytes.split(\"=\");\n                    var name = split.shift().replace(/\\+/g, \" \");\n                    var value = split.join(\"=\").replace(/\\+/g, \" \");\n                    form.append(decodeURIComponent(name), decodeURIComponent(value));\n                }\n            });\n            return form;\n        }\n        function parseHeaders(rawHeaders) {\n            var headers = new Headers();\n            // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n            // https://tools.ietf.org/html/rfc7230#section-3.2\n            var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, \" \");\n            // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n            // https://github.com/github/fetch/issues/748\n            // https://github.com/zloirock/core-js/issues/751\n            preProcessedHeaders.split(\"\\r\").map(function(header) {\n                return header.indexOf(\"\\n\") === 0 ? header.substr(1, header.length) : header;\n            }).forEach(function(line) {\n                var parts = line.split(\":\");\n                var key = parts.shift().trim();\n                if (key) {\n                    var value = parts.join(\":\").trim();\n                    try {\n                        headers.append(key, value);\n                    } catch (error) {\n                        console.warn(\"Response \" + error.message);\n                    }\n                }\n            });\n            return headers;\n        }\n        Body.call(Request.prototype);\n        function Response(bodyInit, options) {\n            if (!(this instanceof Response)) {\n                throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.');\n            }\n            if (!options) {\n                options = {};\n            }\n            this.type = \"default\";\n            this.status = options.status === undefined ? 200 : options.status;\n            if (this.status < 200 || this.status > 599) {\n                throw new RangeError(\"Failed to construct 'Response': The status provided (0) is outside the range [200, 599].\");\n            }\n            this.ok = this.status >= 200 && this.status < 300;\n            this.statusText = options.statusText === undefined ? \"\" : \"\" + options.statusText;\n            this.headers = new Headers(options.headers);\n            this.url = options.url || \"\";\n            this._initBody(bodyInit);\n        }\n        Body.call(Response.prototype);\n        Response.prototype.clone = function() {\n            return new Response(this._bodyInit, {\n                status: this.status,\n                statusText: this.statusText,\n                headers: new Headers(this.headers),\n                url: this.url\n            });\n        };\n        Response.error = function() {\n            var response = new Response(null, {\n                status: 200,\n                statusText: \"\"\n            });\n            response.ok = false;\n            response.status = 0;\n            response.type = \"error\";\n            return response;\n        };\n        var redirectStatuses = [\n            301,\n            302,\n            303,\n            307,\n            308\n        ];\n        Response.redirect = function(url, status) {\n            if (redirectStatuses.indexOf(status) === -1) {\n                throw new RangeError(\"Invalid status code\");\n            }\n            return new Response(null, {\n                status: status,\n                headers: {\n                    location: url\n                }\n            });\n        };\n        exports1.DOMException = g.DOMException;\n        try {\n            new exports1.DOMException();\n        } catch (err) {\n            exports1.DOMException = function(message, name) {\n                this.message = message;\n                this.name = name;\n                var error = Error(message);\n                this.stack = error.stack;\n            };\n            exports1.DOMException.prototype = Object.create(Error.prototype);\n            exports1.DOMException.prototype.constructor = exports1.DOMException;\n        }\n        function fetch(input, init) {\n            return new Promise(function(resolve, reject) {\n                var request = new Request(input, init);\n                if (request.signal && request.signal.aborted) {\n                    return reject(new exports1.DOMException(\"Aborted\", \"AbortError\"));\n                }\n                var xhr = new XMLHttpRequest();\n                function abortXhr() {\n                    xhr.abort();\n                }\n                xhr.onload = function() {\n                    var options = {\n                        statusText: xhr.statusText,\n                        headers: parseHeaders(xhr.getAllResponseHeaders() || \"\")\n                    };\n                    // This check if specifically for when a user fetches a file locally from the file system\n                    // Only if the status is out of a normal range\n                    if (request.url.indexOf(\"file://\") === 0 && (xhr.status < 200 || xhr.status > 599)) {\n                        options.status = 200;\n                    } else {\n                        options.status = xhr.status;\n                    }\n                    options.url = \"responseURL\" in xhr ? xhr.responseURL : options.headers.get(\"X-Request-URL\");\n                    var body = \"response\" in xhr ? xhr.response : xhr.responseText;\n                    setTimeout(function() {\n                        resolve(new Response(body, options));\n                    }, 0);\n                };\n                xhr.onerror = function() {\n                    setTimeout(function() {\n                        reject(new TypeError(\"Network request failed\"));\n                    }, 0);\n                };\n                xhr.ontimeout = function() {\n                    setTimeout(function() {\n                        reject(new TypeError(\"Network request timed out\"));\n                    }, 0);\n                };\n                xhr.onabort = function() {\n                    setTimeout(function() {\n                        reject(new exports1.DOMException(\"Aborted\", \"AbortError\"));\n                    }, 0);\n                };\n                function fixUrl(url) {\n                    try {\n                        return url === \"\" && g.location.href ? g.location.href : url;\n                    } catch (e) {\n                        return url;\n                    }\n                }\n                xhr.open(request.method, fixUrl(request.url), true);\n                if (request.credentials === \"include\") {\n                    xhr.withCredentials = true;\n                } else if (request.credentials === \"omit\") {\n                    xhr.withCredentials = false;\n                }\n                if (\"responseType\" in xhr) {\n                    if (support.blob) {\n                        xhr.responseType = \"blob\";\n                    } else if (support.arrayBuffer) {\n                        xhr.responseType = \"arraybuffer\";\n                    }\n                }\n                if (init && typeof init.headers === \"object\" && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {\n                    var names = [];\n                    Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n                        names.push(normalizeName(name));\n                        xhr.setRequestHeader(name, normalizeValue(init.headers[name]));\n                    });\n                    request.headers.forEach(function(value, name) {\n                        if (names.indexOf(name) === -1) {\n                            xhr.setRequestHeader(name, value);\n                        }\n                    });\n                } else {\n                    request.headers.forEach(function(value, name) {\n                        xhr.setRequestHeader(name, value);\n                    });\n                }\n                if (request.signal) {\n                    request.signal.addEventListener(\"abort\", abortXhr);\n                    xhr.onreadystatechange = function() {\n                        // DONE (success or failure)\n                        if (xhr.readyState === 4) {\n                            request.signal.removeEventListener(\"abort\", abortXhr);\n                        }\n                    };\n                }\n                xhr.send(typeof request._bodyInit === \"undefined\" ? null : request._bodyInit);\n            });\n        }\n        fetch.polyfill = true;\n        if (!g.fetch) {\n            g.fetch = fetch;\n            g.Headers = Headers;\n            g.Request = Request;\n            g.Response = Response;\n        }\n        exports1.Headers = Headers;\n        exports1.Request = Request;\n        exports1.Response = Response;\n        exports1.fetch = fetch;\n        Object.defineProperty(exports1, \"__esModule\", {\n            value: true\n        });\n        return exports1;\n    }({});\n})(__globalThis__);\n// This is a ponyfill, so...\n__globalThis__.fetch.ponyfill = true;\ndelete __globalThis__.fetch.polyfill;\n// Choose between native implementation (__global__) or custom implementation (__globalThis__)\nvar ctx = __global__.fetch ? __global__ : __globalThis__;\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\n;\nexports[\"default\"] = ctx.fetch // For TypeScript consumers without esModuleInterop.\n;\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\n;\nexports.Headers = ctx.Headers;\nexports.Request = ctx.Request;\nexports.Response = ctx.Response;\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/browser-ponyfill.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcProvider: function() { return /* binding */ o; },\n/* harmony export */   \"default\": function() { return /* binding */ o; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\nclass o extends _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.IJsonRpcProvider {\n    async connect() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n        await this.open(t);\n    }\n    async disconnect() {\n        await this.close();\n    }\n    on(t, e) {\n        this.events.on(t, e);\n    }\n    once(t, e) {\n        this.events.once(t, e);\n    }\n    off(t, e) {\n        this.events.off(t, e);\n    }\n    removeListener(t, e) {\n        this.events.removeListener(t, e);\n    }\n    async request(t, e) {\n        return this.requestStrict((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.formatJsonRpcRequest)(t.method, t.params || [], t.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.getBigIntRpcId)().toString()), e);\n    }\n    async requestStrict(t, e) {\n        return new Promise(async (i, s)=>{\n            if (!this.connection.connected) try {\n                await this.open();\n            } catch (n) {\n                s(n);\n            }\n            this.events.on(\"\".concat(t.id), (n)=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcError)(n) ? s(n.error) : i(n.result);\n            });\n            try {\n                await this.connection.send(t, e);\n            } catch (n) {\n                s(n);\n            }\n        });\n    }\n    setConnection() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n        return t;\n    }\n    onPayload(t) {\n        this.events.emit(\"payload\", t), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcResponse)(t) ? this.events.emit(\"\".concat(t.id), t) : this.events.emit(\"message\", {\n            type: t.method,\n            data: t.params\n        });\n    }\n    onClose(t) {\n        t && t.code === 3e3 && this.events.emit(\"error\", new Error(\"WebSocket connection closed abnormally with code: \".concat(t.code, \" \").concat(t.reason ? \"(\".concat(t.reason, \")\") : \"\"))), this.events.emit(\"disconnect\");\n    }\n    async open() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n        this.connection === t && this.connection.connected || (this.connection.connected && this.close(), typeof t == \"string\" && (await this.connection.open(t), t = this.connection), this.connection = this.setConnection(t), await this.connection.open(), this.registerEventListeners(), this.events.emit(\"connect\"));\n    }\n    async close() {\n        await this.connection.close();\n    }\n    registerEventListeners() {\n        this.hasRegisteredEventListeners || (this.connection.on(\"payload\", (t)=>this.onPayload(t)), this.connection.on(\"close\", (t)=>this.onClose(t)), this.connection.on(\"error\", (t)=>this.events.emit(\"error\", t)), this.connection.on(\"register_error\", (t)=>this.onClose()), this.hasRegisteredEventListeners = !0);\n    }\n    constructor(t){\n        super(t), this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.hasRegisteredEventListeners = !1, this.connection = this.setConnection(t), this.connection.connected && this.registerEventListeners();\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXByb3ZpZGVyL2Rpc3QvaW5kZXguZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0M7QUFBeUo7QUFBQSxNQUFNWSxVQUFVVCwwRUFBQ0E7SUFBOEssTUFBTVUsVUFBMEI7WUFBbEJDLElBQUFBLGlFQUFFLElBQUksQ0FBQ0MsVUFBVTtRQUFFLE1BQU0sSUFBSSxDQUFDQyxJQUFJLENBQUNGO0lBQUU7SUFBQyxNQUFNRyxhQUFZO1FBQUMsTUFBTSxJQUFJLENBQUNDLEtBQUs7SUFBRTtJQUFDQyxHQUFHTCxDQUFDLEVBQUNNLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ0MsTUFBTSxDQUFDRixFQUFFLENBQUNMLEdBQUVNO0lBQUU7SUFBQ0UsS0FBS1IsQ0FBQyxFQUFDTSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDUixHQUFFTTtJQUFFO0lBQUNHLElBQUlULENBQUMsRUFBQ00sQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDQyxNQUFNLENBQUNFLEdBQUcsQ0FBQ1QsR0FBRU07SUFBRTtJQUFDSSxlQUFlVixDQUFDLEVBQUNNLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ0MsTUFBTSxDQUFDRyxjQUFjLENBQUNWLEdBQUVNO0lBQUU7SUFBQyxNQUFNSyxRQUFRWCxDQUFDLEVBQUNNLENBQUMsRUFBQztRQUFDLE9BQU8sSUFBSSxDQUFDTSxhQUFhLENBQUNyQixrRkFBQ0EsQ0FBQ1MsRUFBRWEsTUFBTSxFQUFDYixFQUFFYyxNQUFNLElBQUUsRUFBRSxFQUFDZCxFQUFFZSxFQUFFLElBQUV0Qiw0RUFBQ0EsR0FBR3VCLFFBQVEsS0FBSVY7SUFBRTtJQUFDLE1BQU1NLGNBQWNaLENBQUMsRUFBQ00sQ0FBQyxFQUFDO1FBQUMsT0FBTyxJQUFJVyxRQUFRLE9BQU1DLEdBQUVDO1lBQUssSUFBRyxDQUFDLElBQUksQ0FBQ2xC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dURDLFlBQVlwQyxDQUFDLENBQUM7UUFBQyxLQUFLLENBQUNBLElBQUcsSUFBSSxDQUFDTyxNQUFNLEdBQUMsSUFBSXBCLGdEQUFDQSxFQUFDLElBQUksQ0FBQ2dELDJCQUEyQixHQUFDLENBQUMsR0FBRSxJQUFJLENBQUNsQyxVQUFVLEdBQUMsSUFBSSxDQUFDd0IsYUFBYSxDQUFDekIsSUFBRyxJQUFJLENBQUNDLFVBQVUsQ0FBQ21CLFNBQVMsSUFBRSxJQUFJLENBQUNjLHNCQUFzQjtJQUFFO0FBQTZqRDtBQUEyQyxDQUNyK0Qsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXByb3ZpZGVyL2Rpc3QvaW5kZXguZXMuanM/N2VlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7RXZlbnRFbWl0dGVyIGFzIGN9ZnJvbVwiZXZlbnRzXCI7aW1wb3J0e0lKc29uUnBjUHJvdmlkZXIgYXMgcixmb3JtYXRKc29uUnBjUmVxdWVzdCBhcyBoLGdldEJpZ0ludFJwY0lkIGFzIGEsaXNKc29uUnBjRXJyb3IgYXMgZCxpc0pzb25ScGNSZXNwb25zZSBhcyB2fWZyb21cIkB3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHNcIjtjbGFzcyBvIGV4dGVuZHMgcntjb25zdHJ1Y3Rvcih0KXtzdXBlcih0KSx0aGlzLmV2ZW50cz1uZXcgYyx0aGlzLmhhc1JlZ2lzdGVyZWRFdmVudExpc3RlbmVycz0hMSx0aGlzLmNvbm5lY3Rpb249dGhpcy5zZXRDb25uZWN0aW9uKHQpLHRoaXMuY29ubmVjdGlvbi5jb25uZWN0ZWQmJnRoaXMucmVnaXN0ZXJFdmVudExpc3RlbmVycygpfWFzeW5jIGNvbm5lY3QodD10aGlzLmNvbm5lY3Rpb24pe2F3YWl0IHRoaXMub3Blbih0KX1hc3luYyBkaXNjb25uZWN0KCl7YXdhaXQgdGhpcy5jbG9zZSgpfW9uKHQsZSl7dGhpcy5ldmVudHMub24odCxlKX1vbmNlKHQsZSl7dGhpcy5ldmVudHMub25jZSh0LGUpfW9mZih0LGUpe3RoaXMuZXZlbnRzLm9mZih0LGUpfXJlbW92ZUxpc3RlbmVyKHQsZSl7dGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIodCxlKX1hc3luYyByZXF1ZXN0KHQsZSl7cmV0dXJuIHRoaXMucmVxdWVzdFN0cmljdChoKHQubWV0aG9kLHQucGFyYW1zfHxbXSx0LmlkfHxhKCkudG9TdHJpbmcoKSksZSl9YXN5bmMgcmVxdWVzdFN0cmljdCh0LGUpe3JldHVybiBuZXcgUHJvbWlzZShhc3luYyhpLHMpPT57aWYoIXRoaXMuY29ubmVjdGlvbi5jb25uZWN0ZWQpdHJ5e2F3YWl0IHRoaXMub3BlbigpfWNhdGNoKG4pe3Mobil9dGhpcy5ldmVudHMub24oYCR7dC5pZH1gLG49PntkKG4pP3Mobi5lcnJvcik6aShuLnJlc3VsdCl9KTt0cnl7YXdhaXQgdGhpcy5jb25uZWN0aW9uLnNlbmQodCxlKX1jYXRjaChuKXtzKG4pfX0pfXNldENvbm5lY3Rpb24odD10aGlzLmNvbm5lY3Rpb24pe3JldHVybiB0fW9uUGF5bG9hZCh0KXt0aGlzLmV2ZW50cy5lbWl0KFwicGF5bG9hZFwiLHQpLHYodCk/dGhpcy5ldmVudHMuZW1pdChgJHt0LmlkfWAsdCk6dGhpcy5ldmVudHMuZW1pdChcIm1lc3NhZ2VcIix7dHlwZTp0Lm1ldGhvZCxkYXRhOnQucGFyYW1zfSl9b25DbG9zZSh0KXt0JiZ0LmNvZGU9PT0zZTMmJnRoaXMuZXZlbnRzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihgV2ViU29ja2V0IGNvbm5lY3Rpb24gY2xvc2VkIGFibm9ybWFsbHkgd2l0aCBjb2RlOiAke3QuY29kZX0gJHt0LnJlYXNvbj9gKCR7dC5yZWFzb259KWA6XCJcIn1gKSksdGhpcy5ldmVudHMuZW1pdChcImRpc2Nvbm5lY3RcIil9YXN5bmMgb3Blbih0PXRoaXMuY29ubmVjdGlvbil7dGhpcy5jb25uZWN0aW9uPT09dCYmdGhpcy5jb25uZWN0aW9uLmNvbm5lY3RlZHx8KHRoaXMuY29ubmVjdGlvbi5jb25uZWN0ZWQmJnRoaXMuY2xvc2UoKSx0eXBlb2YgdD09XCJzdHJpbmdcIiYmKGF3YWl0IHRoaXMuY29ubmVjdGlvbi5vcGVuKHQpLHQ9dGhpcy5jb25uZWN0aW9uKSx0aGlzLmNvbm5lY3Rpb249dGhpcy5zZXRDb25uZWN0aW9uKHQpLGF3YWl0IHRoaXMuY29ubmVjdGlvbi5vcGVuKCksdGhpcy5yZWdpc3RlckV2ZW50TGlzdGVuZXJzKCksdGhpcy5ldmVudHMuZW1pdChcImNvbm5lY3RcIikpfWFzeW5jIGNsb3NlKCl7YXdhaXQgdGhpcy5jb25uZWN0aW9uLmNsb3NlKCl9cmVnaXN0ZXJFdmVudExpc3RlbmVycygpe3RoaXMuaGFzUmVnaXN0ZXJlZEV2ZW50TGlzdGVuZXJzfHwodGhpcy5jb25uZWN0aW9uLm9uKFwicGF5bG9hZFwiLHQ9PnRoaXMub25QYXlsb2FkKHQpKSx0aGlzLmNvbm5lY3Rpb24ub24oXCJjbG9zZVwiLHQ9PnRoaXMub25DbG9zZSh0KSksdGhpcy5jb25uZWN0aW9uLm9uKFwiZXJyb3JcIix0PT50aGlzLmV2ZW50cy5lbWl0KFwiZXJyb3JcIix0KSksdGhpcy5jb25uZWN0aW9uLm9uKFwicmVnaXN0ZXJfZXJyb3JcIix0PT50aGlzLm9uQ2xvc2UoKSksdGhpcy5oYXNSZWdpc3RlcmVkRXZlbnRMaXN0ZW5lcnM9ITApfX1leHBvcnR7byBhcyBKc29uUnBjUHJvdmlkZXIsbyBhcyBkZWZhdWx0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsImMiLCJJSnNvblJwY1Byb3ZpZGVyIiwiciIsImZvcm1hdEpzb25ScGNSZXF1ZXN0IiwiaCIsImdldEJpZ0ludFJwY0lkIiwiYSIsImlzSnNvblJwY0Vycm9yIiwiZCIsImlzSnNvblJwY1Jlc3BvbnNlIiwidiIsIm8iLCJjb25uZWN0IiwidCIsImNvbm5lY3Rpb24iLCJvcGVuIiwiZGlzY29ubmVjdCIsImNsb3NlIiwib24iLCJlIiwiZXZlbnRzIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVxdWVzdCIsInJlcXVlc3RTdHJpY3QiLCJtZXRob2QiLCJwYXJhbXMiLCJpZCIsInRvU3RyaW5nIiwiUHJvbWlzZSIsImkiLCJzIiwiY29ubmVjdGVkIiwibiIsImVycm9yIiwicmVzdWx0Iiwic2VuZCIsInNldENvbm5lY3Rpb24iLCJvblBheWxvYWQiLCJlbWl0IiwidHlwZSIsImRhdGEiLCJvbkNsb3NlIiwiY29kZSIsIkVycm9yIiwicmVhc29uIiwicmVnaXN0ZXJFdmVudExpc3RlbmVycyIsImhhc1JlZ2lzdGVyZWRFdmVudExpc3RlbmVycyIsImNvbnN0cnVjdG9yIiwiSnNvblJwY1Byb3ZpZGVyIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IBaseJsonRpcProvider: function() { return /* binding */ n; },\n/* harmony export */   IEvents: function() { return /* binding */ e; },\n/* harmony export */   IJsonRpcConnection: function() { return /* binding */ o; },\n/* harmony export */   IJsonRpcProvider: function() { return /* binding */ r; }\n/* harmony export */ });\nclass e {\n}\nclass o extends e {\n    constructor(c){\n        super();\n    }\n}\nclass n extends e {\n    constructor(){\n        super();\n    }\n}\nclass r extends n {\n    constructor(c){\n        super();\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzL2Rpc3QvaW5kZXguZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE1BQU1BO0FBQUU7QUFBQyxNQUFNQyxVQUFVRDtJQUFFRSxZQUFZQyxDQUFDLENBQUM7UUFBQyxLQUFLO0lBQUU7QUFBQztBQUFDLE1BQU1DLFVBQVVKO0lBQUVFLGFBQWE7UUFBQyxLQUFLO0lBQUU7QUFBQztBQUFDLE1BQU1HLFVBQVVEO0lBQUVGLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUs7SUFBRTtBQUFDO0FBQThGLENBQ25PLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy10eXBlcy9kaXN0L2luZGV4LmVzLmpzP2IxMjkiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgZXt9Y2xhc3MgbyBleHRlbmRzIGV7Y29uc3RydWN0b3IoYyl7c3VwZXIoKX19Y2xhc3MgbiBleHRlbmRzIGV7Y29uc3RydWN0b3IoKXtzdXBlcigpfX1jbGFzcyByIGV4dGVuZHMgbntjb25zdHJ1Y3RvcihjKXtzdXBlcigpfX1leHBvcnR7biBhcyBJQmFzZUpzb25ScGNQcm92aWRlcixlIGFzIElFdmVudHMsbyBhcyBJSnNvblJwY0Nvbm5lY3Rpb24sciBhcyBJSnNvblJwY1Byb3ZpZGVyfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbImUiLCJvIiwiY29uc3RydWN0b3IiLCJjIiwibiIsInIiLCJJQmFzZUpzb25ScGNQcm92aWRlciIsIklFdmVudHMiLCJJSnNvblJwY0Nvbm5lY3Rpb24iLCJJSnNvblJwY1Byb3ZpZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ERROR: function() { return /* binding */ DEFAULT_ERROR; },\n/* harmony export */   INTERNAL_ERROR: function() { return /* binding */ INTERNAL_ERROR; },\n/* harmony export */   INVALID_PARAMS: function() { return /* binding */ INVALID_PARAMS; },\n/* harmony export */   INVALID_REQUEST: function() { return /* binding */ INVALID_REQUEST; },\n/* harmony export */   METHOD_NOT_FOUND: function() { return /* binding */ METHOD_NOT_FOUND; },\n/* harmony export */   PARSE_ERROR: function() { return /* binding */ PARSE_ERROR; },\n/* harmony export */   RESERVED_ERROR_CODES: function() { return /* binding */ RESERVED_ERROR_CODES; },\n/* harmony export */   SERVER_ERROR: function() { return /* binding */ SERVER_ERROR; },\n/* harmony export */   SERVER_ERROR_CODE_RANGE: function() { return /* binding */ SERVER_ERROR_CODE_RANGE; },\n/* harmony export */   STANDARD_ERROR_MAP: function() { return /* binding */ STANDARD_ERROR_MAP; }\n/* harmony export */ });\nconst PARSE_ERROR = \"PARSE_ERROR\";\nconst INVALID_REQUEST = \"INVALID_REQUEST\";\nconst METHOD_NOT_FOUND = \"METHOD_NOT_FOUND\";\nconst INVALID_PARAMS = \"INVALID_PARAMS\";\nconst INTERNAL_ERROR = \"INTERNAL_ERROR\";\nconst SERVER_ERROR = \"SERVER_ERROR\";\nconst RESERVED_ERROR_CODES = [\n    -32700,\n    -32600,\n    -32601,\n    -32602,\n    -32603\n];\nconst SERVER_ERROR_CODE_RANGE = [\n    -32000,\n    -32099\n];\nconst STANDARD_ERROR_MAP = {\n    [PARSE_ERROR]: {\n        code: -32700,\n        message: \"Parse error\"\n    },\n    [INVALID_REQUEST]: {\n        code: -32600,\n        message: \"Invalid Request\"\n    },\n    [METHOD_NOT_FOUND]: {\n        code: -32601,\n        message: \"Method not found\"\n    },\n    [INVALID_PARAMS]: {\n        code: -32602,\n        message: \"Invalid params\"\n    },\n    [INTERNAL_ERROR]: {\n        code: -32603,\n        message: \"Internal error\"\n    },\n    [SERVER_ERROR]: {\n        code: -32000,\n        message: \"Server error\"\n    }\n};\nconst DEFAULT_ERROR = SERVER_ERROR; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQU8sTUFBTUEsY0FBYyxjQUFjO0FBQ2xDLE1BQU1DLGtCQUFrQixrQkFBa0I7QUFDMUMsTUFBTUMsbUJBQW1CLG1CQUFtQjtBQUM1QyxNQUFNQyxpQkFBaUIsaUJBQWlCO0FBQ3hDLE1BQU1DLGlCQUFpQixpQkFBaUI7QUFDeEMsTUFBTUMsZUFBZSxlQUFlO0FBQ3BDLE1BQU1DLHVCQUF1QjtJQUFDLENBQUM7SUFBTyxDQUFDO0lBQU8sQ0FBQztJQUFPLENBQUM7SUFBTyxDQUFDO0NBQU0sQ0FBQztBQUN0RSxNQUFNQywwQkFBMEI7SUFBQyxDQUFDO0lBQU8sQ0FBQztDQUFNLENBQUM7QUFDakQsTUFBTUMscUJBQXFCO0lBQzlCLENBQUNSLFlBQVksRUFBRTtRQUFFUyxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFjO0lBQ3RELENBQUNULGdCQUFnQixFQUFFO1FBQUVRLE1BQU0sQ0FBQztRQUFPQyxTQUFTO0lBQWtCO0lBQzlELENBQUNSLGlCQUFpQixFQUFFO1FBQUVPLE1BQU0sQ0FBQztRQUFPQyxTQUFTO0lBQW1CO0lBQ2hFLENBQUNQLGVBQWUsRUFBRTtRQUFFTSxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFpQjtJQUM1RCxDQUFDTixlQUFlLEVBQUU7UUFBRUssTUFBTSxDQUFDO1FBQU9DLFNBQVM7SUFBaUI7SUFDNUQsQ0FBQ0wsYUFBYSxFQUFFO1FBQUVJLE1BQU0sQ0FBQztRQUFPQyxTQUFTO0lBQWU7QUFDNUQsRUFBRTtBQUNLLE1BQU1DLGdCQUFnQk4sYUFBYSxDQUMxQyxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vY29uc3RhbnRzLmpzPzljMDUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFBBUlNFX0VSUk9SID0gXCJQQVJTRV9FUlJPUlwiO1xuZXhwb3J0IGNvbnN0IElOVkFMSURfUkVRVUVTVCA9IFwiSU5WQUxJRF9SRVFVRVNUXCI7XG5leHBvcnQgY29uc3QgTUVUSE9EX05PVF9GT1VORCA9IFwiTUVUSE9EX05PVF9GT1VORFwiO1xuZXhwb3J0IGNvbnN0IElOVkFMSURfUEFSQU1TID0gXCJJTlZBTElEX1BBUkFNU1wiO1xuZXhwb3J0IGNvbnN0IElOVEVSTkFMX0VSUk9SID0gXCJJTlRFUk5BTF9FUlJPUlwiO1xuZXhwb3J0IGNvbnN0IFNFUlZFUl9FUlJPUiA9IFwiU0VSVkVSX0VSUk9SXCI7XG5leHBvcnQgY29uc3QgUkVTRVJWRURfRVJST1JfQ09ERVMgPSBbLTMyNzAwLCAtMzI2MDAsIC0zMjYwMSwgLTMyNjAyLCAtMzI2MDNdO1xuZXhwb3J0IGNvbnN0IFNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFID0gWy0zMjAwMCwgLTMyMDk5XTtcbmV4cG9ydCBjb25zdCBTVEFOREFSRF9FUlJPUl9NQVAgPSB7XG4gICAgW1BBUlNFX0VSUk9SXTogeyBjb2RlOiAtMzI3MDAsIG1lc3NhZ2U6IFwiUGFyc2UgZXJyb3JcIiB9LFxuICAgIFtJTlZBTElEX1JFUVVFU1RdOiB7IGNvZGU6IC0zMjYwMCwgbWVzc2FnZTogXCJJbnZhbGlkIFJlcXVlc3RcIiB9LFxuICAgIFtNRVRIT0RfTk9UX0ZPVU5EXTogeyBjb2RlOiAtMzI2MDEsIG1lc3NhZ2U6IFwiTWV0aG9kIG5vdCBmb3VuZFwiIH0sXG4gICAgW0lOVkFMSURfUEFSQU1TXTogeyBjb2RlOiAtMzI2MDIsIG1lc3NhZ2U6IFwiSW52YWxpZCBwYXJhbXNcIiB9LFxuICAgIFtJTlRFUk5BTF9FUlJPUl06IHsgY29kZTogLTMyNjAzLCBtZXNzYWdlOiBcIkludGVybmFsIGVycm9yXCIgfSxcbiAgICBbU0VSVkVSX0VSUk9SXTogeyBjb2RlOiAtMzIwMDAsIG1lc3NhZ2U6IFwiU2VydmVyIGVycm9yXCIgfSxcbn07XG5leHBvcnQgY29uc3QgREVGQVVMVF9FUlJPUiA9IFNFUlZFUl9FUlJPUjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOlsiUEFSU0VfRVJST1IiLCJJTlZBTElEX1JFUVVFU1QiLCJNRVRIT0RfTk9UX0ZPVU5EIiwiSU5WQUxJRF9QQVJBTVMiLCJJTlRFUk5BTF9FUlJPUiIsIlNFUlZFUl9FUlJPUiIsIlJFU0VSVkVEX0VSUk9SX0NPREVTIiwiU0VSVkVSX0VSUk9SX0NPREVfUkFOR0UiLCJTVEFOREFSRF9FUlJPUl9NQVAiLCJjb2RlIiwibWVzc2FnZSIsIkRFRkFVTFRfRVJST1IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNodeJs: function() { return /* binding */ isNodeJs; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/environment */ \"(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"isNodeJs\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\nconst isNodeJs = _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__.isNode;\n //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2Vudi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBb0Q7QUFDN0MsTUFBTUMsV0FBV0QsOERBQU1BLENBQUM7QUFDWSxDQUMzQywrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vZW52LmpzPzY4NGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50XCI7XG5leHBvcnQgY29uc3QgaXNOb2RlSnMgPSBpc05vZGU7XG5leHBvcnQgKiBmcm9tIFwiQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnRcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXAiXSwibmFtZXMiOlsiaXNOb2RlIiwiaXNOb2RlSnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getError: function() { return /* binding */ getError; },\n/* harmony export */   getErrorByCode: function() { return /* binding */ getErrorByCode; },\n/* harmony export */   isReservedErrorCode: function() { return /* binding */ isReservedErrorCode; },\n/* harmony export */   isServerErrorCode: function() { return /* binding */ isServerErrorCode; },\n/* harmony export */   isValidErrorCode: function() { return /* binding */ isValidErrorCode; },\n/* harmony export */   parseConnectionError: function() { return /* binding */ parseConnectionError; },\n/* harmony export */   validateJsonRpcError: function() { return /* binding */ validateJsonRpcError; }\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n\nfunction isServerErrorCode(code) {\n    return code <= _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE[0] && code >= _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE[1];\n}\nfunction isReservedErrorCode(code) {\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.RESERVED_ERROR_CODES.includes(code);\n}\nfunction isValidErrorCode(code) {\n    return typeof code === \"number\";\n}\nfunction getError(type) {\n    if (!Object.keys(_constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP).includes(type)) {\n        return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR];\n    }\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[type];\n}\nfunction getErrorByCode(code) {\n    const match = Object.values(_constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP).find((e)=>e.code === code);\n    if (!match) {\n        return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR];\n    }\n    return match;\n}\nfunction validateJsonRpcError(response) {\n    if (typeof response.error.code === \"undefined\") {\n        return {\n            valid: false,\n            error: \"Missing code for JSON-RPC error\"\n        };\n    }\n    if (typeof response.error.message === \"undefined\") {\n        return {\n            valid: false,\n            error: \"Missing message for JSON-RPC error\"\n        };\n    }\n    if (!isValidErrorCode(response.error.code)) {\n        return {\n            valid: false,\n            error: \"Invalid error code type for JSON-RPC: \".concat(response.error.code)\n        };\n    }\n    if (isReservedErrorCode(response.error.code)) {\n        const error = getErrorByCode(response.error.code);\n        if (error.message !== _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR].message && response.error.message === error.message) {\n            return {\n                valid: false,\n                error: \"Invalid error code message for JSON-RPC: \".concat(response.error.code)\n            };\n        }\n    }\n    return {\n        valid: true\n    };\n}\nfunction parseConnectionError(e, url, type) {\n    return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\") ? new Error(\"Unavailable \".concat(type, \" RPC url at \").concat(url)) : e;\n} //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2Vycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQWdIO0FBQ3pHLFNBQVNJLGtCQUFrQkMsSUFBSTtJQUNsQyxPQUFPQSxRQUFRTCwrREFBdUIsQ0FBQyxFQUFFLElBQUlLLFFBQVFMLCtEQUF1QixDQUFDLEVBQUU7QUFDbkY7QUFDTyxTQUFTTSxvQkFBb0JELElBQUk7SUFDcEMsT0FBT0osNERBQW9CQSxDQUFDTSxRQUFRLENBQUNGO0FBQ3pDO0FBQ08sU0FBU0csaUJBQWlCSCxJQUFJO0lBQ2pDLE9BQU8sT0FBT0EsU0FBUztBQUMzQjtBQUNPLFNBQVNJLFNBQVNDLElBQUk7SUFDekIsSUFBSSxDQUFDQyxPQUFPQyxJQUFJLENBQUNWLDBEQUFrQkEsRUFBRUssUUFBUSxDQUFDRyxPQUFPO1FBQ2pELE9BQU9SLDBEQUFrQixDQUFDQyxxREFBYUEsQ0FBQztJQUM1QztJQUNBLE9BQU9ELDBEQUFrQixDQUFDUSxLQUFLO0FBQ25DO0FBQ08sU0FBU0csZUFBZVIsSUFBSTtJQUMvQixNQUFNUyxRQUFRSCxPQUFPSSxNQUFNLENBQUNiLDBEQUFrQkEsRUFBRWMsSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFWixJQUFJLEtBQUtBO0lBQ3JFLElBQUksQ0FBQ1MsT0FBTztRQUNSLE9BQU9aLDBEQUFrQixDQUFDQyxxREFBYUEsQ0FBQztJQUM1QztJQUNBLE9BQU9XO0FBQ1g7QUFDTyxTQUFTSSxxQkFBcUJDLFFBQVE7SUFDekMsSUFBSSxPQUFPQSxTQUFTQyxLQUFLLENBQUNmLElBQUksS0FBSyxhQUFhO1FBQzVDLE9BQU87WUFBRWdCLE9BQU87WUFBT0QsT0FBTztRQUFrQztJQUNwRTtJQUNBLElBQUksT0FBT0QsU0FBU0MsS0FBSyxDQUFDRSxPQUFPLEtBQUssYUFBYTtRQUMvQyxPQUFPO1lBQUVELE9BQU87WUFBT0QsT0FBTztRQUFxQztJQUN2RTtJQUNBLElBQUksQ0FBQ1osaUJBQWlCVyxTQUFTQyxLQUFLLENBQUNmLElBQUksR0FBRztRQUN4QyxPQUFPO1lBQ0hnQixPQUFPO1lBQ1BELE9BQU8seUNBQTZELE9BQXBCRCxTQUFTQyxLQUFLLENBQUNmLElBQUk7UUFDdkU7SUFDSjtJQUNBLElBQUlDLG9CQUFvQmEsU0FBU0MsS0FBSyxDQUFDZixJQUFJLEdBQUc7UUFDMUMsTUFBTWUsUUFBUVAsZUFBZU0sU0FBU0MsS0FBSyxDQUFDZixJQUFJO1FBQ2hELElBQUllLE1BQU1FLE9BQU8sS0FBS3BCLDBEQUFrQixDQUFDQyxxREFBYUEsQ0FBQyxDQUFDbUIsT0FBTyxJQUMzREgsU0FBU0MsS0FBSyxDQUFDRSxPQUFPLEtBQUtGLE1BQU1FLE9BQU8sRUFBRTtZQUMxQyxPQUFPO2dCQUNIRCxPQUFPO2dCQUNQRCxPQUFPLDRDQUFnRSxPQUFwQkQsU0FBU0MsS0FBSyxDQUFDZixJQUFJO1lBQzFFO1FBQ0o7SUFDSjtJQUNBLE9BQU87UUFBRWdCLE9BQU87SUFBSztBQUN6QjtBQUNPLFNBQVNFLHFCQUFxQk4sQ0FBQyxFQUFFTyxHQUFHLEVBQUVkLElBQUk7SUFDN0MsT0FBT08sRUFBRUssT0FBTyxDQUFDZixRQUFRLENBQUMsNEJBQTRCVSxFQUFFSyxPQUFPLENBQUNmLFFBQVEsQ0FBQywwQkFDbkUsSUFBSWtCLE1BQU0sZUFBa0NELE9BQW5CZCxNQUFLLGdCQUFrQixPQUFKYyxRQUM1Q1A7QUFDVixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9lcnJvci5qcz81OTU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFLCBSRVNFUlZFRF9FUlJPUl9DT0RFUywgU1RBTkRBUkRfRVJST1JfTUFQLCBERUZBVUxUX0VSUk9SLCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2VydmVyRXJyb3JDb2RlKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA8PSBTRVJWRVJfRVJST1JfQ09ERV9SQU5HRVswXSAmJiBjb2RlID49IFNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFWzFdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzZXJ2ZWRFcnJvckNvZGUoY29kZSkge1xuICAgIHJldHVybiBSRVNFUlZFRF9FUlJPUl9DT0RFUy5pbmNsdWRlcyhjb2RlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRXJyb3JDb2RlKGNvZGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIGNvZGUgPT09IFwibnVtYmVyXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3IodHlwZSkge1xuICAgIGlmICghT2JqZWN0LmtleXMoU1RBTkRBUkRfRVJST1JfTUFQKS5pbmNsdWRlcyh0eXBlKSkge1xuICAgICAgICByZXR1cm4gU1RBTkRBUkRfRVJST1JfTUFQW0RFRkFVTFRfRVJST1JdO1xuICAgIH1cbiAgICByZXR1cm4gU1RBTkRBUkRfRVJST1JfTUFQW3R5cGVdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVycm9yQnlDb2RlKGNvZGUpIHtcbiAgICBjb25zdCBtYXRjaCA9IE9iamVjdC52YWx1ZXMoU1RBTkRBUkRfRVJST1JfTUFQKS5maW5kKGUgPT4gZS5jb2RlID09PSBjb2RlKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiBTVEFOREFSRF9FUlJPUl9NQVBbREVGQVVMVF9FUlJPUl07XG4gICAgfVxuICAgIHJldHVybiBtYXRjaDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUpzb25ScGNFcnJvcihyZXNwb25zZSkge1xuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuZXJyb3IuY29kZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UsIGVycm9yOiBcIk1pc3NpbmcgY29kZSBmb3IgSlNPTi1SUEMgZXJyb3JcIiB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlLmVycm9yLm1lc3NhZ2UgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlLCBlcnJvcjogXCJNaXNzaW5nIG1lc3NhZ2UgZm9yIEpTT04tUlBDIGVycm9yXCIgfTtcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkRXJyb3JDb2RlKHJlc3BvbnNlLmVycm9yLmNvZGUpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgICAgICBlcnJvcjogYEludmFsaWQgZXJyb3IgY29kZSB0eXBlIGZvciBKU09OLVJQQzogJHtyZXNwb25zZS5lcnJvci5jb2RlfWAsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc1Jlc2VydmVkRXJyb3JDb2RlKHJlc3BvbnNlLmVycm9yLmNvZGUpKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gZ2V0RXJyb3JCeUNvZGUocmVzcG9uc2UuZXJyb3IuY29kZSk7XG4gICAgICAgIGlmIChlcnJvci5tZXNzYWdlICE9PSBTVEFOREFSRF9FUlJPUl9NQVBbREVGQVVMVF9FUlJPUl0ubWVzc2FnZSAmJlxuICAgICAgICAgICAgcmVzcG9uc2UuZXJyb3IubWVzc2FnZSA9PT0gZXJyb3IubWVzc2FnZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGBJbnZhbGlkIGVycm9yIGNvZGUgbWVzc2FnZSBmb3IgSlNPTi1SUEM6ICR7cmVzcG9uc2UuZXJyb3IuY29kZX1gLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29ubmVjdGlvbkVycm9yKGUsIHVybCwgdHlwZSkge1xuICAgIHJldHVybiBlLm1lc3NhZ2UuaW5jbHVkZXMoXCJnZXRhZGRyaW5mbyBFTk9URk9VTkRcIikgfHwgZS5tZXNzYWdlLmluY2x1ZGVzKFwiY29ubmVjdCBFQ09OTlJFRlVTRURcIilcbiAgICAgICAgPyBuZXcgRXJyb3IoYFVuYXZhaWxhYmxlICR7dHlwZX0gUlBDIHVybCBhdCAke3VybH1gKVxuICAgICAgICA6IGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiXSwibmFtZXMiOlsiU0VSVkVSX0VSUk9SX0NPREVfUkFOR0UiLCJSRVNFUlZFRF9FUlJPUl9DT0RFUyIsIlNUQU5EQVJEX0VSUk9SX01BUCIsIkRFRkFVTFRfRVJST1IiLCJpc1NlcnZlckVycm9yQ29kZSIsImNvZGUiLCJpc1Jlc2VydmVkRXJyb3JDb2RlIiwiaW5jbHVkZXMiLCJpc1ZhbGlkRXJyb3JDb2RlIiwiZ2V0RXJyb3IiLCJ0eXBlIiwiT2JqZWN0Iiwia2V5cyIsImdldEVycm9yQnlDb2RlIiwibWF0Y2giLCJ2YWx1ZXMiLCJmaW5kIiwiZSIsInZhbGlkYXRlSnNvblJwY0Vycm9yIiwicmVzcG9uc2UiLCJlcnJvciIsInZhbGlkIiwibWVzc2FnZSIsInBhcnNlQ29ubmVjdGlvbkVycm9yIiwidXJsIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatErrorMessage: function() { return /* binding */ formatErrorMessage; },\n/* harmony export */   formatJsonRpcError: function() { return /* binding */ formatJsonRpcError; },\n/* harmony export */   formatJsonRpcRequest: function() { return /* binding */ formatJsonRpcRequest; },\n/* harmony export */   formatJsonRpcResult: function() { return /* binding */ formatJsonRpcResult; },\n/* harmony export */   getBigIntRpcId: function() { return /* binding */ getBigIntRpcId; },\n/* harmony export */   payloadId: function() { return /* binding */ payloadId; }\n/* harmony export */ });\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n\n\nfunction payloadId() {\n    let entropy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 3;\n    const date = Date.now() * Math.pow(10, entropy);\n    const extra = Math.floor(Math.random() * Math.pow(10, entropy));\n    return date + extra;\n}\nfunction getBigIntRpcId() {\n    let entropy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 6;\n    return BigInt(payloadId(entropy));\n}\nfunction formatJsonRpcRequest(method, params, id) {\n    return {\n        id: id || payloadId(),\n        jsonrpc: \"2.0\",\n        method,\n        params\n    };\n}\nfunction formatJsonRpcResult(id, result) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        result\n    };\n}\nfunction formatJsonRpcError(id, error, data) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        error: formatErrorMessage(error, data)\n    };\n}\nfunction formatErrorMessage(error, data) {\n    if (typeof error === \"undefined\") {\n        return (0,_error__WEBPACK_IMPORTED_MODULE_0__.getError)(_constants__WEBPACK_IMPORTED_MODULE_1__.INTERNAL_ERROR);\n    }\n    if (typeof error === \"string\") {\n        error = Object.assign(Object.assign({}, (0,_error__WEBPACK_IMPORTED_MODULE_0__.getError)(_constants__WEBPACK_IMPORTED_MODULE_1__.SERVER_ERROR)), {\n            message: error\n        });\n    }\n    if (typeof data !== \"undefined\") {\n        error.data = data;\n    }\n    if ((0,_error__WEBPACK_IMPORTED_MODULE_0__.isReservedErrorCode)(error.code)) {\n        error = (0,_error__WEBPACK_IMPORTED_MODULE_0__.getErrorByCode)(error.code);\n    }\n    return error;\n} //# sourceMappingURL=format.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2Zvcm1hdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF3RTtBQUNiO0FBQ3BELFNBQVNLO1FBQVVDLFVBQUFBLGlFQUFVO0lBQ2hDLE1BQU1DLE9BQU9DLEtBQUtDLEdBQUcsS0FBS0MsS0FBS0MsR0FBRyxDQUFDLElBQUlMO0lBQ3ZDLE1BQU1NLFFBQVFGLEtBQUtHLEtBQUssQ0FBQ0gsS0FBS0ksTUFBTSxLQUFLSixLQUFLQyxHQUFHLENBQUMsSUFBSUw7SUFDdEQsT0FBT0MsT0FBT0s7QUFDbEI7QUFDTyxTQUFTRztRQUFlVCxVQUFBQSxpRUFBVTtJQUNyQyxPQUFPVSxPQUFPWCxVQUFVQztBQUM1QjtBQUNPLFNBQVNXLHFCQUFxQkMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLEVBQUU7SUFDbkQsT0FBTztRQUNIQSxJQUFJQSxNQUFNZjtRQUNWZ0IsU0FBUztRQUNUSDtRQUNBQztJQUNKO0FBQ0o7QUFDTyxTQUFTRyxvQkFBb0JGLEVBQUUsRUFBRUcsTUFBTTtJQUMxQyxPQUFPO1FBQ0hIO1FBQ0FDLFNBQVM7UUFDVEU7SUFDSjtBQUNKO0FBQ08sU0FBU0MsbUJBQW1CSixFQUFFLEVBQUVLLEtBQUssRUFBRUMsSUFBSTtJQUM5QyxPQUFPO1FBQ0hOO1FBQ0FDLFNBQVM7UUFDVEksT0FBT0UsbUJBQW1CRixPQUFPQztJQUNyQztBQUNKO0FBQ08sU0FBU0MsbUJBQW1CRixLQUFLLEVBQUVDLElBQUk7SUFDMUMsSUFBSSxPQUFPRCxVQUFVLGFBQWE7UUFDOUIsT0FBT3pCLGdEQUFRQSxDQUFDRyxzREFBY0E7SUFDbEM7SUFDQSxJQUFJLE9BQU9zQixVQUFVLFVBQVU7UUFDM0JBLFFBQVFHLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBRzdCLGdEQUFRQSxDQUFDSSxvREFBWUEsSUFBSTtZQUFFMEIsU0FBU0w7UUFBTTtJQUN0RjtJQUNBLElBQUksT0FBT0MsU0FBUyxhQUFhO1FBQzdCRCxNQUFNQyxJQUFJLEdBQUdBO0lBQ2pCO0lBQ0EsSUFBSXhCLDJEQUFtQkEsQ0FBQ3VCLE1BQU1NLElBQUksR0FBRztRQUNqQ04sUUFBUXhCLHNEQUFjQSxDQUFDd0IsTUFBTU0sSUFBSTtJQUNyQztJQUNBLE9BQU9OO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vZm9ybWF0LmpzPzI1MDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RXJyb3IsIGdldEVycm9yQnlDb2RlLCBpc1Jlc2VydmVkRXJyb3JDb2RlIH0gZnJvbSBcIi4vZXJyb3JcIjtcbmltcG9ydCB7IElOVEVSTkFMX0VSUk9SLCBTRVJWRVJfRVJST1IgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXlsb2FkSWQoZW50cm9weSA9IDMpIHtcbiAgICBjb25zdCBkYXRlID0gRGF0ZS5ub3coKSAqIE1hdGgucG93KDEwLCBlbnRyb3B5KTtcbiAgICBjb25zdCBleHRyYSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDEwLCBlbnRyb3B5KSk7XG4gICAgcmV0dXJuIGRhdGUgKyBleHRyYTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRCaWdJbnRScGNJZChlbnRyb3B5ID0gNikge1xuICAgIHJldHVybiBCaWdJbnQocGF5bG9hZElkKGVudHJvcHkpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRKc29uUnBjUmVxdWVzdChtZXRob2QsIHBhcmFtcywgaWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogaWQgfHwgcGF5bG9hZElkKCksXG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcGFyYW1zLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0SnNvblJwY1Jlc3VsdChpZCwgcmVzdWx0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIHJlc3VsdCxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEpzb25ScGNFcnJvcihpZCwgZXJyb3IsIGRhdGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZCxcbiAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgZXJyb3I6IGZvcm1hdEVycm9yTWVzc2FnZShlcnJvciwgZGF0YSksXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRFcnJvck1lc3NhZ2UoZXJyb3IsIGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBnZXRFcnJvcihJTlRFUk5BTF9FUlJPUik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZXJyb3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZXJyb3IgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGdldEVycm9yKFNFUlZFUl9FUlJPUikpLCB7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgZXJyb3IuZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIGlmIChpc1Jlc2VydmVkRXJyb3JDb2RlKGVycm9yLmNvZGUpKSB7XG4gICAgICAgIGVycm9yID0gZ2V0RXJyb3JCeUNvZGUoZXJyb3IuY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdC5qcy5tYXAiXSwibmFtZXMiOlsiZ2V0RXJyb3IiLCJnZXRFcnJvckJ5Q29kZSIsImlzUmVzZXJ2ZWRFcnJvckNvZGUiLCJJTlRFUk5BTF9FUlJPUiIsIlNFUlZFUl9FUlJPUiIsInBheWxvYWRJZCIsImVudHJvcHkiLCJkYXRlIiwiRGF0ZSIsIm5vdyIsIk1hdGgiLCJwb3ciLCJleHRyYSIsImZsb29yIiwicmFuZG9tIiwiZ2V0QmlnSW50UnBjSWQiLCJCaWdJbnQiLCJmb3JtYXRKc29uUnBjUmVxdWVzdCIsIm1ldGhvZCIsInBhcmFtcyIsImlkIiwianNvbnJwYyIsImZvcm1hdEpzb25ScGNSZXN1bHQiLCJyZXN1bHQiLCJmb3JtYXRKc29uUnBjRXJyb3IiLCJlcnJvciIsImRhdGEiLCJmb3JtYXRFcnJvck1lc3NhZ2UiLCJPYmplY3QiLCJhc3NpZ24iLCJtZXNzYWdlIiwiY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ERROR: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR; },\n/* harmony export */   IBaseJsonRpcProvider: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IBaseJsonRpcProvider; },\n/* harmony export */   IEvents: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IEvents; },\n/* harmony export */   IJsonRpcConnection: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IJsonRpcConnection; },\n/* harmony export */   IJsonRpcProvider: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IJsonRpcProvider; },\n/* harmony export */   INTERNAL_ERROR: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INTERNAL_ERROR; },\n/* harmony export */   INVALID_PARAMS: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_PARAMS; },\n/* harmony export */   INVALID_REQUEST: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_REQUEST; },\n/* harmony export */   METHOD_NOT_FOUND: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.METHOD_NOT_FOUND; },\n/* harmony export */   PARSE_ERROR: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.PARSE_ERROR; },\n/* harmony export */   RESERVED_ERROR_CODES: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.RESERVED_ERROR_CODES; },\n/* harmony export */   SERVER_ERROR: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR; },\n/* harmony export */   SERVER_ERROR_CODE_RANGE: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE; },\n/* harmony export */   STANDARD_ERROR_MAP: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP; },\n/* harmony export */   formatErrorMessage: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatErrorMessage; },\n/* harmony export */   formatJsonRpcError: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError; },\n/* harmony export */   formatJsonRpcRequest: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest; },\n/* harmony export */   formatJsonRpcResult: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult; },\n/* harmony export */   getBigIntRpcId: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId; },\n/* harmony export */   getError: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.getError; },\n/* harmony export */   getErrorByCode: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.getErrorByCode; },\n/* harmony export */   isHttpUrl: function() { return /* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isHttpUrl; },\n/* harmony export */   isJsonRpcError: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcError; },\n/* harmony export */   isJsonRpcPayload: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcPayload; },\n/* harmony export */   isJsonRpcRequest: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcRequest; },\n/* harmony export */   isJsonRpcResponse: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcResponse; },\n/* harmony export */   isJsonRpcResult: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcResult; },\n/* harmony export */   isJsonRpcValidationInvalid: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcValidationInvalid; },\n/* harmony export */   isLocalhostUrl: function() { return /* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isLocalhostUrl; },\n/* harmony export */   isReservedErrorCode: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isReservedErrorCode; },\n/* harmony export */   isServerErrorCode: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isServerErrorCode; },\n/* harmony export */   isValidDefaultRoute: function() { return /* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidDefaultRoute; },\n/* harmony export */   isValidErrorCode: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isValidErrorCode; },\n/* harmony export */   isValidLeadingWildcardRoute: function() { return /* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidLeadingWildcardRoute; },\n/* harmony export */   isValidRoute: function() { return /* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidRoute; },\n/* harmony export */   isValidTrailingWildcardRoute: function() { return /* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidTrailingWildcardRoute; },\n/* harmony export */   isValidWildcardRoute: function() { return /* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidWildcardRoute; },\n/* harmony export */   isWsUrl: function() { return /* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isWsUrl; },\n/* harmony export */   parseConnectionError: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.parseConnectionError; },\n/* harmony export */   payloadId: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.payloadId; },\n/* harmony export */   validateJsonRpcError: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.validateJsonRpcError; }\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\");\n/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./env */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _env__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"DEFAULT_ERROR\",\"INTERNAL_ERROR\",\"INVALID_PARAMS\",\"INVALID_REQUEST\",\"METHOD_NOT_FOUND\",\"PARSE_ERROR\",\"RESERVED_ERROR_CODES\",\"SERVER_ERROR\",\"SERVER_ERROR_CODE_RANGE\",\"STANDARD_ERROR_MAP\",\"getError\",\"getErrorByCode\",\"isReservedErrorCode\",\"isServerErrorCode\",\"isValidErrorCode\",\"parseConnectionError\",\"validateJsonRpcError\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _env__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _format__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./format */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js\");\n/* harmony import */ var _routing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./routing */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js\");\n/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./url */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js\");\n/* harmony import */ var _validators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validators */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEI7QUFDSjtBQUNGO0FBQ0c7QUFDQztBQUNGO0FBQ0Y7QUFDTyxDQUM3QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vaW5kZXguanM/NjgwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Vycm9yXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9lbnZcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Zvcm1hdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcm91dGluZ1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3VybFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdmFsaWRhdG9yc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidDefaultRoute: function() { return /* binding */ isValidDefaultRoute; },\n/* harmony export */   isValidLeadingWildcardRoute: function() { return /* binding */ isValidLeadingWildcardRoute; },\n/* harmony export */   isValidRoute: function() { return /* binding */ isValidRoute; },\n/* harmony export */   isValidTrailingWildcardRoute: function() { return /* binding */ isValidTrailingWildcardRoute; },\n/* harmony export */   isValidWildcardRoute: function() { return /* binding */ isValidWildcardRoute; }\n/* harmony export */ });\nfunction isValidRoute(route) {\n    if (route.includes(\"*\")) {\n        return isValidWildcardRoute(route);\n    }\n    if (/\\W/g.test(route)) {\n        return false;\n    }\n    return true;\n}\nfunction isValidDefaultRoute(route) {\n    return route === \"*\";\n}\nfunction isValidWildcardRoute(route) {\n    if (isValidDefaultRoute(route)) {\n        return true;\n    }\n    if (!route.includes(\"*\")) {\n        return false;\n    }\n    if (route.split(\"*\").length !== 2) {\n        return false;\n    }\n    if (route.split(\"*\").filter((x)=>x.trim() === \"\").length !== 1) {\n        return false;\n    }\n    return true;\n}\nfunction isValidLeadingWildcardRoute(route) {\n    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split(\"*\")[0].trim();\n}\nfunction isValidTrailingWildcardRoute(route) {\n    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split(\"*\")[1].trim();\n} //# sourceMappingURL=routing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3JvdXRpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTyxTQUFTQSxhQUFhQyxLQUFLO0lBQzlCLElBQUlBLE1BQU1DLFFBQVEsQ0FBQyxNQUFNO1FBQ3JCLE9BQU9DLHFCQUFxQkY7SUFDaEM7SUFDQSxJQUFJLE1BQU1HLElBQUksQ0FBQ0gsUUFBUTtRQUNuQixPQUFPO0lBQ1g7SUFDQSxPQUFPO0FBQ1g7QUFDTyxTQUFTSSxvQkFBb0JKLEtBQUs7SUFDckMsT0FBT0EsVUFBVTtBQUNyQjtBQUNPLFNBQVNFLHFCQUFxQkYsS0FBSztJQUN0QyxJQUFJSSxvQkFBb0JKLFFBQVE7UUFDNUIsT0FBTztJQUNYO0lBQ0EsSUFBSSxDQUFDQSxNQUFNQyxRQUFRLENBQUMsTUFBTTtRQUN0QixPQUFPO0lBQ1g7SUFDQSxJQUFJRCxNQUFNSyxLQUFLLENBQUMsS0FBS0MsTUFBTSxLQUFLLEdBQUc7UUFDL0IsT0FBTztJQUNYO0lBQ0EsSUFBSU4sTUFBTUssS0FBSyxDQUFDLEtBQUtFLE1BQU0sQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsSUFBSSxPQUFPLElBQUlILE1BQU0sS0FBSyxHQUFHO1FBQzVELE9BQU87SUFDWDtJQUNBLE9BQU87QUFDWDtBQUNPLFNBQVNJLDRCQUE0QlYsS0FBSztJQUM3QyxPQUFPLENBQUNJLG9CQUFvQkosVUFBVUUscUJBQXFCRixVQUFVLENBQUNBLE1BQU1LLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDSSxJQUFJO0FBQ2xHO0FBQ08sU0FBU0UsNkJBQTZCWCxLQUFLO0lBQzlDLE9BQU8sQ0FBQ0ksb0JBQW9CSixVQUFVRSxxQkFBcUJGLFVBQVUsQ0FBQ0EsTUFBTUssS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUNJLElBQUk7QUFDbEcsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vcm91dGluZy5qcz85NjBkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkUm91dGUocm91dGUpIHtcbiAgICBpZiAocm91dGUuaW5jbHVkZXMoXCIqXCIpKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkV2lsZGNhcmRSb3V0ZShyb3V0ZSk7XG4gICAgfVxuICAgIGlmICgvXFxXL2cudGVzdChyb3V0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGVmYXVsdFJvdXRlKHJvdXRlKSB7XG4gICAgcmV0dXJuIHJvdXRlID09PSBcIipcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkV2lsZGNhcmRSb3V0ZShyb3V0ZSkge1xuICAgIGlmIChpc1ZhbGlkRGVmYXVsdFJvdXRlKHJvdXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFyb3V0ZS5pbmNsdWRlcyhcIipcIikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocm91dGUuc3BsaXQoXCIqXCIpLmxlbmd0aCAhPT0gMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyb3V0ZS5zcGxpdChcIipcIikuZmlsdGVyKHggPT4geC50cmltKCkgPT09IFwiXCIpLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRMZWFkaW5nV2lsZGNhcmRSb3V0ZShyb3V0ZSkge1xuICAgIHJldHVybiAhaXNWYWxpZERlZmF1bHRSb3V0ZShyb3V0ZSkgJiYgaXNWYWxpZFdpbGRjYXJkUm91dGUocm91dGUpICYmICFyb3V0ZS5zcGxpdChcIipcIilbMF0udHJpbSgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRUcmFpbGluZ1dpbGRjYXJkUm91dGUocm91dGUpIHtcbiAgICByZXR1cm4gIWlzVmFsaWREZWZhdWx0Um91dGUocm91dGUpICYmIGlzVmFsaWRXaWxkY2FyZFJvdXRlKHJvdXRlKSAmJiAhcm91dGUuc3BsaXQoXCIqXCIpWzFdLnRyaW0oKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRpbmcuanMubWFwIl0sIm5hbWVzIjpbImlzVmFsaWRSb3V0ZSIsInJvdXRlIiwiaW5jbHVkZXMiLCJpc1ZhbGlkV2lsZGNhcmRSb3V0ZSIsInRlc3QiLCJpc1ZhbGlkRGVmYXVsdFJvdXRlIiwic3BsaXQiLCJsZW5ndGgiLCJmaWx0ZXIiLCJ4IiwidHJpbSIsImlzVmFsaWRMZWFkaW5nV2lsZGNhcmRSb3V0ZSIsImlzVmFsaWRUcmFpbGluZ1dpbGRjYXJkUm91dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IBaseJsonRpcProvider: function() { return /* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IBaseJsonRpcProvider; },\n/* harmony export */   IEvents: function() { return /* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IEvents; },\n/* harmony export */   IJsonRpcConnection: function() { return /* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IJsonRpcConnection; },\n/* harmony export */   IJsonRpcProvider: function() { return /* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IJsonRpcProvider; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/jsonrpc-types */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js\");\n //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZDLENBQzdDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS90eXBlcy5qcz8yNjI0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHttpUrl: function() { return /* binding */ isHttpUrl; },\n/* harmony export */   isLocalhostUrl: function() { return /* binding */ isLocalhostUrl; },\n/* harmony export */   isWsUrl: function() { return /* binding */ isWsUrl; }\n/* harmony export */ });\nconst HTTP_REGEX = \"^https?:\";\nconst WS_REGEX = \"^wss?:\";\nfunction getUrlProtocol(url) {\n    const matches = url.match(new RegExp(/^\\w+:/, \"gi\"));\n    if (!matches || !matches.length) return;\n    return matches[0];\n}\nfunction matchRegexProtocol(url, regex) {\n    const protocol = getUrlProtocol(url);\n    if (typeof protocol === \"undefined\") return false;\n    return new RegExp(regex).test(protocol);\n}\nfunction isHttpUrl(url) {\n    return matchRegexProtocol(url, HTTP_REGEX);\n}\nfunction isWsUrl(url) {\n    return matchRegexProtocol(url, WS_REGEX);\n}\nfunction isLocalhostUrl(url) {\n    return new RegExp(\"wss?://localhost(:d{2,5})?\").test(url);\n} //# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3VybC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxhQUFhO0FBQ25CLE1BQU1DLFdBQVc7QUFDakIsU0FBU0MsZUFBZUMsR0FBRztJQUN2QixNQUFNQyxVQUFVRCxJQUFJRSxLQUFLLENBQUMsSUFBSUMsT0FBTyxTQUFTO0lBQzlDLElBQUksQ0FBQ0YsV0FBVyxDQUFDQSxRQUFRRyxNQUFNLEVBQzNCO0lBQ0osT0FBT0gsT0FBTyxDQUFDLEVBQUU7QUFDckI7QUFDQSxTQUFTSSxtQkFBbUJMLEdBQUcsRUFBRU0sS0FBSztJQUNsQyxNQUFNQyxXQUFXUixlQUFlQztJQUNoQyxJQUFJLE9BQU9PLGFBQWEsYUFDcEIsT0FBTztJQUNYLE9BQU8sSUFBSUosT0FBT0csT0FBT0UsSUFBSSxDQUFDRDtBQUNsQztBQUNPLFNBQVNFLFVBQVVULEdBQUc7SUFDekIsT0FBT0ssbUJBQW1CTCxLQUFLSDtBQUNuQztBQUNPLFNBQVNhLFFBQVFWLEdBQUc7SUFDdkIsT0FBT0ssbUJBQW1CTCxLQUFLRjtBQUNuQztBQUNPLFNBQVNhLGVBQWVYLEdBQUc7SUFDOUIsT0FBTyxJQUFJRyxPQUFPLDhCQUE4QkssSUFBSSxDQUFDUjtBQUN6RCxFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS91cmwuanM/ODMyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBIVFRQX1JFR0VYID0gXCJeaHR0cHM/OlwiO1xuY29uc3QgV1NfUkVHRVggPSBcIl53c3M/OlwiO1xuZnVuY3Rpb24gZ2V0VXJsUHJvdG9jb2wodXJsKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHVybC5tYXRjaChuZXcgUmVnRXhwKC9eXFx3KzovLCBcImdpXCIpKTtcbiAgICBpZiAoIW1hdGNoZXMgfHwgIW1hdGNoZXMubGVuZ3RoKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIG1hdGNoZXNbMF07XG59XG5mdW5jdGlvbiBtYXRjaFJlZ2V4UHJvdG9jb2wodXJsLCByZWdleCkge1xuICAgIGNvbnN0IHByb3RvY29sID0gZ2V0VXJsUHJvdG9jb2wodXJsKTtcbiAgICBpZiAodHlwZW9mIHByb3RvY29sID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgpLnRlc3QocHJvdG9jb2wpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSHR0cFVybCh1cmwpIHtcbiAgICByZXR1cm4gbWF0Y2hSZWdleFByb3RvY29sKHVybCwgSFRUUF9SRUdFWCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNXc1VybCh1cmwpIHtcbiAgICByZXR1cm4gbWF0Y2hSZWdleFByb3RvY29sKHVybCwgV1NfUkVHRVgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYWxob3N0VXJsKHVybCkge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwid3NzPzovL2xvY2FsaG9zdCg6ZHsyLDV9KT9cIikudGVzdCh1cmwpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJsLmpzLm1hcCJdLCJuYW1lcyI6WyJIVFRQX1JFR0VYIiwiV1NfUkVHRVgiLCJnZXRVcmxQcm90b2NvbCIsInVybCIsIm1hdGNoZXMiLCJtYXRjaCIsIlJlZ0V4cCIsImxlbmd0aCIsIm1hdGNoUmVnZXhQcm90b2NvbCIsInJlZ2V4IiwicHJvdG9jb2wiLCJ0ZXN0IiwiaXNIdHRwVXJsIiwiaXNXc1VybCIsImlzTG9jYWxob3N0VXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isJsonRpcError: function() { return /* binding */ isJsonRpcError; },\n/* harmony export */   isJsonRpcPayload: function() { return /* binding */ isJsonRpcPayload; },\n/* harmony export */   isJsonRpcRequest: function() { return /* binding */ isJsonRpcRequest; },\n/* harmony export */   isJsonRpcResponse: function() { return /* binding */ isJsonRpcResponse; },\n/* harmony export */   isJsonRpcResult: function() { return /* binding */ isJsonRpcResult; },\n/* harmony export */   isJsonRpcValidationInvalid: function() { return /* binding */ isJsonRpcValidationInvalid; }\n/* harmony export */ });\nfunction isJsonRpcPayload(payload) {\n    return typeof payload === \"object\" && \"id\" in payload && \"jsonrpc\" in payload && payload.jsonrpc === \"2.0\";\n}\nfunction isJsonRpcRequest(payload) {\n    return isJsonRpcPayload(payload) && \"method\" in payload;\n}\nfunction isJsonRpcResponse(payload) {\n    return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));\n}\nfunction isJsonRpcResult(payload) {\n    return \"result\" in payload;\n}\nfunction isJsonRpcError(payload) {\n    return \"error\" in payload;\n}\nfunction isJsonRpcValidationInvalid(validation) {\n    return \"error\" in validation && validation.valid === false;\n} //# sourceMappingURL=validators.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3ZhbGlkYXRvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sU0FBU0EsaUJBQWlCQyxPQUFPO0lBQ3BDLE9BQVEsT0FBT0EsWUFBWSxZQUN2QixRQUFRQSxXQUNSLGFBQWFBLFdBQ2JBLFFBQVFDLE9BQU8sS0FBSztBQUM1QjtBQUNPLFNBQVNDLGlCQUFpQkYsT0FBTztJQUNwQyxPQUFPRCxpQkFBaUJDLFlBQVksWUFBWUE7QUFDcEQ7QUFDTyxTQUFTRyxrQkFBa0JILE9BQU87SUFDckMsT0FBT0QsaUJBQWlCQyxZQUFhSSxDQUFBQSxnQkFBZ0JKLFlBQVlLLGVBQWVMLFFBQU87QUFDM0Y7QUFDTyxTQUFTSSxnQkFBZ0JKLE9BQU87SUFDbkMsT0FBTyxZQUFZQTtBQUN2QjtBQUNPLFNBQVNLLGVBQWVMLE9BQU87SUFDbEMsT0FBTyxXQUFXQTtBQUN0QjtBQUNPLFNBQVNNLDJCQUEyQkMsVUFBVTtJQUNqRCxPQUFPLFdBQVdBLGNBQWNBLFdBQVdDLEtBQUssS0FBSztBQUN6RCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS92YWxpZGF0b3JzLmpzPzQ3NGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1BheWxvYWQocGF5bG9hZCkge1xuICAgIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgXCJpZFwiIGluIHBheWxvYWQgJiZcbiAgICAgICAgXCJqc29ucnBjXCIgaW4gcGF5bG9hZCAmJlxuICAgICAgICBwYXlsb2FkLmpzb25ycGMgPT09IFwiMi4wXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1JlcXVlc3QocGF5bG9hZCkge1xuICAgIHJldHVybiBpc0pzb25ScGNQYXlsb2FkKHBheWxvYWQpICYmIFwibWV0aG9kXCIgaW4gcGF5bG9hZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNSZXNwb25zZShwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGlzSnNvblJwY1BheWxvYWQocGF5bG9hZCkgJiYgKGlzSnNvblJwY1Jlc3VsdChwYXlsb2FkKSB8fCBpc0pzb25ScGNFcnJvcihwYXlsb2FkKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjUmVzdWx0KHBheWxvYWQpIHtcbiAgICByZXR1cm4gXCJyZXN1bHRcIiBpbiBwYXlsb2FkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY0Vycm9yKHBheWxvYWQpIHtcbiAgICByZXR1cm4gXCJlcnJvclwiIGluIHBheWxvYWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjVmFsaWRhdGlvbkludmFsaWQodmFsaWRhdGlvbikge1xuICAgIHJldHVybiBcImVycm9yXCIgaW4gdmFsaWRhdGlvbiAmJiB2YWxpZGF0aW9uLnZhbGlkID09PSBmYWxzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRvcnMuanMubWFwIl0sIm5hbWVzIjpbImlzSnNvblJwY1BheWxvYWQiLCJwYXlsb2FkIiwianNvbnJwYyIsImlzSnNvblJwY1JlcXVlc3QiLCJpc0pzb25ScGNSZXNwb25zZSIsImlzSnNvblJwY1Jlc3VsdCIsImlzSnNvblJwY0Vycm9yIiwiaXNKc29uUnBjVmFsaWRhdGlvbkludmFsaWQiLCJ2YWxpZGF0aW9uIiwidmFsaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WsConnection: function() { return /* binding */ f; },\n/* harmony export */   \"default\": function() { return /* binding */ f; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\nconst v = ()=>typeof WebSocket < \"u\" ? WebSocket : typeof __webpack_require__.g < \"u\" && typeof __webpack_require__.g.WebSocket < \"u\" ? __webpack_require__.g.WebSocket :  true && typeof window.WebSocket < \"u\" ? window.WebSocket : typeof self < \"u\" && typeof self.WebSocket < \"u\" ? self.WebSocket : __webpack_require__(/*! ws */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js\"), w = ()=>typeof WebSocket < \"u\" || typeof __webpack_require__.g < \"u\" && typeof __webpack_require__.g.WebSocket < \"u\" ||  true && typeof window.WebSocket < \"u\" || typeof self < \"u\" && typeof self.WebSocket < \"u\", d = (r)=>r.split(\"?\")[0], h = 10, b = v();\nclass f {\n    get connected() {\n        return typeof this.socket < \"u\";\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async open() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        await this.register(e);\n    }\n    async close() {\n        return new Promise((e, t)=>{\n            if (typeof this.socket > \"u\") {\n                t(new Error(\"Connection already closed\"));\n                return;\n            }\n            this.socket.onclose = (n)=>{\n                this.onClose(n), e();\n            }, this.socket.close();\n        });\n    }\n    async send(e) {\n        typeof this.socket > \"u\" && (this.socket = await this.register());\n        try {\n            this.socket.send((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)(e));\n        } catch (t) {\n            this.onError(e.id, t);\n        }\n    }\n    register() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isWsUrl)(e)) throw new Error(\"Provided URL is not compatible with WebSocket connection: \".concat(e));\n        if (this.registering) {\n            const t = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= t || this.events.listenerCount(\"open\") >= t) && this.events.setMaxListeners(t + 1), new Promise((n, s)=>{\n                this.events.once(\"register_error\", (o)=>{\n                    this.resetMaxListeners(), s(o);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.socket > \"u\") return s(new Error(\"WebSocket connection is missing or invalid\"));\n                    n(this.socket);\n                });\n            });\n        }\n        return this.url = e, this.registering = !0, new Promise((t, n)=>{\n            const s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isReactNative)() ? void 0 : {\n                rejectUnauthorized: !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isLocalhostUrl)(e)\n            }, o = new b(e, [], s);\n            w() ? o.onerror = (i)=>{\n                const a = i;\n                n(this.emitError(a.error));\n            } : o.on(\"error\", (i)=>{\n                n(this.emitError(i));\n            }), o.onopen = ()=>{\n                this.onOpen(o), t(o);\n            };\n        });\n    }\n    onOpen(e) {\n        e.onmessage = (t)=>this.onPayload(t), e.onclose = (t)=>this.onClose(t), this.socket = e, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose(e) {\n        this.socket = void 0, this.registering = !1, this.events.emit(\"close\", e);\n    }\n    onPayload(e) {\n        if (typeof e.data > \"u\") return;\n        const t = typeof e.data == \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonParse)(e.data) : e.data;\n        this.events.emit(\"payload\", t);\n    }\n    onError(e, t) {\n        const n = this.parseError(t), s = n.message || n.toString(), o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcError)(e, s);\n        this.events.emit(\"payload\", o);\n    }\n    parseError(e) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.url;\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.parseConnectionError)(e, d(t), \"WS\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > h && this.events.setMaxListeners(h);\n    }\n    emitError(e) {\n        const t = this.parseError(new Error((e === null || e === void 0 ? void 0 : e.message) || \"WebSocket connection failed for host: \".concat(d(this.url))));\n        return this.events.emit(\"register_error\", t), t;\n    }\n    constructor(e){\n        if (this.url = e, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.registering = !1, !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isWsUrl)(e)) throw new Error(\"Provided URL is not compatible with WebSocket connection: \".concat(e));\n        this.url = e;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXdzLWNvbm5lY3Rpb24vZGlzdC9pbmRleC5lcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBc0M7QUFBZ0Y7QUFBZ0o7QUFBQSxNQUFNZ0IsSUFBRSxJQUFJLE9BQU9DLFlBQVUsTUFBSUEsWUFBVSxPQUFPQyxxQkFBTUEsR0FBQyxPQUFLLE9BQU9BLHFCQUFNQSxDQUFDRCxTQUFTLEdBQUMsTUFBSUMscUJBQU1BLENBQUNELFNBQVMsR0FBQyxLQUFpQixJQUFFLE9BQU9FLE9BQU9GLFNBQVMsR0FBQyxNQUFJRSxPQUFPRixTQUFTLEdBQUMsT0FBT0csT0FBSyxPQUFLLE9BQU9BLEtBQUtILFNBQVMsR0FBQyxNQUFJRyxLQUFLSCxTQUFTLEdBQUNJLG1CQUFPQSxDQUFDLDhHQUFJLEdBQUVDLElBQUUsSUFBSSxPQUFPTCxZQUFVLE9BQUssT0FBT0MscUJBQU1BLEdBQUMsT0FBSyxPQUFPQSxxQkFBTUEsQ0FBQ0QsU0FBUyxHQUFDLE9BQUssS0FBaUIsSUFBRSxPQUFPRSxPQUFPRixTQUFTLEdBQUMsT0FBSyxPQUFPRyxPQUFLLE9BQUssT0FBT0EsS0FBS0gsU0FBUyxHQUFDLEtBQUlNLElBQUVDLENBQUFBLElBQUdBLEVBQUVDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDQyxJQUFFLElBQUdDLElBQUVYO0FBQUksTUFBTVk7SUFBd0ssSUFBSUMsWUFBVztRQUFDLE9BQU8sT0FBTyxJQUFJLENBQUNDLE1BQU0sR0FBQztJQUFHO0lBQUMsSUFBSUMsYUFBWTtRQUFDLE9BQU8sSUFBSSxDQUFDQyxXQUFXO0lBQUE7SUFBQ0MsR0FBR0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0gsRUFBRSxDQUFDQyxHQUFFQztJQUFFO0lBQUNFLEtBQUtILENBQUMsRUFBQ0MsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDQyxN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QUFDLEVBQVk7WUFBWEMsSUFBQUEsaUVBQUUsSUFBSSxDQUFDTSxHQUFHO1FBQUUsT0FBTzFCLGtGQUFDQSxDQUFDbUIsR0FBRVgsRUFBRVksSUFBRztJQUFLO0lBQUNzQixvQkFBbUI7UUFBQyxJQUFJLENBQUNyQixNQUFNLENBQUNnQixlQUFlLEtBQUcxQixLQUFHLElBQUksQ0FBQ1UsTUFBTSxDQUFDa0IsZUFBZSxDQUFDNUI7SUFBRTtJQUFDb0MsVUFBVTVCLENBQUMsRUFBQztRQUFDLE1BQU1DLElBQUUsSUFBSSxDQUFDbUMsVUFBVSxDQUFDLElBQUl6QixNQUFNWCxDQUFBQSxjQUFBQSx3QkFBQUEsRUFBR3FDLE9BQU8sS0FBRSx5Q0FBcUQsT0FBWmhELEVBQUUsSUFBSSxDQUFDa0IsR0FBRztRQUFNLE9BQU8sSUFBSSxDQUFDTCxNQUFNLENBQUNnQyxJQUFJLENBQUMsa0JBQWlCakMsSUFBR0E7SUFBQztJQUFqdkVzQyxZQUFZdkMsQ0FBQyxDQUFDO1FBQUMsSUFBRyxJQUFJLENBQUNPLEdBQUcsR0FBQ1AsR0FBRSxJQUFJLENBQUNFLE1BQU0sR0FBQyxJQUFJbkMsZ0RBQUNBLEVBQUMsSUFBSSxDQUFDK0IsV0FBVyxHQUFDLENBQUMsR0FBRSxDQUFDekIscUVBQUNBLENBQUMyQixJQUFHLE1BQU0sSUFBSVcsTUFBTSw2REFBK0QsT0FBRlg7UUFBSyxJQUFJLENBQUNPLEdBQUcsR0FBQ1A7SUFBQztBQUE2a0U7QUFBd0MsQ0FDbCtGLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL2Rpc3QvaW5kZXguZXMuanM/YjYzYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7RXZlbnRFbWl0dGVyIGFzIGx9ZnJvbVwiZXZlbnRzXCI7aW1wb3J0e3NhZmVKc29uU3RyaW5naWZ5IGFzIHUsc2FmZUpzb25QYXJzZSBhcyBwfWZyb21cIkB3YWxsZXRjb25uZWN0L3NhZmUtanNvblwiO2ltcG9ydHtpc1dzVXJsIGFzIGMsaXNSZWFjdE5hdGl2ZSBhcyBnLGlzTG9jYWxob3N0VXJsIGFzIHksZm9ybWF0SnNvblJwY0Vycm9yIGFzIGsscGFyc2VDb25uZWN0aW9uRXJyb3IgYXMgbX1mcm9tXCJAd2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzXCI7Y29uc3Qgdj0oKT0+dHlwZW9mIFdlYlNvY2tldDxcInVcIj9XZWJTb2NrZXQ6dHlwZW9mIGdsb2JhbDxcInVcIiYmdHlwZW9mIGdsb2JhbC5XZWJTb2NrZXQ8XCJ1XCI/Z2xvYmFsLldlYlNvY2tldDp0eXBlb2Ygd2luZG93PFwidVwiJiZ0eXBlb2Ygd2luZG93LldlYlNvY2tldDxcInVcIj93aW5kb3cuV2ViU29ja2V0OnR5cGVvZiBzZWxmPFwidVwiJiZ0eXBlb2Ygc2VsZi5XZWJTb2NrZXQ8XCJ1XCI/c2VsZi5XZWJTb2NrZXQ6cmVxdWlyZShcIndzXCIpLHc9KCk9PnR5cGVvZiBXZWJTb2NrZXQ8XCJ1XCJ8fHR5cGVvZiBnbG9iYWw8XCJ1XCImJnR5cGVvZiBnbG9iYWwuV2ViU29ja2V0PFwidVwifHx0eXBlb2Ygd2luZG93PFwidVwiJiZ0eXBlb2Ygd2luZG93LldlYlNvY2tldDxcInVcInx8dHlwZW9mIHNlbGY8XCJ1XCImJnR5cGVvZiBzZWxmLldlYlNvY2tldDxcInVcIixkPXI9PnIuc3BsaXQoXCI/XCIpWzBdLGg9MTAsYj12KCk7Y2xhc3MgZntjb25zdHJ1Y3RvcihlKXtpZih0aGlzLnVybD1lLHRoaXMuZXZlbnRzPW5ldyBsLHRoaXMucmVnaXN0ZXJpbmc9ITEsIWMoZSkpdGhyb3cgbmV3IEVycm9yKGBQcm92aWRlZCBVUkwgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBXZWJTb2NrZXQgY29ubmVjdGlvbjogJHtlfWApO3RoaXMudXJsPWV9Z2V0IGNvbm5lY3RlZCgpe3JldHVybiB0eXBlb2YgdGhpcy5zb2NrZXQ8XCJ1XCJ9Z2V0IGNvbm5lY3RpbmcoKXtyZXR1cm4gdGhpcy5yZWdpc3RlcmluZ31vbihlLHQpe3RoaXMuZXZlbnRzLm9uKGUsdCl9b25jZShlLHQpe3RoaXMuZXZlbnRzLm9uY2UoZSx0KX1vZmYoZSx0KXt0aGlzLmV2ZW50cy5vZmYoZSx0KX1yZW1vdmVMaXN0ZW5lcihlLHQpe3RoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGUsdCl9YXN5bmMgb3BlbihlPXRoaXMudXJsKXthd2FpdCB0aGlzLnJlZ2lzdGVyKGUpfWFzeW5jIGNsb3NlKCl7cmV0dXJuIG5ldyBQcm9taXNlKChlLHQpPT57aWYodHlwZW9mIHRoaXMuc29ja2V0PlwidVwiKXt0KG5ldyBFcnJvcihcIkNvbm5lY3Rpb24gYWxyZWFkeSBjbG9zZWRcIikpO3JldHVybn10aGlzLnNvY2tldC5vbmNsb3NlPW49Pnt0aGlzLm9uQ2xvc2UobiksZSgpfSx0aGlzLnNvY2tldC5jbG9zZSgpfSl9YXN5bmMgc2VuZChlKXt0eXBlb2YgdGhpcy5zb2NrZXQ+XCJ1XCImJih0aGlzLnNvY2tldD1hd2FpdCB0aGlzLnJlZ2lzdGVyKCkpO3RyeXt0aGlzLnNvY2tldC5zZW5kKHUoZSkpfWNhdGNoKHQpe3RoaXMub25FcnJvcihlLmlkLHQpfX1yZWdpc3RlcihlPXRoaXMudXJsKXtpZighYyhlKSl0aHJvdyBuZXcgRXJyb3IoYFByb3ZpZGVkIFVSTCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIFdlYlNvY2tldCBjb25uZWN0aW9uOiAke2V9YCk7aWYodGhpcy5yZWdpc3RlcmluZyl7Y29uc3QgdD10aGlzLmV2ZW50cy5nZXRNYXhMaXN0ZW5lcnMoKTtyZXR1cm4odGhpcy5ldmVudHMubGlzdGVuZXJDb3VudChcInJlZ2lzdGVyX2Vycm9yXCIpPj10fHx0aGlzLmV2ZW50cy5saXN0ZW5lckNvdW50KFwib3BlblwiKT49dCkmJnRoaXMuZXZlbnRzLnNldE1heExpc3RlbmVycyh0KzEpLG5ldyBQcm9taXNlKChuLHMpPT57dGhpcy5ldmVudHMub25jZShcInJlZ2lzdGVyX2Vycm9yXCIsbz0+e3RoaXMucmVzZXRNYXhMaXN0ZW5lcnMoKSxzKG8pfSksdGhpcy5ldmVudHMub25jZShcIm9wZW5cIiwoKT0+e2lmKHRoaXMucmVzZXRNYXhMaXN0ZW5lcnMoKSx0eXBlb2YgdGhpcy5zb2NrZXQ+XCJ1XCIpcmV0dXJuIHMobmV3IEVycm9yKFwiV2ViU29ja2V0IGNvbm5lY3Rpb24gaXMgbWlzc2luZyBvciBpbnZhbGlkXCIpKTtuKHRoaXMuc29ja2V0KX0pfSl9cmV0dXJuIHRoaXMudXJsPWUsdGhpcy5yZWdpc3RlcmluZz0hMCxuZXcgUHJvbWlzZSgodCxuKT0+e2NvbnN0IHM9ZygpP3ZvaWQgMDp7cmVqZWN0VW5hdXRob3JpemVkOiF5KGUpfSxvPW5ldyBiKGUsW10scyk7dygpP28ub25lcnJvcj1pPT57Y29uc3QgYT1pO24odGhpcy5lbWl0RXJyb3IoYS5lcnJvcikpfTpvLm9uKFwiZXJyb3JcIixpPT57bih0aGlzLmVtaXRFcnJvcihpKSl9KSxvLm9ub3Blbj0oKT0+e3RoaXMub25PcGVuKG8pLHQobyl9fSl9b25PcGVuKGUpe2Uub25tZXNzYWdlPXQ9PnRoaXMub25QYXlsb2FkKHQpLGUub25jbG9zZT10PT50aGlzLm9uQ2xvc2UodCksdGhpcy5zb2NrZXQ9ZSx0aGlzLnJlZ2lzdGVyaW5nPSExLHRoaXMuZXZlbnRzLmVtaXQoXCJvcGVuXCIpfW9uQ2xvc2UoZSl7dGhpcy5zb2NrZXQ9dm9pZCAwLHRoaXMucmVnaXN0ZXJpbmc9ITEsdGhpcy5ldmVudHMuZW1pdChcImNsb3NlXCIsZSl9b25QYXlsb2FkKGUpe2lmKHR5cGVvZiBlLmRhdGE+XCJ1XCIpcmV0dXJuO2NvbnN0IHQ9dHlwZW9mIGUuZGF0YT09XCJzdHJpbmdcIj9wKGUuZGF0YSk6ZS5kYXRhO3RoaXMuZXZlbnRzLmVtaXQoXCJwYXlsb2FkXCIsdCl9b25FcnJvcihlLHQpe2NvbnN0IG49dGhpcy5wYXJzZUVycm9yKHQpLHM9bi5tZXNzYWdlfHxuLnRvU3RyaW5nKCksbz1rKGUscyk7dGhpcy5ldmVudHMuZW1pdChcInBheWxvYWRcIixvKX1wYXJzZUVycm9yKGUsdD10aGlzLnVybCl7cmV0dXJuIG0oZSxkKHQpLFwiV1NcIil9cmVzZXRNYXhMaXN0ZW5lcnMoKXt0aGlzLmV2ZW50cy5nZXRNYXhMaXN0ZW5lcnMoKT5oJiZ0aGlzLmV2ZW50cy5zZXRNYXhMaXN0ZW5lcnMoaCl9ZW1pdEVycm9yKGUpe2NvbnN0IHQ9dGhpcy5wYXJzZUVycm9yKG5ldyBFcnJvcihlPy5tZXNzYWdlfHxgV2ViU29ja2V0IGNvbm5lY3Rpb24gZmFpbGVkIGZvciBob3N0OiAke2QodGhpcy51cmwpfWApKTtyZXR1cm4gdGhpcy5ldmVudHMuZW1pdChcInJlZ2lzdGVyX2Vycm9yXCIsdCksdH19ZXhwb3J0e2YgYXMgV3NDb25uZWN0aW9uLGYgYXMgZGVmYXVsdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJsIiwic2FmZUpzb25TdHJpbmdpZnkiLCJ1Iiwic2FmZUpzb25QYXJzZSIsInAiLCJpc1dzVXJsIiwiYyIsImlzUmVhY3ROYXRpdmUiLCJnIiwiaXNMb2NhbGhvc3RVcmwiLCJ5IiwiZm9ybWF0SnNvblJwY0Vycm9yIiwiayIsInBhcnNlQ29ubmVjdGlvbkVycm9yIiwibSIsInYiLCJXZWJTb2NrZXQiLCJnbG9iYWwiLCJ3aW5kb3ciLCJzZWxmIiwicmVxdWlyZSIsInciLCJkIiwiciIsInNwbGl0IiwiaCIsImIiLCJmIiwiY29ubmVjdGVkIiwic29ja2V0IiwiY29ubmVjdGluZyIsInJlZ2lzdGVyaW5nIiwib24iLCJlIiwidCIsImV2ZW50cyIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsIm9wZW4iLCJ1cmwiLCJyZWdpc3RlciIsImNsb3NlIiwiUHJvbWlzZSIsIkVycm9yIiwib25jbG9zZSIsIm4iLCJvbkNsb3NlIiwic2VuZCIsIm9uRXJyb3IiLCJpZCIsImdldE1heExpc3RlbmVycyIsImxpc3RlbmVyQ291bnQiLCJzZXRNYXhMaXN0ZW5lcnMiLCJzIiwibyIsInJlc2V0TWF4TGlzdGVuZXJzIiwicmVqZWN0VW5hdXRob3JpemVkIiwib25lcnJvciIsImkiLCJhIiwiZW1pdEVycm9yIiwiZXJyb3IiLCJvbm9wZW4iLCJvbk9wZW4iLCJvbm1lc3NhZ2UiLCJvblBheWxvYWQiLCJlbWl0IiwiZGF0YSIsInBhcnNlRXJyb3IiLCJtZXNzYWdlIiwidG9TdHJpbmciLCJjb25zdHJ1Y3RvciIsIldzQ29ubmVjdGlvbiIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js ***!
  \**************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = function() {\n    throw new Error(\"ws does not work in the browser. Browser clients must use the native \" + \"WebSocket object\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXdzLWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL3dzL2Jyb3dzZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2YsTUFBTSxJQUFJQyxNQUNSLDBFQUNFO0FBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtd3MtY29ubmVjdGlvbi9ub2RlX21vZHVsZXMvd3MvYnJvd3Nlci5qcz8zYTg5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAnd3MgZG9lcyBub3Qgd29yayBpbiB0aGUgYnJvd3Nlci4gQnJvd3NlciBjbGllbnRzIG11c3QgdXNlIHRoZSBuYXRpdmUgJyArXG4gICAgICAnV2ViU29ja2V0IG9iamVjdCdcbiAgKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/logger/dist/index.es.js":
/*!*************************************************************!*\
  !*** ./node_modules/@walletconnect/logger/dist/index.es.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_LOG_SIZE_IN_BYTES_DEFAULT: function() { return /* binding */ l; },\n/* harmony export */   PINO_CUSTOM_CONTEXT_KEY: function() { return /* binding */ n; },\n/* harmony export */   PINO_LOGGER_DEFAULTS: function() { return /* binding */ c; },\n/* harmony export */   formatChildLoggerContext: function() { return /* binding */ w; },\n/* harmony export */   generateChildLogger: function() { return /* binding */ E; },\n/* harmony export */   generateClientLogger: function() { return /* binding */ C; },\n/* harmony export */   generatePlatformLogger: function() { return /* binding */ A; },\n/* harmony export */   generateServerLogger: function() { return /* binding */ I; },\n/* harmony export */   getBrowserLoggerContext: function() { return /* binding */ v; },\n/* harmony export */   getDefaultLoggerOptions: function() { return /* binding */ k; },\n/* harmony export */   getLoggerContext: function() { return /* binding */ y; },\n/* harmony export */   pino: function() { return /* reexport default from dynamic */ pino__WEBPACK_IMPORTED_MODULE_0___default.a; },\n/* harmony export */   setBrowserLoggerContext: function() { return /* binding */ b; }\n/* harmony export */ });\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pino */ \"(app-pages-browser)/./node_modules/pino/browser.js\");\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pino__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\n\nconst c = {\n    level: \"info\"\n}, n = \"custom_context\", l = 1e3 * 1024;\nclass O {\n    get value() {\n        return this.nodeValue;\n    }\n    get size() {\n        return this.sizeInBytes;\n    }\n    constructor(e){\n        this.nodeValue = e, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;\n    }\n}\nclass d {\n    append(e) {\n        const t = new O(e);\n        if (t.size > this.maxSizeInBytes) throw new Error(\"[LinkedList] Value too big to insert into list: \".concat(e, \" with size \").concat(t.size));\n        for(; this.size + t.size > this.maxSizeInBytes;)this.shift();\n        this.head ? (this.tail && (this.tail.next = t), this.tail = t) : (this.head = t, this.tail = t), this.lengthInNodes++, this.sizeInBytes += t.size;\n    }\n    shift() {\n        if (!this.head) return;\n        const e = this.head;\n        this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e.size;\n    }\n    toArray() {\n        const e = [];\n        let t = this.head;\n        for(; t !== null;)e.push(t.value), t = t.next;\n        return e;\n    }\n    get length() {\n        return this.lengthInNodes;\n    }\n    get size() {\n        return this.sizeInBytes;\n    }\n    toOrderedArray() {\n        return Array.from(this);\n    }\n    [Symbol.iterator]() {\n        let e = this.head;\n        return {\n            next: ()=>{\n                if (!e) return {\n                    done: !0,\n                    value: null\n                };\n                const t = e.value;\n                return e = e.next, {\n                    done: !1,\n                    value: t\n                };\n            }\n        };\n    }\n    constructor(e){\n        this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e, this.sizeInBytes = 0;\n    }\n}\nclass L {\n    forwardToConsole(e, t) {\n        t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.error ? console.error(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.warn ? console.warn(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.debug ? console.debug(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.trace ? console.trace(e) : console.log(e);\n    }\n    appendToLogs(e) {\n        this.logs.append((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)({\n            timestamp: new Date().toISOString(),\n            log: e\n        }));\n        const t = typeof e == \"string\" ? JSON.parse(e).level : e.level;\n        t >= this.levelValue && this.forwardToConsole(e, t);\n    }\n    getLogs() {\n        return this.logs;\n    }\n    clearLogs() {\n        this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);\n    }\n    getLogArray() {\n        return Array.from(this.logs);\n    }\n    logsToBlob(e) {\n        const t = this.getLogArray();\n        return t.push((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)({\n            extraMetadata: e\n        })), new Blob(t, {\n            type: \"application/json\"\n        });\n    }\n    constructor(e, t = l){\n        this.level = e !== null && e !== void 0 ? e : \"error\", this.levelValue = pino__WEBPACK_IMPORTED_MODULE_0__.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t, this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);\n    }\n}\nclass m {\n    write(e) {\n        this.baseChunkLogger.appendToLogs(e);\n    }\n    getLogs() {\n        return this.baseChunkLogger.getLogs();\n    }\n    clearLogs() {\n        this.baseChunkLogger.clearLogs();\n    }\n    getLogArray() {\n        return this.baseChunkLogger.getLogArray();\n    }\n    logsToBlob(e) {\n        return this.baseChunkLogger.logsToBlob(e);\n    }\n    downloadLogsBlobInBrowser(e) {\n        const t = URL.createObjectURL(this.logsToBlob(e)), o = document.createElement(\"a\");\n        o.href = t, o.download = \"walletconnect-logs-\".concat(new Date().toISOString(), \".txt\"), document.body.appendChild(o), o.click(), document.body.removeChild(o), URL.revokeObjectURL(t);\n    }\n    constructor(e, t = l){\n        this.baseChunkLogger = new L(e, t);\n    }\n}\nclass B {\n    write(e) {\n        this.baseChunkLogger.appendToLogs(e);\n    }\n    getLogs() {\n        return this.baseChunkLogger.getLogs();\n    }\n    clearLogs() {\n        this.baseChunkLogger.clearLogs();\n    }\n    getLogArray() {\n        return this.baseChunkLogger.getLogArray();\n    }\n    logsToBlob(e) {\n        return this.baseChunkLogger.logsToBlob(e);\n    }\n    constructor(e, t = l){\n        this.baseChunkLogger = new L(e, t);\n    }\n}\nvar x = Object.defineProperty, S = Object.defineProperties, _ = Object.getOwnPropertyDescriptors, p = Object.getOwnPropertySymbols, T = Object.prototype.hasOwnProperty, z = Object.prototype.propertyIsEnumerable, f = (r, e, t)=>e in r ? x(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, i = (r, e)=>{\n    for(var t in e || (e = {}))T.call(e, t) && f(r, t, e[t]);\n    if (p) for (var t of p(e))z.call(e, t) && f(r, t, e[t]);\n    return r;\n}, g = (r, e)=>S(r, _(e));\nfunction k(r) {\n    return g(i({}, r), {\n        level: (r === null || r === void 0 ? void 0 : r.level) || c.level\n    });\n}\nfunction v(r) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : n;\n    return r[e] || \"\";\n}\nfunction b(r, e) {\n    let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : n;\n    return r[t] = e, r;\n}\nfunction y(r) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : n;\n    let t = \"\";\n    return typeof r.bindings > \"u\" ? t = v(r, e) : t = r.bindings().context || \"\", t;\n}\nfunction w(r, e) {\n    let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : n;\n    const o = y(r, t);\n    return o.trim() ? \"\".concat(o, \"/\").concat(e) : e;\n}\nfunction E(r, e) {\n    let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : n;\n    const o = w(r, e, t), a = r.child({\n        context: o\n    });\n    return b(a, o, t);\n}\n_c = E;\nfunction C(r) {\n    var e, t;\n    const o = new m((e = r.opts) == null ? void 0 : e.level, r.maxSizeInBytes);\n    return {\n        logger: pino__WEBPACK_IMPORTED_MODULE_0___default()(g(i({}, r.opts), {\n            level: \"trace\",\n            browser: g(i({}, (t = r.opts) == null ? void 0 : t.browser), {\n                write: (a)=>o.write(a)\n            })\n        })),\n        chunkLoggerController: o\n    };\n}\n_c1 = C;\nfunction I(r) {\n    var e;\n    const t = new B((e = r.opts) == null ? void 0 : e.level, r.maxSizeInBytes);\n    return {\n        logger: pino__WEBPACK_IMPORTED_MODULE_0___default()(g(i({}, r.opts), {\n            level: \"trace\"\n        }), t),\n        chunkLoggerController: t\n    };\n}\n_c2 = I;\nfunction A(r) {\n    return typeof r.loggerOverride < \"u\" && typeof r.loggerOverride != \"string\" ? {\n        logger: r.loggerOverride,\n        chunkLoggerController: null\n    } :  true ? C(r) : 0;\n}\n_c3 = A;\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"E\");\n$RefreshReg$(_c1, \"C\");\n$RefreshReg$(_c2, \"I\");\n$RefreshReg$(_c3, \"A\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/logger/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/relay-api/dist/index.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-api/dist/index.es.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RELAY_JSONRPC: function() { return /* binding */ C; },\n/* harmony export */   isPublishMethod: function() { return /* binding */ c; },\n/* harmony export */   isPublishParams: function() { return /* binding */ h; },\n/* harmony export */   isPublishRequest: function() { return /* binding */ P; },\n/* harmony export */   isSubscribeMethod: function() { return /* binding */ b; },\n/* harmony export */   isSubscribeParams: function() { return /* binding */ a; },\n/* harmony export */   isSubscribeRequest: function() { return /* binding */ R; },\n/* harmony export */   isSubscriptionMethod: function() { return /* binding */ m; },\n/* harmony export */   isSubscriptionParams: function() { return /* binding */ d; },\n/* harmony export */   isSubscriptionRequest: function() { return /* binding */ S; },\n/* harmony export */   isUnsubscribeMethod: function() { return /* binding */ o; },\n/* harmony export */   isUnsubscribeParams: function() { return /* binding */ p; },\n/* harmony export */   isUnsubscribeRequest: function() { return /* binding */ _; },\n/* harmony export */   parsePublishRequest: function() { return /* binding */ q; },\n/* harmony export */   parseSubscribeRequest: function() { return /* binding */ g; },\n/* harmony export */   parseSubscriptionRequest: function() { return /* binding */ k; },\n/* harmony export */   parseUnsubscribeRequest: function() { return /* binding */ E; }\n/* harmony export */ });\nfunction e(s, r) {\n    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"string\";\n    if (!s[r] || typeof s[r] !== i) throw new Error('Missing or invalid \"'.concat(r, '\" param'));\n}\nfunction l(s, r) {\n    let i = !0;\n    return r.forEach((t)=>{\n        t in s || (i = !1);\n    }), i;\n}\nfunction f(s, r) {\n    return Array.isArray(s) ? s.length === r : Object.keys(s).length === r;\n}\nfunction w(s, r) {\n    return Array.isArray(s) ? s.length >= r : Object.keys(s).length >= r;\n}\nfunction u(s, r, i) {\n    return (i.length ? w(s, r.length) : f(s, r.length)) ? l(s, r) : !1;\n}\nfunction n(s, r) {\n    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"_\";\n    const t = s.split(i);\n    return t[t.length - 1].trim().toLowerCase() === r.trim().toLowerCase();\n}\nfunction R(s) {\n    return b(s.method) && a(s.params);\n}\n_c = R;\nfunction b(s) {\n    return n(s, \"subscribe\");\n}\nfunction a(s) {\n    return u(s, [\n        \"topic\"\n    ], []);\n}\nfunction P(s) {\n    return c(s.method) && h(s.params);\n}\n_c1 = P;\nfunction c(s) {\n    return n(s, \"publish\");\n}\nfunction h(s) {\n    return u(s, [\n        \"message\",\n        \"topic\",\n        \"ttl\"\n    ], [\n        \"prompt\",\n        \"tag\"\n    ]);\n}\nfunction _(s) {\n    return o(s.method) && p(s.params);\n}\nfunction o(s) {\n    return n(s, \"unsubscribe\");\n}\nfunction p(s) {\n    return u(s, [\n        \"id\",\n        \"topic\"\n    ], []);\n}\nfunction S(s) {\n    return m(s.method) && d(s.params);\n}\n_c2 = S;\nfunction m(s) {\n    return n(s, \"subscription\");\n}\nfunction d(s) {\n    return u(s, [\n        \"id\",\n        \"data\"\n    ], []);\n}\nfunction g(s) {\n    if (!b(s.method)) throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n    if (!a(s.params)) throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n    const r = s.params;\n    return e(r, \"topic\"), r;\n}\nfunction q(s) {\n    if (!c(s.method)) throw new Error(\"JSON-RPC Request has invalid publish method\");\n    if (!h(s.params)) throw new Error(\"JSON-RPC Request has invalid publish params\");\n    const r = s.params;\n    return e(r, \"topic\"), e(r, \"message\"), e(r, \"ttl\", \"number\"), r;\n}\nfunction E(s) {\n    if (!o(s.method)) throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n    if (!p(s.params)) throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n    const r = s.params;\n    return e(r, \"id\"), r;\n}\n_c3 = E;\nfunction k(s) {\n    if (!m(s.method)) throw new Error(\"JSON-RPC Request has invalid subscription method\");\n    if (!d(s.params)) throw new Error(\"JSON-RPC Request has invalid subscription params\");\n    const r = s.params;\n    return e(r, \"id\"), e(r, \"data\"), r;\n}\nconst C = {\n    waku: {\n        publish: \"waku_publish\",\n        batchPublish: \"waku_batchPublish\",\n        subscribe: \"waku_subscribe\",\n        batchSubscribe: \"waku_batchSubscribe\",\n        subscription: \"waku_subscription\",\n        unsubscribe: \"waku_unsubscribe\",\n        batchUnsubscribe: \"waku_batchUnsubscribe\",\n        batchFetchMessages: \"waku_batchFetchMessages\"\n    },\n    irn: {\n        publish: \"irn_publish\",\n        batchPublish: \"irn_batchPublish\",\n        subscribe: \"irn_subscribe\",\n        batchSubscribe: \"irn_batchSubscribe\",\n        subscription: \"irn_subscription\",\n        unsubscribe: \"irn_unsubscribe\",\n        batchUnsubscribe: \"irn_batchUnsubscribe\",\n        batchFetchMessages: \"irn_batchFetchMessages\"\n    },\n    iridium: {\n        publish: \"iridium_publish\",\n        batchPublish: \"iridium_batchPublish\",\n        subscribe: \"iridium_subscribe\",\n        batchSubscribe: \"iridium_batchSubscribe\",\n        subscription: \"iridium_subscription\",\n        unsubscribe: \"iridium_unsubscribe\",\n        batchUnsubscribe: \"iridium_batchUnsubscribe\",\n        batchFetchMessages: \"iridium_batchFetchMessages\"\n    }\n};\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"R\");\n$RefreshReg$(_c1, \"P\");\n$RefreshReg$(_c2, \"S\");\n$RefreshReg$(_c3, \"E\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/relay-api/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/index.es.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/index.es.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DATA_ENCODING: function() { return /* binding */ xt; },\n/* harmony export */   DID_DELIMITER: function() { return /* binding */ Vt; },\n/* harmony export */   DID_METHOD: function() { return /* binding */ Jt; },\n/* harmony export */   DID_PREFIX: function() { return /* binding */ Yt; },\n/* harmony export */   JSON_ENCODING: function() { return /* binding */ Gt; },\n/* harmony export */   JWT_DELIMITER: function() { return /* binding */ ut; },\n/* harmony export */   JWT_ENCODING: function() { return /* binding */ Dt; },\n/* harmony export */   JWT_IRIDIUM_ALG: function() { return /* binding */ jt; },\n/* harmony export */   JWT_IRIDIUM_TYP: function() { return /* binding */ Zt; },\n/* harmony export */   KEY_PAIR_SEED_LENGTH: function() { return /* binding */ Ne; },\n/* harmony export */   MULTICODEC_ED25519_BASE: function() { return /* binding */ Kt; },\n/* harmony export */   MULTICODEC_ED25519_ENCODING: function() { return /* binding */ dt; },\n/* harmony export */   MULTICODEC_ED25519_HEADER: function() { return /* binding */ Wt; },\n/* harmony export */   MULTICODEC_ED25519_LENGTH: function() { return /* binding */ Fe; },\n/* harmony export */   decodeData: function() { return /* binding */ Xo; },\n/* harmony export */   decodeIss: function() { return /* binding */ tn; },\n/* harmony export */   decodeJSON: function() { return /* binding */ lt; },\n/* harmony export */   decodeJWT: function() { return /* binding */ sn; },\n/* harmony export */   decodeSig: function() { return /* binding */ nn; },\n/* harmony export */   encodeData: function() { return /* binding */ rn; },\n/* harmony export */   encodeIss: function() { return /* binding */ Qe; },\n/* harmony export */   encodeJSON: function() { return /* binding */ bt; },\n/* harmony export */   encodeJWT: function() { return /* binding */ on; },\n/* harmony export */   encodeSig: function() { return /* binding */ en; },\n/* harmony export */   generateKeyPair: function() { return /* binding */ Po; },\n/* harmony export */   signJWT: function() { return /* binding */ Qo; },\n/* harmony export */   verifyJWT: function() { return /* binding */ ts; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\nfunction En(t) {\n    return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === \"Uint8Array\";\n}\n_c = En;\nfunction fe(t) {\n    for(var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        e[_key - 1] = arguments[_key];\n    }\n    if (!En(t)) throw new Error(\"Uint8Array expected\");\n    if (e.length > 0 && !e.includes(t.length)) throw new Error(\"Uint8Array expected of length \" + e + \", got length=\" + t.length);\n}\nfunction De(t) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n    if (t.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (e && t.finished) throw new Error(\"Hash#digest() has already been called\");\n}\n_c1 = De;\nfunction gn(t, e) {\n    fe(t);\n    const n = e.outputLen;\n    if (t.length < n) throw new Error(\"digestInto() expects output buffer of length at least \" + n);\n}\nconst it = typeof globalThis == \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0; /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \nconst _t = (t)=>new DataView(t.buffer, t.byteOffset, t.byteLength);\nfunction yn(t) {\n    if (typeof t != \"string\") throw new Error(\"utf8ToBytes expected string, got \" + typeof t);\n    return new Uint8Array(new TextEncoder().encode(t));\n}\nfunction de(t) {\n    return typeof t == \"string\" && (t = yn(t)), fe(t), t;\n}\nclass xn {\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction Bn(t) {\n    const e = (r)=>t().update(de(r)).digest(), n = t();\n    return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = ()=>t(), e;\n}\n_c2 = Bn;\nfunction he() {\n    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 32;\n    if (it && typeof it.getRandomValues == \"function\") return it.getRandomValues(new Uint8Array(t));\n    if (it && typeof it.randomBytes == \"function\") return it.randomBytes(t);\n    throw new Error(\"crypto.getRandomValues must be defined\");\n}\nfunction Cn(t, e, n, r) {\n    if (typeof t.setBigUint64 == \"function\") return t.setBigUint64(e, n, r);\n    const o = BigInt(32), s = BigInt(4294967295), a = Number(n >> o & s), u = Number(n & s), i = r ? 4 : 0, D = r ? 0 : 4;\n    t.setUint32(e + i, a, r), t.setUint32(e + D, u, r);\n}\n_c3 = Cn;\nclass An extends xn {\n    update(e) {\n        De(this);\n        const { view: n, buffer: r, blockLen: o } = this;\n        e = de(e);\n        const s = e.length;\n        for(let a = 0; a < s;){\n            const u = Math.min(o - this.pos, s - a);\n            if (u === o) {\n                const i = _t(e);\n                for(; o <= s - a; a += o)this.process(i, a);\n                continue;\n            }\n            r.set(e.subarray(a, a + u), this.pos), this.pos += u, a += u, this.pos === o && (this.process(n, 0), this.pos = 0);\n        }\n        return this.length += e.length, this.roundClean(), this;\n    }\n    digestInto(e) {\n        De(this), gn(e, this), this.finished = !0;\n        const { buffer: n, view: r, blockLen: o, isLE: s } = this;\n        let { pos: a } = this;\n        n[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > o - a && (this.process(r, 0), a = 0);\n        for(let l = a; l < o; l++)n[l] = 0;\n        Cn(r, o - 8, BigInt(this.length * 8), s), this.process(r, 0);\n        const u = _t(e), i = this.outputLen;\n        if (i % 4) throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n        const D = i / 4, c = this.get();\n        if (D > c.length) throw new Error(\"_sha2: outputLen bigger than state\");\n        for(let l = 0; l < D; l++)u.setUint32(4 * l, c[l], s);\n    }\n    digest() {\n        const { buffer: e, outputLen: n } = this;\n        this.digestInto(e);\n        const r = e.slice(0, n);\n        return this.destroy(), r;\n    }\n    _cloneInto(e) {\n        e || (e = new this.constructor), e.set(...this.get());\n        const { blockLen: n, buffer: r, length: o, finished: s, destroyed: a, pos: u } = this;\n        return e.length = o, e.pos = u, e.finished = s, e.destroyed = a, o % n && e.buffer.set(r), e;\n    }\n    constructor(e, n, r, o){\n        super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = _t(this.buffer);\n    }\n}\nconst wt = BigInt(2 ** 32 - 1), St = BigInt(32);\nfunction le(t) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n    return e ? {\n        h: Number(t & wt),\n        l: Number(t >> St & wt)\n    } : {\n        h: Number(t >> St & wt) | 0,\n        l: Number(t & wt) | 0\n    };\n}\nfunction mn(t) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n    let n = new Uint32Array(t.length), r = new Uint32Array(t.length);\n    for(let o = 0; o < t.length; o++){\n        const { h: s, l: a } = le(t[o], e);\n        [n[o], r[o]] = [\n            s,\n            a\n        ];\n    }\n    return [\n        n,\n        r\n    ];\n}\nconst _n = (t, e)=>BigInt(t >>> 0) << St | BigInt(e >>> 0), Sn = (t, e, n)=>t >>> n, vn = (t, e, n)=>t << 32 - n | e >>> n, In = (t, e, n)=>t >>> n | e << 32 - n, Un = (t, e, n)=>t << 32 - n | e >>> n, Tn = (t, e, n)=>t << 64 - n | e >>> n - 32, Fn = (t, e, n)=>t >>> n - 32 | e << 64 - n, Nn = (t, e)=>e, Ln = (t, e)=>t, On = (t, e, n)=>t << n | e >>> 32 - n, Hn = (t, e, n)=>e << n | t >>> 32 - n, zn = (t, e, n)=>e << n - 32 | t >>> 64 - n, Mn = (t, e, n)=>t << n - 32 | e >>> 64 - n;\nfunction qn(t, e, n, r) {\n    const o = (e >>> 0) + (r >>> 0);\n    return {\n        h: t + n + (o / 2 ** 32 | 0) | 0,\n        l: o | 0\n    };\n}\nconst $n = (t, e, n)=>(t >>> 0) + (e >>> 0) + (n >>> 0), kn = (t, e, n, r)=>e + n + r + (t / 2 ** 32 | 0) | 0, Rn = (t, e, n, r)=>(t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0), jn = (t, e, n, r, o)=>e + n + r + o + (t / 2 ** 32 | 0) | 0, Zn = (t, e, n, r, o)=>(t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0) + (o >>> 0), Gn = (t, e, n, r, o, s)=>e + n + r + o + s + (t / 2 ** 32 | 0) | 0, x = {\n    fromBig: le,\n    split: mn,\n    toBig: _n,\n    shrSH: Sn,\n    shrSL: vn,\n    rotrSH: In,\n    rotrSL: Un,\n    rotrBH: Tn,\n    rotrBL: Fn,\n    rotr32H: Nn,\n    rotr32L: Ln,\n    rotlSH: On,\n    rotlSL: Hn,\n    rotlBH: zn,\n    rotlBL: Mn,\n    add: qn,\n    add3L: $n,\n    add3H: kn,\n    add4L: Rn,\n    add4H: jn,\n    add5H: Gn,\n    add5L: Zn\n}, [Vn, Yn] = (()=>x.split([\n        \"0x428a2f98d728ae22\",\n        \"0x7137449123ef65cd\",\n        \"0xb5c0fbcfec4d3b2f\",\n        \"0xe9b5dba58189dbbc\",\n        \"0x3956c25bf348b538\",\n        \"0x59f111f1b605d019\",\n        \"0x923f82a4af194f9b\",\n        \"0xab1c5ed5da6d8118\",\n        \"0xd807aa98a3030242\",\n        \"0x12835b0145706fbe\",\n        \"0x243185be4ee4b28c\",\n        \"0x550c7dc3d5ffb4e2\",\n        \"0x72be5d74f27b896f\",\n        \"0x80deb1fe3b1696b1\",\n        \"0x9bdc06a725c71235\",\n        \"0xc19bf174cf692694\",\n        \"0xe49b69c19ef14ad2\",\n        \"0xefbe4786384f25e3\",\n        \"0x0fc19dc68b8cd5b5\",\n        \"0x240ca1cc77ac9c65\",\n        \"0x2de92c6f592b0275\",\n        \"0x4a7484aa6ea6e483\",\n        \"0x5cb0a9dcbd41fbd4\",\n        \"0x76f988da831153b5\",\n        \"0x983e5152ee66dfab\",\n        \"0xa831c66d2db43210\",\n        \"0xb00327c898fb213f\",\n        \"0xbf597fc7beef0ee4\",\n        \"0xc6e00bf33da88fc2\",\n        \"0xd5a79147930aa725\",\n        \"0x06ca6351e003826f\",\n        \"0x142929670a0e6e70\",\n        \"0x27b70a8546d22ffc\",\n        \"0x2e1b21385c26c926\",\n        \"0x4d2c6dfc5ac42aed\",\n        \"0x53380d139d95b3df\",\n        \"0x650a73548baf63de\",\n        \"0x766a0abb3c77b2a8\",\n        \"0x81c2c92e47edaee6\",\n        \"0x92722c851482353b\",\n        \"0xa2bfe8a14cf10364\",\n        \"0xa81a664bbc423001\",\n        \"0xc24b8b70d0f89791\",\n        \"0xc76c51a30654be30\",\n        \"0xd192e819d6ef5218\",\n        \"0xd69906245565a910\",\n        \"0xf40e35855771202a\",\n        \"0x106aa07032bbd1b8\",\n        \"0x19a4c116b8d2d0c8\",\n        \"0x1e376c085141ab53\",\n        \"0x2748774cdf8eeb99\",\n        \"0x34b0bcb5e19b48a8\",\n        \"0x391c0cb3c5c95a63\",\n        \"0x4ed8aa4ae3418acb\",\n        \"0x5b9cca4f7763e373\",\n        \"0x682e6ff3d6b2b8a3\",\n        \"0x748f82ee5defb2fc\",\n        \"0x78a5636f43172f60\",\n        \"0x84c87814a1f0ab72\",\n        \"0x8cc702081a6439ec\",\n        \"0x90befffa23631e28\",\n        \"0xa4506cebde82bde9\",\n        \"0xbef9a3f7b2c67915\",\n        \"0xc67178f2e372532b\",\n        \"0xca273eceea26619c\",\n        \"0xd186b8c721c0c207\",\n        \"0xeada7dd6cde0eb1e\",\n        \"0xf57d4f7fee6ed178\",\n        \"0x06f067aa72176fba\",\n        \"0x0a637dc5a2c898a6\",\n        \"0x113f9804bef90dae\",\n        \"0x1b710b35131c471b\",\n        \"0x28db77f523047d84\",\n        \"0x32caab7b40c72493\",\n        \"0x3c9ebe0a15c9bebc\",\n        \"0x431d67c49c100d4c\",\n        \"0x4cc5d4becb3e42b6\",\n        \"0x597f299cfc657e2a\",\n        \"0x5fcb6fab3ad6faec\",\n        \"0x6c44198c4a475817\"\n    ].map((t)=>BigInt(t))))(), P = new Uint32Array(80), Q = new Uint32Array(80);\nclass Jn extends An {\n    get() {\n        const { Ah: e, Al: n, Bh: r, Bl: o, Ch: s, Cl: a, Dh: u, Dl: i, Eh: D, El: c, Fh: l, Fl: p, Gh: w, Gl: h, Hh: g, Hl: S } = this;\n        return [\n            e,\n            n,\n            r,\n            o,\n            s,\n            a,\n            u,\n            i,\n            D,\n            c,\n            l,\n            p,\n            w,\n            h,\n            g,\n            S\n        ];\n    }\n    set(e, n, r, o, s, a, u, i, D, c, l, p, w, h, g, S) {\n        this.Ah = e | 0, this.Al = n | 0, this.Bh = r | 0, this.Bl = o | 0, this.Ch = s | 0, this.Cl = a | 0, this.Dh = u | 0, this.Dl = i | 0, this.Eh = D | 0, this.El = c | 0, this.Fh = l | 0, this.Fl = p | 0, this.Gh = w | 0, this.Gl = h | 0, this.Hh = g | 0, this.Hl = S | 0;\n    }\n    process(e, n) {\n        for(let d = 0; d < 16; d++, n += 4)P[d] = e.getUint32(n), Q[d] = e.getUint32(n += 4);\n        for(let d = 16; d < 80; d++){\n            const m = P[d - 15] | 0, F = Q[d - 15] | 0, q = x.rotrSH(m, F, 1) ^ x.rotrSH(m, F, 8) ^ x.shrSH(m, F, 7), z = x.rotrSL(m, F, 1) ^ x.rotrSL(m, F, 8) ^ x.shrSL(m, F, 7), I = P[d - 2] | 0, O = Q[d - 2] | 0, ot = x.rotrSH(I, O, 19) ^ x.rotrBH(I, O, 61) ^ x.shrSH(I, O, 6), tt = x.rotrSL(I, O, 19) ^ x.rotrBL(I, O, 61) ^ x.shrSL(I, O, 6), st = x.add4L(z, tt, Q[d - 7], Q[d - 16]), at = x.add4H(st, q, ot, P[d - 7], P[d - 16]);\n            P[d] = at | 0, Q[d] = st | 0;\n        }\n        let { Ah: r, Al: o, Bh: s, Bl: a, Ch: u, Cl: i, Dh: D, Dl: c, Eh: l, El: p, Fh: w, Fl: h, Gh: g, Gl: S, Hh: v, Hl: L } = this;\n        for(let d = 0; d < 80; d++){\n            const m = x.rotrSH(l, p, 14) ^ x.rotrSH(l, p, 18) ^ x.rotrBH(l, p, 41), F = x.rotrSL(l, p, 14) ^ x.rotrSL(l, p, 18) ^ x.rotrBL(l, p, 41), q = l & w ^ ~l & g, z = p & h ^ ~p & S, I = x.add5L(L, F, z, Yn[d], Q[d]), O = x.add5H(I, v, m, q, Vn[d], P[d]), ot = I | 0, tt = x.rotrSH(r, o, 28) ^ x.rotrBH(r, o, 34) ^ x.rotrBH(r, o, 39), st = x.rotrSL(r, o, 28) ^ x.rotrBL(r, o, 34) ^ x.rotrBL(r, o, 39), at = r & s ^ r & u ^ s & u, Ct = o & a ^ o & i ^ a & i;\n            v = g | 0, L = S | 0, g = w | 0, S = h | 0, w = l | 0, h = p | 0, ({ h: l, l: p } = x.add(D | 0, c | 0, O | 0, ot | 0)), D = u | 0, c = i | 0, u = s | 0, i = a | 0, s = r | 0, a = o | 0;\n            const At = x.add3L(ot, st, Ct);\n            r = x.add3H(At, O, tt, at), o = At | 0;\n        }\n        ({ h: r, l: o } = x.add(this.Ah | 0, this.Al | 0, r | 0, o | 0)), ({ h: s, l: a } = x.add(this.Bh | 0, this.Bl | 0, s | 0, a | 0)), ({ h: u, l: i } = x.add(this.Ch | 0, this.Cl | 0, u | 0, i | 0)), ({ h: D, l: c } = x.add(this.Dh | 0, this.Dl | 0, D | 0, c | 0)), ({ h: l, l: p } = x.add(this.Eh | 0, this.El | 0, l | 0, p | 0)), ({ h: w, l: h } = x.add(this.Fh | 0, this.Fl | 0, w | 0, h | 0)), ({ h: g, l: S } = x.add(this.Gh | 0, this.Gl | 0, g | 0, S | 0)), ({ h: v, l: L } = x.add(this.Hh | 0, this.Hl | 0, v | 0, L | 0)), this.set(r, o, s, a, u, i, D, c, l, p, w, h, g, S, v, L);\n    }\n    roundClean() {\n        P.fill(0), Q.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n    constructor(){\n        super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;\n    }\n}\nconst Kn = Bn(_c4 = ()=>new Jn); /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \n_c5 = Kn;\nconst vt = BigInt(0), be = BigInt(1), Wn = BigInt(2);\nfunction It(t) {\n    return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === \"Uint8Array\";\n}\n_c6 = It;\nfunction Ut(t) {\n    if (!It(t)) throw new Error(\"Uint8Array expected\");\n}\n_c7 = Ut;\nfunction Tt(t, e) {\n    if (typeof e != \"boolean\") throw new Error(t + \" boolean expected, got \" + e);\n}\n_c8 = Tt;\nconst Xn = Array.from({\n    length: 256\n}, (t, e)=>e.toString(16).padStart(2, \"0\"));\nfunction Ft(t) {\n    Ut(t);\n    let e = \"\";\n    for(let n = 0; n < t.length; n++)e += Xn[t[n]];\n    return e;\n}\n_c9 = Ft;\nfunction pe(t) {\n    if (typeof t != \"string\") throw new Error(\"hex string expected, got \" + typeof t);\n    return t === \"\" ? vt : BigInt(\"0x\" + t);\n}\nconst K = {\n    _0: 48,\n    _9: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction we(t) {\n    if (t >= K._0 && t <= K._9) return t - K._0;\n    if (t >= K.A && t <= K.F) return t - (K.A - 10);\n    if (t >= K.a && t <= K.f) return t - (K.a - 10);\n}\nfunction Ee(t) {\n    if (typeof t != \"string\") throw new Error(\"hex string expected, got \" + typeof t);\n    const e = t.length, n = e / 2;\n    if (e % 2) throw new Error(\"hex string expected, got unpadded hex of length \" + e);\n    const r = new Uint8Array(n);\n    for(let o = 0, s = 0; o < n; o++, s += 2){\n        const a = we(t.charCodeAt(s)), u = we(t.charCodeAt(s + 1));\n        if (a === void 0 || u === void 0) {\n            const i = t[s] + t[s + 1];\n            throw new Error('hex string expected, got non-hex character \"' + i + '\" at index ' + s);\n        }\n        r[o] = a * 16 + u;\n    }\n    return r;\n}\n_c10 = Ee;\nfunction Pn(t) {\n    return pe(Ft(t));\n}\n_c11 = Pn;\nfunction Et(t) {\n    return Ut(t), pe(Ft(Uint8Array.from(t).reverse()));\n}\n_c12 = Et;\nfunction ge(t, e) {\n    return Ee(t.toString(16).padStart(e * 2, \"0\"));\n}\nfunction Nt(t, e) {\n    return ge(t, e).reverse();\n}\n_c13 = Nt;\nfunction W(t, e, n) {\n    let r;\n    if (typeof e == \"string\") try {\n        r = Ee(e);\n    } catch (s) {\n        throw new Error(t + \" must be hex string or Uint8Array, cause: \" + s);\n    }\n    else if (It(e)) r = Uint8Array.from(e);\n    else throw new Error(t + \" must be hex string or Uint8Array\");\n    const o = r.length;\n    if (typeof n == \"number\" && o !== n) throw new Error(t + \" of length \" + n + \" expected, got \" + o);\n    return r;\n}\n_c14 = W;\nfunction ye() {\n    for(var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++){\n        t[_key] = arguments[_key];\n    }\n    let e = 0;\n    for(let r = 0; r < t.length; r++){\n        const o = t[r];\n        Ut(o), e += o.length;\n    }\n    const n = new Uint8Array(e);\n    for(let r = 0, o = 0; r < t.length; r++){\n        const s = t[r];\n        n.set(s, o), o += s.length;\n    }\n    return n;\n}\nconst Lt = (t)=>typeof t == \"bigint\" && vt <= t;\n_c15 = Lt;\nfunction Qn(t, e, n) {\n    return Lt(t) && Lt(e) && Lt(n) && e <= t && t < n;\n}\n_c16 = Qn;\nfunction ft(t, e, n, r) {\n    if (!Qn(e, n, r)) throw new Error(\"expected valid \" + t + \": \" + n + \" <= n < \" + r + \", got \" + e);\n}\nfunction tr(t) {\n    let e;\n    for(e = 0; t > vt; t >>= be, e += 1);\n    return e;\n}\nconst er = (t)=>(Wn << BigInt(t - 1)) - be, nr = {\n    bigint: (t)=>typeof t == \"bigint\",\n    function: (t)=>typeof t == \"function\",\n    boolean: (t)=>typeof t == \"boolean\",\n    string: (t)=>typeof t == \"string\",\n    stringOrUint8Array: (t)=>typeof t == \"string\" || It(t),\n    isSafeInteger: (t)=>Number.isSafeInteger(t),\n    array: (t)=>Array.isArray(t),\n    field: (t, e)=>e.Fp.isValid(t),\n    hash: (t)=>typeof t == \"function\" && Number.isSafeInteger(t.outputLen)\n};\nfunction Ot(t, e) {\n    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const r = (o, s, a)=>{\n        const u = nr[s];\n        if (typeof u != \"function\") throw new Error(\"invalid validator function\");\n        const i = t[o];\n        if (!(a && i === void 0) && !u(i, t)) throw new Error(\"param \" + String(o) + \" is invalid. Expected \" + s + \", got \" + i);\n    };\n    for (const [o, s] of Object.entries(e))r(o, s, !1);\n    for (const [o, s] of Object.entries(n))r(o, s, !0);\n    return t;\n}\n_c17 = Ot;\nfunction xe(t) {\n    const e = new WeakMap;\n    return function(n) {\n        for(var _len = arguments.length, r = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            r[_key - 1] = arguments[_key];\n        }\n        const o = e.get(n);\n        if (o !== void 0) return o;\n        const s = t(n, ...r);\n        return e.set(n, s), s;\n    };\n}\nconst M = BigInt(0), N = BigInt(1), nt = BigInt(2), rr = BigInt(3), Ht = BigInt(4), Be = BigInt(5), Ce = BigInt(8);\nfunction H(t, e) {\n    const n = t % e;\n    return n >= M ? n : e + n;\n}\n_c18 = H;\nfunction or(t, e, n) {\n    if (e < M) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (n <= M) throw new Error(\"invalid modulus\");\n    if (n === N) return M;\n    let r = N;\n    for(; e > M;)e & N && (r = r * t % n), t = t * t % n, e >>= N;\n    return r;\n}\nfunction J(t, e, n) {\n    let r = t;\n    for(; e-- > M;)r *= r, r %= n;\n    return r;\n}\n_c19 = J;\nfunction Ae(t, e) {\n    if (t === M) throw new Error(\"invert: expected non-zero number\");\n    if (e <= M) throw new Error(\"invert: expected positive modulus, got \" + e);\n    let n = H(t, e), r = e, o = M, s = N;\n    for(; n !== M;){\n        const u = r / n, i = r % n, D = o - s * u;\n        r = n, n = i, o = s, s = D;\n    }\n    if (r !== N) throw new Error(\"invert: does not exist\");\n    return H(o, e);\n}\n_c20 = Ae;\nfunction sr(t) {\n    const e = (t - N) / nt;\n    let n, r, o;\n    for(n = t - N, r = 0; n % nt === M; n /= nt, r++);\n    for(o = nt; o < t && or(o, e, t) !== t - N; o++)if (o > 1e3) throw new Error(\"Cannot find square root: likely non-prime P\");\n    if (r === 1) {\n        const a = (t + N) / Ht;\n        return function(i, D) {\n            const c = i.pow(D, a);\n            if (!i.eql(i.sqr(c), D)) throw new Error(\"Cannot find square root\");\n            return c;\n        };\n    }\n    const s = (n + N) / nt;\n    return function(u, i) {\n        if (u.pow(i, e) === u.neg(u.ONE)) throw new Error(\"Cannot find square root\");\n        let D = r, c = u.pow(u.mul(u.ONE, o), n), l = u.pow(i, s), p = u.pow(i, n);\n        for(; !u.eql(p, u.ONE);){\n            if (u.eql(p, u.ZERO)) return u.ZERO;\n            let w = 1;\n            for(let g = u.sqr(p); w < D && !u.eql(g, u.ONE); w++)g = u.sqr(g);\n            const h = u.pow(c, N << BigInt(D - w - 1));\n            c = u.sqr(h), l = u.mul(l, h), p = u.mul(p, c), D = w;\n        }\n        return l;\n    };\n}\nfunction ir(t) {\n    if (t % Ht === rr) {\n        const e = (t + N) / Ht;\n        return function(r, o) {\n            const s = r.pow(o, e);\n            if (!r.eql(r.sqr(s), o)) throw new Error(\"Cannot find square root\");\n            return s;\n        };\n    }\n    if (t % Ce === Be) {\n        const e = (t - Be) / Ce;\n        return function(r, o) {\n            const s = r.mul(o, nt), a = r.pow(s, e), u = r.mul(o, a), i = r.mul(r.mul(u, nt), a), D = r.mul(u, r.sub(i, r.ONE));\n            if (!r.eql(r.sqr(D), o)) throw new Error(\"Cannot find square root\");\n            return D;\n        };\n    }\n    return sr(t);\n}\nconst ur = (t, e)=>(H(t, e) & N) === N, cr = [\n    \"create\",\n    \"isValid\",\n    \"is0\",\n    \"neg\",\n    \"inv\",\n    \"sqrt\",\n    \"sqr\",\n    \"eql\",\n    \"add\",\n    \"sub\",\n    \"mul\",\n    \"pow\",\n    \"div\",\n    \"addN\",\n    \"subN\",\n    \"mulN\",\n    \"sqrN\"\n];\nfunction ar(t) {\n    const e = {\n        ORDER: \"bigint\",\n        MASK: \"bigint\",\n        BYTES: \"isSafeInteger\",\n        BITS: \"isSafeInteger\"\n    }, n = cr.reduce((r, o)=>(r[o] = \"function\", r), e);\n    return Ot(t, n);\n}\nfunction fr(t, e, n) {\n    if (n < M) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (n === M) return t.ONE;\n    if (n === N) return e;\n    let r = t.ONE, o = e;\n    for(; n > M;)n & N && (r = t.mul(r, o)), o = t.sqr(o), n >>= N;\n    return r;\n}\nfunction Dr(t, e) {\n    const n = new Array(e.length), r = e.reduce((s, a, u)=>t.is0(a) ? s : (n[u] = s, t.mul(s, a)), t.ONE), o = t.inv(r);\n    return e.reduceRight((s, a, u)=>t.is0(a) ? s : (n[u] = t.mul(s, n[u]), t.mul(s, a)), o), n;\n}\n_c21 = Dr;\nfunction me(t, e) {\n    const n = e !== void 0 ? e : t.toString(2).length, r = Math.ceil(n / 8);\n    return {\n        nBitLength: n,\n        nByteLength: r\n    };\n}\nfunction _e(t, e) {\n    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    if (t <= M) throw new Error(\"invalid field: expected ORDER > 0, got \" + t);\n    const { nBitLength: o, nByteLength: s } = me(t, e);\n    if (s > 2048) throw new Error(\"invalid field: expected ORDER of <= 2048 bytes\");\n    let a;\n    const u = Object.freeze({\n        ORDER: t,\n        isLE: n,\n        BITS: o,\n        BYTES: s,\n        MASK: er(o),\n        ZERO: M,\n        ONE: N,\n        create: (i)=>H(i, t),\n        isValid: (i)=>{\n            if (typeof i != \"bigint\") throw new Error(\"invalid field element: expected bigint, got \" + typeof i);\n            return M <= i && i < t;\n        },\n        is0: (i)=>i === M,\n        isOdd: (i)=>(i & N) === N,\n        neg: (i)=>H(-i, t),\n        eql: (i, D)=>i === D,\n        sqr: (i)=>H(i * i, t),\n        add: (i, D)=>H(i + D, t),\n        sub: (i, D)=>H(i - D, t),\n        mul: (i, D)=>H(i * D, t),\n        pow: (i, D)=>fr(u, i, D),\n        div: (i, D)=>H(i * Ae(D, t), t),\n        sqrN: (i)=>i * i,\n        addN: (i, D)=>i + D,\n        subN: (i, D)=>i - D,\n        mulN: (i, D)=>i * D,\n        inv: (i)=>Ae(i, t),\n        sqrt: r.sqrt || ((i)=>(a || (a = ir(t)), a(u, i))),\n        invertBatch: (i)=>Dr(u, i),\n        cmov: (i, D, c)=>c ? D : i,\n        toBytes: (i)=>n ? Nt(i, s) : ge(i, s),\n        fromBytes: (i)=>{\n            if (i.length !== s) throw new Error(\"Field.fromBytes: expected \" + s + \" bytes, got \" + i.length);\n            return n ? Et(i) : Pn(i);\n        }\n    });\n    return Object.freeze(u);\n}\nconst Se = BigInt(0), gt = BigInt(1);\nfunction zt(t, e) {\n    const n = e.negate();\n    return t ? n : e;\n}\nfunction ve(t, e) {\n    if (!Number.isSafeInteger(t) || t <= 0 || t > e) throw new Error(\"invalid window size, expected [1..\" + e + \"], got W=\" + t);\n}\nfunction Mt(t, e) {\n    ve(t, e);\n    const n = Math.ceil(e / t) + 1, r = 2 ** (t - 1);\n    return {\n        windows: n,\n        windowSize: r\n    };\n}\n_c22 = Mt;\nfunction dr(t, e) {\n    if (!Array.isArray(t)) throw new Error(\"array expected\");\n    t.forEach((n, r)=>{\n        if (!(n instanceof e)) throw new Error(\"invalid point at index \" + r);\n    });\n}\nfunction hr(t, e) {\n    if (!Array.isArray(t)) throw new Error(\"array of scalars expected\");\n    t.forEach((n, r)=>{\n        if (!e.isValid(n)) throw new Error(\"invalid scalar at index \" + r);\n    });\n}\nconst qt = new WeakMap, Ie = new WeakMap;\nfunction $t(t) {\n    return Ie.get(t) || 1;\n}\nfunction lr(t, e) {\n    return {\n        constTimeNegate: zt,\n        hasPrecomputes (n) {\n            return $t(n) !== 1;\n        },\n        unsafeLadder (n, r) {\n            let o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : t.ZERO;\n            let s = n;\n            for(; r > Se;)r & gt && (o = o.add(s)), s = s.double(), r >>= gt;\n            return o;\n        },\n        precomputeWindow (n, r) {\n            const { windows: o, windowSize: s } = Mt(r, e), a = [];\n            let u = n, i = u;\n            for(let D = 0; D < o; D++){\n                i = u, a.push(i);\n                for(let c = 1; c < s; c++)i = i.add(u), a.push(i);\n                u = i.double();\n            }\n            return a;\n        },\n        wNAF (n, r, o) {\n            const { windows: s, windowSize: a } = Mt(n, e);\n            let u = t.ZERO, i = t.BASE;\n            const D = BigInt(2 ** n - 1), c = 2 ** n, l = BigInt(n);\n            for(let p = 0; p < s; p++){\n                const w = p * a;\n                let h = Number(o & D);\n                o >>= l, h > a && (h -= c, o += gt);\n                const g = w, S = w + Math.abs(h) - 1, v = p % 2 !== 0, L = h < 0;\n                h === 0 ? i = i.add(zt(v, r[g])) : u = u.add(zt(L, r[S]));\n            }\n            return {\n                p: u,\n                f: i\n            };\n        },\n        wNAFUnsafe (n, r, o) {\n            let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : t.ZERO;\n            const { windows: a, windowSize: u } = Mt(n, e), i = BigInt(2 ** n - 1), D = 2 ** n, c = BigInt(n);\n            for(let l = 0; l < a; l++){\n                const p = l * u;\n                if (o === Se) break;\n                let w = Number(o & i);\n                if (o >>= c, w > u && (w -= D, o += gt), w === 0) continue;\n                let h = r[p + Math.abs(w) - 1];\n                w < 0 && (h = h.negate()), s = s.add(h);\n            }\n            return s;\n        },\n        getPrecomputes (n, r, o) {\n            let s = qt.get(r);\n            return s || (s = this.precomputeWindow(r, n), n !== 1 && qt.set(r, o(s))), s;\n        },\n        wNAFCached (n, r, o) {\n            const s = $t(n);\n            return this.wNAF(s, this.getPrecomputes(s, n, o), r);\n        },\n        wNAFCachedUnsafe (n, r, o, s) {\n            const a = $t(n);\n            return a === 1 ? this.unsafeLadder(n, r, s) : this.wNAFUnsafe(a, this.getPrecomputes(a, n, o), r, s);\n        },\n        setWindowSize (n, r) {\n            ve(r, e), Ie.set(n, r), qt.delete(n);\n        }\n    };\n}\nfunction br(t, e, n, r) {\n    if (dr(n, t), hr(r, e), n.length !== r.length) throw new Error(\"arrays of points and scalars must have equal length\");\n    const o = t.ZERO, s = tr(BigInt(n.length)), a = s > 12 ? s - 3 : s > 4 ? s - 2 : s ? 2 : 1, u = (1 << a) - 1, i = new Array(u + 1).fill(o), D = Math.floor((e.BITS - 1) / a) * a;\n    let c = o;\n    for(let l = D; l >= 0; l -= a){\n        i.fill(o);\n        for(let w = 0; w < r.length; w++){\n            const h = r[w], g = Number(h >> BigInt(l) & BigInt(u));\n            i[g] = i[g].add(n[w]);\n        }\n        let p = o;\n        for(let w = i.length - 1, h = o; w > 0; w--)h = h.add(i[w]), p = p.add(h);\n        if (c = c.add(p), l !== 0) for(let w = 0; w < a; w++)c = c.double();\n    }\n    return c;\n}\nfunction pr(t) {\n    return ar(t.Fp), Ot(t, {\n        n: \"bigint\",\n        h: \"bigint\",\n        Gx: \"field\",\n        Gy: \"field\"\n    }, {\n        nBitLength: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\"\n    }), Object.freeze({\n        ...me(t.n, t.nBitLength),\n        ...t,\n        p: t.Fp.ORDER\n    });\n}\nconst G = BigInt(0), j = BigInt(1), yt = BigInt(2), wr = BigInt(8), Er = {\n    zip215: !0\n};\nfunction gr(t) {\n    const e = pr(t);\n    return Ot(t, {\n        hash: \"function\",\n        a: \"bigint\",\n        d: \"bigint\",\n        randomBytes: \"function\"\n    }, {\n        adjustScalarBytes: \"function\",\n        domain: \"function\",\n        uvRatio: \"function\",\n        mapToCurve: \"function\"\n    }), Object.freeze({\n        ...e\n    });\n}\nfunction yr(t) {\n    const e = gr(t), { Fp: n, n: r, prehash: o, hash: s, randomBytes: a, nByteLength: u, h: i } = e, D = yt << BigInt(u * 8) - j, c = n.create, l = _e(e.n, e.nBitLength), p = e.uvRatio || ((y, f)=>{\n        try {\n            return {\n                isValid: !0,\n                value: n.sqrt(y * n.inv(f))\n            };\n        } catch (e) {\n            return {\n                isValid: !1,\n                value: G\n            };\n        }\n    }), w = e.adjustScalarBytes || ((y)=>y), h = e.domain || ((y, f, b)=>{\n        if (Tt(\"phflag\", b), f.length || b) throw new Error(\"Contexts/pre-hash are not supported\");\n        return y;\n    });\n    function g(y, f) {\n        ft(\"coordinate \" + y, f, G, D);\n    }\n    function S(y) {\n        if (!(y instanceof d)) throw new Error(\"ExtendedPoint expected\");\n    }\n    const v = xe((y, f)=>{\n        const { ex: b, ey: E, ez: B } = y, C = y.is0();\n        f == null && (f = C ? wr : n.inv(B));\n        const A = c(b * f), U = c(E * f), _ = c(B * f);\n        if (C) return {\n            x: G,\n            y: j\n        };\n        if (_ !== j) throw new Error(\"invZ was invalid\");\n        return {\n            x: A,\n            y: U\n        };\n    }), L = xe((y)=>{\n        const { a: f, d: b } = e;\n        if (y.is0()) throw new Error(\"bad point: ZERO\");\n        const { ex: E, ey: B, ez: C, et: A } = y, U = c(E * E), _ = c(B * B), T = c(C * C), $ = c(T * T), R = c(U * f), V = c(T * c(R + _)), Y = c($ + c(b * c(U * _)));\n        if (V !== Y) throw new Error(\"bad point: equation left != right (1)\");\n        const Z = c(E * B), X = c(C * A);\n        if (Z !== X) throw new Error(\"bad point: equation left != right (2)\");\n        return !0;\n    });\n    class d {\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(f) {\n            if (f instanceof d) throw new Error(\"extended point not allowed\");\n            const { x: b, y: E } = f || {};\n            return g(\"x\", b), g(\"y\", E), new d(b, E, j, c(b * E));\n        }\n        static normalizeZ(f) {\n            const b = n.invertBatch(f.map((E)=>E.ez));\n            return f.map((E, B)=>E.toAffine(b[B])).map(d.fromAffine);\n        }\n        static msm(f, b) {\n            return br(d, l, f, b);\n        }\n        _setWindowSize(f) {\n            q.setWindowSize(this, f);\n        }\n        assertValidity() {\n            L(this);\n        }\n        equals(f) {\n            S(f);\n            const { ex: b, ey: E, ez: B } = this, { ex: C, ey: A, ez: U } = f, _ = c(b * U), T = c(C * B), $ = c(E * U), R = c(A * B);\n            return _ === T && $ === R;\n        }\n        is0() {\n            return this.equals(d.ZERO);\n        }\n        negate() {\n            return new d(c(-this.ex), this.ey, this.ez, c(-this.et));\n        }\n        double() {\n            const { a: f } = e, { ex: b, ey: E, ez: B } = this, C = c(b * b), A = c(E * E), U = c(yt * c(B * B)), _ = c(f * C), T = b + E, $ = c(c(T * T) - C - A), R = _ + A, V = R - U, Y = _ - A, Z = c($ * V), X = c(R * Y), et = c($ * Y), pt = c(V * R);\n            return new d(Z, X, pt, et);\n        }\n        add(f) {\n            S(f);\n            const { a: b, d: E } = e, { ex: B, ey: C, ez: A, et: U } = this, { ex: _, ey: T, ez: $, et: R } = f;\n            if (b === BigInt(-1)) {\n                const re = c((C - B) * (T + _)), oe = c((C + B) * (T - _)), mt = c(oe - re);\n                if (mt === G) return this.double();\n                const se = c(A * yt * R), ie = c(U * yt * $), ue = ie + se, ce = oe + re, ae = ie - se, Dn = c(ue * mt), dn = c(ce * ae), hn = c(ue * ae), ln = c(mt * ce);\n                return new d(Dn, dn, ln, hn);\n            }\n            const V = c(B * _), Y = c(C * T), Z = c(U * E * R), X = c(A * $), et = c((B + C) * (_ + T) - V - Y), pt = X - Z, ee = X + Z, ne = c(Y - b * V), un = c(et * pt), cn = c(ee * ne), an = c(et * ne), fn = c(pt * ee);\n            return new d(un, cn, fn, an);\n        }\n        subtract(f) {\n            return this.add(f.negate());\n        }\n        wNAF(f) {\n            return q.wNAFCached(this, f, d.normalizeZ);\n        }\n        multiply(f) {\n            const b = f;\n            ft(\"scalar\", b, j, r);\n            const { p: E, f: B } = this.wNAF(b);\n            return d.normalizeZ([\n                E,\n                B\n            ])[0];\n        }\n        multiplyUnsafe(f) {\n            let b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : d.ZERO;\n            const E = f;\n            return ft(\"scalar\", E, G, r), E === G ? F : this.is0() || E === j ? this : q.wNAFCachedUnsafe(this, E, d.normalizeZ, b);\n        }\n        isSmallOrder() {\n            return this.multiplyUnsafe(i).is0();\n        }\n        isTorsionFree() {\n            return q.unsafeLadder(this, r).is0();\n        }\n        toAffine(f) {\n            return v(this, f);\n        }\n        clearCofactor() {\n            const { h: f } = e;\n            return f === j ? this : this.multiplyUnsafe(f);\n        }\n        static fromHex(f) {\n            let b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n            const { d: E, a: B } = e, C = n.BYTES;\n            f = W(\"pointHex\", f, C), Tt(\"zip215\", b);\n            const A = f.slice(), U = f[C - 1];\n            A[C - 1] = U & -129;\n            const _ = Et(A), T = b ? D : n.ORDER;\n            ft(\"pointHex.y\", _, G, T);\n            const $ = c(_ * _), R = c($ - j), V = c(E * $ - B);\n            let { isValid: Y, value: Z } = p(R, V);\n            if (!Y) throw new Error(\"Point.fromHex: invalid y coordinate\");\n            const X = (Z & j) === j, et = (U & 128) !== 0;\n            if (!b && Z === G && et) throw new Error(\"Point.fromHex: x=0 and x_0=1\");\n            return et !== X && (Z = c(-Z)), d.fromAffine({\n                x: Z,\n                y: _\n            });\n        }\n        static fromPrivateKey(f) {\n            return O(f).point;\n        }\n        toRawBytes() {\n            const { x: f, y: b } = this.toAffine(), E = Nt(b, n.BYTES);\n            return E[E.length - 1] |= f & j ? 128 : 0, E;\n        }\n        toHex() {\n            return Ft(this.toRawBytes());\n        }\n        constructor(f, b, E, B){\n            this.ex = f, this.ey = b, this.ez = E, this.et = B, g(\"x\", f), g(\"y\", b), g(\"z\", E), g(\"t\", B), Object.freeze(this);\n        }\n    }\n    d.BASE = new d(e.Gx, e.Gy, j, c(e.Gx * e.Gy)), d.ZERO = new d(G, j, j, G);\n    const { BASE: m, ZERO: F } = d, q = lr(d, u * 8);\n    function z(y) {\n        return H(y, r);\n    }\n    function I(y) {\n        return z(Et(y));\n    }\n    function O(y) {\n        const f = n.BYTES;\n        y = W(\"private key\", y, f);\n        const b = W(\"hashed private key\", s(y), 2 * f), E = w(b.slice(0, f)), B = b.slice(f, 2 * f), C = I(E), A = m.multiply(C), U = A.toRawBytes();\n        return {\n            head: E,\n            prefix: B,\n            scalar: C,\n            point: A,\n            pointBytes: U\n        };\n    }\n    function ot(y) {\n        return O(y).pointBytes;\n    }\n    function tt() {\n        let y = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new Uint8Array;\n        for(var _len = arguments.length, f = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            f[_key - 1] = arguments[_key];\n        }\n        const b = ye(...f);\n        return I(s(h(b, W(\"context\", y), !!o)));\n    }\n    function st(y, f) {\n        let b = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        y = W(\"message\", y), o && (y = o(y));\n        const { prefix: E, scalar: B, pointBytes: C } = O(f), A = tt(b.context, E, y), U = m.multiply(A).toRawBytes(), _ = tt(b.context, U, C, y), T = z(A + _ * B);\n        ft(\"signature.s\", T, G, r);\n        const $ = ye(U, Nt(T, n.BYTES));\n        return W(\"result\", $, n.BYTES * 2);\n    }\n    const at = Er;\n    function Ct(y, f, b) {\n        let E = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : at;\n        const { context: B, zip215: C } = E, A = n.BYTES;\n        y = W(\"signature\", y, 2 * A), f = W(\"message\", f), b = W(\"publicKey\", b, A), C !== void 0 && Tt(\"zip215\", C), o && (f = o(f));\n        const U = Et(y.slice(A, 2 * A));\n        let _, T, $;\n        try {\n            _ = d.fromHex(b, C), T = d.fromHex(y.slice(0, A), C), $ = m.multiplyUnsafe(U);\n        } catch (e) {\n            return !1;\n        }\n        if (!C && _.isSmallOrder()) return !1;\n        const R = tt(B, T.toRawBytes(), _.toRawBytes(), f);\n        return T.add(_.multiplyUnsafe(R)).subtract($).clearCofactor().equals(d.ZERO);\n    }\n    return m._setWindowSize(8), {\n        CURVE: e,\n        getPublicKey: ot,\n        sign: st,\n        verify: Ct,\n        ExtendedPoint: d,\n        utils: {\n            getExtendedPublicKey: O,\n            randomPrivateKey: ()=>a(n.BYTES),\n            precompute () {\n                let y = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8, f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : d.BASE;\n                return f._setWindowSize(y), f.multiply(BigInt(3)), f;\n            }\n        }\n    };\n}\nBigInt(0), BigInt(1);\nconst kt = BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\"), Ue = BigInt(\"19681161376707505956807079304988542015446066515923890162744021073123829784752\");\nBigInt(0);\nconst xr = BigInt(1), Te = BigInt(2);\nBigInt(3);\nconst Br = BigInt(5), Cr = BigInt(8);\nfunction Ar(t) {\n    const e = BigInt(10), n = BigInt(20), r = BigInt(40), o = BigInt(80), s = kt, u = t * t % s * t % s, i = J(u, Te, s) * u % s, D = J(i, xr, s) * t % s, c = J(D, Br, s) * D % s, l = J(c, e, s) * c % s, p = J(l, n, s) * l % s, w = J(p, r, s) * p % s, h = J(w, o, s) * w % s, g = J(h, o, s) * w % s, S = J(g, e, s) * c % s;\n    return {\n        pow_p_5_8: J(S, Te, s) * t % s,\n        b2: u\n    };\n}\n_c23 = Ar;\nfunction mr(t) {\n    return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;\n}\nfunction _r(t, e) {\n    const n = kt, r = H(e * e * e, n), o = H(r * r * e, n), s = Ar(t * o).pow_p_5_8;\n    let a = H(t * r * s, n);\n    const u = H(e * a * a, n), i = a, D = H(a * Ue, n), c = u === t, l = u === H(-t, n), p = u === H(-t * Ue, n);\n    return c && (a = i), (l || p) && (a = D), ur(a, n) && (a = H(-a, n)), {\n        isValid: c || l,\n        value: a\n    };\n}\nconst Sr = (()=>_e(kt, void 0, !0))(), vr = (()=>({\n        a: BigInt(-1),\n        d: BigInt(\"37095705934669439343138083508754565189542113879843219016388785533085940283555\"),\n        Fp: Sr,\n        n: BigInt(\"7237005577332262213973186563042994240857116359379907606001950938285454250989\"),\n        h: Cr,\n        Gx: BigInt(\"15112221349535400772501151409588531511454012693041857206046113283949847762202\"),\n        Gy: BigInt(\"46316835694926478169428394003475163141307993866256225615783033603165251855960\"),\n        hash: Kn,\n        randomBytes: he,\n        adjustScalarBytes: mr,\n        uvRatio: _r\n    }))(), Rt = (()=>yr(vr))(), jt = \"EdDSA\", Zt = \"JWT\", ut = \".\", Dt = \"base64url\", Gt = \"utf8\", xt = \"utf8\", Vt = \":\", Yt = \"did\", Jt = \"key\", dt = \"base58btc\", Kt = \"z\", Wt = \"K36\", Fe = 32, Ne = 32;\nfunction Xt(t) {\n    return globalThis.Buffer != null ? new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t;\n}\n_c24 = Xt;\nfunction Le() {\n    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t)) : new Uint8Array(t);\n}\n_c25 = Le;\nfunction Oe(t, e) {\n    e || (e = t.reduce((o, s)=>o + s.length, 0));\n    const n = Le(e);\n    let r = 0;\n    for (const o of t)n.set(o, r), r += o.length;\n    return Xt(n);\n}\n_c26 = Oe;\nfunction Ir(t, e) {\n    if (t.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var n = new Uint8Array(256), r = 0; r < n.length; r++)n[r] = 255;\n    for(var o = 0; o < t.length; o++){\n        var s = t.charAt(o), a = s.charCodeAt(0);\n        if (n[a] !== 255) throw new TypeError(s + \" is ambiguous\");\n        n[a] = o;\n    }\n    var u = t.length, i = t.charAt(0), D = Math.log(u) / Math.log(256), c = Math.log(256) / Math.log(u);\n    function l(h) {\n        if (h instanceof Uint8Array || (ArrayBuffer.isView(h) ? h = new Uint8Array(h.buffer, h.byteOffset, h.byteLength) : Array.isArray(h) && (h = Uint8Array.from(h))), !(h instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (h.length === 0) return \"\";\n        for(var g = 0, S = 0, v = 0, L = h.length; v !== L && h[v] === 0;)v++, g++;\n        for(var d = (L - v) * c + 1 >>> 0, m = new Uint8Array(d); v !== L;){\n            for(var F = h[v], q = 0, z = d - 1; (F !== 0 || q < S) && z !== -1; z--, q++)F += 256 * m[z] >>> 0, m[z] = F % u >>> 0, F = F / u >>> 0;\n            if (F !== 0) throw new Error(\"Non-zero carry\");\n            S = q, v++;\n        }\n        for(var I = d - S; I !== d && m[I] === 0;)I++;\n        for(var O = i.repeat(g); I < d; ++I)O += t.charAt(m[I]);\n        return O;\n    }\n    function p(h) {\n        if (typeof h != \"string\") throw new TypeError(\"Expected String\");\n        if (h.length === 0) return new Uint8Array;\n        var g = 0;\n        if (h[g] !== \" \") {\n            for(var S = 0, v = 0; h[g] === i;)S++, g++;\n            for(var L = (h.length - g) * D + 1 >>> 0, d = new Uint8Array(L); h[g];){\n                var m = n[h.charCodeAt(g)];\n                if (m === 255) return;\n                for(var F = 0, q = L - 1; (m !== 0 || F < v) && q !== -1; q--, F++)m += u * d[q] >>> 0, d[q] = m % 256 >>> 0, m = m / 256 >>> 0;\n                if (m !== 0) throw new Error(\"Non-zero carry\");\n                v = F, g++;\n            }\n            if (h[g] !== \" \") {\n                for(var z = L - v; z !== L && d[z] === 0;)z++;\n                for(var I = new Uint8Array(S + (L - z)), O = S; z !== L;)I[O++] = d[z++];\n                return I;\n            }\n        }\n    }\n    function w(h) {\n        var g = p(h);\n        if (g) return g;\n        throw new Error(\"Non-\".concat(e, \" character\"));\n    }\n    return {\n        encode: l,\n        decodeUnsafe: p,\n        decode: w\n    };\n}\n_c27 = Ir;\nvar Ur = Ir, Tr = Ur;\nconst He = (t)=>{\n    if (t instanceof Uint8Array && t.constructor.name === \"Uint8Array\") return t;\n    if (t instanceof ArrayBuffer) return new Uint8Array(t);\n    if (ArrayBuffer.isView(t)) return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, Fr = (t)=>new TextEncoder().encode(t), Nr = (t)=>new TextDecoder().decode(t);\nclass Lr {\n    encode(e) {\n        if (e instanceof Uint8Array) return \"\".concat(this.prefix).concat(this.baseEncode(e));\n        throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, n, r){\n        this.name = e, this.prefix = n, this.baseEncode = r;\n    }\n}\nclass Or {\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", \").concat(this.name, \" decoder only supports inputs prefixed with \").concat(this.prefix));\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return ze(this, e);\n    }\n    constructor(e, n, r){\n        if (this.name = e, this.prefix = n, n.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = n.codePointAt(0), this.baseDecode = r;\n    }\n}\nclass Hr {\n    or(e) {\n        return ze(this, e);\n    }\n    decode(e) {\n        const n = e[0], r = this.decoders[n];\n        if (r) return r.decode(e);\n        throw RangeError(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", only inputs prefixed with \").concat(Object.keys(this.decoders), \" are supported\"));\n    }\n    constructor(e){\n        this.decoders = e;\n    }\n}\nconst ze = (t, e)=>new Hr({\n        ...t.decoders || {\n            [t.prefix]: t\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nclass zr {\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n    constructor(e, n, r, o){\n        this.name = e, this.prefix = n, this.baseEncode = r, this.baseDecode = o, this.encoder = new Lr(e, n, r), this.decoder = new Or(e, n, o);\n    }\n}\nconst Bt = (param)=>{\n    let { name: t, prefix: e, encode: n, decode: r } = param;\n    return new zr(t, e, n, r);\n}, ht = (param)=>{\n    let { prefix: t, name: e, alphabet: n } = param;\n    const { encode: r, decode: o } = Tr(n, e);\n    return Bt({\n        prefix: t,\n        name: e,\n        encode: r,\n        decode: (s)=>He(o(s))\n    });\n}, Mr = (t, e, n, r)=>{\n    const o = {};\n    for(let c = 0; c < e.length; ++c)o[e[c]] = c;\n    let s = t.length;\n    for(; t[s - 1] === \"=\";)--s;\n    const a = new Uint8Array(s * n / 8 | 0);\n    let u = 0, i = 0, D = 0;\n    for(let c = 0; c < s; ++c){\n        const l = o[t[c]];\n        if (l === void 0) throw new SyntaxError(\"Non-\".concat(r, \" character\"));\n        i = i << n | l, u += n, u >= 8 && (u -= 8, a[D++] = 255 & i >> u);\n    }\n    if (u >= n || 255 & i << 8 - u) throw new SyntaxError(\"Unexpected end of data\");\n    return a;\n}, qr = (t, e, n)=>{\n    const r = e[e.length - 1] === \"=\", o = (1 << n) - 1;\n    let s = \"\", a = 0, u = 0;\n    for(let i = 0; i < t.length; ++i)for(u = u << 8 | t[i], a += 8; a > n;)a -= n, s += e[o & u >> a];\n    if (a && (s += e[o & u << n - a]), r) for(; s.length * n & 7;)s += \"=\";\n    return s;\n}, k = (param)=>{\n    let { name: t, prefix: e, bitsPerChar: n, alphabet: r } = param;\n    return Bt({\n        prefix: e,\n        name: t,\n        encode (o) {\n            return qr(o, r, n);\n        },\n        decode (o) {\n            return Mr(o, r, n, t);\n        }\n    });\n}, $r = Bt({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (t)=>Nr(t),\n    decode: (t)=>Fr(t)\n});\nvar kr = Object.freeze({\n    __proto__: null,\n    identity: $r\n});\nconst Rr = k({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar jr = Object.freeze({\n    __proto__: null,\n    base2: Rr\n});\nconst Zr = k({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar Gr = Object.freeze({\n    __proto__: null,\n    base8: Zr\n});\nconst Vr = ht({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar Yr = Object.freeze({\n    __proto__: null,\n    base10: Vr\n});\nconst Jr = k({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), Kr = k({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar Wr = Object.freeze({\n    __proto__: null,\n    base16: Jr,\n    base16upper: Kr\n});\nconst Xr = k({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), Pr = k({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), Qr = k({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), to = k({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), eo = k({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), no = k({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), ro = k({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), oo = k({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), so = k({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar io = Object.freeze({\n    __proto__: null,\n    base32: Xr,\n    base32upper: Pr,\n    base32pad: Qr,\n    base32padupper: to,\n    base32hex: eo,\n    base32hexupper: no,\n    base32hexpad: ro,\n    base32hexpadupper: oo,\n    base32z: so\n});\nconst uo = ht({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), co = ht({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar ao = Object.freeze({\n    __proto__: null,\n    base36: uo,\n    base36upper: co\n});\nconst fo = ht({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Do = ht({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar ho = Object.freeze({\n    __proto__: null,\n    base58btc: fo,\n    base58flickr: Do\n});\nconst lo = k({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), bo = k({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), po = k({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), wo = k({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar Eo = Object.freeze({\n    __proto__: null,\n    base64: lo,\n    base64pad: bo,\n    base64url: po,\n    base64urlpad: wo\n});\nconst Me = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), go = Me.reduce((t, e, n)=>(t[n] = e, t), []), yo = Me.reduce((t, e, n)=>(t[e.codePointAt(0)] = n, t), []);\nfunction xo(t) {\n    return t.reduce((e, n)=>(e += go[n], e), \"\");\n}\nfunction Bo(t) {\n    const e = [];\n    for (const n of t){\n        const r = yo[n.codePointAt(0)];\n        if (r === void 0) throw new Error(\"Non-base256emoji character: \".concat(n));\n        e.push(r);\n    }\n    return new Uint8Array(e);\n}\n_c28 = Bo;\nconst Co = Bt({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: xo,\n    decode: Bo\n});\nvar Ao = Object.freeze({\n    __proto__: null,\n    base256emoji: Co\n}), mo = $e, qe = 128, _o = 127, So = ~_o, vo = Math.pow(2, 31);\nfunction $e(t, e, n) {\n    e = e || [], n = n || 0;\n    for(var r = n; t >= vo;)e[n++] = t & 255 | qe, t /= 128;\n    for(; t & So;)e[n++] = t & 255 | qe, t >>>= 7;\n    return e[n] = t | 0, $e.bytes = n - r + 1, e;\n}\nvar Io = Pt, Uo = 128, ke = 127;\nfunction Pt(t, r) {\n    var n = 0, r = r || 0, o = 0, s = r, a, u = t.length;\n    do {\n        if (s >= u) throw Pt.bytes = 0, new RangeError(\"Could not decode varint\");\n        a = t[s++], n += o < 28 ? (a & ke) << o : (a & ke) * Math.pow(2, o), o += 7;\n    }while (a >= Uo);\n    return Pt.bytes = s - r, n;\n}\n_c29 = Pt;\nvar To = Math.pow(2, 7), Fo = Math.pow(2, 14), No = Math.pow(2, 21), Lo = Math.pow(2, 28), Oo = Math.pow(2, 35), Ho = Math.pow(2, 42), zo = Math.pow(2, 49), Mo = Math.pow(2, 56), qo = Math.pow(2, 63), $o = function(t) {\n    return t < To ? 1 : t < Fo ? 2 : t < No ? 3 : t < Lo ? 4 : t < Oo ? 5 : t < Ho ? 6 : t < zo ? 7 : t < Mo ? 8 : t < qo ? 9 : 10;\n}, ko = {\n    encode: mo,\n    decode: Io,\n    encodingLength: $o\n}, Re = ko;\nconst je = function(t, e) {\n    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    return Re.encode(t, e, n), e;\n}, Ze = (t)=>Re.encodingLength(t), Qt = (t, e)=>{\n    const n = e.byteLength, r = Ze(t), o = r + Ze(n), s = new Uint8Array(o + n);\n    return je(t, s, 0), je(n, s, r), s.set(e, o), new Ro(t, n, e, s);\n};\nclass Ro {\n    constructor(e, n, r, o){\n        this.code = e, this.size = n, this.digest = r, this.bytes = o;\n    }\n}\nconst Ge = (param)=>{\n    let { name: t, code: e, encode: n } = param;\n    return new jo(t, e, n);\n};\n_c30 = Ge;\nclass jo {\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const n = this.encode(e);\n            return n instanceof Uint8Array ? Qt(this.code, n) : n.then((r)=>Qt(this.code, r));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, n, r){\n        this.name = e, this.code = n, this.encode = r;\n    }\n}\nconst Ve = (t)=>async (e)=>new Uint8Array(await crypto.subtle.digest(t, e)), Zo = Ge({\n    name: \"sha2-256\",\n    code: 18,\n    encode: Ve(\"SHA-256\")\n}), Go = Ge({\n    name: \"sha2-512\",\n    code: 19,\n    encode: Ve(\"SHA-512\")\n});\nvar Vo = Object.freeze({\n    __proto__: null,\n    sha256: Zo,\n    sha512: Go\n});\nconst Ye = 0, Yo = \"identity\", Je = He, Jo = (t)=>Qt(Ye, Je(t)), Ko = {\n    code: Ye,\n    name: Yo,\n    encode: Je,\n    digest: Jo\n};\nvar Wo = Object.freeze({\n    __proto__: null,\n    identity: Ko\n});\nnew TextEncoder, new TextDecoder;\nconst Ke = {\n    ...kr,\n    ...jr,\n    ...Gr,\n    ...Yr,\n    ...Wr,\n    ...io,\n    ...ao,\n    ...ho,\n    ...Eo,\n    ...Ao\n};\n({\n    ...Vo,\n    ...Wo\n});\nfunction We(t, e, n, r) {\n    return {\n        name: t,\n        prefix: e,\n        encoder: {\n            name: t,\n            prefix: e,\n            encode: n\n        },\n        decoder: {\n            decode: r\n        }\n    };\n}\n_c31 = We;\nconst Xe = We(\"utf8\", \"u\", (t)=>\"u\" + new TextDecoder(\"utf8\").decode(t), (t)=>new TextEncoder().encode(t.substring(1))), te = We(\"ascii\", \"a\", (t)=>{\n    let e = \"a\";\n    for(let n = 0; n < t.length; n++)e += String.fromCharCode(t[n]);\n    return e;\n}, (t)=>{\n    t = t.substring(1);\n    const e = Le(t.length);\n    for(let n = 0; n < t.length; n++)e[n] = t.charCodeAt(n);\n    return e;\n}), Pe = {\n    utf8: Xe,\n    \"utf-8\": Xe,\n    hex: Ke.base16,\n    latin1: te,\n    ascii: te,\n    binary: te,\n    ...Ke\n};\nfunction ct(t) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n    const n = Pe[e];\n    if (!n) throw new Error('Unsupported encoding \"'.concat(e, '\"'));\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t.buffer, t.byteOffset, t.byteLength).toString(\"utf8\") : n.encoder.encode(t).substring(1);\n}\nfunction rt(t) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n    const n = Pe[e];\n    if (!n) throw new Error('Unsupported encoding \"'.concat(e, '\"'));\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t, \"utf-8\")) : n.decoder.decode(\"\".concat(n.prefix).concat(t));\n}\nfunction lt(t) {\n    return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonParse)(ct(rt(t, Dt), Gt));\n}\nfunction bt(t) {\n    return ct(rt((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)(t), Gt), Dt);\n}\nfunction Qe(t) {\n    const e = rt(Wt, dt), n = Kt + ct(Oe([\n        e,\n        t\n    ]), dt);\n    return [\n        Yt,\n        Jt,\n        n\n    ].join(Vt);\n}\n_c32 = Qe;\nfunction tn(t) {\n    const [e, n, r] = t.split(Vt);\n    if (e !== Yt || n !== Jt) throw new Error('Issuer must be a DID with method \"key\"');\n    if (r.slice(0, 1) !== Kt) throw new Error(\"Issuer must be a key in mulicodec format\");\n    const o = rt(r.slice(1), dt);\n    if (ct(o.slice(0, 2), dt) !== Wt) throw new Error('Issuer must be a public key with type \"Ed25519\"');\n    const s = o.slice(2);\n    if (s.length !== Fe) throw new Error(\"Issuer must be a public key with length 32 bytes\");\n    return s;\n}\nfunction en(t) {\n    return ct(t, Dt);\n}\nfunction nn(t) {\n    return rt(t, Dt);\n}\nfunction rn(t) {\n    return rt([\n        bt(t.header),\n        bt(t.payload)\n    ].join(ut), xt);\n}\nfunction Xo(t) {\n    const e = ct(t, xt).split(ut), n = lt(e[0]), r = lt(e[1]);\n    return {\n        header: n,\n        payload: r\n    };\n}\n_c33 = Xo;\nfunction on(t) {\n    return [\n        bt(t.header),\n        bt(t.payload),\n        en(t.signature)\n    ].join(ut);\n}\nfunction sn(t) {\n    const e = t.split(ut), n = lt(e[0]), r = lt(e[1]), o = nn(e[2]), s = rt(e.slice(0, 2).join(ut), xt);\n    return {\n        header: n,\n        payload: r,\n        signature: o,\n        data: s\n    };\n}\nfunction Po() {\n    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : he(Ne);\n    const e = Rt.getPublicKey(t);\n    return {\n        secretKey: Oe([\n            t,\n            e\n        ]),\n        publicKey: e\n    };\n}\n_c34 = Po;\nasync function Qo(t, e, n, r) {\n    let o = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.fromMiliseconds)(Date.now());\n    const s = {\n        alg: jt,\n        typ: Zt\n    }, a = Qe(r.publicKey), u = o + n, i = {\n        iss: a,\n        sub: t,\n        aud: e,\n        iat: o,\n        exp: u\n    }, D = rn({\n        header: s,\n        payload: i\n    }), c = Rt.sign(D, r.secretKey.slice(0, 32));\n    return on({\n        header: s,\n        payload: i,\n        signature: c\n    });\n}\n_c35 = Qo;\nasync function ts(t) {\n    const { header: e, payload: n, data: r, signature: o } = sn(t);\n    if (e.alg !== jt || e.typ !== Zt) throw new Error(\"JWT must use EdDSA algorithm\");\n    const s = tn(n.iss);\n    return Rt.verify(o, r, s);\n}\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35;\n$RefreshReg$(_c, \"En\");\n$RefreshReg$(_c1, \"De\");\n$RefreshReg$(_c2, \"Bn\");\n$RefreshReg$(_c3, \"Cn\");\n$RefreshReg$(_c4, \"Kn$Bn\");\n$RefreshReg$(_c5, \"Kn\");\n$RefreshReg$(_c6, \"It\");\n$RefreshReg$(_c7, \"Ut\");\n$RefreshReg$(_c8, \"Tt\");\n$RefreshReg$(_c9, \"Ft\");\n$RefreshReg$(_c10, \"Ee\");\n$RefreshReg$(_c11, \"Pn\");\n$RefreshReg$(_c12, \"Et\");\n$RefreshReg$(_c13, \"Nt\");\n$RefreshReg$(_c14, \"W\");\n$RefreshReg$(_c15, \"Lt\");\n$RefreshReg$(_c16, \"Qn\");\n$RefreshReg$(_c17, \"Ot\");\n$RefreshReg$(_c18, \"H\");\n$RefreshReg$(_c19, \"J\");\n$RefreshReg$(_c20, \"Ae\");\n$RefreshReg$(_c21, \"Dr\");\n$RefreshReg$(_c22, \"Mt\");\n$RefreshReg$(_c23, \"Ar\");\n$RefreshReg$(_c24, \"Xt\");\n$RefreshReg$(_c25, \"Le\");\n$RefreshReg$(_c26, \"Oe\");\n$RefreshReg$(_c27, \"Ir\");\n$RefreshReg$(_c28, \"Bo\");\n$RefreshReg$(_c29, \"Pt\");\n$RefreshReg$(_c30, \"Ge\");\n$RefreshReg$(_c31, \"We\");\n$RefreshReg$(_c32, \"Qe\");\n$RefreshReg$(_c33, \"Xo\");\n$RefreshReg$(_c34, \"Po\");\n$RefreshReg$(_c35, \"Qo\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/safe-json/dist/esm/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safeJsonParse: function() { return /* binding */ safeJsonParse; },\n/* harmony export */   safeJsonStringify: function() { return /* binding */ safeJsonStringify; }\n/* harmony export */ });\nconst JSONStringify = (data)=>JSON.stringify(data, (_, value)=>typeof value === \"bigint\" ? value.toString() + \"n\" : value);\n_c = JSONStringify;\nconst JSONParse = (json)=>{\n    const numbersBiggerThanMaxInt = /([\\[:])?(\\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\\}\\]])/g;\n    const serializedData = json.replace(numbersBiggerThanMaxInt, '$1\"$2n\"$3');\n    return JSON.parse(serializedData, (_, value)=>{\n        const isCustomFormatBigInt = typeof value === \"string\" && value.match(/^\\d+n$/);\n        if (isCustomFormatBigInt) return BigInt(value.substring(0, value.length - 1));\n        return value;\n    });\n};\n_c1 = JSONParse;\nfunction safeJsonParse(value) {\n    if (typeof value !== \"string\") {\n        throw new Error(\"Cannot safe json parse value of type \".concat(typeof value));\n    }\n    try {\n        return JSONParse(value);\n    } catch (_a) {\n        return value;\n    }\n}\nfunction safeJsonStringify(value) {\n    return typeof value === \"string\" ? value : JSONStringify(value) || \"\";\n} //# sourceMappingURL=index.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"JSONStringify\");\n$RefreshReg$(_c1, \"JSONParse\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zYWZlLWpzb24vZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFNQSxnQkFBZ0JDLENBQUFBLE9BQVFDLEtBQUtDLFNBQVMsQ0FBQ0YsTUFBTSxDQUFDRyxHQUFHQyxRQUFVLE9BQU9BLFVBQVUsV0FBV0EsTUFBTUMsUUFBUSxLQUFLLE1BQU1EO0tBQWhITDtBQUNOLE1BQU1PLFlBQVlDLENBQUFBO0lBQ2QsTUFBTUMsMEJBQTBCO0lBQ2hDLE1BQU1DLGlCQUFpQkYsS0FBS0csT0FBTyxDQUFDRix5QkFBeUI7SUFDN0QsT0FBT1AsS0FBS1UsS0FBSyxDQUFDRixnQkFBZ0IsQ0FBQ04sR0FBR0M7UUFDbEMsTUFBTVEsdUJBQXVCLE9BQU9SLFVBQVUsWUFBWUEsTUFBTVMsS0FBSyxDQUFDO1FBQ3RFLElBQUlELHNCQUNBLE9BQU9FLE9BQU9WLE1BQU1XLFNBQVMsQ0FBQyxHQUFHWCxNQUFNWSxNQUFNLEdBQUc7UUFDcEQsT0FBT1o7SUFDWDtBQUNKO01BVE1FO0FBVUMsU0FBU1csY0FBY2IsS0FBSztJQUMvQixJQUFJLE9BQU9BLFVBQVUsVUFBVTtRQUMzQixNQUFNLElBQUljLE1BQU0sd0NBQXFELE9BQWIsT0FBT2Q7SUFDbkU7SUFDQSxJQUFJO1FBQ0EsT0FBT0UsVUFBVUY7SUFDckIsRUFDQSxPQUFPZSxJQUFJO1FBQ1AsT0FBT2Y7SUFDWDtBQUNKO0FBQ08sU0FBU2dCLGtCQUFrQmhCLEtBQUs7SUFDbkMsT0FBTyxPQUFPQSxVQUFVLFdBQVdBLFFBQVFMLGNBQWNLLFVBQVU7QUFDdkUsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3NhZmUtanNvbi9kaXN0L2VzbS9pbmRleC5qcz9lMmQ5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEpTT05TdHJpbmdpZnkgPSBkYXRhID0+IEpTT04uc3RyaW5naWZ5KGRhdGEsIChfLCB2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiID8gdmFsdWUudG9TdHJpbmcoKSArIFwiblwiIDogdmFsdWUpO1xuY29uc3QgSlNPTlBhcnNlID0ganNvbiA9PiB7XG4gICAgY29uc3QgbnVtYmVyc0JpZ2dlclRoYW5NYXhJbnQgPSAvKFtcXFs6XSk/KFxcZHsxNyx9fCg/Ols5XSg/OlsxLTldMDcxOTkyNTQ3NDA5OTF8MFsxLTldNzE5OTI1NDc0MDk5MXwwMFs4LTldMTk5MjU0NzQwOTkxfDAwN1syLTldOTkyNTQ3NDA5OTF8MDA3MTk5WzMtOV01NDc0MDk5MXwwMDcxOTkyWzYtOV00NzQwOTkxfDAwNzE5OTI1WzUtOV03NDA5OTF8MDA3MTk5MjU0WzgtOV00MDk5MXwwMDcxOTkyNTQ3WzUtOV0wOTkxfDAwNzE5OTI1NDc0WzEtOV05OTF8MDA3MTk5MjU0NzQwOTlbMi05XSkpKShbLFxcfVxcXV0pL2c7XG4gICAgY29uc3Qgc2VyaWFsaXplZERhdGEgPSBqc29uLnJlcGxhY2UobnVtYmVyc0JpZ2dlclRoYW5NYXhJbnQsIFwiJDFcXFwiJDJuXFxcIiQzXCIpO1xuICAgIHJldHVybiBKU09OLnBhcnNlKHNlcmlhbGl6ZWREYXRhLCAoXywgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgaXNDdXN0b21Gb3JtYXRCaWdJbnQgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUubWF0Y2goL15cXGQrbiQvKTtcbiAgICAgICAgaWYgKGlzQ3VzdG9tRm9ybWF0QmlnSW50KVxuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZS5zdWJzdHJpbmcoMCwgdmFsdWUubGVuZ3RoIC0gMSkpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVKc29uUGFyc2UodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHNhZmUganNvbiBwYXJzZSB2YWx1ZSBvZiB0eXBlICR7dHlwZW9mIHZhbHVlfWApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTlBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2FmZUpzb25TdHJpbmdpZnkodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUgOiBKU09OU3RyaW5naWZ5KHZhbHVlKSB8fCBcIlwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkpTT05TdHJpbmdpZnkiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsIl8iLCJ2YWx1ZSIsInRvU3RyaW5nIiwiSlNPTlBhcnNlIiwianNvbiIsIm51bWJlcnNCaWdnZXJUaGFuTWF4SW50Iiwic2VyaWFsaXplZERhdGEiLCJyZXBsYWNlIiwicGFyc2UiLCJpc0N1c3RvbUZvcm1hdEJpZ0ludCIsIm1hdGNoIiwiQmlnSW50Iiwic3Vic3RyaW5nIiwibGVuZ3RoIiwic2FmZUpzb25QYXJzZSIsIkVycm9yIiwiX2EiLCJzYWZlSnNvblN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/sign-client/dist/index.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/sign-client/dist/index.es.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTH_CONTEXT: function() { return /* binding */ wt; },\n/* harmony export */   AUTH_KEYS_CONTEXT: function() { return /* binding */ mt; },\n/* harmony export */   AUTH_PAIRING_TOPIC_CONTEXT: function() { return /* binding */ _t; },\n/* harmony export */   AUTH_PROTOCOL: function() { return /* binding */ yt; },\n/* harmony export */   AUTH_PUBLIC_KEY_NAME: function() { return /* binding */ le; },\n/* harmony export */   AUTH_REQUEST_CONTEXT: function() { return /* binding */ Et; },\n/* harmony export */   AUTH_STORAGE_PREFIX: function() { return /* binding */ ce; },\n/* harmony export */   AUTH_VERSION: function() { return /* binding */ Ss; },\n/* harmony export */   ENGINE_CONTEXT: function() { return /* binding */ dt; },\n/* harmony export */   ENGINE_QUEUE_STATES: function() { return /* binding */ $; },\n/* harmony export */   ENGINE_RPC_OPTS: function() { return /* binding */ N; },\n/* harmony export */   HISTORY_CONTEXT: function() { return /* binding */ ms; },\n/* harmony export */   HISTORY_EVENTS: function() { return /* binding */ ws; },\n/* harmony export */   HISTORY_STORAGE_VERSION: function() { return /* binding */ _s; },\n/* harmony export */   METHODS_TO_VERIFY: function() { return /* binding */ gt; },\n/* harmony export */   PROPOSAL_CONTEXT: function() { return /* binding */ pt; },\n/* harmony export */   PROPOSAL_EXPIRY: function() { return /* binding */ Es; },\n/* harmony export */   PROPOSAL_EXPIRY_MESSAGE: function() { return /* binding */ $e; },\n/* harmony export */   REQUEST_CONTEXT: function() { return /* binding */ ut; },\n/* harmony export */   SESSION_CONTEXT: function() { return /* binding */ ht; },\n/* harmony export */   SESSION_EXPIRY: function() { return /* binding */ Y; },\n/* harmony export */   SESSION_REQUEST_EXPIRY_BOUNDARIES: function() { return /* binding */ Ee; },\n/* harmony export */   SIGN_CLIENT_CONTEXT: function() { return /* binding */ Me; },\n/* harmony export */   SIGN_CLIENT_DEFAULT: function() { return /* binding */ _e; },\n/* harmony export */   SIGN_CLIENT_EVENTS: function() { return /* binding */ gs; },\n/* harmony export */   SIGN_CLIENT_PROTOCOL: function() { return /* binding */ De; },\n/* harmony export */   SIGN_CLIENT_STORAGE_OPTIONS: function() { return /* binding */ ys; },\n/* harmony export */   SIGN_CLIENT_STORAGE_PREFIX: function() { return /* binding */ me; },\n/* harmony export */   SIGN_CLIENT_VERSION: function() { return /* binding */ Le; },\n/* harmony export */   SessionStore: function() { return /* binding */ Ms; },\n/* harmony export */   SignClient: function() { return /* binding */ ks; },\n/* harmony export */   TVF_METHODS: function() { return /* binding */ Ke; },\n/* harmony export */   WALLETCONNECT_DEEPLINK_CHOICE: function() { return /* binding */ ke; },\n/* harmony export */   \"default\": function() { return /* binding */ Se; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/core */ \"(app-pages-browser)/./node_modules/@walletconnect/core/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/types */ \"(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\n\n\n\nconst De = \"wc\", Le = 2, Me = \"client\", me = \"\".concat(De, \"@\").concat(Le, \":\").concat(Me, \":\"), _e = {\n    name: Me,\n    logger: \"error\",\n    controller: !1,\n    relayUrl: \"wss://relay.walletconnect.org\"\n}, gs = {\n    session_proposal: \"session_proposal\",\n    session_update: \"session_update\",\n    session_extend: \"session_extend\",\n    session_ping: \"session_ping\",\n    session_delete: \"session_delete\",\n    session_expire: \"session_expire\",\n    session_request: \"session_request\",\n    session_request_sent: \"session_request_sent\",\n    session_event: \"session_event\",\n    proposal_expire: \"proposal_expire\",\n    session_authenticate: \"session_authenticate\",\n    session_request_expire: \"session_request_expire\",\n    session_connect: \"session_connect\"\n}, ys = {\n    database: \":memory:\"\n}, ke = \"WALLETCONNECT_DEEPLINK_CHOICE\", ws = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, ms = \"history\", _s = \"0.3\", pt = \"proposal\", Es = _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.THIRTY_DAYS, $e = \"Proposal expired\", ht = \"session\", Y = _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.SEVEN_DAYS, dt = \"engine\", N = {\n    wc_sessionPropose: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1100\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1101\n        },\n        reject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1120\n        },\n        autoReject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1121\n        }\n    },\n    wc_sessionSettle: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1102\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1103\n        }\n    },\n    wc_sessionUpdate: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1104\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1105\n        }\n    },\n    wc_sessionExtend: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1106\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1107\n        }\n    },\n    wc_sessionRequest: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1108\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1109\n        }\n    },\n    wc_sessionEvent: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1110\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1111\n        }\n    },\n    wc_sessionDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1112\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1113\n        }\n    },\n    wc_sessionPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1114\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1115\n        }\n    },\n    wc_sessionAuthenticate: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_HOUR,\n            prompt: !0,\n            tag: 1116\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_HOUR,\n            prompt: !1,\n            tag: 1117\n        },\n        reject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1118\n        },\n        autoReject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1119\n        }\n    }\n}, Ee = {\n    min: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n    max: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.SEVEN_DAYS\n}, $ = {\n    idle: \"IDLE\",\n    active: \"ACTIVE\"\n}, Ke = {\n    eth_sendTransaction: {\n        key: \"\"\n    },\n    eth_sendRawTransaction: {\n        key: \"\"\n    },\n    wallet_sendCalls: {\n        key: \"\"\n    },\n    solana_signTransaction: {\n        key: \"signature\"\n    },\n    solana_signAllTransactions: {\n        key: \"transactions\"\n    },\n    solana_signAndSendTransaction: {\n        key: \"signature\"\n    }\n}, ut = \"request\", gt = [\n    \"wc_sessionPropose\",\n    \"wc_sessionRequest\",\n    \"wc_authRequest\",\n    \"wc_sessionAuthenticate\"\n], yt = \"wc\", Ss = 1.5, wt = \"auth\", mt = \"authKeys\", _t = \"pairingTopics\", Et = \"requests\", ce = \"\".concat(yt, \"@\", 1.5, \":\").concat(wt, \":\"), le = \"\".concat(ce, \":PUB_KEY\");\nvar Rs = Object.defineProperty, fs = Object.defineProperties, Is = Object.getOwnPropertyDescriptors, St = Object.getOwnPropertySymbols, vs = Object.prototype.hasOwnProperty, qs = Object.prototype.propertyIsEnumerable, Ue = (S, n, e)=>n in S ? Rs(S, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : S[n] = e, v = (S, n)=>{\n    for(var e in n || (n = {}))vs.call(n, e) && Ue(S, e, n[e]);\n    if (St) for (var e of St(n))qs.call(n, e) && Ue(S, e, n[e]);\n    return S;\n}, x = (S, n)=>fs(S, Is(n)), c = (S, n, e)=>Ue(S, typeof n != \"symbol\" ? n + \"\" : n, e);\nclass Ts extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.IEngine {\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(n);\n        }\n    }\n    async confirmOnlineStateOrThrow() {\n        await this.client.core.relayer.confirmOnlineStateOrThrow();\n    }\n    registerRelayerEvents() {\n        this.client.core.relayer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.message, (n)=>{\n            !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(n) : this.onRelayMessage(n);\n        });\n    }\n    async onRelayMessage(n) {\n        const { topic: e, message: t, attestation: s, transportType: i } = n, { publicKey: r } = this.client.auth.authKeys.keys.includes(le) ? this.client.auth.authKeys.get(le) : {\n            responseTopic: void 0,\n            publicKey: void 0\n        }, o = await this.client.core.crypto.decode(e, t, {\n            receiverPublicKey: r,\n            encoding: i === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64\n        });\n        try {\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcRequest)(o) ? (this.client.core.history.set(e, o), this.onRelayEventRequest({\n                topic: e,\n                payload: o,\n                attestation: s,\n                transportType: i,\n                encryptedId: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(t)\n            })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResponse)(o) ? (await this.client.core.history.resolve(o), await this.onRelayEventResponse({\n                topic: e,\n                payload: o,\n                transportType: i\n            }), this.client.core.history.delete(e, o.id)) : this.onRelayEventUnknownPayload({\n                topic: e,\n                payload: o,\n                transportType: i\n            });\n        } catch (a) {\n            this.client.logger.error(a);\n        }\n    }\n    registerExpirerEvents() {\n        this.client.core.expirer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EXPIRER_EVENTS.expired, async (n)=>{\n            const { topic: e, id: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseExpirerTarget)(n.target);\n            if (t && this.client.pendingRequest.keys.includes(t)) return await this.deletePendingSessionRequest(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\"), !0);\n            if (t && this.client.auth.requests.keys.includes(t)) return await this.deletePendingAuthRequest(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\"), !0);\n            e ? this.client.session.keys.includes(e) && (await this.deleteSession({\n                topic: e,\n                expirerHasDeleted: !0\n            }), this.client.events.emit(\"session_expire\", {\n                topic: e\n            })) : t && (await this.deleteProposal(t, !0), this.client.events.emit(\"proposal_expire\", {\n                id: t\n            }));\n        });\n    }\n    registerPairingEvents() {\n        this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.PAIRING_EVENTS.create, (n)=>this.onPairingCreated(n)), this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.PAIRING_EVENTS.delete, (n)=>{\n            this.addToRecentlyDeleted(n.topic, \"pairing\");\n        });\n    }\n    isValidPairingTopic(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"pairing topic should be a string: \".concat(n));\n            throw new Error(e);\n        }\n        if (!this.client.core.pairing.pairings.keys.includes(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"pairing topic doesn't exist: \".concat(n));\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.core.pairing.pairings.get(n).expiry)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"pairing topic: \".concat(n));\n            throw new Error(e);\n        }\n    }\n    async isValidSessionTopic(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"session topic should be a string: \".concat(n));\n            throw new Error(e);\n        }\n        if (this.checkRecentlyDeleted(n), !this.client.session.keys.includes(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"session topic doesn't exist: \".concat(n));\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.session.get(n).expiry)) {\n            await this.deleteSession({\n                topic: n\n            });\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"session topic: \".concat(n));\n            throw new Error(e);\n        }\n        if (!this.client.core.crypto.keychain.has(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"session topic does not exist in keychain: \".concat(n));\n            throw await this.deleteSession({\n                topic: n\n            }), new Error(e);\n        }\n    }\n    async isValidSessionOrPairingTopic(n) {\n        if (this.checkRecentlyDeleted(n), this.client.session.keys.includes(n)) await this.isValidSessionTopic(n);\n        else if (this.client.core.pairing.pairings.keys.includes(n)) this.isValidPairingTopic(n);\n        else if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"session or pairing topic doesn't exist: \".concat(n));\n            throw new Error(e);\n        } else {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"session or pairing topic should be a string: \".concat(n));\n            throw new Error(e);\n        }\n    }\n    async isValidProposalId(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidId)(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"proposal id should be a number: \".concat(n));\n            throw new Error(e);\n        }\n        if (!this.client.proposal.keys.includes(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"proposal id doesn't exist: \".concat(n));\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.proposal.get(n).expiryTimestamp)) {\n            await this.deleteProposal(n);\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"proposal id: \".concat(n));\n            throw new Error(e);\n        }\n    }\n    constructor(n){\n        var _this;\n        super(n), _this = this, c(this, \"name\", dt), c(this, \"events\", new (events__WEBPACK_IMPORTED_MODULE_2___default())), c(this, \"initialized\", !1), c(this, \"requestQueue\", {\n            state: $.idle,\n            queue: []\n        }), c(this, \"sessionRequestQueue\", {\n            state: $.idle,\n            queue: []\n        }), c(this, \"requestQueueDelay\", _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_SECOND), c(this, \"expectedPairingMethodMap\", new Map), c(this, \"recentlyDeletedMap\", new Map), c(this, \"recentlyDeletedLimit\", 200), c(this, \"relayMessageCache\", []), c(this, \"pendingSessions\", new Map), c(this, \"init\", async ()=>{\n            this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({\n                methods: Object.keys(N)\n            }), this.initialized = !0, setTimeout(()=>{\n                this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(this.requestQueueDelay)));\n        }), c(this, \"connect\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            const t = x(v({}, e), {\n                requiredNamespaces: e.requiredNamespaces || {},\n                optionalNamespaces: e.optionalNamespaces || {}\n            });\n            await this.isValidConnect(t);\n            const { pairingTopic: s, requiredNamespaces: i, optionalNamespaces: r, sessionProperties: o, relays: a } = t;\n            let l = s, u, g = !1;\n            try {\n                if (l) {\n                    const R = this.client.core.pairing.pairings.get(l);\n                    this.client.logger.warn(\"connect() with existing pairing topic is deprecated and will be removed in the next major release.\"), g = R.active;\n                }\n            } catch (R) {\n                throw this.client.logger.error(\"connect() -> pairing.get(\".concat(l, \") failed\")), R;\n            }\n            if (!l || !g) {\n                const { topic: R, uri: D } = await this.client.core.pairing.create();\n                l = R, u = D;\n            }\n            if (!l) {\n                const { message: R } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"connect() pairing topic: \".concat(l));\n                throw new Error(R);\n            }\n            const h = await this.client.core.crypto.generateKeyPair(), d = N.wc_sessionPropose.req.ttl || _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES, y = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(d), m = x(v({\n                requiredNamespaces: i,\n                optionalNamespaces: r,\n                relays: a !== null && a !== void 0 ? a : [\n                    {\n                        protocol: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_DEFAULT_PROTOCOL\n                    }\n                ],\n                proposer: {\n                    publicKey: h,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: y,\n                pairingTopic: l\n            }, o && {\n                sessionProperties: o\n            }), {\n                id: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)()\n            }), I = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", m.id), { reject: p, resolve: E, done: V } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(d, $e), q = (param)=>{\n                let { id: R } = param;\n                R === m.id && (this.client.events.off(\"proposal_expire\", q), this.pendingSessions.delete(m.id), this.events.emit(I, {\n                    error: {\n                        message: $e,\n                        code: 0\n                    }\n                }));\n            };\n            return this.client.events.on(\"proposal_expire\", q), this.events.once(I, (param)=>{\n                let { error: R, session: D } = param;\n                this.client.events.off(\"proposal_expire\", q), R ? p(R) : D && E(D);\n            }), await this.sendRequest({\n                topic: l,\n                method: \"wc_sessionPropose\",\n                params: m,\n                throwOnFailedPublish: !0,\n                clientRpcId: m.id\n            }), await this.setProposal(m.id, m), {\n                uri: u,\n                approval: V\n            };\n        }), c(this, \"pair\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                return await this.client.core.pairing.pair(e);\n            } catch (t) {\n                throw this.client.logger.error(\"pair() failed\"), t;\n            }\n        }), c(this, \"approve\", async (e)=>{\n            var t, s, i;\n            const r = this.client.core.eventClient.createEvent({\n                properties: {\n                    topic: (t = e === null || e === void 0 ? void 0 : e.id) == null ? void 0 : t.toString(),\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started\n                    ]\n                }\n            });\n            try {\n                this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            } catch (P) {\n                throw r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.no_internet_connection), P;\n            }\n            try {\n                await this.isValidProposalId(e === null || e === void 0 ? void 0 : e.id);\n            } catch (P) {\n                throw this.client.logger.error(\"approve() -> proposal.get(\".concat(e === null || e === void 0 ? void 0 : e.id, \") failed\")), r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.proposal_not_found), P;\n            }\n            try {\n                await this.isValidApprove(e);\n            } catch (P) {\n                throw this.client.logger.error(\"approve() -> isValidApprove() failed\"), r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure), P;\n            }\n            const { id: o, relayProtocol: a, namespaces: l, sessionProperties: u, sessionConfig: g } = e, h = this.client.proposal.get(o);\n            this.client.core.eventClient.deleteEvent({\n                eventId: r.eventId\n            });\n            const { pairingTopic: d, proposer: y, requiredNamespaces: m, optionalNamespaces: I } = h;\n            let p = (s = this.client.core.eventClient) == null ? void 0 : s.getEvent({\n                topic: d\n            });\n            p || (p = (i = this.client.core.eventClient) == null ? void 0 : i.createEvent({\n                type: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n                properties: {\n                    topic: d,\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success\n                    ]\n                }\n            }));\n            const E = await this.client.core.crypto.generateKeyPair(), V = y.publicKey, q = await this.client.core.crypto.generateSharedKey(E, V), R = v(v({\n                relay: {\n                    protocol: a !== null && a !== void 0 ? a : \"irn\"\n                },\n                namespaces: l,\n                controller: {\n                    publicKey: E,\n                    metadata: this.client.metadata\n                },\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y)\n            }, u && {\n                sessionProperties: u\n            }), g && {\n                sessionConfig: g\n            }), D = _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay;\n            p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n            try {\n                await this.client.core.relayer.subscribe(q, {\n                    transportType: D\n                });\n            } catch (P) {\n                throw p.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure), P;\n            }\n            p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n            const ee = x(v({}, R), {\n                topic: q,\n                requiredNamespaces: m,\n                optionalNamespaces: I,\n                pairingTopic: d,\n                acknowledged: !1,\n                self: R.controller,\n                peer: {\n                    publicKey: y.publicKey,\n                    metadata: y.metadata\n                },\n                controller: E,\n                transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay\n            });\n            await this.client.session.set(q, ee), p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.store_session);\n            try {\n                p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.publishing_session_settle), await this.sendRequest({\n                    topic: q,\n                    method: \"wc_sessionSettle\",\n                    params: R,\n                    throwOnFailedPublish: !0\n                }).catch((P)=>{\n                    throw p === null || p === void 0 ? void 0 : p.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure), P;\n                }), p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success), p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.publishing_session_approve), await this.sendResult({\n                    id: o,\n                    topic: d,\n                    result: {\n                        relay: {\n                            protocol: a !== null && a !== void 0 ? a : \"irn\"\n                        },\n                        responderPublicKey: E\n                    },\n                    throwOnFailedPublish: !0\n                }).catch((P)=>{\n                    throw p === null || p === void 0 ? void 0 : p.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure), P;\n                }), p.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n            } catch (P) {\n                throw this.client.logger.error(P), this.client.session.delete(q, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), await this.client.core.relayer.unsubscribe(q), P;\n            }\n            return this.client.core.eventClient.deleteEvent({\n                eventId: p.eventId\n            }), await this.client.core.pairing.updateMetadata({\n                topic: d,\n                metadata: y.metadata\n            }), await this.client.proposal.delete(o, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), await this.client.core.pairing.activate({\n                topic: d\n            }), await this.setExpiry(q, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y)), {\n                topic: q,\n                acknowledged: ()=>Promise.resolve(this.client.session.get(q))\n            };\n        }), c(this, \"reject\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidReject(e);\n            } catch (r) {\n                throw this.client.logger.error(\"reject() -> isValidReject() failed\"), r;\n            }\n            const { id: t, reason: s } = e;\n            let i;\n            try {\n                i = this.client.proposal.get(t).pairingTopic;\n            } catch (r) {\n                throw this.client.logger.error(\"reject() -> proposal.get(\".concat(t, \") failed\")), r;\n            }\n            i && (await this.sendError({\n                id: t,\n                topic: i,\n                error: s,\n                rpcOpts: N.wc_sessionPropose.reject\n            }), await this.client.proposal.delete(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")));\n        }), c(this, \"update\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidUpdate(e);\n            } catch (g) {\n                throw this.client.logger.error(\"update() -> isValidUpdate() failed\"), g;\n            }\n            const { topic: t, namespaces: s } = e, { done: i, resolve: r, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(), a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), u = this.client.session.get(t).namespaces;\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", a), (param)=>{\n                let { error: g } = param;\n                g ? o(g) : r();\n            }), await this.client.session.update(t, {\n                namespaces: s\n            }), await this.sendRequest({\n                topic: t,\n                method: \"wc_sessionUpdate\",\n                params: {\n                    namespaces: s\n                },\n                throwOnFailedPublish: !0,\n                clientRpcId: a,\n                relayRpcId: l\n            }).catch((g)=>{\n                this.client.logger.error(g), this.client.session.update(t, {\n                    namespaces: u\n                }), o(g);\n            }), {\n                acknowledged: i\n            };\n        }), c(this, \"extend\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidExtend(e);\n            } catch (a) {\n                throw this.client.logger.error(\"extend() -> isValidExtend() failed\"), a;\n            }\n            const { topic: t } = e, s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), { done: i, resolve: r, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), (param)=>{\n                let { error: a } = param;\n                a ? o(a) : r();\n            }), await this.setExpiry(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y)), this.sendRequest({\n                topic: t,\n                method: \"wc_sessionExtend\",\n                params: {},\n                clientRpcId: s,\n                throwOnFailedPublish: !0\n            }).catch((a)=>{\n                o(a);\n            }), {\n                acknowledged: i\n            };\n        }), c(this, \"request\", async (e)=>{\n            this.isInitialized();\n            try {\n                await this.isValidRequest(e);\n            } catch (p) {\n                throw this.client.logger.error(\"request() -> isValidRequest() failed\"), p;\n            }\n            const { chainId: t, request: s, topic: i, expiry: r = N.wc_sessionRequest.req.ttl } = e, o = this.client.session.get(i);\n            (o === null || o === void 0 ? void 0 : o.transportType) === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), { done: u, resolve: g, reject: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(r, \"Request expired. Please try again.\");\n            this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", a), (param)=>{\n                let { error: p, result: E } = param;\n                p ? h(p) : g(E);\n            });\n            const d = \"wc_sessionRequest\", y = this.getAppLinkIfEnabled(o.peer.metadata, o.transportType);\n            if (y) return await this.sendRequest({\n                clientRpcId: a,\n                relayRpcId: l,\n                topic: i,\n                method: d,\n                params: {\n                    request: x(v({}, s), {\n                        expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(r)\n                    }),\n                    chainId: t\n                },\n                expiry: r,\n                throwOnFailedPublish: !0,\n                appLink: y\n            }).catch((p)=>h(p)), this.client.events.emit(\"session_request_sent\", {\n                topic: i,\n                request: s,\n                chainId: t,\n                id: a\n            }), await u();\n            const m = {\n                request: x(v({}, s), {\n                    expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(r)\n                }),\n                chainId: t\n            }, I = this.shouldSetTVF(d, m);\n            return await Promise.all([\n                new Promise(async (p)=>{\n                    await this.sendRequest(v({\n                        clientRpcId: a,\n                        relayRpcId: l,\n                        topic: i,\n                        method: d,\n                        params: m,\n                        expiry: r,\n                        throwOnFailedPublish: !0\n                    }, I && {\n                        tvf: this.getTVFParams(a, m)\n                    })).catch((E)=>h(E)), this.client.events.emit(\"session_request_sent\", {\n                        topic: i,\n                        request: s,\n                        chainId: t,\n                        id: a\n                    }), p();\n                }),\n                new Promise(async (p)=>{\n                    var E;\n                    if (!((E = o.sessionConfig) != null && E.disableDeepLink)) {\n                        const V = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDeepLink)(this.client.core.storage, ke);\n                        await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.handleDeeplinkRedirect)({\n                            id: a,\n                            topic: i,\n                            wcDeepLink: V\n                        });\n                    }\n                    p();\n                }),\n                u()\n            ]).then((p)=>p[2]);\n        }), c(this, \"respond\", async (e)=>{\n            this.isInitialized(), await this.isValidRespond(e);\n            const { topic: t, response: s } = e, { id: i } = s, r = this.client.session.get(t);\n            r.transportType === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const o = this.getAppLinkIfEnabled(r.peer.metadata, r.transportType);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(s) ? await this.sendResult({\n                id: i,\n                topic: t,\n                result: s.result,\n                throwOnFailedPublish: !0,\n                appLink: o\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(s) && await this.sendError({\n                id: i,\n                topic: t,\n                error: s.error,\n                appLink: o\n            }), this.cleanupAfterResponse(e);\n        }), c(this, \"ping\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidPing(e);\n            } catch (s) {\n                throw this.client.logger.error(\"ping() -> isValidPing() failed\"), s;\n            }\n            const { topic: t } = e;\n            if (this.client.session.keys.includes(t)) {\n                const s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), i = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), { done: r, resolve: o, reject: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), (param)=>{\n                    let { error: l } = param;\n                    l ? a(l) : o();\n                }), await Promise.all([\n                    this.sendRequest({\n                        topic: t,\n                        method: \"wc_sessionPing\",\n                        params: {},\n                        throwOnFailedPublish: !0,\n                        clientRpcId: s,\n                        relayRpcId: i\n                    }),\n                    r()\n                ]);\n            } else this.client.core.pairing.pairings.keys.includes(t) && (this.client.logger.warn(\"ping() on pairing topic is deprecated and will be removed in the next major release.\"), await this.client.core.pairing.ping({\n                topic: t\n            }));\n        }), c(this, \"emit\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e);\n            const { topic: t, event: s, chainId: i } = e, r = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)();\n            await this.sendRequest({\n                topic: t,\n                method: \"wc_sessionEvent\",\n                params: {\n                    event: s,\n                    chainId: i\n                },\n                throwOnFailedPublish: !0,\n                relayRpcId: r,\n                clientRpcId: o\n            });\n        }), c(this, \"disconnect\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e);\n            const { topic: t } = e;\n            if (this.client.session.keys.includes(t)) await this.sendRequest({\n                topic: t,\n                method: \"wc_sessionDelete\",\n                params: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"),\n                throwOnFailedPublish: !0\n            }), await this.deleteSession({\n                topic: t,\n                emitEvent: !1\n            });\n            else if (this.client.core.pairing.pairings.keys.includes(t)) await this.client.core.pairing.disconnect({\n                topic: t\n            });\n            else {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISMATCHED_TOPIC\", \"Session or pairing topic not found: \".concat(t));\n                throw new Error(s);\n            }\n        }), c(this, \"find\", (e)=>(this.isInitialized(), this.client.session.getAll().filter((t)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isSessionCompatible)(t, e)))), c(this, \"getPendingSessionRequests\", ()=>this.client.pendingRequest.getAll()), c(this, \"authenticate\", async (e, t)=>{\n            var s;\n            this.isInitialized(), this.isValidAuthenticate(e);\n            const i = t && this.client.core.linkModeSupportedApps.includes(t) && ((s = this.client.metadata.redirect) == null ? void 0 : s.linkMode), r = i ? _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode : _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay;\n            r === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const { chains: o, statement: a = \"\", uri: l, domain: u, nonce: g, type: h, exp: d, nbf: y, methods: m = [], expiry: I } = e, p = [\n                ...e.resources || []\n            ], { topic: E, uri: V } = await this.client.core.pairing.create({\n                methods: [\n                    \"wc_sessionAuthenticate\"\n                ],\n                transportType: r\n            });\n            this.client.logger.info({\n                message: \"Generated new pairing\",\n                pairing: {\n                    topic: E,\n                    uri: V\n                }\n            });\n            const q = await this.client.core.crypto.generateKeyPair(), R = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(q);\n            if (await Promise.all([\n                this.client.auth.authKeys.set(le, {\n                    responseTopic: R,\n                    publicKey: q\n                }),\n                this.client.auth.pairingTopics.set(R, {\n                    topic: R,\n                    pairingTopic: E\n                })\n            ]), await this.client.core.relayer.subscribe(R, {\n                transportType: r\n            }), this.client.logger.info(\"sending request to new pairing topic: \".concat(E)), m.length > 0) {\n                const { namespace: b } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(o[0]);\n                let L = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createEncodedRecap)(b, \"request\", m);\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(p) && (L = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeEncodedRecaps)(L, p.pop())), p.push(L);\n            }\n            const D = I && I > N.wc_sessionAuthenticate.req.ttl ? I : N.wc_sessionAuthenticate.req.ttl, ee = {\n                authPayload: {\n                    type: h !== null && h !== void 0 ? h : \"caip122\",\n                    chains: o,\n                    statement: a,\n                    aud: l,\n                    domain: u,\n                    version: \"1\",\n                    nonce: g,\n                    iat: new Date().toISOString(),\n                    exp: d,\n                    nbf: y,\n                    resources: p\n                },\n                requester: {\n                    publicKey: q,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(D)\n            }, P = {\n                eip155: {\n                    chains: o,\n                    methods: [\n                        ...new Set([\n                            \"personal_sign\",\n                            ...m\n                        ])\n                    ],\n                    events: [\n                        \"chainChanged\",\n                        \"accountsChanged\"\n                    ]\n                }\n            }, X = {\n                requiredNamespaces: {},\n                optionalNamespaces: P,\n                relays: [\n                    {\n                        protocol: \"irn\"\n                    }\n                ],\n                pairingTopic: E,\n                proposer: {\n                    publicKey: q,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionPropose.req.ttl),\n                id: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)()\n            }, { done: ft, resolve: Fe, reject: Re } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(D, \"Request expired\"), te = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), pe = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", X.id), fe = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", te), he = async (param)=>{\n                let { error: b, session: L } = param;\n                this.events.off(fe, Ie), b ? Re(b) : L && Fe({\n                    session: L\n                });\n            }, Ie = async (b)=>{\n                var L, je, Qe;\n                if (await this.deletePendingAuthRequest(te, {\n                    message: \"fulfilled\",\n                    code: 0\n                }), b.error) {\n                    const ie = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n                    return b.error.code === ie.code ? void 0 : (this.events.off(pe, he), Re(b.error.message));\n                }\n                await this.deleteProposal(X.id), this.events.off(pe, he);\n                const { cacaos: He, responder: Q } = b.result, qe = [], ze = [];\n                for (const ie of He){\n                    await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.validateSignedCacao)({\n                        cacao: ie,\n                        projectId: this.client.core.projectId\n                    }) || (this.client.logger.error(ie, \"Signature verification failed\"), Re((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\")));\n                    const { p: Te } = ie, Ne = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(Te.resources), Ye = [\n                        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getNamespacedDidChainId)(Te.iss)\n                    ], It = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDidAddress)(Te.iss);\n                    if (Ne) {\n                        const Pe = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getMethodsFromRecap)(Ne), vt = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getChainsFromRecap)(Ne);\n                        qe.push(...Pe), Ye.push(...vt);\n                    }\n                    for (const Pe of Ye)ze.push(\"\".concat(Pe, \":\").concat(It));\n                }\n                const se = await this.client.core.crypto.generateSharedKey(q, Q.publicKey);\n                let de;\n                qe.length > 0 && (de = {\n                    topic: se,\n                    acknowledged: !0,\n                    self: {\n                        publicKey: q,\n                        metadata: this.client.metadata\n                    },\n                    peer: Q,\n                    controller: Q.publicKey,\n                    expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y),\n                    requiredNamespaces: {},\n                    optionalNamespaces: {},\n                    relay: {\n                        protocol: \"irn\"\n                    },\n                    pairingTopic: E,\n                    namespaces: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.buildNamespacesFromAuth)([\n                        ...new Set(qe)\n                    ], [\n                        ...new Set(ze)\n                    ]),\n                    transportType: r\n                }, await this.client.core.relayer.subscribe(se, {\n                    transportType: r\n                }), await this.client.session.set(se, de), E && await this.client.core.pairing.updateMetadata({\n                    topic: E,\n                    metadata: Q.metadata\n                }), de = this.client.session.get(se)), (L = this.client.metadata.redirect) != null && L.linkMode && (je = Q.metadata.redirect) != null && je.linkMode && (Qe = Q.metadata.redirect) != null && Qe.universal && t && (this.client.core.addLinkModeSupportedApp(Q.metadata.redirect.universal), this.client.session.update(se, {\n                    transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode\n                })), Fe({\n                    auths: He,\n                    session: de\n                });\n            };\n            this.events.once(pe, he), this.events.once(fe, Ie);\n            let ve;\n            try {\n                if (i) {\n                    const b = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionAuthenticate\", ee, te);\n                    this.client.core.history.set(E, b);\n                    const L = await this.client.core.crypto.encode(\"\", b, {\n                        type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_2,\n                        encoding: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL\n                    });\n                    ve = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(t, E, L);\n                } else await Promise.all([\n                    this.sendRequest({\n                        topic: E,\n                        method: \"wc_sessionAuthenticate\",\n                        params: ee,\n                        expiry: e.expiry,\n                        throwOnFailedPublish: !0,\n                        clientRpcId: te\n                    }),\n                    this.sendRequest({\n                        topic: E,\n                        method: \"wc_sessionPropose\",\n                        params: X,\n                        expiry: N.wc_sessionPropose.req.ttl,\n                        throwOnFailedPublish: !0,\n                        clientRpcId: X.id\n                    })\n                ]);\n            } catch (b) {\n                throw this.events.off(pe, he), this.events.off(fe, Ie), b;\n            }\n            return await this.setProposal(X.id, X), await this.setAuthRequest(te, {\n                request: x(v({}, ee), {\n                    verifyContext: {}\n                }),\n                pairingTopic: E,\n                transportType: r\n            }), {\n                uri: ve !== null && ve !== void 0 ? ve : V,\n                response: ft\n            };\n        }), c(this, \"approveSessionAuthenticate\", async (e)=>{\n            const { id: t, auths: s } = e, i = this.client.core.eventClient.createEvent({\n                properties: {\n                    topic: t.toString(),\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started\n                    ]\n                }\n            });\n            try {\n                this.isInitialized();\n            } catch (I) {\n                throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection), I;\n            }\n            const r = this.getPendingAuthRequest(t);\n            if (!r) throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found), new Error(\"Could not find pending auth request with id \".concat(t));\n            const o = r.transportType || _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay;\n            o === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const a = r.requester.publicKey, l = await this.client.core.crypto.generateKeyPair(), u = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(a), g = {\n                type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                receiverPublicKey: a,\n                senderPublicKey: l\n            }, h = [], d = [];\n            for (const I of s){\n                if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.validateSignedCacao)({\n                    cacao: I,\n                    projectId: this.client.core.projectId\n                })) {\n                    i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n                    const R = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\");\n                    throw await this.sendError({\n                        id: t,\n                        topic: u,\n                        error: R,\n                        encodeOpts: g\n                    }), new Error(R.message);\n                }\n                i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n                const { p } = I, E = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(p.resources), V = [\n                    (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getNamespacedDidChainId)(p.iss)\n                ], q = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDidAddress)(p.iss);\n                if (E) {\n                    const R = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getMethodsFromRecap)(E), D = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getChainsFromRecap)(E);\n                    h.push(...R), V.push(...D);\n                }\n                for (const R of V)d.push(\"\".concat(R, \":\").concat(q));\n            }\n            const y = await this.client.core.crypto.generateSharedKey(l, a);\n            i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n            let m;\n            if ((h === null || h === void 0 ? void 0 : h.length) > 0) {\n                m = {\n                    topic: y,\n                    acknowledged: !0,\n                    self: {\n                        publicKey: l,\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: a,\n                        metadata: r.requester.metadata\n                    },\n                    controller: a,\n                    expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y),\n                    authentication: s,\n                    requiredNamespaces: {},\n                    optionalNamespaces: {},\n                    relay: {\n                        protocol: \"irn\"\n                    },\n                    pairingTopic: r.pairingTopic,\n                    namespaces: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.buildNamespacesFromAuth)([\n                        ...new Set(h)\n                    ], [\n                        ...new Set(d)\n                    ]),\n                    transportType: o\n                }, i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n                try {\n                    await this.client.core.relayer.subscribe(y, {\n                        transportType: o\n                    });\n                } catch (I) {\n                    throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure), I;\n                }\n                i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success), await this.client.session.set(y, m), i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session), await this.client.core.pairing.updateMetadata({\n                    topic: r.pairingTopic,\n                    metadata: r.requester.metadata\n                });\n            }\n            i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n            try {\n                await this.sendResult({\n                    topic: u,\n                    id: t,\n                    result: {\n                        cacaos: s,\n                        responder: {\n                            publicKey: l,\n                            metadata: this.client.metadata\n                        }\n                    },\n                    encodeOpts: g,\n                    throwOnFailedPublish: !0,\n                    appLink: this.getAppLinkIfEnabled(r.requester.metadata, o)\n                });\n            } catch (I) {\n                throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure), I;\n            }\n            return await this.client.auth.requests.delete(t, {\n                message: \"fulfilled\",\n                code: 0\n            }), await this.client.core.pairing.activate({\n                topic: r.pairingTopic\n            }), this.client.core.eventClient.deleteEvent({\n                eventId: i.eventId\n            }), {\n                session: m\n            };\n        }), c(this, \"rejectSessionAuthenticate\", async (e)=>{\n            this.isInitialized();\n            const { id: t, reason: s } = e, i = this.getPendingAuthRequest(t);\n            if (!i) throw new Error(\"Could not find pending auth request with id \".concat(t));\n            i.transportType === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const r = i.requester.publicKey, o = await this.client.core.crypto.generateKeyPair(), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(r), l = {\n                type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                receiverPublicKey: r,\n                senderPublicKey: o\n            };\n            await this.sendError({\n                id: t,\n                topic: a,\n                error: s,\n                encodeOpts: l,\n                rpcOpts: N.wc_sessionAuthenticate.reject,\n                appLink: this.getAppLinkIfEnabled(i.requester.metadata, i.transportType)\n            }), await this.client.auth.requests.delete(t, {\n                message: \"rejected\",\n                code: 0\n            }), await this.client.proposal.delete(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n        }), c(this, \"formatAuthMessage\", (e)=>{\n            this.isInitialized();\n            const { request: t, iss: s } = e;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.formatMessage)(t, s);\n        }), c(this, \"processRelayMessageCache\", ()=>{\n            setTimeout(async ()=>{\n                if (this.relayMessageCache.length !== 0) for(; this.relayMessageCache.length > 0;)try {\n                    const e = this.relayMessageCache.shift();\n                    e && await this.onRelayMessage(e);\n                } catch (e) {\n                    this.client.logger.error(e);\n                }\n            }, 50);\n        }), c(this, \"cleanupDuplicatePairings\", async (e)=>{\n            if (e.pairingTopic) try {\n                const t = this.client.core.pairing.pairings.get(e.pairingTopic), s = this.client.core.pairing.pairings.getAll().filter((i)=>{\n                    var r, o;\n                    return ((r = i.peerMetadata) == null ? void 0 : r.url) && ((o = i.peerMetadata) == null ? void 0 : o.url) === e.peer.metadata.url && i.topic && i.topic !== t.topic;\n                });\n                if (s.length === 0) return;\n                this.client.logger.info(\"Cleaning up \".concat(s.length, \" duplicate pairing(s)\")), await Promise.all(s.map((i)=>this.client.core.pairing.disconnect({\n                        topic: i.topic\n                    }))), this.client.logger.info(\"Duplicate pairings clean up finished\");\n            } catch (t) {\n                this.client.logger.error(t);\n            }\n        }), c(this, \"deleteSession\", async (e)=>{\n            var t;\n            const { topic: s, expirerHasDeleted: i = !1, emitEvent: r = !0, id: o = 0 } = e, { self: a } = this.client.session.get(s);\n            await this.client.core.relayer.unsubscribe(s), await this.client.session.delete(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.addToRecentlyDeleted(s, \"session\"), this.client.core.crypto.keychain.has(a.publicKey) && await this.client.core.crypto.deleteKeyPair(a.publicKey), this.client.core.crypto.keychain.has(s) && await this.client.core.crypto.deleteSymKey(s), i || this.client.core.expirer.del(s), this.client.core.storage.removeItem(ke).catch((l)=>this.client.logger.warn(l)), this.getPendingSessionRequests().forEach((l)=>{\n                l.topic === s && this.deletePendingSessionRequest(l.id, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n            }), s === ((t = this.sessionRequestQueue.queue[0]) == null ? void 0 : t.topic) && (this.sessionRequestQueue.state = $.idle), r && this.client.events.emit(\"session_delete\", {\n                id: o,\n                topic: s\n            });\n        }), c(this, \"deleteProposal\", async (e, t)=>{\n            if (t) try {\n                const s = this.client.proposal.get(e), i = this.client.core.eventClient.getEvent({\n                    topic: s.pairingTopic\n                });\n                i === null || i === void 0 ? void 0 : i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n            } catch (e) {}\n            await Promise.all([\n                this.client.proposal.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")),\n                t ? Promise.resolve() : this.client.core.expirer.del(e)\n            ]), this.addToRecentlyDeleted(e, \"proposal\");\n        }), c(this, \"deletePendingSessionRequest\", async function(e, t) {\n            let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n            await Promise.all([\n                _this.client.pendingRequest.delete(e, t),\n                s ? Promise.resolve() : _this.client.core.expirer.del(e)\n            ]), _this.addToRecentlyDeleted(e, \"request\"), _this.sessionRequestQueue.queue = _this.sessionRequestQueue.queue.filter((i)=>i.id !== e), s && (_this.sessionRequestQueue.state = $.idle, _this.client.events.emit(\"session_request_expire\", {\n                id: e\n            }));\n        }), c(this, \"deletePendingAuthRequest\", async function(e, t) {\n            let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n            await Promise.all([\n                _this.client.auth.requests.delete(e, t),\n                s ? Promise.resolve() : _this.client.core.expirer.del(e)\n            ]);\n        }), c(this, \"setExpiry\", async (e, t)=>{\n            this.client.session.keys.includes(e) && (this.client.core.expirer.set(e, t), await this.client.session.update(e, {\n                expiry: t\n            }));\n        }), c(this, \"setProposal\", async (e, t)=>{\n            this.client.core.expirer.set(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e, t);\n        }), c(this, \"setAuthRequest\", async (e, t)=>{\n            const { request: s, pairingTopic: i, transportType: r = _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay } = t;\n            this.client.core.expirer.set(e, s.expiryTimestamp), await this.client.auth.requests.set(e, {\n                authPayload: s.authPayload,\n                requester: s.requester,\n                expiryTimestamp: s.expiryTimestamp,\n                id: e,\n                pairingTopic: i,\n                verifyContext: s.verifyContext,\n                transportType: r\n            });\n        }), c(this, \"setPendingSessionRequest\", async (e)=>{\n            const { id: t, topic: s, params: i, verifyContext: r } = e, o = i.request.expiryTimestamp || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionRequest.req.ttl);\n            this.client.core.expirer.set(t, o), await this.client.pendingRequest.set(t, {\n                id: t,\n                topic: s,\n                params: i,\n                verifyContext: r\n            });\n        }), c(this, \"sendRequest\", async (e)=>{\n            const { topic: t, method: s, params: i, expiry: r, relayRpcId: o, clientRpcId: a, throwOnFailedPublish: l, appLink: u, tvf: g } = e, h = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(s, i, a);\n            let d;\n            const y = !!u;\n            try {\n                const p = y ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64;\n                d = await this.client.core.crypto.encode(t, h, {\n                    encoding: p\n                });\n            } catch (p) {\n                throw await this.cleanup(), this.client.logger.error(\"sendRequest() -> core.crypto.encode() for topic \".concat(t, \" failed\")), p;\n            }\n            let m;\n            if (gt.includes(s)) {\n                const p = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(h)), E = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(d);\n                m = await this.client.core.verify.register({\n                    id: E,\n                    decryptedId: p\n                });\n            }\n            const I = N[s].req;\n            if (I.attestation = m, r && (I.ttl = r), o && (I.id = o), this.client.core.history.set(t, h), y) {\n                const p = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(u, t, d);\n                await __webpack_require__.g.Linking.openURL(p, this.client.name);\n            } else {\n                const p = N[s].req;\n                r && (p.ttl = r), o && (p.id = o), p.tvf = x(v({}, g), {\n                    correlationId: h.id\n                }), l ? (p.internal = x(v({}, p.internal), {\n                    throwOnFailedPublish: !0\n                }), await this.client.core.relayer.publish(t, d, p)) : this.client.core.relayer.publish(t, d, p).catch((E)=>this.client.logger.error(E));\n            }\n            return h.id;\n        }), c(this, \"sendResult\", async (e)=>{\n            const { id: t, topic: s, result: i, throwOnFailedPublish: r, encodeOpts: o, appLink: a } = e, l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult)(t, i);\n            let u;\n            const g = a && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Linking) < \"u\";\n            try {\n                const y = g ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64;\n                u = await this.client.core.crypto.encode(s, l, x(v({}, o || {}), {\n                    encoding: y\n                }));\n            } catch (y) {\n                throw await this.cleanup(), this.client.logger.error(\"sendResult() -> core.crypto.encode() for topic \".concat(s, \" failed\")), y;\n            }\n            let h, d;\n            try {\n                h = await this.client.core.history.get(s, t);\n                const y = h.request;\n                try {\n                    this.shouldSetTVF(y.method, y.params) && (d = this.getTVFParams(t, y.params, i));\n                } catch (m) {\n                    this.client.logger.warn(\"sendResult() -> getTVFParams() failed\", m);\n                }\n            } catch (y) {\n                throw this.client.logger.error(\"sendResult() -> history.get(\".concat(s, \", \").concat(t, \") failed\")), y;\n            }\n            if (g) {\n                const y = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(a, s, u);\n                await __webpack_require__.g.Linking.openURL(y, this.client.name);\n            } else {\n                const y = h.request.method, m = N[y].res;\n                m.tvf = x(v({}, d), {\n                    correlationId: t\n                }), r ? (m.internal = x(v({}, m.internal), {\n                    throwOnFailedPublish: !0\n                }), await this.client.core.relayer.publish(s, u, m)) : this.client.core.relayer.publish(s, u, m).catch((I)=>this.client.logger.error(I));\n            }\n            await this.client.core.history.resolve(l);\n        }), c(this, \"sendError\", async (e)=>{\n            const { id: t, topic: s, error: i, encodeOpts: r, rpcOpts: o, appLink: a } = e, l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(t, i);\n            let u;\n            const g = a && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Linking) < \"u\";\n            try {\n                const d = g ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64;\n                u = await this.client.core.crypto.encode(s, l, x(v({}, r || {}), {\n                    encoding: d\n                }));\n            } catch (d) {\n                throw await this.cleanup(), this.client.logger.error(\"sendError() -> core.crypto.encode() for topic \".concat(s, \" failed\")), d;\n            }\n            let h;\n            try {\n                h = await this.client.core.history.get(s, t);\n            } catch (d) {\n                throw this.client.logger.error(\"sendError() -> history.get(\".concat(s, \", \").concat(t, \") failed\")), d;\n            }\n            if (g) {\n                const d = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(a, s, u);\n                await __webpack_require__.g.Linking.openURL(d, this.client.name);\n            } else {\n                const d = h.request.method, y = o || N[d].res;\n                this.client.core.relayer.publish(s, u, y);\n            }\n            await this.client.core.history.resolve(l);\n        }), c(this, \"cleanup\", async ()=>{\n            const e = [], t = [];\n            this.client.session.getAll().forEach((s)=>{\n                let i = !1;\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(s.expiry) && (i = !0), this.client.core.crypto.keychain.has(s.topic) || (i = !0), i && e.push(s.topic);\n            }), this.client.proposal.getAll().forEach((s)=>{\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(s.expiryTimestamp) && t.push(s.id);\n            }), await Promise.all([\n                ...e.map((s)=>this.deleteSession({\n                        topic: s\n                    })),\n                ...t.map((s)=>this.deleteProposal(s))\n            ]);\n        }), c(this, \"onRelayEventRequest\", async (e)=>{\n            this.requestQueue.queue.push(e), await this.processRequestsQueue();\n        }), c(this, \"processRequestsQueue\", async ()=>{\n            if (this.requestQueue.state === $.active) {\n                this.client.logger.info(\"Request queue already active, skipping...\");\n                return;\n            }\n            for(this.client.logger.info(\"Request queue starting with \".concat(this.requestQueue.queue.length, \" requests\")); this.requestQueue.queue.length > 0;){\n                this.requestQueue.state = $.active;\n                const e = this.requestQueue.queue.shift();\n                if (e) try {\n                    await this.processRequest(e);\n                } catch (t) {\n                    this.client.logger.warn(t);\n                }\n            }\n            this.requestQueue.state = $.idle;\n        }), c(this, \"processRequest\", async (e)=>{\n            const { topic: t, payload: s, attestation: i, transportType: r, encryptedId: o } = e, a = s.method;\n            if (!this.shouldIgnorePairingRequest({\n                topic: t,\n                requestMethod: a\n            })) switch(a){\n                case \"wc_sessionPropose\":\n                    return await this.onSessionProposeRequest({\n                        topic: t,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: o\n                    });\n                case \"wc_sessionSettle\":\n                    return await this.onSessionSettleRequest(t, s);\n                case \"wc_sessionUpdate\":\n                    return await this.onSessionUpdateRequest(t, s);\n                case \"wc_sessionExtend\":\n                    return await this.onSessionExtendRequest(t, s);\n                case \"wc_sessionPing\":\n                    return await this.onSessionPingRequest(t, s);\n                case \"wc_sessionDelete\":\n                    return await this.onSessionDeleteRequest(t, s);\n                case \"wc_sessionRequest\":\n                    return await this.onSessionRequest({\n                        topic: t,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: o,\n                        transportType: r\n                    });\n                case \"wc_sessionEvent\":\n                    return await this.onSessionEventRequest(t, s);\n                case \"wc_sessionAuthenticate\":\n                    return await this.onSessionAuthenticateRequest({\n                        topic: t,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: o,\n                        transportType: r\n                    });\n                default:\n                    return this.client.logger.info(\"Unsupported request method \".concat(a));\n            }\n        }), c(this, \"onRelayEventResponse\", async (e)=>{\n            const { topic: t, payload: s, transportType: i } = e, r = (await this.client.core.history.get(t, s.id)).request.method;\n            switch(r){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeResponse(t, s, i);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleResponse(t, s);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateResponse(t, s);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendResponse(t, s);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingResponse(t, s);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequestResponse(t, s);\n                case \"wc_sessionAuthenticate\":\n                    return this.onSessionAuthenticateResponse(t, s);\n                default:\n                    return this.client.logger.info(\"Unsupported response method \".concat(r));\n            }\n        }), c(this, \"onRelayEventUnknownPayload\", (e)=>{\n            const { topic: t } = e, { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"Decoded payload on topic \".concat(t, \" is not identifiable as a JSON-RPC request or a response.\"));\n            throw new Error(s);\n        }), c(this, \"shouldIgnorePairingRequest\", (e)=>{\n            const { topic: t, requestMethod: s } = e, i = this.expectedPairingMethodMap.get(t);\n            return !i || i.includes(s) ? !1 : !!(i.includes(\"wc_sessionAuthenticate\") && this.client.events.listenerCount(\"session_authenticate\") > 0);\n        }), c(this, \"onSessionProposeRequest\", async (e)=>{\n            const { topic: t, payload: s, attestation: i, encryptedId: r } = e, { params: o, id: a } = s;\n            try {\n                const l = this.client.core.eventClient.getEvent({\n                    topic: t\n                });\n                this.client.events.listenerCount(\"session_proposal\") === 0 && (console.warn(\"No listener for session_proposal event\"), l === null || l === void 0 ? void 0 : l.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found)), this.isValidConnect(v({}, s.params));\n                const u = o.expiryTimestamp || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionPropose.req.ttl), g = v({\n                    id: a,\n                    pairingTopic: t,\n                    expiryTimestamp: u\n                }, o);\n                await this.setProposal(a, g);\n                const h = await this.getVerifyContext({\n                    attestationId: i,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(s)),\n                    encryptedId: r,\n                    metadata: g.proposer.metadata\n                });\n                l === null || l === void 0 ? void 0 : l.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal), this.client.events.emit(\"session_proposal\", {\n                    id: a,\n                    params: g,\n                    verifyContext: h\n                });\n            } catch (l) {\n                await this.sendError({\n                    id: a,\n                    topic: t,\n                    error: l,\n                    rpcOpts: N.wc_sessionPropose.autoReject\n                }), this.client.logger.error(l);\n            }\n        }), c(this, \"onSessionProposeResponse\", async (e, t, s)=>{\n            const { id: i } = t;\n            if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t)) {\n                const { result: r } = t;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    result: r\n                });\n                const o = this.client.proposal.get(i);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    proposal: o\n                });\n                const a = o.proposer.publicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    selfPublicKey: a\n                });\n                const l = r.responderPublicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    peerPublicKey: l\n                });\n                const u = await this.client.core.crypto.generateSharedKey(a, l);\n                this.pendingSessions.set(i, {\n                    sessionTopic: u,\n                    pairingTopic: e,\n                    proposalId: i,\n                    publicKey: a\n                });\n                const g = await this.client.core.relayer.subscribe(u, {\n                    transportType: s\n                });\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    subscriptionId: g\n                }), await this.client.core.pairing.activate({\n                    topic: e\n                });\n            } else if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t)) {\n                await this.client.proposal.delete(i, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n                const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", i);\n                if (this.events.listenerCount(r) === 0) throw new Error(\"emitting \".concat(r, \" without any listeners, 954\"));\n                this.events.emit(r, {\n                    error: t.error\n                });\n            }\n        }), c(this, \"onSessionSettleRequest\", async (e, t)=>{\n            const { id: s, params: i } = t;\n            try {\n                this.isValidSessionSettleRequest(i);\n                const { relay: r, controller: o, expiry: a, namespaces: l, sessionProperties: u, sessionConfig: g } = t.params, h = [\n                    ...this.pendingSessions.values()\n                ].find((m)=>m.sessionTopic === e);\n                if (!h) return this.client.logger.error(\"Pending session not found for topic \".concat(e));\n                const d = this.client.proposal.get(h.proposalId), y = x(v(v({\n                    topic: e,\n                    relay: r,\n                    expiry: a,\n                    namespaces: l,\n                    acknowledged: !0,\n                    pairingTopic: h.pairingTopic,\n                    requiredNamespaces: d.requiredNamespaces,\n                    optionalNamespaces: d.optionalNamespaces,\n                    controller: o.publicKey,\n                    self: {\n                        publicKey: h.publicKey,\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: o.publicKey,\n                        metadata: o.metadata\n                    }\n                }, u && {\n                    sessionProperties: u\n                }), g && {\n                    sessionConfig: g\n                }), {\n                    transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay\n                });\n                await this.client.session.set(y.topic, y), await this.setExpiry(y.topic, y.expiry), await this.client.core.pairing.updateMetadata({\n                    topic: h.pairingTopic,\n                    metadata: y.peer.metadata\n                }), this.client.events.emit(\"session_connect\", {\n                    session: y\n                }), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", h.proposalId), {\n                    session: y\n                }), this.pendingSessions.delete(h.proposalId), this.deleteProposal(h.proposalId, !1), this.cleanupDuplicatePairings(y), await this.sendResult({\n                    id: t.id,\n                    topic: e,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                });\n            } catch (r) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }), c(this, \"onSessionSettleResponse\", async (e, t)=>{\n            const { id: s } = t;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? (await this.client.session.update(e, {\n                acknowledged: !0\n            }), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", s), {})) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && (await this.client.session.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", s), {\n                error: t.error\n            }));\n        }), c(this, \"onSessionUpdateRequest\", async (e, t)=>{\n            const { params: s, id: i } = t;\n            try {\n                const r = \"\".concat(e, \"_session_update\"), o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(r);\n                if (o && this.isRequestOutOfSync(o, i)) {\n                    this.client.logger.warn(\"Discarding out of sync request - \".concat(i)), this.sendError({\n                        id: i,\n                        topic: e,\n                        error: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"INVALID_UPDATE_REQUEST\")\n                    });\n                    return;\n                }\n                this.isValidUpdate(v({\n                    topic: e\n                }, s));\n                try {\n                    _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(r, i), await this.client.session.update(e, {\n                        namespaces: s.namespaces\n                    }), await this.sendResult({\n                        id: i,\n                        topic: e,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    });\n                } catch (a) {\n                    throw _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.delete(r), a;\n                }\n                this.client.events.emit(\"session_update\", {\n                    id: i,\n                    topic: e,\n                    params: s\n                });\n            } catch (r) {\n                await this.sendError({\n                    id: i,\n                    topic: e,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }), c(this, \"isRequestOutOfSync\", (e, t)=>t.toString().slice(0, -3) < e.toString().slice(0, -3)), c(this, \"onSessionUpdateResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(\"emitting \".concat(i, \" without any listeners\"));\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionExtendRequest\", async (e, t)=>{\n            const { id: s } = t;\n            try {\n                this.isValidExtend({\n                    topic: e\n                }), await this.setExpiry(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(Y)), await this.sendResult({\n                    id: s,\n                    topic: e,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                }), this.client.events.emit(\"session_extend\", {\n                    id: s,\n                    topic: e\n                });\n            } catch (i) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: i\n                }), this.client.logger.error(i);\n            }\n        }), c(this, \"onSessionExtendResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(\"emitting \".concat(i, \" without any listeners\"));\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionPingRequest\", async (e, t)=>{\n            const { id: s } = t;\n            try {\n                this.isValidPing({\n                    topic: e\n                }), await this.sendResult({\n                    id: s,\n                    topic: e,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                }), this.client.events.emit(\"session_ping\", {\n                    id: s,\n                    topic: e\n                });\n            } catch (i) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: i\n                }), this.client.logger.error(i);\n            }\n        }), c(this, \"onSessionPingResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(\"emitting \".concat(i, \" without any listeners\"));\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), {\n                    error: t.error\n                });\n            }, 500);\n        }), c(this, \"onSessionDeleteRequest\", async (e, t)=>{\n            const { id: s } = t;\n            try {\n                this.isValidDisconnect({\n                    topic: e,\n                    reason: t.params\n                }), Promise.all([\n                    new Promise((i)=>{\n                        this.client.core.relayer.once(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.publish, async ()=>{\n                            i(await this.deleteSession({\n                                topic: e,\n                                id: s\n                            }));\n                        });\n                    }),\n                    this.sendResult({\n                        id: s,\n                        topic: e,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    }),\n                    this.cleanupPendingSentRequestsForTopic({\n                        topic: e,\n                        error: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")\n                    })\n                ]).catch((i)=>this.client.logger.error(i));\n            } catch (i) {\n                this.client.logger.error(i);\n            }\n        }), c(this, \"onSessionRequest\", async (e)=>{\n            var t, s, i;\n            const { topic: r, payload: o, attestation: a, encryptedId: l, transportType: u } = e, { id: g, params: h } = o;\n            try {\n                await this.isValidRequest(v({\n                    topic: r\n                }, h));\n                const d = this.client.session.get(r), y = await this.getVerifyContext({\n                    attestationId: a,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionRequest\", h, g))),\n                    encryptedId: l,\n                    metadata: d.peer.metadata,\n                    transportType: u\n                }), m = {\n                    id: g,\n                    topic: r,\n                    params: h,\n                    verifyContext: y\n                };\n                await this.setPendingSessionRequest(m), u === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode && (t = d.peer.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp((s = d.peer.metadata.redirect) == null ? void 0 : s.universal), (i = this.client.signConfig) != null && i.disableRequestQueue ? this.emitSessionRequest(m) : (this.addSessionRequestToSessionRequestQueue(m), this.processSessionRequestQueue());\n            } catch (d) {\n                await this.sendError({\n                    id: g,\n                    topic: r,\n                    error: d\n                }), this.client.logger.error(d);\n            }\n        }), c(this, \"onSessionRequestResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(\"emitting \".concat(i, \" without any listeners\"));\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                result: t.result\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionEventRequest\", async (e, t)=>{\n            const { id: s, params: i } = t;\n            try {\n                const r = \"\".concat(e, \"_session_event_\").concat(i.event.name), o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(r);\n                if (o && this.isRequestOutOfSync(o, s)) {\n                    this.client.logger.info(\"Discarding out of sync request - \".concat(s));\n                    return;\n                }\n                this.isValidEmit(v({\n                    topic: e\n                }, i)), this.client.events.emit(\"session_event\", {\n                    id: s,\n                    topic: e,\n                    params: i\n                }), _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(r, s);\n            } catch (r) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }), c(this, \"onSessionAuthenticateResponse\", (e, t)=>{\n            const { id: s } = t;\n            this.client.logger.trace({\n                type: \"method\",\n                method: \"onSessionAuthenticateResponse\",\n                topic: e,\n                payload: t\n            }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                result: t.result\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionAuthenticateRequest\", async (e)=>{\n            var t;\n            const { topic: s, payload: i, attestation: r, encryptedId: o, transportType: a } = e;\n            try {\n                const { requester: l, authPayload: u, expiryTimestamp: g } = i.params, h = await this.getVerifyContext({\n                    attestationId: r,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(i)),\n                    encryptedId: o,\n                    metadata: l.metadata,\n                    transportType: a\n                }), d = {\n                    requester: l,\n                    pairingTopic: s,\n                    id: i.id,\n                    authPayload: u,\n                    verifyContext: h,\n                    expiryTimestamp: g\n                };\n                await this.setAuthRequest(i.id, {\n                    request: d,\n                    pairingTopic: s,\n                    transportType: a\n                }), a === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode && (t = l.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp(l.metadata.redirect.universal), this.client.events.emit(\"session_authenticate\", {\n                    topic: s,\n                    params: i.params,\n                    id: i.id,\n                    verifyContext: h\n                });\n            } catch (l) {\n                this.client.logger.error(l);\n                const u = i.params.requester.publicKey, g = await this.client.core.crypto.generateKeyPair(), h = this.getAppLinkIfEnabled(i.params.requester.metadata, a), d = {\n                    type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                    receiverPublicKey: u,\n                    senderPublicKey: g\n                };\n                await this.sendError({\n                    id: i.id,\n                    topic: s,\n                    error: l,\n                    encodeOpts: d,\n                    rpcOpts: N.wc_sessionAuthenticate.autoReject,\n                    appLink: h\n                });\n            }\n        }), c(this, \"addSessionRequestToSessionRequestQueue\", (e)=>{\n            this.sessionRequestQueue.queue.push(e);\n        }), c(this, \"cleanupAfterResponse\", (e)=>{\n            this.deletePendingSessionRequest(e.response.id, {\n                message: \"fulfilled\",\n                code: 0\n            }), setTimeout(()=>{\n                this.sessionRequestQueue.state = $.idle, this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(this.requestQueueDelay));\n        }), c(this, \"cleanupPendingSentRequestsForTopic\", (param)=>{\n            let { topic: e, error: t } = param;\n            const s = this.client.core.history.pending;\n            s.length > 0 && s.filter((i)=>i.topic === e && i.request.method === \"wc_sessionRequest\").forEach((i)=>{\n                const r = i.request.id, o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", r);\n                if (this.events.listenerCount(o) === 0) throw new Error(\"emitting \".concat(o, \" without any listeners\"));\n                this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", i.request.id), {\n                    error: t\n                });\n            });\n        }), c(this, \"processSessionRequestQueue\", ()=>{\n            if (this.sessionRequestQueue.state === $.active) {\n                this.client.logger.info(\"session request queue is already active.\");\n                return;\n            }\n            const e = this.sessionRequestQueue.queue[0];\n            if (!e) {\n                this.client.logger.info(\"session request queue is empty.\");\n                return;\n            }\n            try {\n                this.sessionRequestQueue.state = $.active, this.emitSessionRequest(e);\n            } catch (t) {\n                this.client.logger.error(t);\n            }\n        }), c(this, \"emitSessionRequest\", (e)=>{\n            this.client.events.emit(\"session_request\", e);\n        }), c(this, \"onPairingCreated\", (e)=>{\n            if (e.methods && this.expectedPairingMethodMap.set(e.topic, e.methods), e.active) return;\n            const t = this.client.proposal.getAll().find((s)=>s.pairingTopic === e.topic);\n            t && this.onSessionProposeRequest({\n                topic: e.topic,\n                payload: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionPropose\", {\n                    requiredNamespaces: t.requiredNamespaces,\n                    optionalNamespaces: t.optionalNamespaces,\n                    relays: t.relays,\n                    proposer: t.proposer,\n                    sessionProperties: t.sessionProperties\n                }, t.id)\n            });\n        }), c(this, \"isValidConnect\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"connect() params: \".concat(JSON.stringify(e)));\n                throw new Error(a);\n            }\n            const { pairingTopic: t, requiredNamespaces: s, optionalNamespaces: i, sessionProperties: r, relays: o } = e;\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(t) || await this.isValidPairingTopic(t), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelays)(o, !0)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"connect() relays: \".concat(o));\n                throw new Error(a);\n            }\n            !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(s) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(s) !== 0 && this.validateNamespaces(s, \"requiredNamespaces\"), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(i) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(i) !== 0 && this.validateNamespaces(i, \"optionalNamespaces\"), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(r) || this.validateSessionProps(r, \"sessionProperties\");\n        }), c(this, \"validateNamespaces\", (e, t)=>{\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequiredNamespaces)(e, \"connect()\", t);\n            if (s) throw new Error(s.message);\n        }), c(this, \"isValidApprove\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"approve() params: \".concat(e)).message);\n            const { id: t, namespaces: s, relayProtocol: i, sessionProperties: r } = e;\n            this.checkRecentlyDeleted(t), await this.isValidProposalId(t);\n            const o = this.client.proposal.get(t), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(s, \"approve()\");\n            if (a) throw new Error(a.message);\n            const l = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(o.requiredNamespaces, s, \"approve()\");\n            if (l) throw new Error(l.message);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(i, !0)) {\n                const { message: u } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"approve() relayProtocol: \".concat(i));\n                throw new Error(u);\n            }\n            (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(r) || this.validateSessionProps(r, \"sessionProperties\");\n        }), c(this, \"isValidReject\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"reject() params: \".concat(e));\n                throw new Error(i);\n            }\n            const { id: t, reason: s } = e;\n            if (this.checkRecentlyDeleted(t), await this.isValidProposalId(t), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidErrorReason)(s)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"reject() reason: \".concat(JSON.stringify(s)));\n                throw new Error(i);\n            }\n        }), c(this, \"isValidSessionSettleRequest\", (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: l } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() params: \".concat(e));\n                throw new Error(l);\n            }\n            const { relay: t, controller: s, namespaces: i, expiry: r } = e;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelay)(t)) {\n                const { message: l } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n                throw new Error(l);\n            }\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidController)(s, \"onSessionSettleRequest()\");\n            if (o) throw new Error(o.message);\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(i, \"onSessionSettleRequest()\");\n            if (a) throw new Error(a.message);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(r)) {\n                const { message: l } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"onSessionSettleRequest()\");\n                throw new Error(l);\n            }\n        }), c(this, \"isValidUpdate\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"update() params: \".concat(e));\n                throw new Error(a);\n            }\n            const { topic: t, namespaces: s } = e;\n            this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);\n            const i = this.client.session.get(t), r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(s, \"update()\");\n            if (r) throw new Error(r.message);\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(i.requiredNamespaces, s, \"update()\");\n            if (o) throw new Error(o.message);\n        }), c(this, \"isValidExtend\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"extend() params: \".concat(e));\n                throw new Error(s);\n            }\n            const { topic: t } = e;\n            this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);\n        }), c(this, \"isValidRequest\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() params: \".concat(e));\n                throw new Error(a);\n            }\n            const { topic: t, request: s, chainId: i, expiry: r } = e;\n            this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);\n            const { namespaces: o } = this.client.session.get(t);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(o, i)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() chainId: \".concat(i));\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequest)(s)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() \".concat(JSON.stringify(s)));\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesRequest)(o, i, s.method)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() method: \".concat(s.method));\n                throw new Error(a);\n            }\n            if (r && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequestExpiry)(r, Ee)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() expiry: \".concat(r, \". Expiry must be a number (in seconds) between \").concat(Ee.min, \" and \").concat(Ee.max));\n                throw new Error(a);\n            }\n        }), c(this, \"isValidRespond\", async (e)=>{\n            var t;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"respond() params: \".concat(e));\n                throw new Error(r);\n            }\n            const { topic: s, response: i } = e;\n            try {\n                await this.isValidSessionTopic(s);\n            } catch (r) {\n                throw (t = e === null || e === void 0 ? void 0 : e.response) != null && t.id && this.cleanupAfterResponse(e), r;\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidResponse)(i)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"respond() response: \".concat(JSON.stringify(i)));\n                throw new Error(r);\n            }\n        }), c(this, \"isValidPing\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"ping() params: \".concat(e));\n                throw new Error(s);\n            }\n            const { topic: t } = e;\n            await this.isValidSessionOrPairingTopic(t);\n        }), c(this, \"isValidEmit\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() params: \".concat(e));\n                throw new Error(o);\n            }\n            const { topic: t, event: s, chainId: i } = e;\n            await this.isValidSessionTopic(t);\n            const { namespaces: r } = this.client.session.get(t);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(r, i)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() chainId: \".concat(i));\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidEvent)(s)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() event: \".concat(JSON.stringify(s)));\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesEvent)(r, i, s.name)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() event: \".concat(JSON.stringify(s)));\n                throw new Error(o);\n            }\n        }), c(this, \"isValidDisconnect\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"disconnect() params: \".concat(e));\n                throw new Error(s);\n            }\n            const { topic: t } = e;\n            await this.isValidSessionOrPairingTopic(t);\n        }), c(this, \"isValidAuthenticate\", (e)=>{\n            const { chains: t, uri: s, domain: i, nonce: r } = e;\n            if (!Array.isArray(t) || t.length === 0) throw new Error(\"chains is required and must be a non-empty array\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(s, !1)) throw new Error(\"uri is required parameter\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(i, !1)) throw new Error(\"domain is required parameter\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(r, !1)) throw new Error(\"nonce is required parameter\");\n            if ([\n                ...new Set(t.map((a)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(a).namespace))\n            ].length > 1) throw new Error(\"Multi-namespace requests are not supported. Please request single namespace only.\");\n            const { namespace: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(t[0]);\n            if (o !== \"eip155\") throw new Error(\"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\");\n        }), c(this, \"getVerifyContext\", async (e)=>{\n            const { attestationId: t, hash: s, encryptedId: i, metadata: r, transportType: o } = e, a = {\n                verified: {\n                    verifyUrl: r.verifyUrl || _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.VERIFY_SERVER,\n                    validation: \"UNKNOWN\",\n                    origin: r.url || \"\"\n                }\n            };\n            try {\n                if (o === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode) {\n                    const u = this.getAppLinkIfEnabled(r, o);\n                    return a.verified.validation = u && new URL(u).origin === new URL(r.url).origin ? \"VALID\" : \"INVALID\", a;\n                }\n                const l = await this.client.core.verify.resolve({\n                    attestationId: t,\n                    hash: s,\n                    encryptedId: i,\n                    verifyUrl: r.verifyUrl\n                });\n                l && (a.verified.origin = l.origin, a.verified.isScam = l.isScam, a.verified.validation = l.origin === new URL(r.url).origin ? \"VALID\" : \"INVALID\");\n            } catch (l) {\n                this.client.logger.warn(l);\n            }\n            return this.client.logger.debug(\"Verify context: \".concat(JSON.stringify(a))), a;\n        }), c(this, \"validateSessionProps\", (e, t)=>{\n            Object.values(e).forEach((s)=>{\n                if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(s, !1)) {\n                    const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"\".concat(t, \" must be in Record<string, string> format. Received: \").concat(JSON.stringify(s)));\n                    throw new Error(i);\n                }\n            });\n        }), c(this, \"getPendingAuthRequest\", (e)=>{\n            const t = this.client.auth.requests.get(e);\n            return typeof t == \"object\" ? t : void 0;\n        }), c(this, \"addToRecentlyDeleted\", (e, t)=>{\n            if (this.recentlyDeletedMap.set(e, t), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n                let s = 0;\n                const i = this.recentlyDeletedLimit / 2;\n                for (const r of this.recentlyDeletedMap.keys()){\n                    if (s++ >= i) break;\n                    this.recentlyDeletedMap.delete(r);\n                }\n            }\n        }), c(this, \"checkRecentlyDeleted\", (e)=>{\n            const t = this.recentlyDeletedMap.get(e);\n            if (t) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"Record was recently deleted - \".concat(t, \": \").concat(e));\n                throw new Error(s);\n            }\n        }), c(this, \"isLinkModeEnabled\", (e, t)=>{\n            var s, i, r, o, a, l, u, g, h;\n            return !e || t !== _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode ? !1 : ((i = (s = this.client.metadata) == null ? void 0 : s.redirect) == null ? void 0 : i.linkMode) === !0 && ((o = (r = this.client.metadata) == null ? void 0 : r.redirect) == null ? void 0 : o.universal) !== void 0 && ((l = (a = this.client.metadata) == null ? void 0 : a.redirect) == null ? void 0 : l.universal) !== \"\" && ((u = e === null || e === void 0 ? void 0 : e.redirect) == null ? void 0 : u.universal) !== void 0 && ((g = e === null || e === void 0 ? void 0 : e.redirect) == null ? void 0 : g.universal) !== \"\" && ((h = e === null || e === void 0 ? void 0 : e.redirect) == null ? void 0 : h.linkMode) === !0 && this.client.core.linkModeSupportedApps.includes(e.redirect.universal) && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Linking) < \"u\";\n        }), c(this, \"getAppLinkIfEnabled\", (e, t)=>{\n            var s;\n            return this.isLinkModeEnabled(e, t) ? (s = e === null || e === void 0 ? void 0 : e.redirect) == null ? void 0 : s.universal : void 0;\n        }), c(this, \"handleLinkModeMessage\", (param)=>{\n            let { url: e } = param;\n            if (!e || !e.includes(\"wc_ev\") || !e.includes(\"topic\")) return;\n            const t = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSearchParamFromURL)(e, \"topic\") || \"\", s = decodeURIComponent((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSearchParamFromURL)(e, \"wc_ev\") || \"\"), i = this.client.session.keys.includes(t);\n            i && this.client.session.update(t, {\n                transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode\n            }), this.client.core.dispatchEnvelope({\n                topic: t,\n                message: s,\n                sessionExists: i\n            });\n        }), c(this, \"registerLinkModeListeners\", async ()=>{\n            var e;\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isTestRun)() || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isReactNative)() && (e = this.client.metadata.redirect) != null && e.linkMode) {\n                const t = __webpack_require__.g == null ? void 0 : __webpack_require__.g.Linking;\n                if (typeof t < \"u\") {\n                    t.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n                    const s = await t.getInitialURL();\n                    s && setTimeout(()=>{\n                        this.handleLinkModeMessage({\n                            url: s\n                        });\n                    }, 50);\n                }\n            }\n        }), c(this, \"shouldSetTVF\", (e, t)=>{\n            if (!t || e !== \"wc_sessionRequest\") return !1;\n            const { request: s } = t;\n            return Object.keys(Ke).includes(s.method);\n        }), c(this, \"getTVFParams\", (e, t, s)=>{\n            var i, r;\n            try {\n                const o = t.request.method, a = this.extractTxHashesFromResult(o, s);\n                return x(v({\n                    correlationId: e,\n                    rpcMethods: [\n                        o\n                    ],\n                    chainId: t.chainId\n                }, this.isValidContractData(t.request.params) && {\n                    contractAddresses: [\n                        (r = (i = t.request.params) == null ? void 0 : i[0]) == null ? void 0 : r.to\n                    ]\n                }), {\n                    txHashes: a\n                });\n            } catch (o) {\n                this.client.logger.warn(\"Error getting TVF params\", o);\n            }\n            return {};\n        }), c(this, \"isValidContractData\", (e)=>{\n            var t;\n            if (!e) return !1;\n            try {\n                const s = (e === null || e === void 0 ? void 0 : e.data) || ((t = e === null || e === void 0 ? void 0 : e[0]) == null ? void 0 : t.data);\n                if (!s.startsWith(\"0x\")) return !1;\n                const i = s.slice(2);\n                return /^[0-9a-fA-F]*$/.test(i) ? i.length % 2 === 0 : !1;\n            } catch (e) {}\n            return !1;\n        }), c(this, \"extractTxHashesFromResult\", (e, t)=>{\n            try {\n                const s = Ke[e];\n                if (typeof t == \"string\") return [\n                    t\n                ];\n                const i = t[s.key];\n                if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(i)) return i;\n                if (typeof i == \"string\") return [\n                    i\n                ];\n            } catch (s) {\n                this.client.logger.warn(\"Error extracting tx hashes from result\", s);\n            }\n            return [];\n        });\n    }\n}\nclass Ns extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, pt, me), this.core = n, this.logger = e;\n    }\n}\nclass Rt extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, ht, me), this.core = n, this.logger = e;\n    }\n}\nclass Ps extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, ut, me, (t)=>t.id), this.core = n, this.logger = e;\n    }\n}\nclass Os extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, mt, ce, ()=>le), this.core = n, this.logger = e;\n    }\n}\nclass bs extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, _t, ce), this.core = n, this.logger = e;\n    }\n}\nclass As extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, Et, ce, (t)=>t.id), this.core = n, this.logger = e;\n    }\n}\nvar Cs = Object.defineProperty, xs = (S, n, e)=>n in S ? Cs(S, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : S[n] = e, Ge = (S, n, e)=>xs(S, typeof n != \"symbol\" ? n + \"\" : n, e);\nclass Vs {\n    async init() {\n        await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();\n    }\n    constructor(n, e){\n        this.core = n, this.logger = e, Ge(this, \"authKeys\"), Ge(this, \"pairingTopics\"), Ge(this, \"requests\"), this.authKeys = new Os(this.core, this.logger), this.pairingTopics = new bs(this.core, this.logger), this.requests = new As(this.core, this.logger);\n    }\n}\nvar Ds = Object.defineProperty, Ls = (S, n, e)=>n in S ? Ds(S, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : S[n] = e, _ = (S, n, e)=>Ls(S, typeof n != \"symbol\" ? n + \"\" : n, e);\nclass Se extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.ISignClient {\n    static async init(n) {\n        const e = new Se(n);\n        return await e.initialize(), e;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getLoggerContext)(this.logger);\n    }\n    get pairing() {\n        return this.core.pairing.pairings;\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info(\"SignClient Initialization Success\"), setTimeout(()=>{\n                this.engine.processRelayMessageCache();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_SECOND));\n        } catch (n) {\n            throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(n.message), n;\n        }\n    }\n    constructor(n){\n        super(n), _(this, \"protocol\", De), _(this, \"version\", Le), _(this, \"name\", _e.name), _(this, \"metadata\"), _(this, \"core\"), _(this, \"logger\"), _(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter), _(this, \"engine\"), _(this, \"session\"), _(this, \"proposal\"), _(this, \"pendingRequest\"), _(this, \"auth\"), _(this, \"signConfig\"), _(this, \"on\", (t, s)=>this.events.on(t, s)), _(this, \"once\", (t, s)=>this.events.once(t, s)), _(this, \"off\", (t, s)=>this.events.off(t, s)), _(this, \"removeListener\", (t, s)=>this.events.removeListener(t, s)), _(this, \"removeAllListeners\", (t)=>this.events.removeAllListeners(t)), _(this, \"connect\", async (t)=>{\n            try {\n                return await this.engine.connect(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"pair\", async (t)=>{\n            try {\n                return await this.engine.pair(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"approve\", async (t)=>{\n            try {\n                return await this.engine.approve(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"reject\", async (t)=>{\n            try {\n                return await this.engine.reject(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"update\", async (t)=>{\n            try {\n                return await this.engine.update(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"extend\", async (t)=>{\n            try {\n                return await this.engine.extend(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"request\", async (t)=>{\n            try {\n                return await this.engine.request(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"respond\", async (t)=>{\n            try {\n                return await this.engine.respond(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"ping\", async (t)=>{\n            try {\n                return await this.engine.ping(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"emit\", async (t)=>{\n            try {\n                return await this.engine.emit(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"disconnect\", async (t)=>{\n            try {\n                return await this.engine.disconnect(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"find\", (t)=>{\n            try {\n                return this.engine.find(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"getPendingSessionRequests\", ()=>{\n            try {\n                return this.engine.getPendingSessionRequests();\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }), _(this, \"authenticate\", async (t, s)=>{\n            try {\n                return await this.engine.authenticate(t, s);\n            } catch (i) {\n                throw this.logger.error(i.message), i;\n            }\n        }), _(this, \"formatAuthMessage\", (t)=>{\n            try {\n                return this.engine.formatAuthMessage(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"approveSessionAuthenticate\", async (t)=>{\n            try {\n                return await this.engine.approveSessionAuthenticate(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), _(this, \"rejectSessionAuthenticate\", async (t)=>{\n            try {\n                return await this.engine.rejectSessionAuthenticate(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), this.name = (n === null || n === void 0 ? void 0 : n.name) || _e.name, this.metadata = (n === null || n === void 0 ? void 0 : n.metadata) || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getAppMetadata)(), this.signConfig = n === null || n === void 0 ? void 0 : n.signConfig;\n        const e = typeof (n === null || n === void 0 ? void 0 : n.logger) < \"u\" && typeof (n === null || n === void 0 ? void 0 : n.logger) != \"string\" ? n.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: (n === null || n === void 0 ? void 0 : n.logger) || _e.logger\n        }));\n        this.core = (n === null || n === void 0 ? void 0 : n.core) || new _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Core(n), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.generateChildLogger)(e, this.name), this.session = new Rt(this.core, this.logger), this.proposal = new Ns(this.core, this.logger), this.pendingRequest = new Ps(this.core, this.logger), this.engine = new Ts(this), this.auth = new Vs(this.core, this.logger);\n    }\n}\nconst Ms = Rt, ks = Se;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zaWduLWNsaWVudC9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaVo7QUFBNkg7QUFBa0U7QUFBdUo7QUFBeXFDO0FBQTJDO0FBQW9QO0FBQUEsTUFBTXFMLEtBQUcsTUFBS0MsS0FBRyxHQUFFQyxLQUFHLFVBQVNDLEtBQUcsR0FBU0YsT0FBTkQsSUFBRyxLQUFTRSxPQUFORCxJQUFHLEtBQU0sT0FBSEMsSUFBRyxNQUFHRSxLQUFHO0lBQUNDLE1BQUtIO0lBQUdJLFFBQU87SUFBUUMsWUFBVyxDQUFDO0lBQUVDLFVBQVM7QUFBK0IsR0FBRUMsS0FBRztJQUFDQyxrQkFBaUI7SUFBbUJDLGdCQUFlO0lBQWlCQyxnQkFBZTtJQUFpQkMsY0FBYTtJQUFlQyxnQkFBZTtJQUFpQkMsZ0JBQWU7SUFBaUJDLGlCQUFnQjtJQUFrQkMsc0JBQXFCO0lBQXVCQyxlQUFjO0lBQWdCQyxpQkFBZ0I7SUFBa0JDLHNCQUFxQjtJQUF1QkMsd0JBQXVCO0lBQXlCQyxpQkFBZ0I7QUFBaUIsR0FBRUMsS0FBRztJQUFDQyxVQUFTO0FBQVUsR0FBRUMsS0FBRyxpQ0FBZ0NDLEtBQUc7SUFBQ0MsU0FBUTtJQUFrQkMsU0FBUTtJQUFrQkMsU0FBUTtJQUFrQkMsTUFBSztBQUFjLEdBQUVDLEtBQUcsV0FBVUMsS0FBRyxPQUFNQyxLQUFHLFlBQVdDLEtBQUc5Syw0REFBRUEsRUFBQytLLEtBQUcsb0JBQW1CQyxLQUFHLFdBQVVDLElBQUUvSywyREFBRUEsRUFBQ2dMLEtBQUcsVUFBU0MsSUFBRTtJQUFDQyxtQkFBa0I7UUFBQ0MsS0FBSTtZQUFDQyxLQUFJbEwsNkRBQUNBO1lBQUNtTCxRQUFPLENBQUM7WUFBRUMsS0FBSTtRQUFJO1FBQUVDLEtBQUk7WUFBQ0gsS0FBSWxMLDZEQUFDQTtZQUFDbUwsUUFB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QzlKLDJEQUFFQSxDQUFDRSw4RUFBRUEsQ0FBQztZQUFDNHBCLE9BQU10YSxDQUFBQSxjQUFBQSx3QkFBQUEsRUFBRzFGLE1BQU0sS0FBRUYsR0FBR0UsTUFBTTtRQUFBO1FBQUksSUFBSSxDQUFDMkcsSUFBSSxHQUFDakIsQ0FBQUEsY0FBQUEsd0JBQUFBLEVBQUdpQixJQUFJLEtBQUUsSUFBSTNRLHFEQUFFQSxDQUFDMFAsSUFBRyxJQUFJLENBQUMxRixNQUFNLEdBQUMxSiwwRUFBRUEsQ0FBQ3FQLEdBQUUsSUFBSSxDQUFDNUYsSUFBSSxHQUFFLElBQUksQ0FBQzRKLE9BQU8sR0FBQyxJQUFJd1UsR0FBRyxJQUFJLENBQUN4WCxJQUFJLEVBQUMsSUFBSSxDQUFDM0csTUFBTSxHQUFFLElBQUksQ0FBQytLLFFBQVEsR0FBQyxJQUFJbVQsR0FBRyxJQUFJLENBQUN2WCxJQUFJLEVBQUMsSUFBSSxDQUFDM0csTUFBTSxHQUFFLElBQUksQ0FBQ3VKLGNBQWMsR0FBQyxJQUFJNlUsR0FBRyxJQUFJLENBQUN6WCxJQUFJLEVBQUMsSUFBSSxDQUFDM0csTUFBTSxHQUFFLElBQUksQ0FBQ29mLE1BQU0sR0FBQyxJQUFJaFosR0FBRyxJQUFJLEdBQUUsSUFBSSxDQUFDdUIsSUFBSSxHQUFDLElBQUlnWCxHQUFHLElBQUksQ0FBQ2hZLElBQUksRUFBQyxJQUFJLENBQUMzRyxNQUFNO0lBQUM7QUFBNGtCO0FBQUMsTUFBTWlnQixLQUFHOUIsSUFBRytCLEtBQUdsQjtBQUFrMUIsQ0FDMzE2RCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3NpZ24tY2xpZW50L2Rpc3QvaW5kZXguZXMuanM/ZWIyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7UkVMQVlFUl9FVkVOVFMgYXMgWGUsVFJBTlNQT1JUX1RZUEVTIGFzIFQsRVhQSVJFUl9FVkVOVFMgYXMgcXQsUEFJUklOR19FVkVOVFMgYXMgSmUsUkVMQVlFUl9ERUZBVUxUX1BST1RPQ09MIGFzIFR0LEVWRU5UX0NMSUVOVF9TRVNTSU9OX1RSQUNFUyBhcyBNLEVWRU5UX0NMSUVOVF9TRVNTSU9OX0VSUk9SUyBhcyBILEVWRU5UX0NMSUVOVF9BVVRIRU5USUNBVEVfVFJBQ0VTIGFzIHosRVZFTlRfQ0xJRU5UX0FVVEhFTlRJQ0FURV9FUlJPUlMgYXMgcmUsRVZFTlRfQ0xJRU5UX1BBSVJJTkdfRVJST1JTIGFzIE50LEVWRU5UX0NMSUVOVF9QQUlSSU5HX1RSQUNFUyBhcyBQdCxWRVJJRllfU0VSVkVSIGFzIE90LFN0b3JlIGFzIEosQ29yZSBhcyBidH1mcm9tXCJAd2FsbGV0Y29ubmVjdC9jb3JlXCI7aW1wb3J0e3Bpbm8gYXMgQXQsZ2V0RGVmYXVsdExvZ2dlck9wdGlvbnMgYXMgQ3QsZ2VuZXJhdGVDaGlsZExvZ2dlciBhcyB4dCxnZXRMb2dnZXJDb250ZXh0IGFzIFZ0fWZyb21cIkB3YWxsZXRjb25uZWN0L2xvZ2dlclwiO2ltcG9ydHtJRW5naW5lIGFzIER0LElTaWduQ2xpZW50IGFzIEx0fWZyb21cIkB3YWxsZXRjb25uZWN0L3R5cGVzXCI7aW1wb3J0e1RISVJUWV9EQVlTIGFzIE10LFNFVkVOX0RBWVMgYXMgQmUsRklWRV9NSU5VVEVTIGFzIEEsT05FX0RBWSBhcyBLLE9ORV9IT1VSIGFzIFdlLE9ORV9TRUNPTkQgYXMgWmUsdG9NaWxpc2Vjb25kcyBhcyBPZX1mcm9tXCJAd2FsbGV0Y29ubmVjdC90aW1lXCI7aW1wb3J0e2dldEludGVybmFsRXJyb3IgYXMgdyxCQVNFNjRVUkwgYXMgbmUsQkFTRTY0IGFzIHVlLGhhc2hNZXNzYWdlIGFzIEIscGFyc2VFeHBpcmVyVGFyZ2V0IGFzIGt0LGlzVmFsaWRTdHJpbmcgYXMgVSxpc0V4cGlyZWQgYXMgVyxpc1ZhbGlkSWQgYXMgJHQsY2FsY0V4cGlyeSBhcyBDLGVuZ2luZUV2ZW50IGFzIGYsY3JlYXRlRGVsYXllZFByb21pc2UgYXMgWixnZXRTZGtFcnJvciBhcyBPLGdldERlZXBMaW5rIGFzIEt0LGhhbmRsZURlZXBsaW5rUmVkaXJlY3QgYXMgVXQsaXNTZXNzaW9uQ29tcGF0aWJsZSBhcyBHdCxoYXNoS2V5IGFzIGJlLHBhcnNlQ2hhaW5JZCBhcyBBZSxjcmVhdGVFbmNvZGVkUmVjYXAgYXMgRnQsZ2V0UmVjYXBGcm9tUmVzb3VyY2VzIGFzIENlLG1lcmdlRW5jb2RlZFJlY2FwcyBhcyBqdCxUWVBFXzIgYXMgUXQsZ2V0TGlua01vZGVVUkwgYXMgZ2UsdmFsaWRhdGVTaWduZWRDYWNhbyBhcyBldCxnZXROYW1lc3BhY2VkRGlkQ2hhaW5JZCBhcyB0dCxnZXREaWRBZGRyZXNzIGFzIHN0LGdldE1ldGhvZHNGcm9tUmVjYXAgYXMgaXQsZ2V0Q2hhaW5zRnJvbVJlY2FwIGFzIHJ0LGJ1aWxkTmFtZXNwYWNlc0Zyb21BdXRoIGFzIG50LGZvcm1hdE1lc3NhZ2UgYXMgSHQsTWVtb3J5U3RvcmUgYXMgb2UsaXNWYWxpZFBhcmFtcyBhcyBrLGlzVW5kZWZpbmVkIGFzIGFlLGlzVmFsaWRSZWxheXMgYXMgenQsaXNWYWxpZE9iamVjdCBhcyBvdCxpc1ZhbGlkUmVxdWlyZWROYW1lc3BhY2VzIGFzIFl0LGlzVmFsaWROYW1lc3BhY2VzIGFzIHhlLGlzQ29uZm9ybWluZ05hbWVzcGFjZXMgYXMgYXQsaXNWYWxpZEVycm9yUmVhc29uIGFzIFh0LGlzVmFsaWRSZWxheSBhcyBKdCxpc1ZhbGlkQ29udHJvbGxlciBhcyBCdCxpc1ZhbGlkTmFtZXNwYWNlc0NoYWluSWQgYXMgY3QsaXNWYWxpZFJlcXVlc3QgYXMgV3QsaXNWYWxpZE5hbWVzcGFjZXNSZXF1ZXN0IGFzIFp0LGlzVmFsaWRSZXF1ZXN0RXhwaXJ5IGFzIGVzLGlzVmFsaWRSZXNwb25zZSBhcyB0cyxpc1ZhbGlkRXZlbnQgYXMgc3MsaXNWYWxpZE5hbWVzcGFjZXNFdmVudCBhcyBpcyxnZXRTZWFyY2hQYXJhbUZyb21VUkwgYXMgbHQsaXNUZXN0UnVuIGFzIHJzLGlzUmVhY3ROYXRpdmUgYXMgbnMsaXNWYWxpZEFycmF5IGFzIG9zLFRZUEVfMSBhcyBWZSxnZXRBcHBNZXRhZGF0YSBhcyBhc31mcm9tXCJAd2FsbGV0Y29ubmVjdC91dGlsc1wiO2ltcG9ydCBjcyx7RXZlbnRFbWl0dGVyIGFzIGxzfWZyb21cImV2ZW50c1wiO2ltcG9ydHtpc0pzb25ScGNSZXF1ZXN0IGFzIHBzLGlzSnNvblJwY1Jlc3BvbnNlIGFzIGhzLHBheWxvYWRJZCBhcyBHLGdldEJpZ0ludFJwY0lkIGFzIHllLGlzSnNvblJwY1Jlc3VsdCBhcyBGLGlzSnNvblJwY0Vycm9yIGFzIGosZm9ybWF0SnNvblJwY1JlcXVlc3QgYXMgd2UsZm9ybWF0SnNvblJwY1Jlc3VsdCBhcyBkcyxmb3JtYXRKc29uUnBjRXJyb3IgYXMgdXN9ZnJvbVwiQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlsc1wiO2NvbnN0IERlPVwid2NcIixMZT0yLE1lPVwiY2xpZW50XCIsbWU9YCR7RGV9QCR7TGV9OiR7TWV9OmAsX2U9e25hbWU6TWUsbG9nZ2VyOlwiZXJyb3JcIixjb250cm9sbGVyOiExLHJlbGF5VXJsOlwid3NzOi8vcmVsYXkud2FsbGV0Y29ubmVjdC5vcmdcIn0sZ3M9e3Nlc3Npb25fcHJvcG9zYWw6XCJzZXNzaW9uX3Byb3Bvc2FsXCIsc2Vzc2lvbl91cGRhdGU6XCJzZXNzaW9uX3VwZGF0ZVwiLHNlc3Npb25fZXh0ZW5kOlwic2Vzc2lvbl9leHRlbmRcIixzZXNzaW9uX3Bpbmc6XCJzZXNzaW9uX3BpbmdcIixzZXNzaW9uX2RlbGV0ZTpcInNlc3Npb25fZGVsZXRlXCIsc2Vzc2lvbl9leHBpcmU6XCJzZXNzaW9uX2V4cGlyZVwiLHNlc3Npb25fcmVxdWVzdDpcInNlc3Npb25fcmVxdWVzdFwiLHNlc3Npb25fcmVxdWVzdF9zZW50Olwic2Vzc2lvbl9yZXF1ZXN0X3NlbnRcIixzZXNzaW9uX2V2ZW50Olwic2Vzc2lvbl9ldmVudFwiLHByb3Bvc2FsX2V4cGlyZTpcInByb3Bvc2FsX2V4cGlyZVwiLHNlc3Npb25fYXV0aGVudGljYXRlOlwic2Vzc2lvbl9hdXRoZW50aWNhdGVcIixzZXNzaW9uX3JlcXVlc3RfZXhwaXJlOlwic2Vzc2lvbl9yZXF1ZXN0X2V4cGlyZVwiLHNlc3Npb25fY29ubmVjdDpcInNlc3Npb25fY29ubmVjdFwifSx5cz17ZGF0YWJhc2U6XCI6bWVtb3J5OlwifSxrZT1cIldBTExFVENPTk5FQ1RfREVFUExJTktfQ0hPSUNFXCIsd3M9e2NyZWF0ZWQ6XCJoaXN0b3J5X2NyZWF0ZWRcIix1cGRhdGVkOlwiaGlzdG9yeV91cGRhdGVkXCIsZGVsZXRlZDpcImhpc3RvcnlfZGVsZXRlZFwiLHN5bmM6XCJoaXN0b3J5X3N5bmNcIn0sbXM9XCJoaXN0b3J5XCIsX3M9XCIwLjNcIixwdD1cInByb3Bvc2FsXCIsRXM9TXQsJGU9XCJQcm9wb3NhbCBleHBpcmVkXCIsaHQ9XCJzZXNzaW9uXCIsWT1CZSxkdD1cImVuZ2luZVwiLE49e3djX3Nlc3Npb25Qcm9wb3NlOntyZXE6e3R0bDpBLHByb21wdDohMCx0YWc6MTEwMH0scmVzOnt0dGw6QSxwcm9tcHQ6ITEsdGFnOjExMDF9LHJlamVjdDp7dHRsOkEscHJvbXB0OiExLHRhZzoxMTIwfSxhdXRvUmVqZWN0Ont0dGw6QSxwcm9tcHQ6ITEsdGFnOjExMjF9fSx3Y19zZXNzaW9uU2V0dGxlOntyZXE6e3R0bDpBLHByb21wdDohMSx0YWc6MTEwMn0scmVzOnt0dGw6QSxwcm9tcHQ6ITEsdGFnOjExMDN9fSx3Y19zZXNzaW9uVXBkYXRlOntyZXE6e3R0bDpLLHByb21wdDohMSx0YWc6MTEwNH0scmVzOnt0dGw6Syxwcm9tcHQ6ITEsdGFnOjExMDV9fSx3Y19zZXNzaW9uRXh0ZW5kOntyZXE6e3R0bDpLLHByb21wdDohMSx0YWc6MTEwNn0scmVzOnt0dGw6Syxwcm9tcHQ6ITEsdGFnOjExMDd9fSx3Y19zZXNzaW9uUmVxdWVzdDp7cmVxOnt0dGw6QSxwcm9tcHQ6ITAsdGFnOjExMDh9LHJlczp7dHRsOkEscHJvbXB0OiExLHRhZzoxMTA5fX0sd2Nfc2Vzc2lvbkV2ZW50OntyZXE6e3R0bDpBLHByb21wdDohMCx0YWc6MTExMH0scmVzOnt0dGw6QSxwcm9tcHQ6ITEsdGFnOjExMTF9fSx3Y19zZXNzaW9uRGVsZXRlOntyZXE6e3R0bDpLLHByb21wdDohMSx0YWc6MTExMn0scmVzOnt0dGw6Syxwcm9tcHQ6ITEsdGFnOjExMTN9fSx3Y19zZXNzaW9uUGluZzp7cmVxOnt0dGw6Syxwcm9tcHQ6ITEsdGFnOjExMTR9LHJlczp7dHRsOksscHJvbXB0OiExLHRhZzoxMTE1fX0sd2Nfc2Vzc2lvbkF1dGhlbnRpY2F0ZTp7cmVxOnt0dGw6V2UscHJvbXB0OiEwLHRhZzoxMTE2fSxyZXM6e3R0bDpXZSxwcm9tcHQ6ITEsdGFnOjExMTd9LHJlamVjdDp7dHRsOkEscHJvbXB0OiExLHRhZzoxMTE4fSxhdXRvUmVqZWN0Ont0dGw6QSxwcm9tcHQ6ITEsdGFnOjExMTl9fX0sRWU9e21pbjpBLG1heDpCZX0sJD17aWRsZTpcIklETEVcIixhY3RpdmU6XCJBQ1RJVkVcIn0sS2U9e2V0aF9zZW5kVHJhbnNhY3Rpb246e2tleTpcIlwifSxldGhfc2VuZFJhd1RyYW5zYWN0aW9uOntrZXk6XCJcIn0sd2FsbGV0X3NlbmRDYWxsczp7a2V5OlwiXCJ9LHNvbGFuYV9zaWduVHJhbnNhY3Rpb246e2tleTpcInNpZ25hdHVyZVwifSxzb2xhbmFfc2lnbkFsbFRyYW5zYWN0aW9uczp7a2V5OlwidHJhbnNhY3Rpb25zXCJ9LHNvbGFuYV9zaWduQW5kU2VuZFRyYW5zYWN0aW9uOntrZXk6XCJzaWduYXR1cmVcIn19LHV0PVwicmVxdWVzdFwiLGd0PVtcIndjX3Nlc3Npb25Qcm9wb3NlXCIsXCJ3Y19zZXNzaW9uUmVxdWVzdFwiLFwid2NfYXV0aFJlcXVlc3RcIixcIndjX3Nlc3Npb25BdXRoZW50aWNhdGVcIl0seXQ9XCJ3Y1wiLFNzPTEuNSx3dD1cImF1dGhcIixtdD1cImF1dGhLZXlzXCIsX3Q9XCJwYWlyaW5nVG9waWNzXCIsRXQ9XCJyZXF1ZXN0c1wiLGNlPWAke3l0fUAkezEuNX06JHt3dH06YCxsZT1gJHtjZX06UFVCX0tFWWA7dmFyIFJzPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxmcz1PYmplY3QuZGVmaW5lUHJvcGVydGllcyxJcz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyxTdD1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLHZzPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkscXM9T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxVZT0oUyxuLGUpPT5uIGluIFM/UnMoUyxuLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTplfSk6U1tuXT1lLHY9KFMsbik9Pntmb3IodmFyIGUgaW4gbnx8KG49e30pKXZzLmNhbGwobixlKSYmVWUoUyxlLG5bZV0pO2lmKFN0KWZvcih2YXIgZSBvZiBTdChuKSlxcy5jYWxsKG4sZSkmJlVlKFMsZSxuW2VdKTtyZXR1cm4gU30seD0oUyxuKT0+ZnMoUyxJcyhuKSksYz0oUyxuLGUpPT5VZShTLHR5cGVvZiBuIT1cInN5bWJvbFwiP24rXCJcIjpuLGUpO2NsYXNzIFRzIGV4dGVuZHMgRHR7Y29uc3RydWN0b3Iobil7c3VwZXIobiksYyh0aGlzLFwibmFtZVwiLGR0KSxjKHRoaXMsXCJldmVudHNcIixuZXcgY3MpLGModGhpcyxcImluaXRpYWxpemVkXCIsITEpLGModGhpcyxcInJlcXVlc3RRdWV1ZVwiLHtzdGF0ZTokLmlkbGUscXVldWU6W119KSxjKHRoaXMsXCJzZXNzaW9uUmVxdWVzdFF1ZXVlXCIse3N0YXRlOiQuaWRsZSxxdWV1ZTpbXX0pLGModGhpcyxcInJlcXVlc3RRdWV1ZURlbGF5XCIsWmUpLGModGhpcyxcImV4cGVjdGVkUGFpcmluZ01ldGhvZE1hcFwiLG5ldyBNYXApLGModGhpcyxcInJlY2VudGx5RGVsZXRlZE1hcFwiLG5ldyBNYXApLGModGhpcyxcInJlY2VudGx5RGVsZXRlZExpbWl0XCIsMjAwKSxjKHRoaXMsXCJyZWxheU1lc3NhZ2VDYWNoZVwiLFtdKSxjKHRoaXMsXCJwZW5kaW5nU2Vzc2lvbnNcIixuZXcgTWFwKSxjKHRoaXMsXCJpbml0XCIsYXN5bmMoKT0+e3RoaXMuaW5pdGlhbGl6ZWR8fChhd2FpdCB0aGlzLmNsZWFudXAoKSx0aGlzLnJlZ2lzdGVyUmVsYXllckV2ZW50cygpLHRoaXMucmVnaXN0ZXJFeHBpcmVyRXZlbnRzKCksdGhpcy5yZWdpc3RlclBhaXJpbmdFdmVudHMoKSxhd2FpdCB0aGlzLnJlZ2lzdGVyTGlua01vZGVMaXN0ZW5lcnMoKSx0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcucmVnaXN0ZXIoe21ldGhvZHM6T2JqZWN0LmtleXMoTil9KSx0aGlzLmluaXRpYWxpemVkPSEwLHNldFRpbWVvdXQoKCk9Pnt0aGlzLnNlc3Npb25SZXF1ZXN0UXVldWUucXVldWU9dGhpcy5nZXRQZW5kaW5nU2Vzc2lvblJlcXVlc3RzKCksdGhpcy5wcm9jZXNzU2Vzc2lvblJlcXVlc3RRdWV1ZSgpfSxPZSh0aGlzLnJlcXVlc3RRdWV1ZURlbGF5KSkpfSksYyh0aGlzLFwiY29ubmVjdFwiLGFzeW5jIGU9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKSxhd2FpdCB0aGlzLmNvbmZpcm1PbmxpbmVTdGF0ZU9yVGhyb3coKTtjb25zdCB0PXgodih7fSxlKSx7cmVxdWlyZWROYW1lc3BhY2VzOmUucmVxdWlyZWROYW1lc3BhY2VzfHx7fSxvcHRpb25hbE5hbWVzcGFjZXM6ZS5vcHRpb25hbE5hbWVzcGFjZXN8fHt9fSk7YXdhaXQgdGhpcy5pc1ZhbGlkQ29ubmVjdCh0KTtjb25zdHtwYWlyaW5nVG9waWM6cyxyZXF1aXJlZE5hbWVzcGFjZXM6aSxvcHRpb25hbE5hbWVzcGFjZXM6cixzZXNzaW9uUHJvcGVydGllczpvLHJlbGF5czphfT10O2xldCBsPXMsdSxnPSExO3RyeXtpZihsKXtjb25zdCBSPXRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5wYWlyaW5ncy5nZXQobCk7dGhpcy5jbGllbnQubG9nZ2VyLndhcm4oXCJjb25uZWN0KCkgd2l0aCBleGlzdGluZyBwYWlyaW5nIHRvcGljIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlwiKSxnPVIuYWN0aXZlfX1jYXRjaChSKXt0aHJvdyB0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IoYGNvbm5lY3QoKSAtPiBwYWlyaW5nLmdldCgke2x9KSBmYWlsZWRgKSxSfWlmKCFsfHwhZyl7Y29uc3R7dG9waWM6Uix1cmk6RH09YXdhaXQgdGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLmNyZWF0ZSgpO2w9Uix1PUR9aWYoIWwpe2NvbnN0e21lc3NhZ2U6Un09dyhcIk5PX01BVENISU5HX0tFWVwiLGBjb25uZWN0KCkgcGFpcmluZyB0b3BpYzogJHtsfWApO3Rocm93IG5ldyBFcnJvcihSKX1jb25zdCBoPWF3YWl0IHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmdlbmVyYXRlS2V5UGFpcigpLGQ9Ti53Y19zZXNzaW9uUHJvcG9zZS5yZXEudHRsfHxBLHk9QyhkKSxtPXgodih7cmVxdWlyZWROYW1lc3BhY2VzOmksb3B0aW9uYWxOYW1lc3BhY2VzOnIscmVsYXlzOmE/P1t7cHJvdG9jb2w6VHR9XSxwcm9wb3Nlcjp7cHVibGljS2V5OmgsbWV0YWRhdGE6dGhpcy5jbGllbnQubWV0YWRhdGF9LGV4cGlyeVRpbWVzdGFtcDp5LHBhaXJpbmdUb3BpYzpsfSxvJiZ7c2Vzc2lvblByb3BlcnRpZXM6b30pLHtpZDpHKCl9KSxJPWYoXCJzZXNzaW9uX2Nvbm5lY3RcIixtLmlkKSx7cmVqZWN0OnAscmVzb2x2ZTpFLGRvbmU6Vn09WihkLCRlKSxxPSh7aWQ6Un0pPT57Uj09PW0uaWQmJih0aGlzLmNsaWVudC5ldmVudHMub2ZmKFwicHJvcG9zYWxfZXhwaXJlXCIscSksdGhpcy5wZW5kaW5nU2Vzc2lvbnMuZGVsZXRlKG0uaWQpLHRoaXMuZXZlbnRzLmVtaXQoSSx7ZXJyb3I6e21lc3NhZ2U6JGUsY29kZTowfX0pKX07cmV0dXJuIHRoaXMuY2xpZW50LmV2ZW50cy5vbihcInByb3Bvc2FsX2V4cGlyZVwiLHEpLHRoaXMuZXZlbnRzLm9uY2UoSSwoe2Vycm9yOlIsc2Vzc2lvbjpEfSk9Pnt0aGlzLmNsaWVudC5ldmVudHMub2ZmKFwicHJvcG9zYWxfZXhwaXJlXCIscSksUj9wKFIpOkQmJkUoRCl9KSxhd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KHt0b3BpYzpsLG1ldGhvZDpcIndjX3Nlc3Npb25Qcm9wb3NlXCIscGFyYW1zOm0sdGhyb3dPbkZhaWxlZFB1Ymxpc2g6ITAsY2xpZW50UnBjSWQ6bS5pZH0pLGF3YWl0IHRoaXMuc2V0UHJvcG9zYWwobS5pZCxtKSx7dXJpOnUsYXBwcm92YWw6Vn19KSxjKHRoaXMsXCJwYWlyXCIsYXN5bmMgZT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuY29uZmlybU9ubGluZVN0YXRlT3JUaHJvdygpO3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLnBhaXIoZSl9Y2F0Y2godCl7dGhyb3cgdGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKFwicGFpcigpIGZhaWxlZFwiKSx0fX0pLGModGhpcyxcImFwcHJvdmVcIixhc3luYyBlPT57dmFyIHQscyxpO2NvbnN0IHI9dGhpcy5jbGllbnQuY29yZS5ldmVudENsaWVudC5jcmVhdGVFdmVudCh7cHJvcGVydGllczp7dG9waWM6KHQ9ZT8uaWQpPT1udWxsP3ZvaWQgMDp0LnRvU3RyaW5nKCksdHJhY2U6W00uc2Vzc2lvbl9hcHByb3ZlX3N0YXJ0ZWRdfX0pO3RyeXt0aGlzLmlzSW5pdGlhbGl6ZWQoKSxhd2FpdCB0aGlzLmNvbmZpcm1PbmxpbmVTdGF0ZU9yVGhyb3coKX1jYXRjaChQKXt0aHJvdyByLnNldEVycm9yKEgubm9faW50ZXJuZXRfY29ubmVjdGlvbiksUH10cnl7YXdhaXQgdGhpcy5pc1ZhbGlkUHJvcG9zYWxJZChlPy5pZCl9Y2F0Y2goUCl7dGhyb3cgdGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGBhcHByb3ZlKCkgLT4gcHJvcG9zYWwuZ2V0KCR7ZT8uaWR9KSBmYWlsZWRgKSxyLnNldEVycm9yKEgucHJvcG9zYWxfbm90X2ZvdW5kKSxQfXRyeXthd2FpdCB0aGlzLmlzVmFsaWRBcHByb3ZlKGUpfWNhdGNoKFApe3Rocm93IHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihcImFwcHJvdmUoKSAtPiBpc1ZhbGlkQXBwcm92ZSgpIGZhaWxlZFwiKSxyLnNldEVycm9yKEguc2Vzc2lvbl9hcHByb3ZlX25hbWVzcGFjZV92YWxpZGF0aW9uX2ZhaWx1cmUpLFB9Y29uc3R7aWQ6byxyZWxheVByb3RvY29sOmEsbmFtZXNwYWNlczpsLHNlc3Npb25Qcm9wZXJ0aWVzOnUsc2Vzc2lvbkNvbmZpZzpnfT1lLGg9dGhpcy5jbGllbnQucHJvcG9zYWwuZ2V0KG8pO3RoaXMuY2xpZW50LmNvcmUuZXZlbnRDbGllbnQuZGVsZXRlRXZlbnQoe2V2ZW50SWQ6ci5ldmVudElkfSk7Y29uc3R7cGFpcmluZ1RvcGljOmQscHJvcG9zZXI6eSxyZXF1aXJlZE5hbWVzcGFjZXM6bSxvcHRpb25hbE5hbWVzcGFjZXM6SX09aDtsZXQgcD0ocz10aGlzLmNsaWVudC5jb3JlLmV2ZW50Q2xpZW50KT09bnVsbD92b2lkIDA6cy5nZXRFdmVudCh7dG9waWM6ZH0pO3B8fChwPShpPXRoaXMuY2xpZW50LmNvcmUuZXZlbnRDbGllbnQpPT1udWxsP3ZvaWQgMDppLmNyZWF0ZUV2ZW50KHt0eXBlOk0uc2Vzc2lvbl9hcHByb3ZlX3N0YXJ0ZWQscHJvcGVydGllczp7dG9waWM6ZCx0cmFjZTpbTS5zZXNzaW9uX2FwcHJvdmVfc3RhcnRlZCxNLnNlc3Npb25fbmFtZXNwYWNlc192YWxpZGF0aW9uX3N1Y2Nlc3NdfX0pKTtjb25zdCBFPWF3YWl0IHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmdlbmVyYXRlS2V5UGFpcigpLFY9eS5wdWJsaWNLZXkscT1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmNyeXB0by5nZW5lcmF0ZVNoYXJlZEtleShFLFYpLFI9dih2KHtyZWxheTp7cHJvdG9jb2w6YT8/XCJpcm5cIn0sbmFtZXNwYWNlczpsLGNvbnRyb2xsZXI6e3B1YmxpY0tleTpFLG1ldGFkYXRhOnRoaXMuY2xpZW50Lm1ldGFkYXRhfSxleHBpcnk6QyhZKX0sdSYme3Nlc3Npb25Qcm9wZXJ0aWVzOnV9KSxnJiZ7c2Vzc2lvbkNvbmZpZzpnfSksRD1ULnJlbGF5O3AuYWRkVHJhY2UoTS5zdWJzY3JpYmluZ19zZXNzaW9uX3RvcGljKTt0cnl7YXdhaXQgdGhpcy5jbGllbnQuY29yZS5yZWxheWVyLnN1YnNjcmliZShxLHt0cmFuc3BvcnRUeXBlOkR9KX1jYXRjaChQKXt0aHJvdyBwLnNldEVycm9yKEguc3Vic2NyaWJlX3Nlc3Npb25fdG9waWNfZmFpbHVyZSksUH1wLmFkZFRyYWNlKE0uc3Vic2NyaWJlX3Nlc3Npb25fdG9waWNfc3VjY2Vzcyk7Y29uc3QgZWU9eCh2KHt9LFIpLHt0b3BpYzpxLHJlcXVpcmVkTmFtZXNwYWNlczptLG9wdGlvbmFsTmFtZXNwYWNlczpJLHBhaXJpbmdUb3BpYzpkLGFja25vd2xlZGdlZDohMSxzZWxmOlIuY29udHJvbGxlcixwZWVyOntwdWJsaWNLZXk6eS5wdWJsaWNLZXksbWV0YWRhdGE6eS5tZXRhZGF0YX0sY29udHJvbGxlcjpFLHRyYW5zcG9ydFR5cGU6VC5yZWxheX0pO2F3YWl0IHRoaXMuY2xpZW50LnNlc3Npb24uc2V0KHEsZWUpLHAuYWRkVHJhY2UoTS5zdG9yZV9zZXNzaW9uKTt0cnl7cC5hZGRUcmFjZShNLnB1Ymxpc2hpbmdfc2Vzc2lvbl9zZXR0bGUpLGF3YWl0IHRoaXMuc2VuZFJlcXVlc3Qoe3RvcGljOnEsbWV0aG9kOlwid2Nfc2Vzc2lvblNldHRsZVwiLHBhcmFtczpSLHRocm93T25GYWlsZWRQdWJsaXNoOiEwfSkuY2F0Y2goUD0+e3Rocm93IHA/LnNldEVycm9yKEguc2Vzc2lvbl9zZXR0bGVfcHVibGlzaF9mYWlsdXJlKSxQfSkscC5hZGRUcmFjZShNLnNlc3Npb25fc2V0dGxlX3B1Ymxpc2hfc3VjY2VzcykscC5hZGRUcmFjZShNLnB1Ymxpc2hpbmdfc2Vzc2lvbl9hcHByb3ZlKSxhd2FpdCB0aGlzLnNlbmRSZXN1bHQoe2lkOm8sdG9waWM6ZCxyZXN1bHQ6e3JlbGF5Ontwcm90b2NvbDphPz9cImlyblwifSxyZXNwb25kZXJQdWJsaWNLZXk6RX0sdGhyb3dPbkZhaWxlZFB1Ymxpc2g6ITB9KS5jYXRjaChQPT57dGhyb3cgcD8uc2V0RXJyb3IoSC5zZXNzaW9uX2FwcHJvdmVfcHVibGlzaF9mYWlsdXJlKSxQfSkscC5hZGRUcmFjZShNLnNlc3Npb25fYXBwcm92ZV9wdWJsaXNoX3N1Y2Nlc3MpfWNhdGNoKFApe3Rocm93IHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihQKSx0aGlzLmNsaWVudC5zZXNzaW9uLmRlbGV0ZShxLE8oXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKSksYXdhaXQgdGhpcy5jbGllbnQuY29yZS5yZWxheWVyLnVuc3Vic2NyaWJlKHEpLFB9cmV0dXJuIHRoaXMuY2xpZW50LmNvcmUuZXZlbnRDbGllbnQuZGVsZXRlRXZlbnQoe2V2ZW50SWQ6cC5ldmVudElkfSksYXdhaXQgdGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLnVwZGF0ZU1ldGFkYXRhKHt0b3BpYzpkLG1ldGFkYXRhOnkubWV0YWRhdGF9KSxhd2FpdCB0aGlzLmNsaWVudC5wcm9wb3NhbC5kZWxldGUobyxPKFwiVVNFUl9ESVNDT05ORUNURURcIikpLGF3YWl0IHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5hY3RpdmF0ZSh7dG9waWM6ZH0pLGF3YWl0IHRoaXMuc2V0RXhwaXJ5KHEsQyhZKSkse3RvcGljOnEsYWNrbm93bGVkZ2VkOigpPT5Qcm9taXNlLnJlc29sdmUodGhpcy5jbGllbnQuc2Vzc2lvbi5nZXQocSkpfX0pLGModGhpcyxcInJlamVjdFwiLGFzeW5jIGU9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKSxhd2FpdCB0aGlzLmNvbmZpcm1PbmxpbmVTdGF0ZU9yVGhyb3coKTt0cnl7YXdhaXQgdGhpcy5pc1ZhbGlkUmVqZWN0KGUpfWNhdGNoKHIpe3Rocm93IHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihcInJlamVjdCgpIC0+IGlzVmFsaWRSZWplY3QoKSBmYWlsZWRcIikscn1jb25zdHtpZDp0LHJlYXNvbjpzfT1lO2xldCBpO3RyeXtpPXRoaXMuY2xpZW50LnByb3Bvc2FsLmdldCh0KS5wYWlyaW5nVG9waWN9Y2F0Y2gocil7dGhyb3cgdGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGByZWplY3QoKSAtPiBwcm9wb3NhbC5nZXQoJHt0fSkgZmFpbGVkYCkscn1pJiYoYXdhaXQgdGhpcy5zZW5kRXJyb3Ioe2lkOnQsdG9waWM6aSxlcnJvcjpzLHJwY09wdHM6Ti53Y19zZXNzaW9uUHJvcG9zZS5yZWplY3R9KSxhd2FpdCB0aGlzLmNsaWVudC5wcm9wb3NhbC5kZWxldGUodCxPKFwiVVNFUl9ESVNDT05ORUNURURcIikpKX0pLGModGhpcyxcInVwZGF0ZVwiLGFzeW5jIGU9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKSxhd2FpdCB0aGlzLmNvbmZpcm1PbmxpbmVTdGF0ZU9yVGhyb3coKTt0cnl7YXdhaXQgdGhpcy5pc1ZhbGlkVXBkYXRlKGUpfWNhdGNoKGcpe3Rocm93IHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihcInVwZGF0ZSgpIC0+IGlzVmFsaWRVcGRhdGUoKSBmYWlsZWRcIiksZ31jb25zdHt0b3BpYzp0LG5hbWVzcGFjZXM6c309ZSx7ZG9uZTppLHJlc29sdmU6cixyZWplY3Q6b309WigpLGE9RygpLGw9eWUoKS50b1N0cmluZygpLHU9dGhpcy5jbGllbnQuc2Vzc2lvbi5nZXQodCkubmFtZXNwYWNlcztyZXR1cm4gdGhpcy5ldmVudHMub25jZShmKFwic2Vzc2lvbl91cGRhdGVcIixhKSwoe2Vycm9yOmd9KT0+e2c/byhnKTpyKCl9KSxhd2FpdCB0aGlzLmNsaWVudC5zZXNzaW9uLnVwZGF0ZSh0LHtuYW1lc3BhY2VzOnN9KSxhd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KHt0b3BpYzp0LG1ldGhvZDpcIndjX3Nlc3Npb25VcGRhdGVcIixwYXJhbXM6e25hbWVzcGFjZXM6c30sdGhyb3dPbkZhaWxlZFB1Ymxpc2g6ITAsY2xpZW50UnBjSWQ6YSxyZWxheVJwY0lkOmx9KS5jYXRjaChnPT57dGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGcpLHRoaXMuY2xpZW50LnNlc3Npb24udXBkYXRlKHQse25hbWVzcGFjZXM6dX0pLG8oZyl9KSx7YWNrbm93bGVkZ2VkOml9fSksYyh0aGlzLFwiZXh0ZW5kXCIsYXN5bmMgZT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuY29uZmlybU9ubGluZVN0YXRlT3JUaHJvdygpO3RyeXthd2FpdCB0aGlzLmlzVmFsaWRFeHRlbmQoZSl9Y2F0Y2goYSl7dGhyb3cgdGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKFwiZXh0ZW5kKCkgLT4gaXNWYWxpZEV4dGVuZCgpIGZhaWxlZFwiKSxhfWNvbnN0e3RvcGljOnR9PWUscz1HKCkse2RvbmU6aSxyZXNvbHZlOnIscmVqZWN0Om99PVooKTtyZXR1cm4gdGhpcy5ldmVudHMub25jZShmKFwic2Vzc2lvbl9leHRlbmRcIixzKSwoe2Vycm9yOmF9KT0+e2E/byhhKTpyKCl9KSxhd2FpdCB0aGlzLnNldEV4cGlyeSh0LEMoWSkpLHRoaXMuc2VuZFJlcXVlc3Qoe3RvcGljOnQsbWV0aG9kOlwid2Nfc2Vzc2lvbkV4dGVuZFwiLHBhcmFtczp7fSxjbGllbnRScGNJZDpzLHRocm93T25GYWlsZWRQdWJsaXNoOiEwfSkuY2F0Y2goYT0+e28oYSl9KSx7YWNrbm93bGVkZ2VkOml9fSksYyh0aGlzLFwicmVxdWVzdFwiLGFzeW5jIGU9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKTt0cnl7YXdhaXQgdGhpcy5pc1ZhbGlkUmVxdWVzdChlKX1jYXRjaChwKXt0aHJvdyB0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IoXCJyZXF1ZXN0KCkgLT4gaXNWYWxpZFJlcXVlc3QoKSBmYWlsZWRcIikscH1jb25zdHtjaGFpbklkOnQscmVxdWVzdDpzLHRvcGljOmksZXhwaXJ5OnI9Ti53Y19zZXNzaW9uUmVxdWVzdC5yZXEudHRsfT1lLG89dGhpcy5jbGllbnQuc2Vzc2lvbi5nZXQoaSk7bz8udHJhbnNwb3J0VHlwZT09PVQucmVsYXkmJmF3YWl0IHRoaXMuY29uZmlybU9ubGluZVN0YXRlT3JUaHJvdygpO2NvbnN0IGE9RygpLGw9eWUoKS50b1N0cmluZygpLHtkb25lOnUscmVzb2x2ZTpnLHJlamVjdDpofT1aKHIsXCJSZXF1ZXN0IGV4cGlyZWQuIFBsZWFzZSB0cnkgYWdhaW4uXCIpO3RoaXMuZXZlbnRzLm9uY2UoZihcInNlc3Npb25fcmVxdWVzdFwiLGEpLCh7ZXJyb3I6cCxyZXN1bHQ6RX0pPT57cD9oKHApOmcoRSl9KTtjb25zdCBkPVwid2Nfc2Vzc2lvblJlcXVlc3RcIix5PXRoaXMuZ2V0QXBwTGlua0lmRW5hYmxlZChvLnBlZXIubWV0YWRhdGEsby50cmFuc3BvcnRUeXBlKTtpZih5KXJldHVybiBhd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KHtjbGllbnRScGNJZDphLHJlbGF5UnBjSWQ6bCx0b3BpYzppLG1ldGhvZDpkLHBhcmFtczp7cmVxdWVzdDp4KHYoe30scykse2V4cGlyeVRpbWVzdGFtcDpDKHIpfSksY2hhaW5JZDp0fSxleHBpcnk6cix0aHJvd09uRmFpbGVkUHVibGlzaDohMCxhcHBMaW5rOnl9KS5jYXRjaChwPT5oKHApKSx0aGlzLmNsaWVudC5ldmVudHMuZW1pdChcInNlc3Npb25fcmVxdWVzdF9zZW50XCIse3RvcGljOmkscmVxdWVzdDpzLGNoYWluSWQ6dCxpZDphfSksYXdhaXQgdSgpO2NvbnN0IG09e3JlcXVlc3Q6eCh2KHt9LHMpLHtleHBpcnlUaW1lc3RhbXA6QyhyKX0pLGNoYWluSWQ6dH0sST10aGlzLnNob3VsZFNldFRWRihkLG0pO3JldHVybiBhd2FpdCBQcm9taXNlLmFsbChbbmV3IFByb21pc2UoYXN5bmMgcD0+e2F3YWl0IHRoaXMuc2VuZFJlcXVlc3Qodih7Y2xpZW50UnBjSWQ6YSxyZWxheVJwY0lkOmwsdG9waWM6aSxtZXRob2Q6ZCxwYXJhbXM6bSxleHBpcnk6cix0aHJvd09uRmFpbGVkUHVibGlzaDohMH0sSSYme3R2Zjp0aGlzLmdldFRWRlBhcmFtcyhhLG0pfSkpLmNhdGNoKEU9PmgoRSkpLHRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9yZXF1ZXN0X3NlbnRcIix7dG9waWM6aSxyZXF1ZXN0OnMsY2hhaW5JZDp0LGlkOmF9KSxwKCl9KSxuZXcgUHJvbWlzZShhc3luYyBwPT57dmFyIEU7aWYoISgoRT1vLnNlc3Npb25Db25maWcpIT1udWxsJiZFLmRpc2FibGVEZWVwTGluaykpe2NvbnN0IFY9YXdhaXQgS3QodGhpcy5jbGllbnQuY29yZS5zdG9yYWdlLGtlKTthd2FpdCBVdCh7aWQ6YSx0b3BpYzppLHdjRGVlcExpbms6Vn0pfXAoKX0pLHUoKV0pLnRoZW4ocD0+cFsyXSl9KSxjKHRoaXMsXCJyZXNwb25kXCIsYXN5bmMgZT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZFJlc3BvbmQoZSk7Y29uc3R7dG9waWM6dCxyZXNwb25zZTpzfT1lLHtpZDppfT1zLHI9dGhpcy5jbGllbnQuc2Vzc2lvbi5nZXQodCk7ci50cmFuc3BvcnRUeXBlPT09VC5yZWxheSYmYXdhaXQgdGhpcy5jb25maXJtT25saW5lU3RhdGVPclRocm93KCk7Y29uc3Qgbz10aGlzLmdldEFwcExpbmtJZkVuYWJsZWQoci5wZWVyLm1ldGFkYXRhLHIudHJhbnNwb3J0VHlwZSk7RihzKT9hd2FpdCB0aGlzLnNlbmRSZXN1bHQoe2lkOmksdG9waWM6dCxyZXN1bHQ6cy5yZXN1bHQsdGhyb3dPbkZhaWxlZFB1Ymxpc2g6ITAsYXBwTGluazpvfSk6aihzKSYmYXdhaXQgdGhpcy5zZW5kRXJyb3Ioe2lkOmksdG9waWM6dCxlcnJvcjpzLmVycm9yLGFwcExpbms6b30pLHRoaXMuY2xlYW51cEFmdGVyUmVzcG9uc2UoZSl9KSxjKHRoaXMsXCJwaW5nXCIsYXN5bmMgZT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuY29uZmlybU9ubGluZVN0YXRlT3JUaHJvdygpO3RyeXthd2FpdCB0aGlzLmlzVmFsaWRQaW5nKGUpfWNhdGNoKHMpe3Rocm93IHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihcInBpbmcoKSAtPiBpc1ZhbGlkUGluZygpIGZhaWxlZFwiKSxzfWNvbnN0e3RvcGljOnR9PWU7aWYodGhpcy5jbGllbnQuc2Vzc2lvbi5rZXlzLmluY2x1ZGVzKHQpKXtjb25zdCBzPUcoKSxpPXllKCkudG9TdHJpbmcoKSx7ZG9uZTpyLHJlc29sdmU6byxyZWplY3Q6YX09WigpO3RoaXMuZXZlbnRzLm9uY2UoZihcInNlc3Npb25fcGluZ1wiLHMpLCh7ZXJyb3I6bH0pPT57bD9hKGwpOm8oKX0pLGF3YWl0IFByb21pc2UuYWxsKFt0aGlzLnNlbmRSZXF1ZXN0KHt0b3BpYzp0LG1ldGhvZDpcIndjX3Nlc3Npb25QaW5nXCIscGFyYW1zOnt9LHRocm93T25GYWlsZWRQdWJsaXNoOiEwLGNsaWVudFJwY0lkOnMscmVsYXlScGNJZDppfSkscigpXSl9ZWxzZSB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcucGFpcmluZ3Mua2V5cy5pbmNsdWRlcyh0KSYmKHRoaXMuY2xpZW50LmxvZ2dlci53YXJuKFwicGluZygpIG9uIHBhaXJpbmcgdG9waWMgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXCIpLGF3YWl0IHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5waW5nKHt0b3BpYzp0fSkpfSksYyh0aGlzLFwiZW1pdFwiLGFzeW5jIGU9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKSxhd2FpdCB0aGlzLmNvbmZpcm1PbmxpbmVTdGF0ZU9yVGhyb3coKSxhd2FpdCB0aGlzLmlzVmFsaWRFbWl0KGUpO2NvbnN0e3RvcGljOnQsZXZlbnQ6cyxjaGFpbklkOml9PWUscj15ZSgpLnRvU3RyaW5nKCksbz1HKCk7YXdhaXQgdGhpcy5zZW5kUmVxdWVzdCh7dG9waWM6dCxtZXRob2Q6XCJ3Y19zZXNzaW9uRXZlbnRcIixwYXJhbXM6e2V2ZW50OnMsY2hhaW5JZDppfSx0aHJvd09uRmFpbGVkUHVibGlzaDohMCxyZWxheVJwY0lkOnIsY2xpZW50UnBjSWQ6b30pfSksYyh0aGlzLFwiZGlzY29ubmVjdFwiLGFzeW5jIGU9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKSxhd2FpdCB0aGlzLmNvbmZpcm1PbmxpbmVTdGF0ZU9yVGhyb3coKSxhd2FpdCB0aGlzLmlzVmFsaWREaXNjb25uZWN0KGUpO2NvbnN0e3RvcGljOnR9PWU7aWYodGhpcy5jbGllbnQuc2Vzc2lvbi5rZXlzLmluY2x1ZGVzKHQpKWF3YWl0IHRoaXMuc2VuZFJlcXVlc3Qoe3RvcGljOnQsbWV0aG9kOlwid2Nfc2Vzc2lvbkRlbGV0ZVwiLHBhcmFtczpPKFwiVVNFUl9ESVNDT05ORUNURURcIiksdGhyb3dPbkZhaWxlZFB1Ymxpc2g6ITB9KSxhd2FpdCB0aGlzLmRlbGV0ZVNlc3Npb24oe3RvcGljOnQsZW1pdEV2ZW50OiExfSk7ZWxzZSBpZih0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcucGFpcmluZ3Mua2V5cy5pbmNsdWRlcyh0KSlhd2FpdCB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcuZGlzY29ubmVjdCh7dG9waWM6dH0pO2Vsc2V7Y29uc3R7bWVzc2FnZTpzfT13KFwiTUlTTUFUQ0hFRF9UT1BJQ1wiLGBTZXNzaW9uIG9yIHBhaXJpbmcgdG9waWMgbm90IGZvdW5kOiAke3R9YCk7dGhyb3cgbmV3IEVycm9yKHMpfX0pLGModGhpcyxcImZpbmRcIixlPT4odGhpcy5pc0luaXRpYWxpemVkKCksdGhpcy5jbGllbnQuc2Vzc2lvbi5nZXRBbGwoKS5maWx0ZXIodD0+R3QodCxlKSkpKSxjKHRoaXMsXCJnZXRQZW5kaW5nU2Vzc2lvblJlcXVlc3RzXCIsKCk9PnRoaXMuY2xpZW50LnBlbmRpbmdSZXF1ZXN0LmdldEFsbCgpKSxjKHRoaXMsXCJhdXRoZW50aWNhdGVcIixhc3luYyhlLHQpPT57dmFyIHM7dGhpcy5pc0luaXRpYWxpemVkKCksdGhpcy5pc1ZhbGlkQXV0aGVudGljYXRlKGUpO2NvbnN0IGk9dCYmdGhpcy5jbGllbnQuY29yZS5saW5rTW9kZVN1cHBvcnRlZEFwcHMuaW5jbHVkZXModCkmJigocz10aGlzLmNsaWVudC5tZXRhZGF0YS5yZWRpcmVjdCk9PW51bGw/dm9pZCAwOnMubGlua01vZGUpLHI9aT9ULmxpbmtfbW9kZTpULnJlbGF5O3I9PT1ULnJlbGF5JiZhd2FpdCB0aGlzLmNvbmZpcm1PbmxpbmVTdGF0ZU9yVGhyb3coKTtjb25zdHtjaGFpbnM6byxzdGF0ZW1lbnQ6YT1cIlwiLHVyaTpsLGRvbWFpbjp1LG5vbmNlOmcsdHlwZTpoLGV4cDpkLG5iZjp5LG1ldGhvZHM6bT1bXSxleHBpcnk6SX09ZSxwPVsuLi5lLnJlc291cmNlc3x8W11dLHt0b3BpYzpFLHVyaTpWfT1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcuY3JlYXRlKHttZXRob2RzOltcIndjX3Nlc3Npb25BdXRoZW50aWNhdGVcIl0sdHJhbnNwb3J0VHlwZTpyfSk7dGhpcy5jbGllbnQubG9nZ2VyLmluZm8oe21lc3NhZ2U6XCJHZW5lcmF0ZWQgbmV3IHBhaXJpbmdcIixwYWlyaW5nOnt0b3BpYzpFLHVyaTpWfX0pO2NvbnN0IHE9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZ2VuZXJhdGVLZXlQYWlyKCksUj1iZShxKTtpZihhd2FpdCBQcm9taXNlLmFsbChbdGhpcy5jbGllbnQuYXV0aC5hdXRoS2V5cy5zZXQobGUse3Jlc3BvbnNlVG9waWM6UixwdWJsaWNLZXk6cX0pLHRoaXMuY2xpZW50LmF1dGgucGFpcmluZ1RvcGljcy5zZXQoUix7dG9waWM6UixwYWlyaW5nVG9waWM6RX0pXSksYXdhaXQgdGhpcy5jbGllbnQuY29yZS5yZWxheWVyLnN1YnNjcmliZShSLHt0cmFuc3BvcnRUeXBlOnJ9KSx0aGlzLmNsaWVudC5sb2dnZXIuaW5mbyhgc2VuZGluZyByZXF1ZXN0IHRvIG5ldyBwYWlyaW5nIHRvcGljOiAke0V9YCksbS5sZW5ndGg+MCl7Y29uc3R7bmFtZXNwYWNlOmJ9PUFlKG9bMF0pO2xldCBMPUZ0KGIsXCJyZXF1ZXN0XCIsbSk7Q2UocCkmJihMPWp0KEwscC5wb3AoKSkpLHAucHVzaChMKX1jb25zdCBEPUkmJkk+Ti53Y19zZXNzaW9uQXV0aGVudGljYXRlLnJlcS50dGw/STpOLndjX3Nlc3Npb25BdXRoZW50aWNhdGUucmVxLnR0bCxlZT17YXV0aFBheWxvYWQ6e3R5cGU6aD8/XCJjYWlwMTIyXCIsY2hhaW5zOm8sc3RhdGVtZW50OmEsYXVkOmwsZG9tYWluOnUsdmVyc2lvbjpcIjFcIixub25jZTpnLGlhdDpuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksZXhwOmQsbmJmOnkscmVzb3VyY2VzOnB9LHJlcXVlc3Rlcjp7cHVibGljS2V5OnEsbWV0YWRhdGE6dGhpcy5jbGllbnQubWV0YWRhdGF9LGV4cGlyeVRpbWVzdGFtcDpDKEQpfSxQPXtlaXAxNTU6e2NoYWluczpvLG1ldGhvZHM6Wy4uLm5ldyBTZXQoW1wicGVyc29uYWxfc2lnblwiLC4uLm1dKV0sZXZlbnRzOltcImNoYWluQ2hhbmdlZFwiLFwiYWNjb3VudHNDaGFuZ2VkXCJdfX0sWD17cmVxdWlyZWROYW1lc3BhY2VzOnt9LG9wdGlvbmFsTmFtZXNwYWNlczpQLHJlbGF5czpbe3Byb3RvY29sOlwiaXJuXCJ9XSxwYWlyaW5nVG9waWM6RSxwcm9wb3Nlcjp7cHVibGljS2V5OnEsbWV0YWRhdGE6dGhpcy5jbGllbnQubWV0YWRhdGF9LGV4cGlyeVRpbWVzdGFtcDpDKE4ud2Nfc2Vzc2lvblByb3Bvc2UucmVxLnR0bCksaWQ6RygpfSx7ZG9uZTpmdCxyZXNvbHZlOkZlLHJlamVjdDpSZX09WihELFwiUmVxdWVzdCBleHBpcmVkXCIpLHRlPUcoKSxwZT1mKFwic2Vzc2lvbl9jb25uZWN0XCIsWC5pZCksZmU9ZihcInNlc3Npb25fcmVxdWVzdFwiLHRlKSxoZT1hc3luYyh7ZXJyb3I6YixzZXNzaW9uOkx9KT0+e3RoaXMuZXZlbnRzLm9mZihmZSxJZSksYj9SZShiKTpMJiZGZSh7c2Vzc2lvbjpMfSl9LEllPWFzeW5jIGI9Pnt2YXIgTCxqZSxRZTtpZihhd2FpdCB0aGlzLmRlbGV0ZVBlbmRpbmdBdXRoUmVxdWVzdCh0ZSx7bWVzc2FnZTpcImZ1bGZpbGxlZFwiLGNvZGU6MH0pLGIuZXJyb3Ipe2NvbnN0IGllPU8oXCJXQ19NRVRIT0RfVU5TVVBQT1JURURcIixcIndjX3Nlc3Npb25BdXRoZW50aWNhdGVcIik7cmV0dXJuIGIuZXJyb3IuY29kZT09PWllLmNvZGU/dm9pZCAwOih0aGlzLmV2ZW50cy5vZmYocGUsaGUpLFJlKGIuZXJyb3IubWVzc2FnZSkpfWF3YWl0IHRoaXMuZGVsZXRlUHJvcG9zYWwoWC5pZCksdGhpcy5ldmVudHMub2ZmKHBlLGhlKTtjb25zdHtjYWNhb3M6SGUscmVzcG9uZGVyOlF9PWIucmVzdWx0LHFlPVtdLHplPVtdO2Zvcihjb25zdCBpZSBvZiBIZSl7YXdhaXQgZXQoe2NhY2FvOmllLHByb2plY3RJZDp0aGlzLmNsaWVudC5jb3JlLnByb2plY3RJZH0pfHwodGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGllLFwiU2lnbmF0dXJlIHZlcmlmaWNhdGlvbiBmYWlsZWRcIiksUmUoTyhcIlNFU1NJT05fU0VUVExFTUVOVF9GQUlMRURcIixcIlNpZ25hdHVyZSB2ZXJpZmljYXRpb24gZmFpbGVkXCIpKSk7Y29uc3R7cDpUZX09aWUsTmU9Q2UoVGUucmVzb3VyY2VzKSxZZT1bdHQoVGUuaXNzKV0sSXQ9c3QoVGUuaXNzKTtpZihOZSl7Y29uc3QgUGU9aXQoTmUpLHZ0PXJ0KE5lKTtxZS5wdXNoKC4uLlBlKSxZZS5wdXNoKC4uLnZ0KX1mb3IoY29uc3QgUGUgb2YgWWUpemUucHVzaChgJHtQZX06JHtJdH1gKX1jb25zdCBzZT1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmNyeXB0by5nZW5lcmF0ZVNoYXJlZEtleShxLFEucHVibGljS2V5KTtsZXQgZGU7cWUubGVuZ3RoPjAmJihkZT17dG9waWM6c2UsYWNrbm93bGVkZ2VkOiEwLHNlbGY6e3B1YmxpY0tleTpxLG1ldGFkYXRhOnRoaXMuY2xpZW50Lm1ldGFkYXRhfSxwZWVyOlEsY29udHJvbGxlcjpRLnB1YmxpY0tleSxleHBpcnk6QyhZKSxyZXF1aXJlZE5hbWVzcGFjZXM6e30sb3B0aW9uYWxOYW1lc3BhY2VzOnt9LHJlbGF5Ontwcm90b2NvbDpcImlyblwifSxwYWlyaW5nVG9waWM6RSxuYW1lc3BhY2VzOm50KFsuLi5uZXcgU2V0KHFlKV0sWy4uLm5ldyBTZXQoemUpXSksdHJhbnNwb3J0VHlwZTpyfSxhd2FpdCB0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIuc3Vic2NyaWJlKHNlLHt0cmFuc3BvcnRUeXBlOnJ9KSxhd2FpdCB0aGlzLmNsaWVudC5zZXNzaW9uLnNldChzZSxkZSksRSYmYXdhaXQgdGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLnVwZGF0ZU1ldGFkYXRhKHt0b3BpYzpFLG1ldGFkYXRhOlEubWV0YWRhdGF9KSxkZT10aGlzLmNsaWVudC5zZXNzaW9uLmdldChzZSkpLChMPXRoaXMuY2xpZW50Lm1ldGFkYXRhLnJlZGlyZWN0KSE9bnVsbCYmTC5saW5rTW9kZSYmKGplPVEubWV0YWRhdGEucmVkaXJlY3QpIT1udWxsJiZqZS5saW5rTW9kZSYmKFFlPVEubWV0YWRhdGEucmVkaXJlY3QpIT1udWxsJiZRZS51bml2ZXJzYWwmJnQmJih0aGlzLmNsaWVudC5jb3JlLmFkZExpbmtNb2RlU3VwcG9ydGVkQXBwKFEubWV0YWRhdGEucmVkaXJlY3QudW5pdmVyc2FsKSx0aGlzLmNsaWVudC5zZXNzaW9uLnVwZGF0ZShzZSx7dHJhbnNwb3J0VHlwZTpULmxpbmtfbW9kZX0pKSxGZSh7YXV0aHM6SGUsc2Vzc2lvbjpkZX0pfTt0aGlzLmV2ZW50cy5vbmNlKHBlLGhlKSx0aGlzLmV2ZW50cy5vbmNlKGZlLEllKTtsZXQgdmU7dHJ5e2lmKGkpe2NvbnN0IGI9d2UoXCJ3Y19zZXNzaW9uQXV0aGVudGljYXRlXCIsZWUsdGUpO3RoaXMuY2xpZW50LmNvcmUuaGlzdG9yeS5zZXQoRSxiKTtjb25zdCBMPWF3YWl0IHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmVuY29kZShcIlwiLGIse3R5cGU6UXQsZW5jb2Rpbmc6bmV9KTt2ZT1nZSh0LEUsTCl9ZWxzZSBhd2FpdCBQcm9taXNlLmFsbChbdGhpcy5zZW5kUmVxdWVzdCh7dG9waWM6RSxtZXRob2Q6XCJ3Y19zZXNzaW9uQXV0aGVudGljYXRlXCIscGFyYW1zOmVlLGV4cGlyeTplLmV4cGlyeSx0aHJvd09uRmFpbGVkUHVibGlzaDohMCxjbGllbnRScGNJZDp0ZX0pLHRoaXMuc2VuZFJlcXVlc3Qoe3RvcGljOkUsbWV0aG9kOlwid2Nfc2Vzc2lvblByb3Bvc2VcIixwYXJhbXM6WCxleHBpcnk6Ti53Y19zZXNzaW9uUHJvcG9zZS5yZXEudHRsLHRocm93T25GYWlsZWRQdWJsaXNoOiEwLGNsaWVudFJwY0lkOlguaWR9KV0pfWNhdGNoKGIpe3Rocm93IHRoaXMuZXZlbnRzLm9mZihwZSxoZSksdGhpcy5ldmVudHMub2ZmKGZlLEllKSxifXJldHVybiBhd2FpdCB0aGlzLnNldFByb3Bvc2FsKFguaWQsWCksYXdhaXQgdGhpcy5zZXRBdXRoUmVxdWVzdCh0ZSx7cmVxdWVzdDp4KHYoe30sZWUpLHt2ZXJpZnlDb250ZXh0Ont9fSkscGFpcmluZ1RvcGljOkUsdHJhbnNwb3J0VHlwZTpyfSkse3VyaTp2ZT8/VixyZXNwb25zZTpmdH19KSxjKHRoaXMsXCJhcHByb3ZlU2Vzc2lvbkF1dGhlbnRpY2F0ZVwiLGFzeW5jIGU9Pntjb25zdHtpZDp0LGF1dGhzOnN9PWUsaT10aGlzLmNsaWVudC5jb3JlLmV2ZW50Q2xpZW50LmNyZWF0ZUV2ZW50KHtwcm9wZXJ0aWVzOnt0b3BpYzp0LnRvU3RyaW5nKCksdHJhY2U6W3ouYXV0aGVudGljYXRlZF9zZXNzaW9uX2FwcHJvdmVfc3RhcnRlZF19fSk7dHJ5e3RoaXMuaXNJbml0aWFsaXplZCgpfWNhdGNoKEkpe3Rocm93IGkuc2V0RXJyb3IocmUubm9faW50ZXJuZXRfY29ubmVjdGlvbiksSX1jb25zdCByPXRoaXMuZ2V0UGVuZGluZ0F1dGhSZXF1ZXN0KHQpO2lmKCFyKXRocm93IGkuc2V0RXJyb3IocmUuYXV0aGVudGljYXRlZF9zZXNzaW9uX3BlbmRpbmdfcmVxdWVzdF9ub3RfZm91bmQpLG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgcGVuZGluZyBhdXRoIHJlcXVlc3Qgd2l0aCBpZCAke3R9YCk7Y29uc3Qgbz1yLnRyYW5zcG9ydFR5cGV8fFQucmVsYXk7bz09PVQucmVsYXkmJmF3YWl0IHRoaXMuY29uZmlybU9ubGluZVN0YXRlT3JUaHJvdygpO2NvbnN0IGE9ci5yZXF1ZXN0ZXIucHVibGljS2V5LGw9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZ2VuZXJhdGVLZXlQYWlyKCksdT1iZShhKSxnPXt0eXBlOlZlLHJlY2VpdmVyUHVibGljS2V5OmEsc2VuZGVyUHVibGljS2V5Omx9LGg9W10sZD1bXTtmb3IoY29uc3QgSSBvZiBzKXtpZighYXdhaXQgZXQoe2NhY2FvOkkscHJvamVjdElkOnRoaXMuY2xpZW50LmNvcmUucHJvamVjdElkfSkpe2kuc2V0RXJyb3IocmUuaW52YWxpZF9jYWNhbyk7Y29uc3QgUj1PKFwiU0VTU0lPTl9TRVRUTEVNRU5UX0ZBSUxFRFwiLFwiU2lnbmF0dXJlIHZlcmlmaWNhdGlvbiBmYWlsZWRcIik7dGhyb3cgYXdhaXQgdGhpcy5zZW5kRXJyb3Ioe2lkOnQsdG9waWM6dSxlcnJvcjpSLGVuY29kZU9wdHM6Z30pLG5ldyBFcnJvcihSLm1lc3NhZ2UpfWkuYWRkVHJhY2Uoei5jYWNhb3NfdmVyaWZpZWQpO2NvbnN0e3B9PUksRT1DZShwLnJlc291cmNlcyksVj1bdHQocC5pc3MpXSxxPXN0KHAuaXNzKTtpZihFKXtjb25zdCBSPWl0KEUpLEQ9cnQoRSk7aC5wdXNoKC4uLlIpLFYucHVzaCguLi5EKX1mb3IoY29uc3QgUiBvZiBWKWQucHVzaChgJHtSfToke3F9YCl9Y29uc3QgeT1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmNyeXB0by5nZW5lcmF0ZVNoYXJlZEtleShsLGEpO2kuYWRkVHJhY2Uoei5jcmVhdGVfYXV0aGVudGljYXRlZF9zZXNzaW9uX3RvcGljKTtsZXQgbTtpZihoPy5sZW5ndGg+MCl7bT17dG9waWM6eSxhY2tub3dsZWRnZWQ6ITAsc2VsZjp7cHVibGljS2V5OmwsbWV0YWRhdGE6dGhpcy5jbGllbnQubWV0YWRhdGF9LHBlZXI6e3B1YmxpY0tleTphLG1ldGFkYXRhOnIucmVxdWVzdGVyLm1ldGFkYXRhfSxjb250cm9sbGVyOmEsZXhwaXJ5OkMoWSksYXV0aGVudGljYXRpb246cyxyZXF1aXJlZE5hbWVzcGFjZXM6e30sb3B0aW9uYWxOYW1lc3BhY2VzOnt9LHJlbGF5Ontwcm90b2NvbDpcImlyblwifSxwYWlyaW5nVG9waWM6ci5wYWlyaW5nVG9waWMsbmFtZXNwYWNlczpudChbLi4ubmV3IFNldChoKV0sWy4uLm5ldyBTZXQoZCldKSx0cmFuc3BvcnRUeXBlOm99LGkuYWRkVHJhY2Uoei5zdWJzY3JpYmluZ19hdXRoZW50aWNhdGVkX3Nlc3Npb25fdG9waWMpO3RyeXthd2FpdCB0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIuc3Vic2NyaWJlKHkse3RyYW5zcG9ydFR5cGU6b30pfWNhdGNoKEkpe3Rocm93IGkuc2V0RXJyb3IocmUuc3Vic2NyaWJlX2F1dGhlbnRpY2F0ZWRfc2Vzc2lvbl90b3BpY19mYWlsdXJlKSxJfWkuYWRkVHJhY2Uoei5zdWJzY3JpYmVfYXV0aGVudGljYXRlZF9zZXNzaW9uX3RvcGljX3N1Y2Nlc3MpLGF3YWl0IHRoaXMuY2xpZW50LnNlc3Npb24uc2V0KHksbSksaS5hZGRUcmFjZSh6LnN0b3JlX2F1dGhlbnRpY2F0ZWRfc2Vzc2lvbiksYXdhaXQgdGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLnVwZGF0ZU1ldGFkYXRhKHt0b3BpYzpyLnBhaXJpbmdUb3BpYyxtZXRhZGF0YTpyLnJlcXVlc3Rlci5tZXRhZGF0YX0pfWkuYWRkVHJhY2Uoei5wdWJsaXNoaW5nX2F1dGhlbnRpY2F0ZWRfc2Vzc2lvbl9hcHByb3ZlKTt0cnl7YXdhaXQgdGhpcy5zZW5kUmVzdWx0KHt0b3BpYzp1LGlkOnQscmVzdWx0OntjYWNhb3M6cyxyZXNwb25kZXI6e3B1YmxpY0tleTpsLG1ldGFkYXRhOnRoaXMuY2xpZW50Lm1ldGFkYXRhfX0sZW5jb2RlT3B0czpnLHRocm93T25GYWlsZWRQdWJsaXNoOiEwLGFwcExpbms6dGhpcy5nZXRBcHBMaW5rSWZFbmFibGVkKHIucmVxdWVzdGVyLm1ldGFkYXRhLG8pfSl9Y2F0Y2goSSl7dGhyb3cgaS5zZXRFcnJvcihyZS5hdXRoZW50aWNhdGVkX3Nlc3Npb25fYXBwcm92ZV9wdWJsaXNoX2ZhaWx1cmUpLEl9cmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmF1dGgucmVxdWVzdHMuZGVsZXRlKHQse21lc3NhZ2U6XCJmdWxmaWxsZWRcIixjb2RlOjB9KSxhd2FpdCB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcuYWN0aXZhdGUoe3RvcGljOnIucGFpcmluZ1RvcGljfSksdGhpcy5jbGllbnQuY29yZS5ldmVudENsaWVudC5kZWxldGVFdmVudCh7ZXZlbnRJZDppLmV2ZW50SWR9KSx7c2Vzc2lvbjptfX0pLGModGhpcyxcInJlamVjdFNlc3Npb25BdXRoZW50aWNhdGVcIixhc3luYyBlPT57dGhpcy5pc0luaXRpYWxpemVkKCk7Y29uc3R7aWQ6dCxyZWFzb246c309ZSxpPXRoaXMuZ2V0UGVuZGluZ0F1dGhSZXF1ZXN0KHQpO2lmKCFpKXRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgcGVuZGluZyBhdXRoIHJlcXVlc3Qgd2l0aCBpZCAke3R9YCk7aS50cmFuc3BvcnRUeXBlPT09VC5yZWxheSYmYXdhaXQgdGhpcy5jb25maXJtT25saW5lU3RhdGVPclRocm93KCk7Y29uc3Qgcj1pLnJlcXVlc3Rlci5wdWJsaWNLZXksbz1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmNyeXB0by5nZW5lcmF0ZUtleVBhaXIoKSxhPWJlKHIpLGw9e3R5cGU6VmUscmVjZWl2ZXJQdWJsaWNLZXk6cixzZW5kZXJQdWJsaWNLZXk6b307YXdhaXQgdGhpcy5zZW5kRXJyb3Ioe2lkOnQsdG9waWM6YSxlcnJvcjpzLGVuY29kZU9wdHM6bCxycGNPcHRzOk4ud2Nfc2Vzc2lvbkF1dGhlbnRpY2F0ZS5yZWplY3QsYXBwTGluazp0aGlzLmdldEFwcExpbmtJZkVuYWJsZWQoaS5yZXF1ZXN0ZXIubWV0YWRhdGEsaS50cmFuc3BvcnRUeXBlKX0pLGF3YWl0IHRoaXMuY2xpZW50LmF1dGgucmVxdWVzdHMuZGVsZXRlKHQse21lc3NhZ2U6XCJyZWplY3RlZFwiLGNvZGU6MH0pLGF3YWl0IHRoaXMuY2xpZW50LnByb3Bvc2FsLmRlbGV0ZSh0LE8oXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKSl9KSxjKHRoaXMsXCJmb3JtYXRBdXRoTWVzc2FnZVwiLGU9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKTtjb25zdHtyZXF1ZXN0OnQsaXNzOnN9PWU7cmV0dXJuIEh0KHQscyl9KSxjKHRoaXMsXCJwcm9jZXNzUmVsYXlNZXNzYWdlQ2FjaGVcIiwoKT0+e3NldFRpbWVvdXQoYXN5bmMoKT0+e2lmKHRoaXMucmVsYXlNZXNzYWdlQ2FjaGUubGVuZ3RoIT09MClmb3IoO3RoaXMucmVsYXlNZXNzYWdlQ2FjaGUubGVuZ3RoPjA7KXRyeXtjb25zdCBlPXRoaXMucmVsYXlNZXNzYWdlQ2FjaGUuc2hpZnQoKTtlJiZhd2FpdCB0aGlzLm9uUmVsYXlNZXNzYWdlKGUpfWNhdGNoKGUpe3RoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihlKX19LDUwKX0pLGModGhpcyxcImNsZWFudXBEdXBsaWNhdGVQYWlyaW5nc1wiLGFzeW5jIGU9PntpZihlLnBhaXJpbmdUb3BpYyl0cnl7Y29uc3QgdD10aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcucGFpcmluZ3MuZ2V0KGUucGFpcmluZ1RvcGljKSxzPXRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5wYWlyaW5ncy5nZXRBbGwoKS5maWx0ZXIoaT0+e3ZhciByLG87cmV0dXJuKChyPWkucGVlck1ldGFkYXRhKT09bnVsbD92b2lkIDA6ci51cmwpJiYoKG89aS5wZWVyTWV0YWRhdGEpPT1udWxsP3ZvaWQgMDpvLnVybCk9PT1lLnBlZXIubWV0YWRhdGEudXJsJiZpLnRvcGljJiZpLnRvcGljIT09dC50b3BpY30pO2lmKHMubGVuZ3RoPT09MClyZXR1cm47dGhpcy5jbGllbnQubG9nZ2VyLmluZm8oYENsZWFuaW5nIHVwICR7cy5sZW5ndGh9IGR1cGxpY2F0ZSBwYWlyaW5nKHMpYCksYXdhaXQgUHJvbWlzZS5hbGwocy5tYXAoaT0+dGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLmRpc2Nvbm5lY3Qoe3RvcGljOmkudG9waWN9KSkpLHRoaXMuY2xpZW50LmxvZ2dlci5pbmZvKFwiRHVwbGljYXRlIHBhaXJpbmdzIGNsZWFuIHVwIGZpbmlzaGVkXCIpfWNhdGNoKHQpe3RoaXMuY2xpZW50LmxvZ2dlci5lcnJvcih0KX19KSxjKHRoaXMsXCJkZWxldGVTZXNzaW9uXCIsYXN5bmMgZT0+e3ZhciB0O2NvbnN0e3RvcGljOnMsZXhwaXJlckhhc0RlbGV0ZWQ6aT0hMSxlbWl0RXZlbnQ6cj0hMCxpZDpvPTB9PWUse3NlbGY6YX09dGhpcy5jbGllbnQuc2Vzc2lvbi5nZXQocyk7YXdhaXQgdGhpcy5jbGllbnQuY29yZS5yZWxheWVyLnVuc3Vic2NyaWJlKHMpLGF3YWl0IHRoaXMuY2xpZW50LnNlc3Npb24uZGVsZXRlKHMsTyhcIlVTRVJfRElTQ09OTkVDVEVEXCIpKSx0aGlzLmFkZFRvUmVjZW50bHlEZWxldGVkKHMsXCJzZXNzaW9uXCIpLHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmtleWNoYWluLmhhcyhhLnB1YmxpY0tleSkmJmF3YWl0IHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmRlbGV0ZUtleVBhaXIoYS5wdWJsaWNLZXkpLHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmtleWNoYWluLmhhcyhzKSYmYXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZGVsZXRlU3ltS2V5KHMpLGl8fHRoaXMuY2xpZW50LmNvcmUuZXhwaXJlci5kZWwocyksdGhpcy5jbGllbnQuY29yZS5zdG9yYWdlLnJlbW92ZUl0ZW0oa2UpLmNhdGNoKGw9PnRoaXMuY2xpZW50LmxvZ2dlci53YXJuKGwpKSx0aGlzLmdldFBlbmRpbmdTZXNzaW9uUmVxdWVzdHMoKS5mb3JFYWNoKGw9PntsLnRvcGljPT09cyYmdGhpcy5kZWxldGVQZW5kaW5nU2Vzc2lvblJlcXVlc3QobC5pZCxPKFwiVVNFUl9ESVNDT05ORUNURURcIikpfSkscz09PSgodD10aGlzLnNlc3Npb25SZXF1ZXN0UXVldWUucXVldWVbMF0pPT1udWxsP3ZvaWQgMDp0LnRvcGljKSYmKHRoaXMuc2Vzc2lvblJlcXVlc3RRdWV1ZS5zdGF0ZT0kLmlkbGUpLHImJnRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9kZWxldGVcIix7aWQ6byx0b3BpYzpzfSl9KSxjKHRoaXMsXCJkZWxldGVQcm9wb3NhbFwiLGFzeW5jKGUsdCk9PntpZih0KXRyeXtjb25zdCBzPXRoaXMuY2xpZW50LnByb3Bvc2FsLmdldChlKSxpPXRoaXMuY2xpZW50LmNvcmUuZXZlbnRDbGllbnQuZ2V0RXZlbnQoe3RvcGljOnMucGFpcmluZ1RvcGljfSk7aT8uc2V0RXJyb3IoSC5wcm9wb3NhbF9leHBpcmVkKX1jYXRjaHt9YXdhaXQgUHJvbWlzZS5hbGwoW3RoaXMuY2xpZW50LnByb3Bvc2FsLmRlbGV0ZShlLE8oXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKSksdD9Qcm9taXNlLnJlc29sdmUoKTp0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIuZGVsKGUpXSksdGhpcy5hZGRUb1JlY2VudGx5RGVsZXRlZChlLFwicHJvcG9zYWxcIil9KSxjKHRoaXMsXCJkZWxldGVQZW5kaW5nU2Vzc2lvblJlcXVlc3RcIixhc3luYyhlLHQscz0hMSk9Pnthd2FpdCBQcm9taXNlLmFsbChbdGhpcy5jbGllbnQucGVuZGluZ1JlcXVlc3QuZGVsZXRlKGUsdCkscz9Qcm9taXNlLnJlc29sdmUoKTp0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIuZGVsKGUpXSksdGhpcy5hZGRUb1JlY2VudGx5RGVsZXRlZChlLFwicmVxdWVzdFwiKSx0aGlzLnNlc3Npb25SZXF1ZXN0UXVldWUucXVldWU9dGhpcy5zZXNzaW9uUmVxdWVzdFF1ZXVlLnF1ZXVlLmZpbHRlcihpPT5pLmlkIT09ZSkscyYmKHRoaXMuc2Vzc2lvblJlcXVlc3RRdWV1ZS5zdGF0ZT0kLmlkbGUsdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX3JlcXVlc3RfZXhwaXJlXCIse2lkOmV9KSl9KSxjKHRoaXMsXCJkZWxldGVQZW5kaW5nQXV0aFJlcXVlc3RcIixhc3luYyhlLHQscz0hMSk9Pnthd2FpdCBQcm9taXNlLmFsbChbdGhpcy5jbGllbnQuYXV0aC5yZXF1ZXN0cy5kZWxldGUoZSx0KSxzP1Byb21pc2UucmVzb2x2ZSgpOnRoaXMuY2xpZW50LmNvcmUuZXhwaXJlci5kZWwoZSldKX0pLGModGhpcyxcInNldEV4cGlyeVwiLGFzeW5jKGUsdCk9Pnt0aGlzLmNsaWVudC5zZXNzaW9uLmtleXMuaW5jbHVkZXMoZSkmJih0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIuc2V0KGUsdCksYXdhaXQgdGhpcy5jbGllbnQuc2Vzc2lvbi51cGRhdGUoZSx7ZXhwaXJ5OnR9KSl9KSxjKHRoaXMsXCJzZXRQcm9wb3NhbFwiLGFzeW5jKGUsdCk9Pnt0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIuc2V0KGUsQyhOLndjX3Nlc3Npb25Qcm9wb3NlLnJlcS50dGwpKSxhd2FpdCB0aGlzLmNsaWVudC5wcm9wb3NhbC5zZXQoZSx0KX0pLGModGhpcyxcInNldEF1dGhSZXF1ZXN0XCIsYXN5bmMoZSx0KT0+e2NvbnN0e3JlcXVlc3Q6cyxwYWlyaW5nVG9waWM6aSx0cmFuc3BvcnRUeXBlOnI9VC5yZWxheX09dDt0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIuc2V0KGUscy5leHBpcnlUaW1lc3RhbXApLGF3YWl0IHRoaXMuY2xpZW50LmF1dGgucmVxdWVzdHMuc2V0KGUse2F1dGhQYXlsb2FkOnMuYXV0aFBheWxvYWQscmVxdWVzdGVyOnMucmVxdWVzdGVyLGV4cGlyeVRpbWVzdGFtcDpzLmV4cGlyeVRpbWVzdGFtcCxpZDplLHBhaXJpbmdUb3BpYzppLHZlcmlmeUNvbnRleHQ6cy52ZXJpZnlDb250ZXh0LHRyYW5zcG9ydFR5cGU6cn0pfSksYyh0aGlzLFwic2V0UGVuZGluZ1Nlc3Npb25SZXF1ZXN0XCIsYXN5bmMgZT0+e2NvbnN0e2lkOnQsdG9waWM6cyxwYXJhbXM6aSx2ZXJpZnlDb250ZXh0OnJ9PWUsbz1pLnJlcXVlc3QuZXhwaXJ5VGltZXN0YW1wfHxDKE4ud2Nfc2Vzc2lvblJlcXVlc3QucmVxLnR0bCk7dGhpcy5jbGllbnQuY29yZS5leHBpcmVyLnNldCh0LG8pLGF3YWl0IHRoaXMuY2xpZW50LnBlbmRpbmdSZXF1ZXN0LnNldCh0LHtpZDp0LHRvcGljOnMscGFyYW1zOmksdmVyaWZ5Q29udGV4dDpyfSl9KSxjKHRoaXMsXCJzZW5kUmVxdWVzdFwiLGFzeW5jIGU9Pntjb25zdHt0b3BpYzp0LG1ldGhvZDpzLHBhcmFtczppLGV4cGlyeTpyLHJlbGF5UnBjSWQ6byxjbGllbnRScGNJZDphLHRocm93T25GYWlsZWRQdWJsaXNoOmwsYXBwTGluazp1LHR2ZjpnfT1lLGg9d2UocyxpLGEpO2xldCBkO2NvbnN0IHk9ISF1O3RyeXtjb25zdCBwPXk/bmU6dWU7ZD1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmNyeXB0by5lbmNvZGUodCxoLHtlbmNvZGluZzpwfSl9Y2F0Y2gocCl7dGhyb3cgYXdhaXQgdGhpcy5jbGVhbnVwKCksdGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGBzZW5kUmVxdWVzdCgpIC0+IGNvcmUuY3J5cHRvLmVuY29kZSgpIGZvciB0b3BpYyAke3R9IGZhaWxlZGApLHB9bGV0IG07aWYoZ3QuaW5jbHVkZXMocykpe2NvbnN0IHA9QihKU09OLnN0cmluZ2lmeShoKSksRT1CKGQpO209YXdhaXQgdGhpcy5jbGllbnQuY29yZS52ZXJpZnkucmVnaXN0ZXIoe2lkOkUsZGVjcnlwdGVkSWQ6cH0pfWNvbnN0IEk9TltzXS5yZXE7aWYoSS5hdHRlc3RhdGlvbj1tLHImJihJLnR0bD1yKSxvJiYoSS5pZD1vKSx0aGlzLmNsaWVudC5jb3JlLmhpc3Rvcnkuc2V0KHQsaCkseSl7Y29uc3QgcD1nZSh1LHQsZCk7YXdhaXQgZ2xvYmFsLkxpbmtpbmcub3BlblVSTChwLHRoaXMuY2xpZW50Lm5hbWUpfWVsc2V7Y29uc3QgcD1OW3NdLnJlcTtyJiYocC50dGw9ciksbyYmKHAuaWQ9bykscC50dmY9eCh2KHt9LGcpLHtjb3JyZWxhdGlvbklkOmguaWR9KSxsPyhwLmludGVybmFsPXgodih7fSxwLmludGVybmFsKSx7dGhyb3dPbkZhaWxlZFB1Ymxpc2g6ITB9KSxhd2FpdCB0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIucHVibGlzaCh0LGQscCkpOnRoaXMuY2xpZW50LmNvcmUucmVsYXllci5wdWJsaXNoKHQsZCxwKS5jYXRjaChFPT50aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IoRSkpfXJldHVybiBoLmlkfSksYyh0aGlzLFwic2VuZFJlc3VsdFwiLGFzeW5jIGU9Pntjb25zdHtpZDp0LHRvcGljOnMscmVzdWx0OmksdGhyb3dPbkZhaWxlZFB1Ymxpc2g6cixlbmNvZGVPcHRzOm8sYXBwTGluazphfT1lLGw9ZHModCxpKTtsZXQgdTtjb25zdCBnPWEmJnR5cGVvZihnbG9iYWw9PW51bGw/dm9pZCAwOmdsb2JhbC5MaW5raW5nKTxcInVcIjt0cnl7Y29uc3QgeT1nP25lOnVlO3U9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZW5jb2RlKHMsbCx4KHYoe30sb3x8e30pLHtlbmNvZGluZzp5fSkpfWNhdGNoKHkpe3Rocm93IGF3YWl0IHRoaXMuY2xlYW51cCgpLHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihgc2VuZFJlc3VsdCgpIC0+IGNvcmUuY3J5cHRvLmVuY29kZSgpIGZvciB0b3BpYyAke3N9IGZhaWxlZGApLHl9bGV0IGgsZDt0cnl7aD1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmhpc3RvcnkuZ2V0KHMsdCk7Y29uc3QgeT1oLnJlcXVlc3Q7dHJ5e3RoaXMuc2hvdWxkU2V0VFZGKHkubWV0aG9kLHkucGFyYW1zKSYmKGQ9dGhpcy5nZXRUVkZQYXJhbXModCx5LnBhcmFtcyxpKSl9Y2F0Y2gobSl7dGhpcy5jbGllbnQubG9nZ2VyLndhcm4oXCJzZW5kUmVzdWx0KCkgLT4gZ2V0VFZGUGFyYW1zKCkgZmFpbGVkXCIsbSl9fWNhdGNoKHkpe3Rocm93IHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihgc2VuZFJlc3VsdCgpIC0+IGhpc3RvcnkuZ2V0KCR7c30sICR7dH0pIGZhaWxlZGApLHl9aWYoZyl7Y29uc3QgeT1nZShhLHMsdSk7YXdhaXQgZ2xvYmFsLkxpbmtpbmcub3BlblVSTCh5LHRoaXMuY2xpZW50Lm5hbWUpfWVsc2V7Y29uc3QgeT1oLnJlcXVlc3QubWV0aG9kLG09Tlt5XS5yZXM7bS50dmY9eCh2KHt9LGQpLHtjb3JyZWxhdGlvbklkOnR9KSxyPyhtLmludGVybmFsPXgodih7fSxtLmludGVybmFsKSx7dGhyb3dPbkZhaWxlZFB1Ymxpc2g6ITB9KSxhd2FpdCB0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIucHVibGlzaChzLHUsbSkpOnRoaXMuY2xpZW50LmNvcmUucmVsYXllci5wdWJsaXNoKHMsdSxtKS5jYXRjaChJPT50aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IoSSkpfWF3YWl0IHRoaXMuY2xpZW50LmNvcmUuaGlzdG9yeS5yZXNvbHZlKGwpfSksYyh0aGlzLFwic2VuZEVycm9yXCIsYXN5bmMgZT0+e2NvbnN0e2lkOnQsdG9waWM6cyxlcnJvcjppLGVuY29kZU9wdHM6cixycGNPcHRzOm8sYXBwTGluazphfT1lLGw9dXModCxpKTtsZXQgdTtjb25zdCBnPWEmJnR5cGVvZihnbG9iYWw9PW51bGw/dm9pZCAwOmdsb2JhbC5MaW5raW5nKTxcInVcIjt0cnl7Y29uc3QgZD1nP25lOnVlO3U9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZW5jb2RlKHMsbCx4KHYoe30scnx8e30pLHtlbmNvZGluZzpkfSkpfWNhdGNoKGQpe3Rocm93IGF3YWl0IHRoaXMuY2xlYW51cCgpLHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihgc2VuZEVycm9yKCkgLT4gY29yZS5jcnlwdG8uZW5jb2RlKCkgZm9yIHRvcGljICR7c30gZmFpbGVkYCksZH1sZXQgaDt0cnl7aD1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmhpc3RvcnkuZ2V0KHMsdCl9Y2F0Y2goZCl7dGhyb3cgdGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGBzZW5kRXJyb3IoKSAtPiBoaXN0b3J5LmdldCgke3N9LCAke3R9KSBmYWlsZWRgKSxkfWlmKGcpe2NvbnN0IGQ9Z2UoYSxzLHUpO2F3YWl0IGdsb2JhbC5MaW5raW5nLm9wZW5VUkwoZCx0aGlzLmNsaWVudC5uYW1lKX1lbHNle2NvbnN0IGQ9aC5yZXF1ZXN0Lm1ldGhvZCx5PW98fE5bZF0ucmVzO3RoaXMuY2xpZW50LmNvcmUucmVsYXllci5wdWJsaXNoKHMsdSx5KX1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmhpc3RvcnkucmVzb2x2ZShsKX0pLGModGhpcyxcImNsZWFudXBcIixhc3luYygpPT57Y29uc3QgZT1bXSx0PVtdO3RoaXMuY2xpZW50LnNlc3Npb24uZ2V0QWxsKCkuZm9yRWFjaChzPT57bGV0IGk9ITE7VyhzLmV4cGlyeSkmJihpPSEwKSx0aGlzLmNsaWVudC5jb3JlLmNyeXB0by5rZXljaGFpbi5oYXMocy50b3BpYyl8fChpPSEwKSxpJiZlLnB1c2gocy50b3BpYyl9KSx0aGlzLmNsaWVudC5wcm9wb3NhbC5nZXRBbGwoKS5mb3JFYWNoKHM9PntXKHMuZXhwaXJ5VGltZXN0YW1wKSYmdC5wdXNoKHMuaWQpfSksYXdhaXQgUHJvbWlzZS5hbGwoWy4uLmUubWFwKHM9PnRoaXMuZGVsZXRlU2Vzc2lvbih7dG9waWM6c30pKSwuLi50Lm1hcChzPT50aGlzLmRlbGV0ZVByb3Bvc2FsKHMpKV0pfSksYyh0aGlzLFwib25SZWxheUV2ZW50UmVxdWVzdFwiLGFzeW5jIGU9Pnt0aGlzLnJlcXVlc3RRdWV1ZS5xdWV1ZS5wdXNoKGUpLGF3YWl0IHRoaXMucHJvY2Vzc1JlcXVlc3RzUXVldWUoKX0pLGModGhpcyxcInByb2Nlc3NSZXF1ZXN0c1F1ZXVlXCIsYXN5bmMoKT0+e2lmKHRoaXMucmVxdWVzdFF1ZXVlLnN0YXRlPT09JC5hY3RpdmUpe3RoaXMuY2xpZW50LmxvZ2dlci5pbmZvKFwiUmVxdWVzdCBxdWV1ZSBhbHJlYWR5IGFjdGl2ZSwgc2tpcHBpbmcuLi5cIik7cmV0dXJufWZvcih0aGlzLmNsaWVudC5sb2dnZXIuaW5mbyhgUmVxdWVzdCBxdWV1ZSBzdGFydGluZyB3aXRoICR7dGhpcy5yZXF1ZXN0UXVldWUucXVldWUubGVuZ3RofSByZXF1ZXN0c2ApO3RoaXMucmVxdWVzdFF1ZXVlLnF1ZXVlLmxlbmd0aD4wOyl7dGhpcy5yZXF1ZXN0UXVldWUuc3RhdGU9JC5hY3RpdmU7Y29uc3QgZT10aGlzLnJlcXVlc3RRdWV1ZS5xdWV1ZS5zaGlmdCgpO2lmKGUpdHJ5e2F3YWl0IHRoaXMucHJvY2Vzc1JlcXVlc3QoZSl9Y2F0Y2godCl7dGhpcy5jbGllbnQubG9nZ2VyLndhcm4odCl9fXRoaXMucmVxdWVzdFF1ZXVlLnN0YXRlPSQuaWRsZX0pLGModGhpcyxcInByb2Nlc3NSZXF1ZXN0XCIsYXN5bmMgZT0+e2NvbnN0e3RvcGljOnQscGF5bG9hZDpzLGF0dGVzdGF0aW9uOmksdHJhbnNwb3J0VHlwZTpyLGVuY3J5cHRlZElkOm99PWUsYT1zLm1ldGhvZDtpZighdGhpcy5zaG91bGRJZ25vcmVQYWlyaW5nUmVxdWVzdCh7dG9waWM6dCxyZXF1ZXN0TWV0aG9kOmF9KSlzd2l0Y2goYSl7Y2FzZVwid2Nfc2Vzc2lvblByb3Bvc2VcIjpyZXR1cm4gYXdhaXQgdGhpcy5vblNlc3Npb25Qcm9wb3NlUmVxdWVzdCh7dG9waWM6dCxwYXlsb2FkOnMsYXR0ZXN0YXRpb246aSxlbmNyeXB0ZWRJZDpvfSk7Y2FzZVwid2Nfc2Vzc2lvblNldHRsZVwiOnJldHVybiBhd2FpdCB0aGlzLm9uU2Vzc2lvblNldHRsZVJlcXVlc3QodCxzKTtjYXNlXCJ3Y19zZXNzaW9uVXBkYXRlXCI6cmV0dXJuIGF3YWl0IHRoaXMub25TZXNzaW9uVXBkYXRlUmVxdWVzdCh0LHMpO2Nhc2VcIndjX3Nlc3Npb25FeHRlbmRcIjpyZXR1cm4gYXdhaXQgdGhpcy5vblNlc3Npb25FeHRlbmRSZXF1ZXN0KHQscyk7Y2FzZVwid2Nfc2Vzc2lvblBpbmdcIjpyZXR1cm4gYXdhaXQgdGhpcy5vblNlc3Npb25QaW5nUmVxdWVzdCh0LHMpO2Nhc2VcIndjX3Nlc3Npb25EZWxldGVcIjpyZXR1cm4gYXdhaXQgdGhpcy5vblNlc3Npb25EZWxldGVSZXF1ZXN0KHQscyk7Y2FzZVwid2Nfc2Vzc2lvblJlcXVlc3RcIjpyZXR1cm4gYXdhaXQgdGhpcy5vblNlc3Npb25SZXF1ZXN0KHt0b3BpYzp0LHBheWxvYWQ6cyxhdHRlc3RhdGlvbjppLGVuY3J5cHRlZElkOm8sdHJhbnNwb3J0VHlwZTpyfSk7Y2FzZVwid2Nfc2Vzc2lvbkV2ZW50XCI6cmV0dXJuIGF3YWl0IHRoaXMub25TZXNzaW9uRXZlbnRSZXF1ZXN0KHQscyk7Y2FzZVwid2Nfc2Vzc2lvbkF1dGhlbnRpY2F0ZVwiOnJldHVybiBhd2FpdCB0aGlzLm9uU2Vzc2lvbkF1dGhlbnRpY2F0ZVJlcXVlc3Qoe3RvcGljOnQscGF5bG9hZDpzLGF0dGVzdGF0aW9uOmksZW5jcnlwdGVkSWQ6byx0cmFuc3BvcnRUeXBlOnJ9KTtkZWZhdWx0OnJldHVybiB0aGlzLmNsaWVudC5sb2dnZXIuaW5mbyhgVW5zdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2QgJHthfWApfX0pLGModGhpcyxcIm9uUmVsYXlFdmVudFJlc3BvbnNlXCIsYXN5bmMgZT0+e2NvbnN0e3RvcGljOnQscGF5bG9hZDpzLHRyYW5zcG9ydFR5cGU6aX09ZSxyPShhd2FpdCB0aGlzLmNsaWVudC5jb3JlLmhpc3RvcnkuZ2V0KHQscy5pZCkpLnJlcXVlc3QubWV0aG9kO3N3aXRjaChyKXtjYXNlXCJ3Y19zZXNzaW9uUHJvcG9zZVwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblByb3Bvc2VSZXNwb25zZSh0LHMsaSk7Y2FzZVwid2Nfc2Vzc2lvblNldHRsZVwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblNldHRsZVJlc3BvbnNlKHQscyk7Y2FzZVwid2Nfc2Vzc2lvblVwZGF0ZVwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblVwZGF0ZVJlc3BvbnNlKHQscyk7Y2FzZVwid2Nfc2Vzc2lvbkV4dGVuZFwiOnJldHVybiB0aGlzLm9uU2Vzc2lvbkV4dGVuZFJlc3BvbnNlKHQscyk7Y2FzZVwid2Nfc2Vzc2lvblBpbmdcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25QaW5nUmVzcG9uc2UodCxzKTtjYXNlXCJ3Y19zZXNzaW9uUmVxdWVzdFwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblJlcXVlc3RSZXNwb25zZSh0LHMpO2Nhc2VcIndjX3Nlc3Npb25BdXRoZW50aWNhdGVcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25BdXRoZW50aWNhdGVSZXNwb25zZSh0LHMpO2RlZmF1bHQ6cmV0dXJuIHRoaXMuY2xpZW50LmxvZ2dlci5pbmZvKGBVbnN1cHBvcnRlZCByZXNwb25zZSBtZXRob2QgJHtyfWApfX0pLGModGhpcyxcIm9uUmVsYXlFdmVudFVua25vd25QYXlsb2FkXCIsZT0+e2NvbnN0e3RvcGljOnR9PWUse21lc3NhZ2U6c309dyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBEZWNvZGVkIHBheWxvYWQgb24gdG9waWMgJHt0fSBpcyBub3QgaWRlbnRpZmlhYmxlIGFzIGEgSlNPTi1SUEMgcmVxdWVzdCBvciBhIHJlc3BvbnNlLmApO3Rocm93IG5ldyBFcnJvcihzKX0pLGModGhpcyxcInNob3VsZElnbm9yZVBhaXJpbmdSZXF1ZXN0XCIsZT0+e2NvbnN0e3RvcGljOnQscmVxdWVzdE1ldGhvZDpzfT1lLGk9dGhpcy5leHBlY3RlZFBhaXJpbmdNZXRob2RNYXAuZ2V0KHQpO3JldHVybiFpfHxpLmluY2x1ZGVzKHMpPyExOiEhKGkuaW5jbHVkZXMoXCJ3Y19zZXNzaW9uQXV0aGVudGljYXRlXCIpJiZ0aGlzLmNsaWVudC5ldmVudHMubGlzdGVuZXJDb3VudChcInNlc3Npb25fYXV0aGVudGljYXRlXCIpPjApfSksYyh0aGlzLFwib25TZXNzaW9uUHJvcG9zZVJlcXVlc3RcIixhc3luYyBlPT57Y29uc3R7dG9waWM6dCxwYXlsb2FkOnMsYXR0ZXN0YXRpb246aSxlbmNyeXB0ZWRJZDpyfT1lLHtwYXJhbXM6byxpZDphfT1zO3RyeXtjb25zdCBsPXRoaXMuY2xpZW50LmNvcmUuZXZlbnRDbGllbnQuZ2V0RXZlbnQoe3RvcGljOnR9KTt0aGlzLmNsaWVudC5ldmVudHMubGlzdGVuZXJDb3VudChcInNlc3Npb25fcHJvcG9zYWxcIik9PT0wJiYoY29uc29sZS53YXJuKFwiTm8gbGlzdGVuZXIgZm9yIHNlc3Npb25fcHJvcG9zYWwgZXZlbnRcIiksbD8uc2V0RXJyb3IoTnQucHJvcG9zYWxfbGlzdGVuZXJfbm90X2ZvdW5kKSksdGhpcy5pc1ZhbGlkQ29ubmVjdCh2KHt9LHMucGFyYW1zKSk7Y29uc3QgdT1vLmV4cGlyeVRpbWVzdGFtcHx8QyhOLndjX3Nlc3Npb25Qcm9wb3NlLnJlcS50dGwpLGc9dih7aWQ6YSxwYWlyaW5nVG9waWM6dCxleHBpcnlUaW1lc3RhbXA6dX0sbyk7YXdhaXQgdGhpcy5zZXRQcm9wb3NhbChhLGcpO2NvbnN0IGg9YXdhaXQgdGhpcy5nZXRWZXJpZnlDb250ZXh0KHthdHRlc3RhdGlvbklkOmksaGFzaDpCKEpTT04uc3RyaW5naWZ5KHMpKSxlbmNyeXB0ZWRJZDpyLG1ldGFkYXRhOmcucHJvcG9zZXIubWV0YWRhdGF9KTtsPy5hZGRUcmFjZShQdC5lbWl0X3Nlc3Npb25fcHJvcG9zYWwpLHRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9wcm9wb3NhbFwiLHtpZDphLHBhcmFtczpnLHZlcmlmeUNvbnRleHQ6aH0pfWNhdGNoKGwpe2F3YWl0IHRoaXMuc2VuZEVycm9yKHtpZDphLHRvcGljOnQsZXJyb3I6bCxycGNPcHRzOk4ud2Nfc2Vzc2lvblByb3Bvc2UuYXV0b1JlamVjdH0pLHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihsKX19KSxjKHRoaXMsXCJvblNlc3Npb25Qcm9wb3NlUmVzcG9uc2VcIixhc3luYyhlLHQscyk9Pntjb25zdHtpZDppfT10O2lmKEYodCkpe2NvbnN0e3Jlc3VsdDpyfT10O3RoaXMuY2xpZW50LmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcIm9uU2Vzc2lvblByb3Bvc2VSZXNwb25zZVwiLHJlc3VsdDpyfSk7Y29uc3Qgbz10aGlzLmNsaWVudC5wcm9wb3NhbC5nZXQoaSk7dGhpcy5jbGllbnQubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwib25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlXCIscHJvcG9zYWw6b30pO2NvbnN0IGE9by5wcm9wb3Nlci5wdWJsaWNLZXk7dGhpcy5jbGllbnQubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwib25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlXCIsc2VsZlB1YmxpY0tleTphfSk7Y29uc3QgbD1yLnJlc3BvbmRlclB1YmxpY0tleTt0aGlzLmNsaWVudC5sb2dnZXIudHJhY2Uoe3R5cGU6XCJtZXRob2RcIixtZXRob2Q6XCJvblNlc3Npb25Qcm9wb3NlUmVzcG9uc2VcIixwZWVyUHVibGljS2V5Omx9KTtjb25zdCB1PWF3YWl0IHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmdlbmVyYXRlU2hhcmVkS2V5KGEsbCk7dGhpcy5wZW5kaW5nU2Vzc2lvbnMuc2V0KGkse3Nlc3Npb25Ub3BpYzp1LHBhaXJpbmdUb3BpYzplLHByb3Bvc2FsSWQ6aSxwdWJsaWNLZXk6YX0pO2NvbnN0IGc9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5yZWxheWVyLnN1YnNjcmliZSh1LHt0cmFuc3BvcnRUeXBlOnN9KTt0aGlzLmNsaWVudC5sb2dnZXIudHJhY2Uoe3R5cGU6XCJtZXRob2RcIixtZXRob2Q6XCJvblNlc3Npb25Qcm9wb3NlUmVzcG9uc2VcIixzdWJzY3JpcHRpb25JZDpnfSksYXdhaXQgdGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLmFjdGl2YXRlKHt0b3BpYzplfSl9ZWxzZSBpZihqKHQpKXthd2FpdCB0aGlzLmNsaWVudC5wcm9wb3NhbC5kZWxldGUoaSxPKFwiVVNFUl9ESVNDT05ORUNURURcIikpO2NvbnN0IHI9ZihcInNlc3Npb25fY29ubmVjdFwiLGkpO2lmKHRoaXMuZXZlbnRzLmxpc3RlbmVyQ291bnQocik9PT0wKXRocm93IG5ldyBFcnJvcihgZW1pdHRpbmcgJHtyfSB3aXRob3V0IGFueSBsaXN0ZW5lcnMsIDk1NGApO3RoaXMuZXZlbnRzLmVtaXQocix7ZXJyb3I6dC5lcnJvcn0pfX0pLGModGhpcyxcIm9uU2Vzc2lvblNldHRsZVJlcXVlc3RcIixhc3luYyhlLHQpPT57Y29uc3R7aWQ6cyxwYXJhbXM6aX09dDt0cnl7dGhpcy5pc1ZhbGlkU2Vzc2lvblNldHRsZVJlcXVlc3QoaSk7Y29uc3R7cmVsYXk6cixjb250cm9sbGVyOm8sZXhwaXJ5OmEsbmFtZXNwYWNlczpsLHNlc3Npb25Qcm9wZXJ0aWVzOnUsc2Vzc2lvbkNvbmZpZzpnfT10LnBhcmFtcyxoPVsuLi50aGlzLnBlbmRpbmdTZXNzaW9ucy52YWx1ZXMoKV0uZmluZChtPT5tLnNlc3Npb25Ub3BpYz09PWUpO2lmKCFoKXJldHVybiB0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IoYFBlbmRpbmcgc2Vzc2lvbiBub3QgZm91bmQgZm9yIHRvcGljICR7ZX1gKTtjb25zdCBkPXRoaXMuY2xpZW50LnByb3Bvc2FsLmdldChoLnByb3Bvc2FsSWQpLHk9eCh2KHYoe3RvcGljOmUscmVsYXk6cixleHBpcnk6YSxuYW1lc3BhY2VzOmwsYWNrbm93bGVkZ2VkOiEwLHBhaXJpbmdUb3BpYzpoLnBhaXJpbmdUb3BpYyxyZXF1aXJlZE5hbWVzcGFjZXM6ZC5yZXF1aXJlZE5hbWVzcGFjZXMsb3B0aW9uYWxOYW1lc3BhY2VzOmQub3B0aW9uYWxOYW1lc3BhY2VzLGNvbnRyb2xsZXI6by5wdWJsaWNLZXksc2VsZjp7cHVibGljS2V5OmgucHVibGljS2V5LG1ldGFkYXRhOnRoaXMuY2xpZW50Lm1ldGFkYXRhfSxwZWVyOntwdWJsaWNLZXk6by5wdWJsaWNLZXksbWV0YWRhdGE6by5tZXRhZGF0YX19LHUmJntzZXNzaW9uUHJvcGVydGllczp1fSksZyYme3Nlc3Npb25Db25maWc6Z30pLHt0cmFuc3BvcnRUeXBlOlQucmVsYXl9KTthd2FpdCB0aGlzLmNsaWVudC5zZXNzaW9uLnNldCh5LnRvcGljLHkpLGF3YWl0IHRoaXMuc2V0RXhwaXJ5KHkudG9waWMseS5leHBpcnkpLGF3YWl0IHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy51cGRhdGVNZXRhZGF0YSh7dG9waWM6aC5wYWlyaW5nVG9waWMsbWV0YWRhdGE6eS5wZWVyLm1ldGFkYXRhfSksdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX2Nvbm5lY3RcIix7c2Vzc2lvbjp5fSksdGhpcy5ldmVudHMuZW1pdChmKFwic2Vzc2lvbl9jb25uZWN0XCIsaC5wcm9wb3NhbElkKSx7c2Vzc2lvbjp5fSksdGhpcy5wZW5kaW5nU2Vzc2lvbnMuZGVsZXRlKGgucHJvcG9zYWxJZCksdGhpcy5kZWxldGVQcm9wb3NhbChoLnByb3Bvc2FsSWQsITEpLHRoaXMuY2xlYW51cER1cGxpY2F0ZVBhaXJpbmdzKHkpLGF3YWl0IHRoaXMuc2VuZFJlc3VsdCh7aWQ6dC5pZCx0b3BpYzplLHJlc3VsdDohMCx0aHJvd09uRmFpbGVkUHVibGlzaDohMH0pfWNhdGNoKHIpe2F3YWl0IHRoaXMuc2VuZEVycm9yKHtpZDpzLHRvcGljOmUsZXJyb3I6cn0pLHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihyKX19KSxjKHRoaXMsXCJvblNlc3Npb25TZXR0bGVSZXNwb25zZVwiLGFzeW5jKGUsdCk9Pntjb25zdHtpZDpzfT10O0YodCk/KGF3YWl0IHRoaXMuY2xpZW50LnNlc3Npb24udXBkYXRlKGUse2Fja25vd2xlZGdlZDohMH0pLHRoaXMuZXZlbnRzLmVtaXQoZihcInNlc3Npb25fYXBwcm92ZVwiLHMpLHt9KSk6aih0KSYmKGF3YWl0IHRoaXMuY2xpZW50LnNlc3Npb24uZGVsZXRlKGUsTyhcIlVTRVJfRElTQ09OTkVDVEVEXCIpKSx0aGlzLmV2ZW50cy5lbWl0KGYoXCJzZXNzaW9uX2FwcHJvdmVcIixzKSx7ZXJyb3I6dC5lcnJvcn0pKX0pLGModGhpcyxcIm9uU2Vzc2lvblVwZGF0ZVJlcXVlc3RcIixhc3luYyhlLHQpPT57Y29uc3R7cGFyYW1zOnMsaWQ6aX09dDt0cnl7Y29uc3Qgcj1gJHtlfV9zZXNzaW9uX3VwZGF0ZWAsbz1vZS5nZXQocik7aWYobyYmdGhpcy5pc1JlcXVlc3RPdXRPZlN5bmMobyxpKSl7dGhpcy5jbGllbnQubG9nZ2VyLndhcm4oYERpc2NhcmRpbmcgb3V0IG9mIHN5bmMgcmVxdWVzdCAtICR7aX1gKSx0aGlzLnNlbmRFcnJvcih7aWQ6aSx0b3BpYzplLGVycm9yOk8oXCJJTlZBTElEX1VQREFURV9SRVFVRVNUXCIpfSk7cmV0dXJufXRoaXMuaXNWYWxpZFVwZGF0ZSh2KHt0b3BpYzplfSxzKSk7dHJ5e29lLnNldChyLGkpLGF3YWl0IHRoaXMuY2xpZW50LnNlc3Npb24udXBkYXRlKGUse25hbWVzcGFjZXM6cy5uYW1lc3BhY2VzfSksYXdhaXQgdGhpcy5zZW5kUmVzdWx0KHtpZDppLHRvcGljOmUscmVzdWx0OiEwLHRocm93T25GYWlsZWRQdWJsaXNoOiEwfSl9Y2F0Y2goYSl7dGhyb3cgb2UuZGVsZXRlKHIpLGF9dGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX3VwZGF0ZVwiLHtpZDppLHRvcGljOmUscGFyYW1zOnN9KX1jYXRjaChyKXthd2FpdCB0aGlzLnNlbmRFcnJvcih7aWQ6aSx0b3BpYzplLGVycm9yOnJ9KSx0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3Iocil9fSksYyh0aGlzLFwiaXNSZXF1ZXN0T3V0T2ZTeW5jXCIsKGUsdCk9PnQudG9TdHJpbmcoKS5zbGljZSgwLC0zKTxlLnRvU3RyaW5nKCkuc2xpY2UoMCwtMykpLGModGhpcyxcIm9uU2Vzc2lvblVwZGF0ZVJlc3BvbnNlXCIsKGUsdCk9Pntjb25zdHtpZDpzfT10LGk9ZihcInNlc3Npb25fdXBkYXRlXCIscyk7aWYodGhpcy5ldmVudHMubGlzdGVuZXJDb3VudChpKT09PTApdGhyb3cgbmV3IEVycm9yKGBlbWl0dGluZyAke2l9IHdpdGhvdXQgYW55IGxpc3RlbmVyc2ApO0YodCk/dGhpcy5ldmVudHMuZW1pdChmKFwic2Vzc2lvbl91cGRhdGVcIixzKSx7fSk6aih0KSYmdGhpcy5ldmVudHMuZW1pdChmKFwic2Vzc2lvbl91cGRhdGVcIixzKSx7ZXJyb3I6dC5lcnJvcn0pfSksYyh0aGlzLFwib25TZXNzaW9uRXh0ZW5kUmVxdWVzdFwiLGFzeW5jKGUsdCk9Pntjb25zdHtpZDpzfT10O3RyeXt0aGlzLmlzVmFsaWRFeHRlbmQoe3RvcGljOmV9KSxhd2FpdCB0aGlzLnNldEV4cGlyeShlLEMoWSkpLGF3YWl0IHRoaXMuc2VuZFJlc3VsdCh7aWQ6cyx0b3BpYzplLHJlc3VsdDohMCx0aHJvd09uRmFpbGVkUHVibGlzaDohMH0pLHRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9leHRlbmRcIix7aWQ6cyx0b3BpYzplfSl9Y2F0Y2goaSl7YXdhaXQgdGhpcy5zZW5kRXJyb3Ioe2lkOnMsdG9waWM6ZSxlcnJvcjppfSksdGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGkpfX0pLGModGhpcyxcIm9uU2Vzc2lvbkV4dGVuZFJlc3BvbnNlXCIsKGUsdCk9Pntjb25zdHtpZDpzfT10LGk9ZihcInNlc3Npb25fZXh0ZW5kXCIscyk7aWYodGhpcy5ldmVudHMubGlzdGVuZXJDb3VudChpKT09PTApdGhyb3cgbmV3IEVycm9yKGBlbWl0dGluZyAke2l9IHdpdGhvdXQgYW55IGxpc3RlbmVyc2ApO0YodCk/dGhpcy5ldmVudHMuZW1pdChmKFwic2Vzc2lvbl9leHRlbmRcIixzKSx7fSk6aih0KSYmdGhpcy5ldmVudHMuZW1pdChmKFwic2Vzc2lvbl9leHRlbmRcIixzKSx7ZXJyb3I6dC5lcnJvcn0pfSksYyh0aGlzLFwib25TZXNzaW9uUGluZ1JlcXVlc3RcIixhc3luYyhlLHQpPT57Y29uc3R7aWQ6c309dDt0cnl7dGhpcy5pc1ZhbGlkUGluZyh7dG9waWM6ZX0pLGF3YWl0IHRoaXMuc2VuZFJlc3VsdCh7aWQ6cyx0b3BpYzplLHJlc3VsdDohMCx0aHJvd09uRmFpbGVkUHVibGlzaDohMH0pLHRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9waW5nXCIse2lkOnMsdG9waWM6ZX0pfWNhdGNoKGkpe2F3YWl0IHRoaXMuc2VuZEVycm9yKHtpZDpzLHRvcGljOmUsZXJyb3I6aX0pLHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihpKX19KSxjKHRoaXMsXCJvblNlc3Npb25QaW5nUmVzcG9uc2VcIiwoZSx0KT0+e2NvbnN0e2lkOnN9PXQsaT1mKFwic2Vzc2lvbl9waW5nXCIscyk7aWYodGhpcy5ldmVudHMubGlzdGVuZXJDb3VudChpKT09PTApdGhyb3cgbmV3IEVycm9yKGBlbWl0dGluZyAke2l9IHdpdGhvdXQgYW55IGxpc3RlbmVyc2ApO3NldFRpbWVvdXQoKCk9PntGKHQpP3RoaXMuZXZlbnRzLmVtaXQoZihcInNlc3Npb25fcGluZ1wiLHMpLHt9KTpqKHQpJiZ0aGlzLmV2ZW50cy5lbWl0KGYoXCJzZXNzaW9uX3BpbmdcIixzKSx7ZXJyb3I6dC5lcnJvcn0pfSw1MDApfSksYyh0aGlzLFwib25TZXNzaW9uRGVsZXRlUmVxdWVzdFwiLGFzeW5jKGUsdCk9Pntjb25zdHtpZDpzfT10O3RyeXt0aGlzLmlzVmFsaWREaXNjb25uZWN0KHt0b3BpYzplLHJlYXNvbjp0LnBhcmFtc30pLFByb21pc2UuYWxsKFtuZXcgUHJvbWlzZShpPT57dGhpcy5jbGllbnQuY29yZS5yZWxheWVyLm9uY2UoWGUucHVibGlzaCxhc3luYygpPT57aShhd2FpdCB0aGlzLmRlbGV0ZVNlc3Npb24oe3RvcGljOmUsaWQ6c30pKX0pfSksdGhpcy5zZW5kUmVzdWx0KHtpZDpzLHRvcGljOmUscmVzdWx0OiEwLHRocm93T25GYWlsZWRQdWJsaXNoOiEwfSksdGhpcy5jbGVhbnVwUGVuZGluZ1NlbnRSZXF1ZXN0c0ZvclRvcGljKHt0b3BpYzplLGVycm9yOk8oXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKX0pXSkuY2F0Y2goaT0+dGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGkpKX1jYXRjaChpKXt0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IoaSl9fSksYyh0aGlzLFwib25TZXNzaW9uUmVxdWVzdFwiLGFzeW5jIGU9Pnt2YXIgdCxzLGk7Y29uc3R7dG9waWM6cixwYXlsb2FkOm8sYXR0ZXN0YXRpb246YSxlbmNyeXB0ZWRJZDpsLHRyYW5zcG9ydFR5cGU6dX09ZSx7aWQ6ZyxwYXJhbXM6aH09bzt0cnl7YXdhaXQgdGhpcy5pc1ZhbGlkUmVxdWVzdCh2KHt0b3BpYzpyfSxoKSk7Y29uc3QgZD10aGlzLmNsaWVudC5zZXNzaW9uLmdldChyKSx5PWF3YWl0IHRoaXMuZ2V0VmVyaWZ5Q29udGV4dCh7YXR0ZXN0YXRpb25JZDphLGhhc2g6QihKU09OLnN0cmluZ2lmeSh3ZShcIndjX3Nlc3Npb25SZXF1ZXN0XCIsaCxnKSkpLGVuY3J5cHRlZElkOmwsbWV0YWRhdGE6ZC5wZWVyLm1ldGFkYXRhLHRyYW5zcG9ydFR5cGU6dX0pLG09e2lkOmcsdG9waWM6cixwYXJhbXM6aCx2ZXJpZnlDb250ZXh0Onl9O2F3YWl0IHRoaXMuc2V0UGVuZGluZ1Nlc3Npb25SZXF1ZXN0KG0pLHU9PT1ULmxpbmtfbW9kZSYmKHQ9ZC5wZWVyLm1ldGFkYXRhLnJlZGlyZWN0KSE9bnVsbCYmdC51bml2ZXJzYWwmJnRoaXMuY2xpZW50LmNvcmUuYWRkTGlua01vZGVTdXBwb3J0ZWRBcHAoKHM9ZC5wZWVyLm1ldGFkYXRhLnJlZGlyZWN0KT09bnVsbD92b2lkIDA6cy51bml2ZXJzYWwpLChpPXRoaXMuY2xpZW50LnNpZ25Db25maWcpIT1udWxsJiZpLmRpc2FibGVSZXF1ZXN0UXVldWU/dGhpcy5lbWl0U2Vzc2lvblJlcXVlc3QobSk6KHRoaXMuYWRkU2Vzc2lvblJlcXVlc3RUb1Nlc3Npb25SZXF1ZXN0UXVldWUobSksdGhpcy5wcm9jZXNzU2Vzc2lvblJlcXVlc3RRdWV1ZSgpKX1jYXRjaChkKXthd2FpdCB0aGlzLnNlbmRFcnJvcih7aWQ6Zyx0b3BpYzpyLGVycm9yOmR9KSx0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IoZCl9fSksYyh0aGlzLFwib25TZXNzaW9uUmVxdWVzdFJlc3BvbnNlXCIsKGUsdCk9Pntjb25zdHtpZDpzfT10LGk9ZihcInNlc3Npb25fcmVxdWVzdFwiLHMpO2lmKHRoaXMuZXZlbnRzLmxpc3RlbmVyQ291bnQoaSk9PT0wKXRocm93IG5ldyBFcnJvcihgZW1pdHRpbmcgJHtpfSB3aXRob3V0IGFueSBsaXN0ZW5lcnNgKTtGKHQpP3RoaXMuZXZlbnRzLmVtaXQoZihcInNlc3Npb25fcmVxdWVzdFwiLHMpLHtyZXN1bHQ6dC5yZXN1bHR9KTpqKHQpJiZ0aGlzLmV2ZW50cy5lbWl0KGYoXCJzZXNzaW9uX3JlcXVlc3RcIixzKSx7ZXJyb3I6dC5lcnJvcn0pfSksYyh0aGlzLFwib25TZXNzaW9uRXZlbnRSZXF1ZXN0XCIsYXN5bmMoZSx0KT0+e2NvbnN0e2lkOnMscGFyYW1zOml9PXQ7dHJ5e2NvbnN0IHI9YCR7ZX1fc2Vzc2lvbl9ldmVudF8ke2kuZXZlbnQubmFtZX1gLG89b2UuZ2V0KHIpO2lmKG8mJnRoaXMuaXNSZXF1ZXN0T3V0T2ZTeW5jKG8scykpe3RoaXMuY2xpZW50LmxvZ2dlci5pbmZvKGBEaXNjYXJkaW5nIG91dCBvZiBzeW5jIHJlcXVlc3QgLSAke3N9YCk7cmV0dXJufXRoaXMuaXNWYWxpZEVtaXQodih7dG9waWM6ZX0saSkpLHRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9ldmVudFwiLHtpZDpzLHRvcGljOmUscGFyYW1zOml9KSxvZS5zZXQocixzKX1jYXRjaChyKXthd2FpdCB0aGlzLnNlbmRFcnJvcih7aWQ6cyx0b3BpYzplLGVycm9yOnJ9KSx0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3Iocil9fSksYyh0aGlzLFwib25TZXNzaW9uQXV0aGVudGljYXRlUmVzcG9uc2VcIiwoZSx0KT0+e2NvbnN0e2lkOnN9PXQ7dGhpcy5jbGllbnQubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwib25TZXNzaW9uQXV0aGVudGljYXRlUmVzcG9uc2VcIix0b3BpYzplLHBheWxvYWQ6dH0pLEYodCk/dGhpcy5ldmVudHMuZW1pdChmKFwic2Vzc2lvbl9yZXF1ZXN0XCIscykse3Jlc3VsdDp0LnJlc3VsdH0pOmoodCkmJnRoaXMuZXZlbnRzLmVtaXQoZihcInNlc3Npb25fcmVxdWVzdFwiLHMpLHtlcnJvcjp0LmVycm9yfSl9KSxjKHRoaXMsXCJvblNlc3Npb25BdXRoZW50aWNhdGVSZXF1ZXN0XCIsYXN5bmMgZT0+e3ZhciB0O2NvbnN0e3RvcGljOnMscGF5bG9hZDppLGF0dGVzdGF0aW9uOnIsZW5jcnlwdGVkSWQ6byx0cmFuc3BvcnRUeXBlOmF9PWU7dHJ5e2NvbnN0e3JlcXVlc3RlcjpsLGF1dGhQYXlsb2FkOnUsZXhwaXJ5VGltZXN0YW1wOmd9PWkucGFyYW1zLGg9YXdhaXQgdGhpcy5nZXRWZXJpZnlDb250ZXh0KHthdHRlc3RhdGlvbklkOnIsaGFzaDpCKEpTT04uc3RyaW5naWZ5KGkpKSxlbmNyeXB0ZWRJZDpvLG1ldGFkYXRhOmwubWV0YWRhdGEsdHJhbnNwb3J0VHlwZTphfSksZD17cmVxdWVzdGVyOmwscGFpcmluZ1RvcGljOnMsaWQ6aS5pZCxhdXRoUGF5bG9hZDp1LHZlcmlmeUNvbnRleHQ6aCxleHBpcnlUaW1lc3RhbXA6Z307YXdhaXQgdGhpcy5zZXRBdXRoUmVxdWVzdChpLmlkLHtyZXF1ZXN0OmQscGFpcmluZ1RvcGljOnMsdHJhbnNwb3J0VHlwZTphfSksYT09PVQubGlua19tb2RlJiYodD1sLm1ldGFkYXRhLnJlZGlyZWN0KSE9bnVsbCYmdC51bml2ZXJzYWwmJnRoaXMuY2xpZW50LmNvcmUuYWRkTGlua01vZGVTdXBwb3J0ZWRBcHAobC5tZXRhZGF0YS5yZWRpcmVjdC51bml2ZXJzYWwpLHRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9hdXRoZW50aWNhdGVcIix7dG9waWM6cyxwYXJhbXM6aS5wYXJhbXMsaWQ6aS5pZCx2ZXJpZnlDb250ZXh0Omh9KX1jYXRjaChsKXt0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IobCk7Y29uc3QgdT1pLnBhcmFtcy5yZXF1ZXN0ZXIucHVibGljS2V5LGc9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZ2VuZXJhdGVLZXlQYWlyKCksaD10aGlzLmdldEFwcExpbmtJZkVuYWJsZWQoaS5wYXJhbXMucmVxdWVzdGVyLm1ldGFkYXRhLGEpLGQ9e3R5cGU6VmUscmVjZWl2ZXJQdWJsaWNLZXk6dSxzZW5kZXJQdWJsaWNLZXk6Z307YXdhaXQgdGhpcy5zZW5kRXJyb3Ioe2lkOmkuaWQsdG9waWM6cyxlcnJvcjpsLGVuY29kZU9wdHM6ZCxycGNPcHRzOk4ud2Nfc2Vzc2lvbkF1dGhlbnRpY2F0ZS5hdXRvUmVqZWN0LGFwcExpbms6aH0pfX0pLGModGhpcyxcImFkZFNlc3Npb25SZXF1ZXN0VG9TZXNzaW9uUmVxdWVzdFF1ZXVlXCIsZT0+e3RoaXMuc2Vzc2lvblJlcXVlc3RRdWV1ZS5xdWV1ZS5wdXNoKGUpfSksYyh0aGlzLFwiY2xlYW51cEFmdGVyUmVzcG9uc2VcIixlPT57dGhpcy5kZWxldGVQZW5kaW5nU2Vzc2lvblJlcXVlc3QoZS5yZXNwb25zZS5pZCx7bWVzc2FnZTpcImZ1bGZpbGxlZFwiLGNvZGU6MH0pLHNldFRpbWVvdXQoKCk9Pnt0aGlzLnNlc3Npb25SZXF1ZXN0UXVldWUuc3RhdGU9JC5pZGxlLHRoaXMucHJvY2Vzc1Nlc3Npb25SZXF1ZXN0UXVldWUoKX0sT2UodGhpcy5yZXF1ZXN0UXVldWVEZWxheSkpfSksYyh0aGlzLFwiY2xlYW51cFBlbmRpbmdTZW50UmVxdWVzdHNGb3JUb3BpY1wiLCh7dG9waWM6ZSxlcnJvcjp0fSk9Pntjb25zdCBzPXRoaXMuY2xpZW50LmNvcmUuaGlzdG9yeS5wZW5kaW5nO3MubGVuZ3RoPjAmJnMuZmlsdGVyKGk9PmkudG9waWM9PT1lJiZpLnJlcXVlc3QubWV0aG9kPT09XCJ3Y19zZXNzaW9uUmVxdWVzdFwiKS5mb3JFYWNoKGk9Pntjb25zdCByPWkucmVxdWVzdC5pZCxvPWYoXCJzZXNzaW9uX3JlcXVlc3RcIixyKTtpZih0aGlzLmV2ZW50cy5saXN0ZW5lckNvdW50KG8pPT09MCl0aHJvdyBuZXcgRXJyb3IoYGVtaXR0aW5nICR7b30gd2l0aG91dCBhbnkgbGlzdGVuZXJzYCk7dGhpcy5ldmVudHMuZW1pdChmKFwic2Vzc2lvbl9yZXF1ZXN0XCIsaS5yZXF1ZXN0LmlkKSx7ZXJyb3I6dH0pfSl9KSxjKHRoaXMsXCJwcm9jZXNzU2Vzc2lvblJlcXVlc3RRdWV1ZVwiLCgpPT57aWYodGhpcy5zZXNzaW9uUmVxdWVzdFF1ZXVlLnN0YXRlPT09JC5hY3RpdmUpe3RoaXMuY2xpZW50LmxvZ2dlci5pbmZvKFwic2Vzc2lvbiByZXF1ZXN0IHF1ZXVlIGlzIGFscmVhZHkgYWN0aXZlLlwiKTtyZXR1cm59Y29uc3QgZT10aGlzLnNlc3Npb25SZXF1ZXN0UXVldWUucXVldWVbMF07aWYoIWUpe3RoaXMuY2xpZW50LmxvZ2dlci5pbmZvKFwic2Vzc2lvbiByZXF1ZXN0IHF1ZXVlIGlzIGVtcHR5LlwiKTtyZXR1cm59dHJ5e3RoaXMuc2Vzc2lvblJlcXVlc3RRdWV1ZS5zdGF0ZT0kLmFjdGl2ZSx0aGlzLmVtaXRTZXNzaW9uUmVxdWVzdChlKX1jYXRjaCh0KXt0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IodCl9fSksYyh0aGlzLFwiZW1pdFNlc3Npb25SZXF1ZXN0XCIsZT0+e3RoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9yZXF1ZXN0XCIsZSl9KSxjKHRoaXMsXCJvblBhaXJpbmdDcmVhdGVkXCIsZT0+e2lmKGUubWV0aG9kcyYmdGhpcy5leHBlY3RlZFBhaXJpbmdNZXRob2RNYXAuc2V0KGUudG9waWMsZS5tZXRob2RzKSxlLmFjdGl2ZSlyZXR1cm47Y29uc3QgdD10aGlzLmNsaWVudC5wcm9wb3NhbC5nZXRBbGwoKS5maW5kKHM9PnMucGFpcmluZ1RvcGljPT09ZS50b3BpYyk7dCYmdGhpcy5vblNlc3Npb25Qcm9wb3NlUmVxdWVzdCh7dG9waWM6ZS50b3BpYyxwYXlsb2FkOndlKFwid2Nfc2Vzc2lvblByb3Bvc2VcIix7cmVxdWlyZWROYW1lc3BhY2VzOnQucmVxdWlyZWROYW1lc3BhY2VzLG9wdGlvbmFsTmFtZXNwYWNlczp0Lm9wdGlvbmFsTmFtZXNwYWNlcyxyZWxheXM6dC5yZWxheXMscHJvcG9zZXI6dC5wcm9wb3NlcixzZXNzaW9uUHJvcGVydGllczp0LnNlc3Npb25Qcm9wZXJ0aWVzfSx0LmlkKX0pfSksYyh0aGlzLFwiaXNWYWxpZENvbm5lY3RcIixhc3luYyBlPT57aWYoIWsoZSkpe2NvbnN0e21lc3NhZ2U6YX09dyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBjb25uZWN0KCkgcGFyYW1zOiAke0pTT04uc3RyaW5naWZ5KGUpfWApO3Rocm93IG5ldyBFcnJvcihhKX1jb25zdHtwYWlyaW5nVG9waWM6dCxyZXF1aXJlZE5hbWVzcGFjZXM6cyxvcHRpb25hbE5hbWVzcGFjZXM6aSxzZXNzaW9uUHJvcGVydGllczpyLHJlbGF5czpvfT1lO2lmKGFlKHQpfHxhd2FpdCB0aGlzLmlzVmFsaWRQYWlyaW5nVG9waWModCksIXp0KG8sITApKXtjb25zdHttZXNzYWdlOmF9PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgY29ubmVjdCgpIHJlbGF5czogJHtvfWApO3Rocm93IG5ldyBFcnJvcihhKX0hYWUocykmJm90KHMpIT09MCYmdGhpcy52YWxpZGF0ZU5hbWVzcGFjZXMocyxcInJlcXVpcmVkTmFtZXNwYWNlc1wiKSwhYWUoaSkmJm90KGkpIT09MCYmdGhpcy52YWxpZGF0ZU5hbWVzcGFjZXMoaSxcIm9wdGlvbmFsTmFtZXNwYWNlc1wiKSxhZShyKXx8dGhpcy52YWxpZGF0ZVNlc3Npb25Qcm9wcyhyLFwic2Vzc2lvblByb3BlcnRpZXNcIil9KSxjKHRoaXMsXCJ2YWxpZGF0ZU5hbWVzcGFjZXNcIiwoZSx0KT0+e2NvbnN0IHM9WXQoZSxcImNvbm5lY3QoKVwiLHQpO2lmKHMpdGhyb3cgbmV3IEVycm9yKHMubWVzc2FnZSl9KSxjKHRoaXMsXCJpc1ZhbGlkQXBwcm92ZVwiLGFzeW5jIGU9PntpZighayhlKSl0aHJvdyBuZXcgRXJyb3IodyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBhcHByb3ZlKCkgcGFyYW1zOiAke2V9YCkubWVzc2FnZSk7Y29uc3R7aWQ6dCxuYW1lc3BhY2VzOnMscmVsYXlQcm90b2NvbDppLHNlc3Npb25Qcm9wZXJ0aWVzOnJ9PWU7dGhpcy5jaGVja1JlY2VudGx5RGVsZXRlZCh0KSxhd2FpdCB0aGlzLmlzVmFsaWRQcm9wb3NhbElkKHQpO2NvbnN0IG89dGhpcy5jbGllbnQucHJvcG9zYWwuZ2V0KHQpLGE9eGUocyxcImFwcHJvdmUoKVwiKTtpZihhKXRocm93IG5ldyBFcnJvcihhLm1lc3NhZ2UpO2NvbnN0IGw9YXQoby5yZXF1aXJlZE5hbWVzcGFjZXMscyxcImFwcHJvdmUoKVwiKTtpZihsKXRocm93IG5ldyBFcnJvcihsLm1lc3NhZ2UpO2lmKCFVKGksITApKXtjb25zdHttZXNzYWdlOnV9PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgYXBwcm92ZSgpIHJlbGF5UHJvdG9jb2w6ICR7aX1gKTt0aHJvdyBuZXcgRXJyb3IodSl9YWUocil8fHRoaXMudmFsaWRhdGVTZXNzaW9uUHJvcHMocixcInNlc3Npb25Qcm9wZXJ0aWVzXCIpfSksYyh0aGlzLFwiaXNWYWxpZFJlamVjdFwiLGFzeW5jIGU9PntpZighayhlKSl7Y29uc3R7bWVzc2FnZTppfT13KFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHJlamVjdCgpIHBhcmFtczogJHtlfWApO3Rocm93IG5ldyBFcnJvcihpKX1jb25zdHtpZDp0LHJlYXNvbjpzfT1lO2lmKHRoaXMuY2hlY2tSZWNlbnRseURlbGV0ZWQodCksYXdhaXQgdGhpcy5pc1ZhbGlkUHJvcG9zYWxJZCh0KSwhWHQocykpe2NvbnN0e21lc3NhZ2U6aX09dyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGByZWplY3QoKSByZWFzb246ICR7SlNPTi5zdHJpbmdpZnkocyl9YCk7dGhyb3cgbmV3IEVycm9yKGkpfX0pLGModGhpcyxcImlzVmFsaWRTZXNzaW9uU2V0dGxlUmVxdWVzdFwiLGU9PntpZighayhlKSl7Y29uc3R7bWVzc2FnZTpsfT13KFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYG9uU2Vzc2lvblNldHRsZVJlcXVlc3QoKSBwYXJhbXM6ICR7ZX1gKTt0aHJvdyBuZXcgRXJyb3IobCl9Y29uc3R7cmVsYXk6dCxjb250cm9sbGVyOnMsbmFtZXNwYWNlczppLGV4cGlyeTpyfT1lO2lmKCFKdCh0KSl7Y29uc3R7bWVzc2FnZTpsfT13KFwiTUlTU0lOR19PUl9JTlZBTElEXCIsXCJvblNlc3Npb25TZXR0bGVSZXF1ZXN0KCkgcmVsYXkgcHJvdG9jb2wgc2hvdWxkIGJlIGEgc3RyaW5nXCIpO3Rocm93IG5ldyBFcnJvcihsKX1jb25zdCBvPUJ0KHMsXCJvblNlc3Npb25TZXR0bGVSZXF1ZXN0KClcIik7aWYobyl0aHJvdyBuZXcgRXJyb3Ioby5tZXNzYWdlKTtjb25zdCBhPXhlKGksXCJvblNlc3Npb25TZXR0bGVSZXF1ZXN0KClcIik7aWYoYSl0aHJvdyBuZXcgRXJyb3IoYS5tZXNzYWdlKTtpZihXKHIpKXtjb25zdHttZXNzYWdlOmx9PXcoXCJFWFBJUkVEXCIsXCJvblNlc3Npb25TZXR0bGVSZXF1ZXN0KClcIik7dGhyb3cgbmV3IEVycm9yKGwpfX0pLGModGhpcyxcImlzVmFsaWRVcGRhdGVcIixhc3luYyBlPT57aWYoIWsoZSkpe2NvbnN0e21lc3NhZ2U6YX09dyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGB1cGRhdGUoKSBwYXJhbXM6ICR7ZX1gKTt0aHJvdyBuZXcgRXJyb3IoYSl9Y29uc3R7dG9waWM6dCxuYW1lc3BhY2VzOnN9PWU7dGhpcy5jaGVja1JlY2VudGx5RGVsZXRlZCh0KSxhd2FpdCB0aGlzLmlzVmFsaWRTZXNzaW9uVG9waWModCk7Y29uc3QgaT10aGlzLmNsaWVudC5zZXNzaW9uLmdldCh0KSxyPXhlKHMsXCJ1cGRhdGUoKVwiKTtpZihyKXRocm93IG5ldyBFcnJvcihyLm1lc3NhZ2UpO2NvbnN0IG89YXQoaS5yZXF1aXJlZE5hbWVzcGFjZXMscyxcInVwZGF0ZSgpXCIpO2lmKG8pdGhyb3cgbmV3IEVycm9yKG8ubWVzc2FnZSl9KSxjKHRoaXMsXCJpc1ZhbGlkRXh0ZW5kXCIsYXN5bmMgZT0+e2lmKCFrKGUpKXtjb25zdHttZXNzYWdlOnN9PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgZXh0ZW5kKCkgcGFyYW1zOiAke2V9YCk7dGhyb3cgbmV3IEVycm9yKHMpfWNvbnN0e3RvcGljOnR9PWU7dGhpcy5jaGVja1JlY2VudGx5RGVsZXRlZCh0KSxhd2FpdCB0aGlzLmlzVmFsaWRTZXNzaW9uVG9waWModCl9KSxjKHRoaXMsXCJpc1ZhbGlkUmVxdWVzdFwiLGFzeW5jIGU9PntpZighayhlKSl7Y29uc3R7bWVzc2FnZTphfT13KFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHJlcXVlc3QoKSBwYXJhbXM6ICR7ZX1gKTt0aHJvdyBuZXcgRXJyb3IoYSl9Y29uc3R7dG9waWM6dCxyZXF1ZXN0OnMsY2hhaW5JZDppLGV4cGlyeTpyfT1lO3RoaXMuY2hlY2tSZWNlbnRseURlbGV0ZWQodCksYXdhaXQgdGhpcy5pc1ZhbGlkU2Vzc2lvblRvcGljKHQpO2NvbnN0e25hbWVzcGFjZXM6b309dGhpcy5jbGllbnQuc2Vzc2lvbi5nZXQodCk7aWYoIWN0KG8saSkpe2NvbnN0e21lc3NhZ2U6YX09dyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGByZXF1ZXN0KCkgY2hhaW5JZDogJHtpfWApO3Rocm93IG5ldyBFcnJvcihhKX1pZighV3Qocykpe2NvbnN0e21lc3NhZ2U6YX09dyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGByZXF1ZXN0KCkgJHtKU09OLnN0cmluZ2lmeShzKX1gKTt0aHJvdyBuZXcgRXJyb3IoYSl9aWYoIVp0KG8saSxzLm1ldGhvZCkpe2NvbnN0e21lc3NhZ2U6YX09dyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGByZXF1ZXN0KCkgbWV0aG9kOiAke3MubWV0aG9kfWApO3Rocm93IG5ldyBFcnJvcihhKX1pZihyJiYhZXMocixFZSkpe2NvbnN0e21lc3NhZ2U6YX09dyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGByZXF1ZXN0KCkgZXhwaXJ5OiAke3J9LiBFeHBpcnkgbXVzdCBiZSBhIG51bWJlciAoaW4gc2Vjb25kcykgYmV0d2VlbiAke0VlLm1pbn0gYW5kICR7RWUubWF4fWApO3Rocm93IG5ldyBFcnJvcihhKX19KSxjKHRoaXMsXCJpc1ZhbGlkUmVzcG9uZFwiLGFzeW5jIGU9Pnt2YXIgdDtpZighayhlKSl7Y29uc3R7bWVzc2FnZTpyfT13KFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHJlc3BvbmQoKSBwYXJhbXM6ICR7ZX1gKTt0aHJvdyBuZXcgRXJyb3Iocil9Y29uc3R7dG9waWM6cyxyZXNwb25zZTppfT1lO3RyeXthd2FpdCB0aGlzLmlzVmFsaWRTZXNzaW9uVG9waWMocyl9Y2F0Y2gocil7dGhyb3codD1lPy5yZXNwb25zZSkhPW51bGwmJnQuaWQmJnRoaXMuY2xlYW51cEFmdGVyUmVzcG9uc2UoZSkscn1pZighdHMoaSkpe2NvbnN0e21lc3NhZ2U6cn09dyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGByZXNwb25kKCkgcmVzcG9uc2U6ICR7SlNPTi5zdHJpbmdpZnkoaSl9YCk7dGhyb3cgbmV3IEVycm9yKHIpfX0pLGModGhpcyxcImlzVmFsaWRQaW5nXCIsYXN5bmMgZT0+e2lmKCFrKGUpKXtjb25zdHttZXNzYWdlOnN9PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgcGluZygpIHBhcmFtczogJHtlfWApO3Rocm93IG5ldyBFcnJvcihzKX1jb25zdHt0b3BpYzp0fT1lO2F3YWl0IHRoaXMuaXNWYWxpZFNlc3Npb25PclBhaXJpbmdUb3BpYyh0KX0pLGModGhpcyxcImlzVmFsaWRFbWl0XCIsYXN5bmMgZT0+e2lmKCFrKGUpKXtjb25zdHttZXNzYWdlOm99PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgZW1pdCgpIHBhcmFtczogJHtlfWApO3Rocm93IG5ldyBFcnJvcihvKX1jb25zdHt0b3BpYzp0LGV2ZW50OnMsY2hhaW5JZDppfT1lO2F3YWl0IHRoaXMuaXNWYWxpZFNlc3Npb25Ub3BpYyh0KTtjb25zdHtuYW1lc3BhY2VzOnJ9PXRoaXMuY2xpZW50LnNlc3Npb24uZ2V0KHQpO2lmKCFjdChyLGkpKXtjb25zdHttZXNzYWdlOm99PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgZW1pdCgpIGNoYWluSWQ6ICR7aX1gKTt0aHJvdyBuZXcgRXJyb3Iobyl9aWYoIXNzKHMpKXtjb25zdHttZXNzYWdlOm99PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgZW1pdCgpIGV2ZW50OiAke0pTT04uc3RyaW5naWZ5KHMpfWApO3Rocm93IG5ldyBFcnJvcihvKX1pZighaXMocixpLHMubmFtZSkpe2NvbnN0e21lc3NhZ2U6b309dyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBlbWl0KCkgZXZlbnQ6ICR7SlNPTi5zdHJpbmdpZnkocyl9YCk7dGhyb3cgbmV3IEVycm9yKG8pfX0pLGModGhpcyxcImlzVmFsaWREaXNjb25uZWN0XCIsYXN5bmMgZT0+e2lmKCFrKGUpKXtjb25zdHttZXNzYWdlOnN9PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgZGlzY29ubmVjdCgpIHBhcmFtczogJHtlfWApO3Rocm93IG5ldyBFcnJvcihzKX1jb25zdHt0b3BpYzp0fT1lO2F3YWl0IHRoaXMuaXNWYWxpZFNlc3Npb25PclBhaXJpbmdUb3BpYyh0KX0pLGModGhpcyxcImlzVmFsaWRBdXRoZW50aWNhdGVcIixlPT57Y29uc3R7Y2hhaW5zOnQsdXJpOnMsZG9tYWluOmksbm9uY2U6cn09ZTtpZighQXJyYXkuaXNBcnJheSh0KXx8dC5sZW5ndGg9PT0wKXRocm93IG5ldyBFcnJvcihcImNoYWlucyBpcyByZXF1aXJlZCBhbmQgbXVzdCBiZSBhIG5vbi1lbXB0eSBhcnJheVwiKTtpZighVShzLCExKSl0aHJvdyBuZXcgRXJyb3IoXCJ1cmkgaXMgcmVxdWlyZWQgcGFyYW1ldGVyXCIpO2lmKCFVKGksITEpKXRocm93IG5ldyBFcnJvcihcImRvbWFpbiBpcyByZXF1aXJlZCBwYXJhbWV0ZXJcIik7aWYoIVUociwhMSkpdGhyb3cgbmV3IEVycm9yKFwibm9uY2UgaXMgcmVxdWlyZWQgcGFyYW1ldGVyXCIpO2lmKFsuLi5uZXcgU2V0KHQubWFwKGE9PkFlKGEpLm5hbWVzcGFjZSkpXS5sZW5ndGg+MSl0aHJvdyBuZXcgRXJyb3IoXCJNdWx0aS1uYW1lc3BhY2UgcmVxdWVzdHMgYXJlIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSByZXF1ZXN0IHNpbmdsZSBuYW1lc3BhY2Ugb25seS5cIik7Y29uc3R7bmFtZXNwYWNlOm99PUFlKHRbMF0pO2lmKG8hPT1cImVpcDE1NVwiKXRocm93IG5ldyBFcnJvcihcIk9ubHkgZWlwMTU1IG5hbWVzcGFjZSBpcyBzdXBwb3J0ZWQgZm9yIGF1dGhlbnRpY2F0ZWQgc2Vzc2lvbnMuIFBsZWFzZSB1c2UgLmNvbm5lY3QoKSBmb3Igbm9uLWVpcDE1NSBjaGFpbnMuXCIpfSksYyh0aGlzLFwiZ2V0VmVyaWZ5Q29udGV4dFwiLGFzeW5jIGU9Pntjb25zdHthdHRlc3RhdGlvbklkOnQsaGFzaDpzLGVuY3J5cHRlZElkOmksbWV0YWRhdGE6cix0cmFuc3BvcnRUeXBlOm99PWUsYT17dmVyaWZpZWQ6e3ZlcmlmeVVybDpyLnZlcmlmeVVybHx8T3QsdmFsaWRhdGlvbjpcIlVOS05PV05cIixvcmlnaW46ci51cmx8fFwiXCJ9fTt0cnl7aWYobz09PVQubGlua19tb2RlKXtjb25zdCB1PXRoaXMuZ2V0QXBwTGlua0lmRW5hYmxlZChyLG8pO3JldHVybiBhLnZlcmlmaWVkLnZhbGlkYXRpb249dSYmbmV3IFVSTCh1KS5vcmlnaW49PT1uZXcgVVJMKHIudXJsKS5vcmlnaW4/XCJWQUxJRFwiOlwiSU5WQUxJRFwiLGF9Y29uc3QgbD1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLnZlcmlmeS5yZXNvbHZlKHthdHRlc3RhdGlvbklkOnQsaGFzaDpzLGVuY3J5cHRlZElkOmksdmVyaWZ5VXJsOnIudmVyaWZ5VXJsfSk7bCYmKGEudmVyaWZpZWQub3JpZ2luPWwub3JpZ2luLGEudmVyaWZpZWQuaXNTY2FtPWwuaXNTY2FtLGEudmVyaWZpZWQudmFsaWRhdGlvbj1sLm9yaWdpbj09PW5ldyBVUkwoci51cmwpLm9yaWdpbj9cIlZBTElEXCI6XCJJTlZBTElEXCIpfWNhdGNoKGwpe3RoaXMuY2xpZW50LmxvZ2dlci53YXJuKGwpfXJldHVybiB0aGlzLmNsaWVudC5sb2dnZXIuZGVidWcoYFZlcmlmeSBjb250ZXh0OiAke0pTT04uc3RyaW5naWZ5KGEpfWApLGF9KSxjKHRoaXMsXCJ2YWxpZGF0ZVNlc3Npb25Qcm9wc1wiLChlLHQpPT57T2JqZWN0LnZhbHVlcyhlKS5mb3JFYWNoKHM9PntpZighVShzLCExKSl7Y29uc3R7bWVzc2FnZTppfT13KFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYCR7dH0gbXVzdCBiZSBpbiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IGZvcm1hdC4gUmVjZWl2ZWQ6ICR7SlNPTi5zdHJpbmdpZnkocyl9YCk7dGhyb3cgbmV3IEVycm9yKGkpfX0pfSksYyh0aGlzLFwiZ2V0UGVuZGluZ0F1dGhSZXF1ZXN0XCIsZT0+e2NvbnN0IHQ9dGhpcy5jbGllbnQuYXV0aC5yZXF1ZXN0cy5nZXQoZSk7cmV0dXJuIHR5cGVvZiB0PT1cIm9iamVjdFwiP3Q6dm9pZCAwfSksYyh0aGlzLFwiYWRkVG9SZWNlbnRseURlbGV0ZWRcIiwoZSx0KT0+e2lmKHRoaXMucmVjZW50bHlEZWxldGVkTWFwLnNldChlLHQpLHRoaXMucmVjZW50bHlEZWxldGVkTWFwLnNpemU+PXRoaXMucmVjZW50bHlEZWxldGVkTGltaXQpe2xldCBzPTA7Y29uc3QgaT10aGlzLnJlY2VudGx5RGVsZXRlZExpbWl0LzI7Zm9yKGNvbnN0IHIgb2YgdGhpcy5yZWNlbnRseURlbGV0ZWRNYXAua2V5cygpKXtpZihzKys+PWkpYnJlYWs7dGhpcy5yZWNlbnRseURlbGV0ZWRNYXAuZGVsZXRlKHIpfX19KSxjKHRoaXMsXCJjaGVja1JlY2VudGx5RGVsZXRlZFwiLGU9Pntjb25zdCB0PXRoaXMucmVjZW50bHlEZWxldGVkTWFwLmdldChlKTtpZih0KXtjb25zdHttZXNzYWdlOnN9PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgUmVjb3JkIHdhcyByZWNlbnRseSBkZWxldGVkIC0gJHt0fTogJHtlfWApO3Rocm93IG5ldyBFcnJvcihzKX19KSxjKHRoaXMsXCJpc0xpbmtNb2RlRW5hYmxlZFwiLChlLHQpPT57dmFyIHMsaSxyLG8sYSxsLHUsZyxoO3JldHVybiFlfHx0IT09VC5saW5rX21vZGU/ITE6KChpPShzPXRoaXMuY2xpZW50Lm1ldGFkYXRhKT09bnVsbD92b2lkIDA6cy5yZWRpcmVjdCk9PW51bGw/dm9pZCAwOmkubGlua01vZGUpPT09ITAmJigobz0ocj10aGlzLmNsaWVudC5tZXRhZGF0YSk9PW51bGw/dm9pZCAwOnIucmVkaXJlY3QpPT1udWxsP3ZvaWQgMDpvLnVuaXZlcnNhbCkhPT12b2lkIDAmJigobD0oYT10aGlzLmNsaWVudC5tZXRhZGF0YSk9PW51bGw/dm9pZCAwOmEucmVkaXJlY3QpPT1udWxsP3ZvaWQgMDpsLnVuaXZlcnNhbCkhPT1cIlwiJiYoKHU9ZT8ucmVkaXJlY3QpPT1udWxsP3ZvaWQgMDp1LnVuaXZlcnNhbCkhPT12b2lkIDAmJigoZz1lPy5yZWRpcmVjdCk9PW51bGw/dm9pZCAwOmcudW5pdmVyc2FsKSE9PVwiXCImJigoaD1lPy5yZWRpcmVjdCk9PW51bGw/dm9pZCAwOmgubGlua01vZGUpPT09ITAmJnRoaXMuY2xpZW50LmNvcmUubGlua01vZGVTdXBwb3J0ZWRBcHBzLmluY2x1ZGVzKGUucmVkaXJlY3QudW5pdmVyc2FsKSYmdHlwZW9mKGdsb2JhbD09bnVsbD92b2lkIDA6Z2xvYmFsLkxpbmtpbmcpPFwidVwifSksYyh0aGlzLFwiZ2V0QXBwTGlua0lmRW5hYmxlZFwiLChlLHQpPT57dmFyIHM7cmV0dXJuIHRoaXMuaXNMaW5rTW9kZUVuYWJsZWQoZSx0KT8ocz1lPy5yZWRpcmVjdCk9PW51bGw/dm9pZCAwOnMudW5pdmVyc2FsOnZvaWQgMH0pLGModGhpcyxcImhhbmRsZUxpbmtNb2RlTWVzc2FnZVwiLCh7dXJsOmV9KT0+e2lmKCFlfHwhZS5pbmNsdWRlcyhcIndjX2V2XCIpfHwhZS5pbmNsdWRlcyhcInRvcGljXCIpKXJldHVybjtjb25zdCB0PWx0KGUsXCJ0b3BpY1wiKXx8XCJcIixzPWRlY29kZVVSSUNvbXBvbmVudChsdChlLFwid2NfZXZcIil8fFwiXCIpLGk9dGhpcy5jbGllbnQuc2Vzc2lvbi5rZXlzLmluY2x1ZGVzKHQpO2kmJnRoaXMuY2xpZW50LnNlc3Npb24udXBkYXRlKHQse3RyYW5zcG9ydFR5cGU6VC5saW5rX21vZGV9KSx0aGlzLmNsaWVudC5jb3JlLmRpc3BhdGNoRW52ZWxvcGUoe3RvcGljOnQsbWVzc2FnZTpzLHNlc3Npb25FeGlzdHM6aX0pfSksYyh0aGlzLFwicmVnaXN0ZXJMaW5rTW9kZUxpc3RlbmVyc1wiLGFzeW5jKCk9Pnt2YXIgZTtpZihycygpfHxucygpJiYoZT10aGlzLmNsaWVudC5tZXRhZGF0YS5yZWRpcmVjdCkhPW51bGwmJmUubGlua01vZGUpe2NvbnN0IHQ9Z2xvYmFsPT1udWxsP3ZvaWQgMDpnbG9iYWwuTGlua2luZztpZih0eXBlb2YgdDxcInVcIil7dC5hZGRFdmVudExpc3RlbmVyKFwidXJsXCIsdGhpcy5oYW5kbGVMaW5rTW9kZU1lc3NhZ2UsdGhpcy5jbGllbnQubmFtZSk7Y29uc3Qgcz1hd2FpdCB0LmdldEluaXRpYWxVUkwoKTtzJiZzZXRUaW1lb3V0KCgpPT57dGhpcy5oYW5kbGVMaW5rTW9kZU1lc3NhZ2Uoe3VybDpzfSl9LDUwKX19fSksYyh0aGlzLFwic2hvdWxkU2V0VFZGXCIsKGUsdCk9PntpZighdHx8ZSE9PVwid2Nfc2Vzc2lvblJlcXVlc3RcIilyZXR1cm4hMTtjb25zdHtyZXF1ZXN0OnN9PXQ7cmV0dXJuIE9iamVjdC5rZXlzKEtlKS5pbmNsdWRlcyhzLm1ldGhvZCl9KSxjKHRoaXMsXCJnZXRUVkZQYXJhbXNcIiwoZSx0LHMpPT57dmFyIGkscjt0cnl7Y29uc3Qgbz10LnJlcXVlc3QubWV0aG9kLGE9dGhpcy5leHRyYWN0VHhIYXNoZXNGcm9tUmVzdWx0KG8scyk7cmV0dXJuIHgodih7Y29ycmVsYXRpb25JZDplLHJwY01ldGhvZHM6W29dLGNoYWluSWQ6dC5jaGFpbklkfSx0aGlzLmlzVmFsaWRDb250cmFjdERhdGEodC5yZXF1ZXN0LnBhcmFtcykmJntjb250cmFjdEFkZHJlc3NlczpbKHI9KGk9dC5yZXF1ZXN0LnBhcmFtcyk9PW51bGw/dm9pZCAwOmlbMF0pPT1udWxsP3ZvaWQgMDpyLnRvXX0pLHt0eEhhc2hlczphfSl9Y2F0Y2gobyl7dGhpcy5jbGllbnQubG9nZ2VyLndhcm4oXCJFcnJvciBnZXR0aW5nIFRWRiBwYXJhbXNcIixvKX1yZXR1cm57fX0pLGModGhpcyxcImlzVmFsaWRDb250cmFjdERhdGFcIixlPT57dmFyIHQ7aWYoIWUpcmV0dXJuITE7dHJ5e2NvbnN0IHM9ZT8uZGF0YXx8KCh0PWU/LlswXSk9PW51bGw/dm9pZCAwOnQuZGF0YSk7aWYoIXMuc3RhcnRzV2l0aChcIjB4XCIpKXJldHVybiExO2NvbnN0IGk9cy5zbGljZSgyKTtyZXR1cm4vXlswLTlhLWZBLUZdKiQvLnRlc3QoaSk/aS5sZW5ndGglMj09PTA6ITF9Y2F0Y2h7fXJldHVybiExfSksYyh0aGlzLFwiZXh0cmFjdFR4SGFzaGVzRnJvbVJlc3VsdFwiLChlLHQpPT57dHJ5e2NvbnN0IHM9S2VbZV07aWYodHlwZW9mIHQ9PVwic3RyaW5nXCIpcmV0dXJuW3RdO2NvbnN0IGk9dFtzLmtleV07aWYob3MoaSkpcmV0dXJuIGk7aWYodHlwZW9mIGk9PVwic3RyaW5nXCIpcmV0dXJuW2ldfWNhdGNoKHMpe3RoaXMuY2xpZW50LmxvZ2dlci53YXJuKFwiRXJyb3IgZXh0cmFjdGluZyB0eCBoYXNoZXMgZnJvbSByZXN1bHRcIixzKX1yZXR1cm5bXX0pfWlzSW5pdGlhbGl6ZWQoKXtpZighdGhpcy5pbml0aWFsaXplZCl7Y29uc3R7bWVzc2FnZTpufT13KFwiTk9UX0lOSVRJQUxJWkVEXCIsdGhpcy5uYW1lKTt0aHJvdyBuZXcgRXJyb3Iobil9fWFzeW5jIGNvbmZpcm1PbmxpbmVTdGF0ZU9yVGhyb3coKXthd2FpdCB0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIuY29uZmlybU9ubGluZVN0YXRlT3JUaHJvdygpfXJlZ2lzdGVyUmVsYXllckV2ZW50cygpe3RoaXMuY2xpZW50LmNvcmUucmVsYXllci5vbihYZS5tZXNzYWdlLG49PnshdGhpcy5pbml0aWFsaXplZHx8dGhpcy5yZWxheU1lc3NhZ2VDYWNoZS5sZW5ndGg+MD90aGlzLnJlbGF5TWVzc2FnZUNhY2hlLnB1c2gobik6dGhpcy5vblJlbGF5TWVzc2FnZShuKX0pfWFzeW5jIG9uUmVsYXlNZXNzYWdlKG4pe2NvbnN0e3RvcGljOmUsbWVzc2FnZTp0LGF0dGVzdGF0aW9uOnMsdHJhbnNwb3J0VHlwZTppfT1uLHtwdWJsaWNLZXk6cn09dGhpcy5jbGllbnQuYXV0aC5hdXRoS2V5cy5rZXlzLmluY2x1ZGVzKGxlKT90aGlzLmNsaWVudC5hdXRoLmF1dGhLZXlzLmdldChsZSk6e3Jlc3BvbnNlVG9waWM6dm9pZCAwLHB1YmxpY0tleTp2b2lkIDB9LG89YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZGVjb2RlKGUsdCx7cmVjZWl2ZXJQdWJsaWNLZXk6cixlbmNvZGluZzppPT09VC5saW5rX21vZGU/bmU6dWV9KTt0cnl7cHMobyk/KHRoaXMuY2xpZW50LmNvcmUuaGlzdG9yeS5zZXQoZSxvKSx0aGlzLm9uUmVsYXlFdmVudFJlcXVlc3Qoe3RvcGljOmUscGF5bG9hZDpvLGF0dGVzdGF0aW9uOnMsdHJhbnNwb3J0VHlwZTppLGVuY3J5cHRlZElkOkIodCl9KSk6aHMobyk/KGF3YWl0IHRoaXMuY2xpZW50LmNvcmUuaGlzdG9yeS5yZXNvbHZlKG8pLGF3YWl0IHRoaXMub25SZWxheUV2ZW50UmVzcG9uc2Uoe3RvcGljOmUscGF5bG9hZDpvLHRyYW5zcG9ydFR5cGU6aX0pLHRoaXMuY2xpZW50LmNvcmUuaGlzdG9yeS5kZWxldGUoZSxvLmlkKSk6dGhpcy5vblJlbGF5RXZlbnRVbmtub3duUGF5bG9hZCh7dG9waWM6ZSxwYXlsb2FkOm8sdHJhbnNwb3J0VHlwZTppfSl9Y2F0Y2goYSl7dGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGEpfX1yZWdpc3RlckV4cGlyZXJFdmVudHMoKXt0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIub24ocXQuZXhwaXJlZCxhc3luYyBuPT57Y29uc3R7dG9waWM6ZSxpZDp0fT1rdChuLnRhcmdldCk7aWYodCYmdGhpcy5jbGllbnQucGVuZGluZ1JlcXVlc3Qua2V5cy5pbmNsdWRlcyh0KSlyZXR1cm4gYXdhaXQgdGhpcy5kZWxldGVQZW5kaW5nU2Vzc2lvblJlcXVlc3QodCx3KFwiRVhQSVJFRFwiKSwhMCk7aWYodCYmdGhpcy5jbGllbnQuYXV0aC5yZXF1ZXN0cy5rZXlzLmluY2x1ZGVzKHQpKXJldHVybiBhd2FpdCB0aGlzLmRlbGV0ZVBlbmRpbmdBdXRoUmVxdWVzdCh0LHcoXCJFWFBJUkVEXCIpLCEwKTtlP3RoaXMuY2xpZW50LnNlc3Npb24ua2V5cy5pbmNsdWRlcyhlKSYmKGF3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbih7dG9waWM6ZSxleHBpcmVySGFzRGVsZXRlZDohMH0pLHRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9leHBpcmVcIix7dG9waWM6ZX0pKTp0JiYoYXdhaXQgdGhpcy5kZWxldGVQcm9wb3NhbCh0LCEwKSx0aGlzLmNsaWVudC5ldmVudHMuZW1pdChcInByb3Bvc2FsX2V4cGlyZVwiLHtpZDp0fSkpfSl9cmVnaXN0ZXJQYWlyaW5nRXZlbnRzKCl7dGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLmV2ZW50cy5vbihKZS5jcmVhdGUsbj0+dGhpcy5vblBhaXJpbmdDcmVhdGVkKG4pKSx0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcuZXZlbnRzLm9uKEplLmRlbGV0ZSxuPT57dGhpcy5hZGRUb1JlY2VudGx5RGVsZXRlZChuLnRvcGljLFwicGFpcmluZ1wiKX0pfWlzVmFsaWRQYWlyaW5nVG9waWMobil7aWYoIVUobiwhMSkpe2NvbnN0e21lc3NhZ2U6ZX09dyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBwYWlyaW5nIHRvcGljIHNob3VsZCBiZSBhIHN0cmluZzogJHtufWApO3Rocm93IG5ldyBFcnJvcihlKX1pZighdGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLnBhaXJpbmdzLmtleXMuaW5jbHVkZXMobikpe2NvbnN0e21lc3NhZ2U6ZX09dyhcIk5PX01BVENISU5HX0tFWVwiLGBwYWlyaW5nIHRvcGljIGRvZXNuJ3QgZXhpc3Q6ICR7bn1gKTt0aHJvdyBuZXcgRXJyb3IoZSl9aWYoVyh0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcucGFpcmluZ3MuZ2V0KG4pLmV4cGlyeSkpe2NvbnN0e21lc3NhZ2U6ZX09dyhcIkVYUElSRURcIixgcGFpcmluZyB0b3BpYzogJHtufWApO3Rocm93IG5ldyBFcnJvcihlKX19YXN5bmMgaXNWYWxpZFNlc3Npb25Ub3BpYyhuKXtpZighVShuLCExKSl7Y29uc3R7bWVzc2FnZTplfT13KFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHNlc3Npb24gdG9waWMgc2hvdWxkIGJlIGEgc3RyaW5nOiAke259YCk7dGhyb3cgbmV3IEVycm9yKGUpfWlmKHRoaXMuY2hlY2tSZWNlbnRseURlbGV0ZWQobiksIXRoaXMuY2xpZW50LnNlc3Npb24ua2V5cy5pbmNsdWRlcyhuKSl7Y29uc3R7bWVzc2FnZTplfT13KFwiTk9fTUFUQ0hJTkdfS0VZXCIsYHNlc3Npb24gdG9waWMgZG9lc24ndCBleGlzdDogJHtufWApO3Rocm93IG5ldyBFcnJvcihlKX1pZihXKHRoaXMuY2xpZW50LnNlc3Npb24uZ2V0KG4pLmV4cGlyeSkpe2F3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbih7dG9waWM6bn0pO2NvbnN0e21lc3NhZ2U6ZX09dyhcIkVYUElSRURcIixgc2Vzc2lvbiB0b3BpYzogJHtufWApO3Rocm93IG5ldyBFcnJvcihlKX1pZighdGhpcy5jbGllbnQuY29yZS5jcnlwdG8ua2V5Y2hhaW4uaGFzKG4pKXtjb25zdHttZXNzYWdlOmV9PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgc2Vzc2lvbiB0b3BpYyBkb2VzIG5vdCBleGlzdCBpbiBrZXljaGFpbjogJHtufWApO3Rocm93IGF3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbih7dG9waWM6bn0pLG5ldyBFcnJvcihlKX19YXN5bmMgaXNWYWxpZFNlc3Npb25PclBhaXJpbmdUb3BpYyhuKXtpZih0aGlzLmNoZWNrUmVjZW50bHlEZWxldGVkKG4pLHRoaXMuY2xpZW50LnNlc3Npb24ua2V5cy5pbmNsdWRlcyhuKSlhd2FpdCB0aGlzLmlzVmFsaWRTZXNzaW9uVG9waWMobik7ZWxzZSBpZih0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcucGFpcmluZ3Mua2V5cy5pbmNsdWRlcyhuKSl0aGlzLmlzVmFsaWRQYWlyaW5nVG9waWMobik7ZWxzZSBpZihVKG4sITEpKXtjb25zdHttZXNzYWdlOmV9PXcoXCJOT19NQVRDSElOR19LRVlcIixgc2Vzc2lvbiBvciBwYWlyaW5nIHRvcGljIGRvZXNuJ3QgZXhpc3Q6ICR7bn1gKTt0aHJvdyBuZXcgRXJyb3IoZSl9ZWxzZXtjb25zdHttZXNzYWdlOmV9PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgc2Vzc2lvbiBvciBwYWlyaW5nIHRvcGljIHNob3VsZCBiZSBhIHN0cmluZzogJHtufWApO3Rocm93IG5ldyBFcnJvcihlKX19YXN5bmMgaXNWYWxpZFByb3Bvc2FsSWQobil7aWYoISR0KG4pKXtjb25zdHttZXNzYWdlOmV9PXcoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgcHJvcG9zYWwgaWQgc2hvdWxkIGJlIGEgbnVtYmVyOiAke259YCk7dGhyb3cgbmV3IEVycm9yKGUpfWlmKCF0aGlzLmNsaWVudC5wcm9wb3NhbC5rZXlzLmluY2x1ZGVzKG4pKXtjb25zdHttZXNzYWdlOmV9PXcoXCJOT19NQVRDSElOR19LRVlcIixgcHJvcG9zYWwgaWQgZG9lc24ndCBleGlzdDogJHtufWApO3Rocm93IG5ldyBFcnJvcihlKX1pZihXKHRoaXMuY2xpZW50LnByb3Bvc2FsLmdldChuKS5leHBpcnlUaW1lc3RhbXApKXthd2FpdCB0aGlzLmRlbGV0ZVByb3Bvc2FsKG4pO2NvbnN0e21lc3NhZ2U6ZX09dyhcIkVYUElSRURcIixgcHJvcG9zYWwgaWQ6ICR7bn1gKTt0aHJvdyBuZXcgRXJyb3IoZSl9fX1jbGFzcyBOcyBleHRlbmRzIEp7Y29uc3RydWN0b3IobixlKXtzdXBlcihuLGUscHQsbWUpLHRoaXMuY29yZT1uLHRoaXMubG9nZ2VyPWV9fWNsYXNzIFJ0IGV4dGVuZHMgSntjb25zdHJ1Y3RvcihuLGUpe3N1cGVyKG4sZSxodCxtZSksdGhpcy5jb3JlPW4sdGhpcy5sb2dnZXI9ZX19Y2xhc3MgUHMgZXh0ZW5kcyBKe2NvbnN0cnVjdG9yKG4sZSl7c3VwZXIobixlLHV0LG1lLHQ9PnQuaWQpLHRoaXMuY29yZT1uLHRoaXMubG9nZ2VyPWV9fWNsYXNzIE9zIGV4dGVuZHMgSntjb25zdHJ1Y3RvcihuLGUpe3N1cGVyKG4sZSxtdCxjZSwoKT0+bGUpLHRoaXMuY29yZT1uLHRoaXMubG9nZ2VyPWV9fWNsYXNzIGJzIGV4dGVuZHMgSntjb25zdHJ1Y3RvcihuLGUpe3N1cGVyKG4sZSxfdCxjZSksdGhpcy5jb3JlPW4sdGhpcy5sb2dnZXI9ZX19Y2xhc3MgQXMgZXh0ZW5kcyBKe2NvbnN0cnVjdG9yKG4sZSl7c3VwZXIobixlLEV0LGNlLHQ9PnQuaWQpLHRoaXMuY29yZT1uLHRoaXMubG9nZ2VyPWV9fXZhciBDcz1PYmplY3QuZGVmaW5lUHJvcGVydHkseHM9KFMsbixlKT0+biBpbiBTP0NzKFMsbix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6ZX0pOlNbbl09ZSxHZT0oUyxuLGUpPT54cyhTLHR5cGVvZiBuIT1cInN5bWJvbFwiP24rXCJcIjpuLGUpO2NsYXNzIFZze2NvbnN0cnVjdG9yKG4sZSl7dGhpcy5jb3JlPW4sdGhpcy5sb2dnZXI9ZSxHZSh0aGlzLFwiYXV0aEtleXNcIiksR2UodGhpcyxcInBhaXJpbmdUb3BpY3NcIiksR2UodGhpcyxcInJlcXVlc3RzXCIpLHRoaXMuYXV0aEtleXM9bmV3IE9zKHRoaXMuY29yZSx0aGlzLmxvZ2dlciksdGhpcy5wYWlyaW5nVG9waWNzPW5ldyBicyh0aGlzLmNvcmUsdGhpcy5sb2dnZXIpLHRoaXMucmVxdWVzdHM9bmV3IEFzKHRoaXMuY29yZSx0aGlzLmxvZ2dlcil9YXN5bmMgaW5pdCgpe2F3YWl0IHRoaXMuYXV0aEtleXMuaW5pdCgpLGF3YWl0IHRoaXMucGFpcmluZ1RvcGljcy5pbml0KCksYXdhaXQgdGhpcy5yZXF1ZXN0cy5pbml0KCl9fXZhciBEcz1PYmplY3QuZGVmaW5lUHJvcGVydHksTHM9KFMsbixlKT0+biBpbiBTP0RzKFMsbix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6ZX0pOlNbbl09ZSxfPShTLG4sZSk9PkxzKFMsdHlwZW9mIG4hPVwic3ltYm9sXCI/bitcIlwiOm4sZSk7Y2xhc3MgU2UgZXh0ZW5kcyBMdHtjb25zdHJ1Y3RvcihuKXtzdXBlcihuKSxfKHRoaXMsXCJwcm90b2NvbFwiLERlKSxfKHRoaXMsXCJ2ZXJzaW9uXCIsTGUpLF8odGhpcyxcIm5hbWVcIixfZS5uYW1lKSxfKHRoaXMsXCJtZXRhZGF0YVwiKSxfKHRoaXMsXCJjb3JlXCIpLF8odGhpcyxcImxvZ2dlclwiKSxfKHRoaXMsXCJldmVudHNcIixuZXcgbHMpLF8odGhpcyxcImVuZ2luZVwiKSxfKHRoaXMsXCJzZXNzaW9uXCIpLF8odGhpcyxcInByb3Bvc2FsXCIpLF8odGhpcyxcInBlbmRpbmdSZXF1ZXN0XCIpLF8odGhpcyxcImF1dGhcIiksXyh0aGlzLFwic2lnbkNvbmZpZ1wiKSxfKHRoaXMsXCJvblwiLCh0LHMpPT50aGlzLmV2ZW50cy5vbih0LHMpKSxfKHRoaXMsXCJvbmNlXCIsKHQscyk9PnRoaXMuZXZlbnRzLm9uY2UodCxzKSksXyh0aGlzLFwib2ZmXCIsKHQscyk9PnRoaXMuZXZlbnRzLm9mZih0LHMpKSxfKHRoaXMsXCJyZW1vdmVMaXN0ZW5lclwiLCh0LHMpPT50aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcih0LHMpKSxfKHRoaXMsXCJyZW1vdmVBbGxMaXN0ZW5lcnNcIix0PT50aGlzLmV2ZW50cy5yZW1vdmVBbGxMaXN0ZW5lcnModCkpLF8odGhpcyxcImNvbm5lY3RcIixhc3luYyB0PT57dHJ5e3JldHVybiBhd2FpdCB0aGlzLmVuZ2luZS5jb25uZWN0KHQpfWNhdGNoKHMpe3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKHMubWVzc2FnZSksc319KSxfKHRoaXMsXCJwYWlyXCIsYXN5bmMgdD0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUucGFpcih0KX1jYXRjaChzKXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcihzLm1lc3NhZ2UpLHN9fSksXyh0aGlzLFwiYXBwcm92ZVwiLGFzeW5jIHQ9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLmFwcHJvdmUodCl9Y2F0Y2gocyl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3Iocy5tZXNzYWdlKSxzfX0pLF8odGhpcyxcInJlamVjdFwiLGFzeW5jIHQ9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLnJlamVjdCh0KX1jYXRjaChzKXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcihzLm1lc3NhZ2UpLHN9fSksXyh0aGlzLFwidXBkYXRlXCIsYXN5bmMgdD0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUudXBkYXRlKHQpfWNhdGNoKHMpe3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKHMubWVzc2FnZSksc319KSxfKHRoaXMsXCJleHRlbmRcIixhc3luYyB0PT57dHJ5e3JldHVybiBhd2FpdCB0aGlzLmVuZ2luZS5leHRlbmQodCl9Y2F0Y2gocyl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3Iocy5tZXNzYWdlKSxzfX0pLF8odGhpcyxcInJlcXVlc3RcIixhc3luYyB0PT57dHJ5e3JldHVybiBhd2FpdCB0aGlzLmVuZ2luZS5yZXF1ZXN0KHQpfWNhdGNoKHMpe3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKHMubWVzc2FnZSksc319KSxfKHRoaXMsXCJyZXNwb25kXCIsYXN5bmMgdD0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUucmVzcG9uZCh0KX1jYXRjaChzKXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcihzLm1lc3NhZ2UpLHN9fSksXyh0aGlzLFwicGluZ1wiLGFzeW5jIHQ9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLnBpbmcodCl9Y2F0Y2gocyl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3Iocy5tZXNzYWdlKSxzfX0pLF8odGhpcyxcImVtaXRcIixhc3luYyB0PT57dHJ5e3JldHVybiBhd2FpdCB0aGlzLmVuZ2luZS5lbWl0KHQpfWNhdGNoKHMpe3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKHMubWVzc2FnZSksc319KSxfKHRoaXMsXCJkaXNjb25uZWN0XCIsYXN5bmMgdD0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUuZGlzY29ubmVjdCh0KX1jYXRjaChzKXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcihzLm1lc3NhZ2UpLHN9fSksXyh0aGlzLFwiZmluZFwiLHQ9Pnt0cnl7cmV0dXJuIHRoaXMuZW5naW5lLmZpbmQodCl9Y2F0Y2gocyl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3Iocy5tZXNzYWdlKSxzfX0pLF8odGhpcyxcImdldFBlbmRpbmdTZXNzaW9uUmVxdWVzdHNcIiwoKT0+e3RyeXtyZXR1cm4gdGhpcy5lbmdpbmUuZ2V0UGVuZGluZ1Nlc3Npb25SZXF1ZXN0cygpfWNhdGNoKHQpe3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKHQubWVzc2FnZSksdH19KSxfKHRoaXMsXCJhdXRoZW50aWNhdGVcIixhc3luYyh0LHMpPT57dHJ5e3JldHVybiBhd2FpdCB0aGlzLmVuZ2luZS5hdXRoZW50aWNhdGUodCxzKX1jYXRjaChpKXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcihpLm1lc3NhZ2UpLGl9fSksXyh0aGlzLFwiZm9ybWF0QXV0aE1lc3NhZ2VcIix0PT57dHJ5e3JldHVybiB0aGlzLmVuZ2luZS5mb3JtYXRBdXRoTWVzc2FnZSh0KX1jYXRjaChzKXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcihzLm1lc3NhZ2UpLHN9fSksXyh0aGlzLFwiYXBwcm92ZVNlc3Npb25BdXRoZW50aWNhdGVcIixhc3luYyB0PT57dHJ5e3JldHVybiBhd2FpdCB0aGlzLmVuZ2luZS5hcHByb3ZlU2Vzc2lvbkF1dGhlbnRpY2F0ZSh0KX1jYXRjaChzKXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcihzLm1lc3NhZ2UpLHN9fSksXyh0aGlzLFwicmVqZWN0U2Vzc2lvbkF1dGhlbnRpY2F0ZVwiLGFzeW5jIHQ9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLnJlamVjdFNlc3Npb25BdXRoZW50aWNhdGUodCl9Y2F0Y2gocyl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3Iocy5tZXNzYWdlKSxzfX0pLHRoaXMubmFtZT1uPy5uYW1lfHxfZS5uYW1lLHRoaXMubWV0YWRhdGE9bj8ubWV0YWRhdGF8fGFzKCksdGhpcy5zaWduQ29uZmlnPW4/LnNpZ25Db25maWc7Y29uc3QgZT10eXBlb2Ygbj8ubG9nZ2VyPFwidVwiJiZ0eXBlb2Ygbj8ubG9nZ2VyIT1cInN0cmluZ1wiP24ubG9nZ2VyOkF0KEN0KHtsZXZlbDpuPy5sb2dnZXJ8fF9lLmxvZ2dlcn0pKTt0aGlzLmNvcmU9bj8uY29yZXx8bmV3IGJ0KG4pLHRoaXMubG9nZ2VyPXh0KGUsdGhpcy5uYW1lKSx0aGlzLnNlc3Npb249bmV3IFJ0KHRoaXMuY29yZSx0aGlzLmxvZ2dlciksdGhpcy5wcm9wb3NhbD1uZXcgTnModGhpcy5jb3JlLHRoaXMubG9nZ2VyKSx0aGlzLnBlbmRpbmdSZXF1ZXN0PW5ldyBQcyh0aGlzLmNvcmUsdGhpcy5sb2dnZXIpLHRoaXMuZW5naW5lPW5ldyBUcyh0aGlzKSx0aGlzLmF1dGg9bmV3IFZzKHRoaXMuY29yZSx0aGlzLmxvZ2dlcil9c3RhdGljIGFzeW5jIGluaXQobil7Y29uc3QgZT1uZXcgU2Uobik7cmV0dXJuIGF3YWl0IGUuaW5pdGlhbGl6ZSgpLGV9Z2V0IGNvbnRleHQoKXtyZXR1cm4gVnQodGhpcy5sb2dnZXIpfWdldCBwYWlyaW5nKCl7cmV0dXJuIHRoaXMuY29yZS5wYWlyaW5nLnBhaXJpbmdzfWFzeW5jIGluaXRpYWxpemUoKXt0aGlzLmxvZ2dlci50cmFjZShcIkluaXRpYWxpemVkXCIpO3RyeXthd2FpdCB0aGlzLmNvcmUuc3RhcnQoKSxhd2FpdCB0aGlzLnNlc3Npb24uaW5pdCgpLGF3YWl0IHRoaXMucHJvcG9zYWwuaW5pdCgpLGF3YWl0IHRoaXMucGVuZGluZ1JlcXVlc3QuaW5pdCgpLGF3YWl0IHRoaXMuYXV0aC5pbml0KCksYXdhaXQgdGhpcy5lbmdpbmUuaW5pdCgpLHRoaXMubG9nZ2VyLmluZm8oXCJTaWduQ2xpZW50IEluaXRpYWxpemF0aW9uIFN1Y2Nlc3NcIiksc2V0VGltZW91dCgoKT0+e3RoaXMuZW5naW5lLnByb2Nlc3NSZWxheU1lc3NhZ2VDYWNoZSgpfSxPZShaZSkpfWNhdGNoKG4pe3Rocm93IHRoaXMubG9nZ2VyLmluZm8oXCJTaWduQ2xpZW50IEluaXRpYWxpemF0aW9uIEZhaWx1cmVcIiksdGhpcy5sb2dnZXIuZXJyb3Iobi5tZXNzYWdlKSxufX19Y29uc3QgTXM9UnQsa3M9U2U7ZXhwb3J0e3d0IGFzIEFVVEhfQ09OVEVYVCxtdCBhcyBBVVRIX0tFWVNfQ09OVEVYVCxfdCBhcyBBVVRIX1BBSVJJTkdfVE9QSUNfQ09OVEVYVCx5dCBhcyBBVVRIX1BST1RPQ09MLGxlIGFzIEFVVEhfUFVCTElDX0tFWV9OQU1FLEV0IGFzIEFVVEhfUkVRVUVTVF9DT05URVhULGNlIGFzIEFVVEhfU1RPUkFHRV9QUkVGSVgsU3MgYXMgQVVUSF9WRVJTSU9OLGR0IGFzIEVOR0lORV9DT05URVhULCQgYXMgRU5HSU5FX1FVRVVFX1NUQVRFUyxOIGFzIEVOR0lORV9SUENfT1BUUyxtcyBhcyBISVNUT1JZX0NPTlRFWFQsd3MgYXMgSElTVE9SWV9FVkVOVFMsX3MgYXMgSElTVE9SWV9TVE9SQUdFX1ZFUlNJT04sZ3QgYXMgTUVUSE9EU19UT19WRVJJRlkscHQgYXMgUFJPUE9TQUxfQ09OVEVYVCxFcyBhcyBQUk9QT1NBTF9FWFBJUlksJGUgYXMgUFJPUE9TQUxfRVhQSVJZX01FU1NBR0UsdXQgYXMgUkVRVUVTVF9DT05URVhULGh0IGFzIFNFU1NJT05fQ09OVEVYVCxZIGFzIFNFU1NJT05fRVhQSVJZLEVlIGFzIFNFU1NJT05fUkVRVUVTVF9FWFBJUllfQk9VTkRBUklFUyxNZSBhcyBTSUdOX0NMSUVOVF9DT05URVhULF9lIGFzIFNJR05fQ0xJRU5UX0RFRkFVTFQsZ3MgYXMgU0lHTl9DTElFTlRfRVZFTlRTLERlIGFzIFNJR05fQ0xJRU5UX1BST1RPQ09MLHlzIGFzIFNJR05fQ0xJRU5UX1NUT1JBR0VfT1BUSU9OUyxtZSBhcyBTSUdOX0NMSUVOVF9TVE9SQUdFX1BSRUZJWCxMZSBhcyBTSUdOX0NMSUVOVF9WRVJTSU9OLE1zIGFzIFNlc3Npb25TdG9yZSxrcyBhcyBTaWduQ2xpZW50LEtlIGFzIFRWRl9NRVRIT0RTLGtlIGFzIFdBTExFVENPTk5FQ1RfREVFUExJTktfQ0hPSUNFLFNlIGFzIGRlZmF1bHR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iXSwibmFtZXMiOlsiUkVMQVlFUl9FVkVOVFMiLCJYZSIsIlRSQU5TUE9SVF9UWVBFUyIsIlQiLCJFWFBJUkVSX0VWRU5UUyIsInF0IiwiUEFJUklOR19FVkVOVFMiLCJKZSIsIlJFTEFZRVJfREVGQVVMVF9QUk9UT0NPTCIsIlR0IiwiRVZFTlRfQ0xJRU5UX1NFU1NJT05fVFJBQ0VTIiwiTSIsIkVWRU5UX0NMSUVOVF9TRVNTSU9OX0VSUk9SUyIsIkgiLCJFVkVOVF9DTElFTlRfQVVUSEVOVElDQVRFX1RSQUNFUyIsInoiLCJFVkVOVF9DTElFTlRfQVVUSEVOVElDQVRFX0VSUk9SUyIsInJlIiwiRVZFTlRfQ0xJRU5UX1BBSVJJTkdfRVJST1JTIiwiTnQiLCJFVkVOVF9DTElFTlRfUEFJUklOR19UUkFDRVMiLCJQdCIsIlZFUklGWV9TRVJWRVIiLCJPdCIsIlN0b3JlIiwiSiIsIkNvcmUiLCJidCIsInBpbm8iLCJBdCIsImdldERlZmF1bHRMb2dnZXJPcHRpb25zIiwiQ3QiLCJnZW5lcmF0ZUNoaWxkTG9nZ2VyIiwieHQiLCJnZXRMb2dnZXJDb250ZXh0IiwiVnQiLCJJRW5naW5lIiwiRHQiLCJJU2lnbkNsaWVudCIsIkx0IiwiVEhJUlRZX0RBWVMiLCJNdCIsIlNFVkVOX0RBWVMiLCJCZSIsIkZJVkVfTUlOVVRFUyIsIkEiLCJPTkVfREFZIiwiSyIsIk9ORV9IT1VSIiwiV2UiLCJPTkVfU0VDT05EIiwiWmUiLCJ0b01pbGlzZWNvbmRzIiwiT2UiLCJnZXRJbnRlcm5hbEVycm9yIiwidyIsIkJBU0U2NFVSTCIsIm5lIiwiQkFTRTY0IiwidWUiLCJoYXNoTWVzc2FnZSIsIkIiLCJwYXJzZUV4cGlyZXJUYXJnZXQiLCJrdCIsImlzVmFsaWRTdHJpbmciLCJVIiwiaXNFeHBpcmVkIiwiVyIsImlzVmFsaWRJZCIsIiR0IiwiY2FsY0V4cGlyeSIsIkMiLCJlbmdpbmVFdmVudCIsImYiLCJjcmVhdGVEZWxheWVkUHJvbWlzZSIsIloiLCJnZXRTZGtFcnJvciIsIk8iLCJnZXREZWVwTGluayIsIkt0IiwiaGFuZGxlRGVlcGxpbmtSZWRpcmVjdCIsIlV0IiwiaXNTZXNzaW9uQ29tcGF0aWJsZSIsIkd0IiwiaGFzaEtleSIsImJlIiwicGFyc2VDaGFpbklkIiwiQWUiLCJjcmVhdGVFbmNvZGVkUmVjYXAiLCJGdCIsImdldFJlY2FwRnJvbVJlc291cmNlcyIsIkNlIiwibWVyZ2VFbmNvZGVkUmVjYXBzIiwianQiLCJUWVBFXzIiLCJRdCIsImdldExpbmtNb2RlVVJMIiwiZ2UiLCJ2YWxpZGF0ZVNpZ25lZENhY2FvIiwiZXQiLCJnZXROYW1lc3BhY2VkRGlkQ2hhaW5JZCIsInR0IiwiZ2V0RGlkQWRkcmVzcyIsInN0IiwiZ2V0TWV0aG9kc0Zyb21SZWNhcCIsIml0IiwiZ2V0Q2hhaW5zRnJvbVJlY2FwIiwicnQiLCJidWlsZE5hbWVzcGFjZXNGcm9tQXV0aCIsIm50IiwiZm9ybWF0TWVzc2FnZSIsIkh0IiwiTWVtb3J5U3RvcmUiLCJvZSIsImlzVmFsaWRQYXJhbXMiLCJrIiwiaXNVbmRlZmluZWQiLCJhZSIsImlzVmFsaWRSZWxheXMiLCJ6dCIsImlzVmFsaWRPYmplY3QiLCJvdCIsImlzVmFsaWRSZXF1aXJlZE5hbWVzcGFjZXMiLCJZdCIsImlzVmFsaWROYW1lc3BhY2VzIiwieGUiLCJpc0NvbmZvcm1pbmdOYW1lc3BhY2VzIiwiYXQiLCJpc1ZhbGlkRXJyb3JSZWFzb24iLCJYdCIsImlzVmFsaWRSZWxheSIsIkp0IiwiaXNWYWxpZENvbnRyb2xsZXIiLCJCdCIsImlzVmFsaWROYW1lc3BhY2VzQ2hhaW5JZCIsImN0IiwiaXNWYWxpZFJlcXVlc3QiLCJXdCIsImlzVmFsaWROYW1lc3BhY2VzUmVxdWVzdCIsIlp0IiwiaXNWYWxpZFJlcXVlc3RFeHBpcnkiLCJlcyIsImlzVmFsaWRSZXNwb25zZSIsInRzIiwiaXNWYWxpZEV2ZW50Iiwic3MiLCJpc1ZhbGlkTmFtZXNwYWNlc0V2ZW50IiwiaXMiLCJnZXRTZWFyY2hQYXJhbUZyb21VUkwiLCJsdCIsImlzVGVzdFJ1biIsInJzIiwiaXNSZWFjdE5hdGl2ZSIsIm5zIiwiaXNWYWxpZEFycmF5Iiwib3MiLCJUWVBFXzEiLCJWZSIsImdldEFwcE1ldGFkYXRhIiwiYXMiLCJjcyIsIkV2ZW50RW1pdHRlciIsImxzIiwiaXNKc29uUnBjUmVxdWVzdCIsInBzIiwiaXNKc29uUnBjUmVzcG9uc2UiLCJocyIsInBheWxvYWRJZCIsIkciLCJnZXRCaWdJbnRScGNJZCIsInllIiwiaXNKc29uUnBjUmVzdWx0IiwiRiIsImlzSnNvblJwY0Vycm9yIiwiaiIsImZvcm1hdEpzb25ScGNSZXF1ZXN0Iiwid2UiLCJmb3JtYXRKc29uUnBjUmVzdWx0IiwiZHMiLCJmb3JtYXRKc29uUnBjRXJyb3IiLCJ1cyIsIkRlIiwiTGUiLCJNZSIsIm1lIiwiX2UiLCJuYW1lIiwibG9nZ2VyIiwiY29udHJvbGxlciIsInJlbGF5VXJsIiwiZ3MiLCJzZXNzaW9uX3Byb3Bvc2FsIiwic2Vzc2lvbl91cGRhdGUiLCJzZXNzaW9uX2V4dGVuZCIsInNlc3Npb25fcGluZyIsInNlc3Npb25fZGVsZXRlIiwic2Vzc2lvbl9leHBpcmUiLCJzZXNzaW9uX3JlcXVlc3QiLCJzZXNzaW9uX3JlcXVlc3Rfc2VudCIsInNlc3Npb25fZXZlbnQiLCJwcm9wb3NhbF9leHBpcmUiLCJzZXNzaW9uX2F1dGhlbnRpY2F0ZSIsInNlc3Npb25fcmVxdWVzdF9leHBpcmUiLCJzZXNzaW9uX2Nvbm5lY3QiLCJ5cyIsImRhdGFiYXNlIiwia2UiLCJ3cyIsImNyZWF0ZWQiLCJ1cGRhdGVkIiwiZGVsZXRlZCIsInN5bmMiLCJtcyIsIl9zIiwicHQiLCJFcyIsIiRlIiwiaHQiLCJZIiwiZHQiLCJOIiwid2Nfc2Vzc2lvblByb3Bvc2UiLCJyZXEiLCJ0dGwiLCJwcm9tcHQiLCJ0YWciLCJyZXMiLCJyZWplY3QiLCJhdXRvUmVqZWN0Iiwid2Nfc2Vzc2lvblNldHRsZSIsIndjX3Nlc3Npb25VcGRhdGUiLCJ3Y19zZXNzaW9uRXh0ZW5kIiwid2Nfc2Vzc2lvblJlcXVlc3QiLCJ3Y19zZXNzaW9uRXZlbnQiLCJ3Y19zZXNzaW9uRGVsZXRlIiwid2Nfc2Vzc2lvblBpbmciLCJ3Y19zZXNzaW9uQXV0aGVudGljYXRlIiwiRWUiLCJtaW4iLCJtYXgiLCIkIiwiaWRsZSIsImFjdGl2ZSIsIktlIiwiZXRoX3NlbmRUcmFuc2FjdGlvbiIsImtleSIsImV0aF9zZW5kUmF3VHJhbnNhY3Rpb24iLCJ3YWxsZXRfc2VuZENhbGxzIiwic29sYW5hX3NpZ25UcmFuc2FjdGlvbiIsInNvbGFuYV9zaWduQWxsVHJhbnNhY3Rpb25zIiwic29sYW5hX3NpZ25BbmRTZW5kVHJhbnNhY3Rpb24iLCJ1dCIsImd0IiwieXQiLCJTcyIsInd0IiwibXQiLCJfdCIsIkV0IiwiY2UiLCJsZSIsIlJzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJmcyIsImRlZmluZVByb3BlcnRpZXMiLCJJcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJTdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInZzIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJxcyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiVWUiLCJTIiwibiIsImUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsInYiLCJjYWxsIiwieCIsImMiLCJUcyIsImlzSW5pdGlhbGl6ZWQiLCJpbml0aWFsaXplZCIsIm1lc3NhZ2UiLCJFcnJvciIsImNvbmZpcm1PbmxpbmVTdGF0ZU9yVGhyb3ciLCJjbGllbnQiLCJjb3JlIiwicmVsYXllciIsInJlZ2lzdGVyUmVsYXllckV2ZW50cyIsIm9uIiwicmVsYXlNZXNzYWdlQ2FjaGUiLCJsZW5ndGgiLCJwdXNoIiwib25SZWxheU1lc3NhZ2UiLCJ0b3BpYyIsInQiLCJhdHRlc3RhdGlvbiIsInMiLCJ0cmFuc3BvcnRUeXBlIiwiaSIsInB1YmxpY0tleSIsInIiLCJhdXRoIiwiYXV0aEtleXMiLCJrZXlzIiwiaW5jbHVkZXMiLCJnZXQiLCJyZXNwb25zZVRvcGljIiwibyIsImNyeXB0byIsImRlY29kZSIsInJlY2VpdmVyUHVibGljS2V5IiwiZW5jb2RpbmciLCJsaW5rX21vZGUiLCJoaXN0b3J5Iiwic2V0Iiwib25SZWxheUV2ZW50UmVxdWVzdCIsInBheWxvYWQiLCJlbmNyeXB0ZWRJZCIsInJlc29sdmUiLCJvblJlbGF5RXZlbnRSZXNwb25zZSIsImRlbGV0ZSIsImlkIiwib25SZWxheUV2ZW50VW5rbm93blBheWxvYWQiLCJhIiwiZXJyb3IiLCJyZWdpc3RlckV4cGlyZXJFdmVudHMiLCJleHBpcmVyIiwiZXhwaXJlZCIsInRhcmdldCIsInBlbmRpbmdSZXF1ZXN0IiwiZGVsZXRlUGVuZGluZ1Nlc3Npb25SZXF1ZXN0IiwicmVxdWVzdHMiLCJkZWxldGVQZW5kaW5nQXV0aFJlcXVlc3QiLCJzZXNzaW9uIiwiZGVsZXRlU2Vzc2lvbiIsImV4cGlyZXJIYXNEZWxldGVkIiwiZXZlbnRzIiwiZW1pdCIsImRlbGV0ZVByb3Bvc2FsIiwicmVnaXN0ZXJQYWlyaW5nRXZlbnRzIiwicGFpcmluZyIsImNyZWF0ZSIsIm9uUGFpcmluZ0NyZWF0ZWQiLCJhZGRUb1JlY2VudGx5RGVsZXRlZCIsImlzVmFsaWRQYWlyaW5nVG9waWMiLCJwYWlyaW5ncyIsImV4cGlyeSIsImlzVmFsaWRTZXNzaW9uVG9waWMiLCJjaGVja1JlY2VudGx5RGVsZXRlZCIsImtleWNoYWluIiwiaGFzIiwiaXNWYWxpZFNlc3Npb25PclBhaXJpbmdUb3BpYyIsImlzVmFsaWRQcm9wb3NhbElkIiwicHJvcG9zYWwiLCJleHBpcnlUaW1lc3RhbXAiLCJjb25zdHJ1Y3RvciIsInN0YXRlIiwicXVldWUiLCJNYXAiLCJjbGVhbnVwIiwicmVnaXN0ZXJMaW5rTW9kZUxpc3RlbmVycyIsInJlZ2lzdGVyIiwibWV0aG9kcyIsInNldFRpbWVvdXQiLCJzZXNzaW9uUmVxdWVzdFF1ZXVlIiwiZ2V0UGVuZGluZ1Nlc3Npb25SZXF1ZXN0cyIsInByb2Nlc3NTZXNzaW9uUmVxdWVzdFF1ZXVlIiwicmVxdWVzdFF1ZXVlRGVsYXkiLCJyZXF1aXJlZE5hbWVzcGFjZXMiLCJvcHRpb25hbE5hbWVzcGFjZXMiLCJpc1ZhbGlkQ29ubmVjdCIsInBhaXJpbmdUb3BpYyIsInNlc3Npb25Qcm9wZXJ0aWVzIiwicmVsYXlzIiwibCIsInUiLCJnIiwiUiIsIndhcm4iLCJ1cmkiLCJEIiwiaCIsImdlbmVyYXRlS2V5UGFpciIsImQiLCJ5IiwibSIsInByb3RvY29sIiwicHJvcG9zZXIiLCJtZXRhZGF0YSIsIkkiLCJwIiwiRSIsImRvbmUiLCJWIiwicSIsIm9mZiIsInBlbmRpbmdTZXNzaW9ucyIsImNvZGUiLCJvbmNlIiwic2VuZFJlcXVlc3QiLCJtZXRob2QiLCJwYXJhbXMiLCJ0aHJvd09uRmFpbGVkUHVibGlzaCIsImNsaWVudFJwY0lkIiwic2V0UHJvcG9zYWwiLCJhcHByb3ZhbCIsInBhaXIiLCJldmVudENsaWVudCIsImNyZWF0ZUV2ZW50IiwicHJvcGVydGllcyIsInRvU3RyaW5nIiwidHJhY2UiLCJzZXNzaW9uX2FwcHJvdmVfc3RhcnRlZCIsIlAiLCJzZXRFcnJvciIsIm5vX2ludGVybmV0X2Nvbm5lY3Rpb24iLCJwcm9wb3NhbF9ub3RfZm91bmQiLCJpc1ZhbGlkQXBwcm92ZSIsInNlc3Npb25fYXBwcm92ZV9uYW1lc3BhY2VfdmFsaWRhdGlvbl9mYWlsdXJlIiwicmVsYXlQcm90b2NvbCIsIm5hbWVzcGFjZXMiLCJzZXNzaW9uQ29uZmlnIiwiZGVsZXRlRXZlbnQiLCJldmVudElkIiwiZ2V0RXZlbnQiLCJ0eXBlIiwic2Vzc2lvbl9uYW1lc3BhY2VzX3ZhbGlkYXRpb25fc3VjY2VzcyIsImdlbmVyYXRlU2hhcmVkS2V5IiwicmVsYXkiLCJhZGRUcmFjZSIsInN1YnNjcmliaW5nX3Nlc3Npb25fdG9waWMiLCJzdWJzY3JpYmUiLCJzdWJzY3JpYmVfc2Vzc2lvbl90b3BpY19mYWlsdXJlIiwic3Vic2NyaWJlX3Nlc3Npb25fdG9waWNfc3VjY2VzcyIsImVlIiwiYWNrbm93bGVkZ2VkIiwic2VsZiIsInBlZXIiLCJzdG9yZV9zZXNzaW9uIiwicHVibGlzaGluZ19zZXNzaW9uX3NldHRsZSIsImNhdGNoIiwic2Vzc2lvbl9zZXR0bGVfcHVibGlzaF9mYWlsdXJlIiwic2Vzc2lvbl9zZXR0bGVfcHVibGlzaF9zdWNjZXNzIiwicHVibGlzaGluZ19zZXNzaW9uX2FwcHJvdmUiLCJzZW5kUmVzdWx0IiwicmVzdWx0IiwicmVzcG9uZGVyUHVibGljS2V5Iiwic2Vzc2lvbl9hcHByb3ZlX3B1Ymxpc2hfZmFpbHVyZSIsInNlc3Npb25fYXBwcm92ZV9wdWJsaXNoX3N1Y2Nlc3MiLCJ1bnN1YnNjcmliZSIsInVwZGF0ZU1ldGFkYXRhIiwiYWN0aXZhdGUiLCJzZXRFeHBpcnkiLCJQcm9taXNlIiwiaXNWYWxpZFJlamVjdCIsInJlYXNvbiIsInNlbmRFcnJvciIsInJwY09wdHMiLCJpc1ZhbGlkVXBkYXRlIiwidXBkYXRlIiwicmVsYXlScGNJZCIsImlzVmFsaWRFeHRlbmQiLCJjaGFpbklkIiwicmVxdWVzdCIsImdldEFwcExpbmtJZkVuYWJsZWQiLCJhcHBMaW5rIiwic2hvdWxkU2V0VFZGIiwiYWxsIiwidHZmIiwiZ2V0VFZGUGFyYW1zIiwiZGlzYWJsZURlZXBMaW5rIiwic3RvcmFnZSIsIndjRGVlcExpbmsiLCJ0aGVuIiwiaXNWYWxpZFJlc3BvbmQiLCJyZXNwb25zZSIsImNsZWFudXBBZnRlclJlc3BvbnNlIiwiaXNWYWxpZFBpbmciLCJwaW5nIiwiaXNWYWxpZEVtaXQiLCJldmVudCIsImlzVmFsaWREaXNjb25uZWN0IiwiZW1pdEV2ZW50IiwiZGlzY29ubmVjdCIsImdldEFsbCIsImZpbHRlciIsImlzVmFsaWRBdXRoZW50aWNhdGUiLCJsaW5rTW9kZVN1cHBvcnRlZEFwcHMiLCJyZWRpcmVjdCIsImxpbmtNb2RlIiwiY2hhaW5zIiwic3RhdGVtZW50IiwiZG9tYWluIiwibm9uY2UiLCJleHAiLCJuYmYiLCJyZXNvdXJjZXMiLCJpbmZvIiwicGFpcmluZ1RvcGljcyIsIm5hbWVzcGFjZSIsImIiLCJMIiwicG9wIiwiYXV0aFBheWxvYWQiLCJhdWQiLCJ2ZXJzaW9uIiwiaWF0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicmVxdWVzdGVyIiwiZWlwMTU1IiwiU2V0IiwiWCIsImZ0IiwiRmUiLCJSZSIsInRlIiwicGUiLCJmZSIsImhlIiwiSWUiLCJqZSIsIlFlIiwiaWUiLCJjYWNhb3MiLCJIZSIsInJlc3BvbmRlciIsIlEiLCJxZSIsInplIiwiY2FjYW8iLCJwcm9qZWN0SWQiLCJUZSIsIk5lIiwiWWUiLCJpc3MiLCJJdCIsIlBlIiwidnQiLCJzZSIsImRlIiwidW5pdmVyc2FsIiwiYWRkTGlua01vZGVTdXBwb3J0ZWRBcHAiLCJhdXRocyIsInZlIiwiZW5jb2RlIiwic2V0QXV0aFJlcXVlc3QiLCJ2ZXJpZnlDb250ZXh0IiwiYXV0aGVudGljYXRlZF9zZXNzaW9uX2FwcHJvdmVfc3RhcnRlZCIsImdldFBlbmRpbmdBdXRoUmVxdWVzdCIsImF1dGhlbnRpY2F0ZWRfc2Vzc2lvbl9wZW5kaW5nX3JlcXVlc3Rfbm90X2ZvdW5kIiwic2VuZGVyUHVibGljS2V5IiwiaW52YWxpZF9jYWNhbyIsImVuY29kZU9wdHMiLCJjYWNhb3NfdmVyaWZpZWQiLCJjcmVhdGVfYXV0aGVudGljYXRlZF9zZXNzaW9uX3RvcGljIiwiYXV0aGVudGljYXRpb24iLCJzdWJzY3JpYmluZ19hdXRoZW50aWNhdGVkX3Nlc3Npb25fdG9waWMiLCJzdWJzY3JpYmVfYXV0aGVudGljYXRlZF9zZXNzaW9uX3RvcGljX2ZhaWx1cmUiLCJzdWJzY3JpYmVfYXV0aGVudGljYXRlZF9zZXNzaW9uX3RvcGljX3N1Y2Nlc3MiLCJzdG9yZV9hdXRoZW50aWNhdGVkX3Nlc3Npb24iLCJwdWJsaXNoaW5nX2F1dGhlbnRpY2F0ZWRfc2Vzc2lvbl9hcHByb3ZlIiwiYXV0aGVudGljYXRlZF9zZXNzaW9uX2FwcHJvdmVfcHVibGlzaF9mYWlsdXJlIiwic2hpZnQiLCJwZWVyTWV0YWRhdGEiLCJ1cmwiLCJtYXAiLCJkZWxldGVLZXlQYWlyIiwiZGVsZXRlU3ltS2V5IiwiZGVsIiwicmVtb3ZlSXRlbSIsImZvckVhY2giLCJwcm9wb3NhbF9leHBpcmVkIiwiSlNPTiIsInN0cmluZ2lmeSIsInZlcmlmeSIsImRlY3J5cHRlZElkIiwiZ2xvYmFsIiwiTGlua2luZyIsIm9wZW5VUkwiLCJjb3JyZWxhdGlvbklkIiwiaW50ZXJuYWwiLCJwdWJsaXNoIiwicmVxdWVzdFF1ZXVlIiwicHJvY2Vzc1JlcXVlc3RzUXVldWUiLCJwcm9jZXNzUmVxdWVzdCIsInNob3VsZElnbm9yZVBhaXJpbmdSZXF1ZXN0IiwicmVxdWVzdE1ldGhvZCIsIm9uU2Vzc2lvblByb3Bvc2VSZXF1ZXN0Iiwib25TZXNzaW9uU2V0dGxlUmVxdWVzdCIsIm9uU2Vzc2lvblVwZGF0ZVJlcXVlc3QiLCJvblNlc3Npb25FeHRlbmRSZXF1ZXN0Iiwib25TZXNzaW9uUGluZ1JlcXVlc3QiLCJvblNlc3Npb25EZWxldGVSZXF1ZXN0Iiwib25TZXNzaW9uUmVxdWVzdCIsIm9uU2Vzc2lvbkV2ZW50UmVxdWVzdCIsIm9uU2Vzc2lvbkF1dGhlbnRpY2F0ZVJlcXVlc3QiLCJvblNlc3Npb25Qcm9wb3NlUmVzcG9uc2UiLCJvblNlc3Npb25TZXR0bGVSZXNwb25zZSIsIm9uU2Vzc2lvblVwZGF0ZVJlc3BvbnNlIiwib25TZXNzaW9uRXh0ZW5kUmVzcG9uc2UiLCJvblNlc3Npb25QaW5nUmVzcG9uc2UiLCJvblNlc3Npb25SZXF1ZXN0UmVzcG9uc2UiLCJvblNlc3Npb25BdXRoZW50aWNhdGVSZXNwb25zZSIsImV4cGVjdGVkUGFpcmluZ01ldGhvZE1hcCIsImxpc3RlbmVyQ291bnQiLCJjb25zb2xlIiwicHJvcG9zYWxfbGlzdGVuZXJfbm90X2ZvdW5kIiwiZ2V0VmVyaWZ5Q29udGV4dCIsImF0dGVzdGF0aW9uSWQiLCJoYXNoIiwiZW1pdF9zZXNzaW9uX3Byb3Bvc2FsIiwic2VsZlB1YmxpY0tleSIsInBlZXJQdWJsaWNLZXkiLCJzZXNzaW9uVG9waWMiLCJwcm9wb3NhbElkIiwic3Vic2NyaXB0aW9uSWQiLCJpc1ZhbGlkU2Vzc2lvblNldHRsZVJlcXVlc3QiLCJ2YWx1ZXMiLCJmaW5kIiwiY2xlYW51cER1cGxpY2F0ZVBhaXJpbmdzIiwiaXNSZXF1ZXN0T3V0T2ZTeW5jIiwic2xpY2UiLCJjbGVhbnVwUGVuZGluZ1NlbnRSZXF1ZXN0c0ZvclRvcGljIiwic2V0UGVuZGluZ1Nlc3Npb25SZXF1ZXN0Iiwic2lnbkNvbmZpZyIsImRpc2FibGVSZXF1ZXN0UXVldWUiLCJlbWl0U2Vzc2lvblJlcXVlc3QiLCJhZGRTZXNzaW9uUmVxdWVzdFRvU2Vzc2lvblJlcXVlc3RRdWV1ZSIsInBlbmRpbmciLCJ2YWxpZGF0ZU5hbWVzcGFjZXMiLCJ2YWxpZGF0ZVNlc3Npb25Qcm9wcyIsIkFycmF5IiwiaXNBcnJheSIsInZlcmlmaWVkIiwidmVyaWZ5VXJsIiwidmFsaWRhdGlvbiIsIm9yaWdpbiIsIlVSTCIsImlzU2NhbSIsImRlYnVnIiwicmVjZW50bHlEZWxldGVkTWFwIiwic2l6ZSIsInJlY2VudGx5RGVsZXRlZExpbWl0IiwiaXNMaW5rTW9kZUVuYWJsZWQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJkaXNwYXRjaEVudmVsb3BlIiwic2Vzc2lvbkV4aXN0cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVMaW5rTW9kZU1lc3NhZ2UiLCJnZXRJbml0aWFsVVJMIiwiZXh0cmFjdFR4SGFzaGVzRnJvbVJlc3VsdCIsInJwY01ldGhvZHMiLCJpc1ZhbGlkQ29udHJhY3REYXRhIiwiY29udHJhY3RBZGRyZXNzZXMiLCJ0byIsInR4SGFzaGVzIiwiZGF0YSIsInN0YXJ0c1dpdGgiLCJ0ZXN0IiwiTnMiLCJSdCIsIlBzIiwiT3MiLCJicyIsIkFzIiwiQ3MiLCJ4cyIsIkdlIiwiVnMiLCJpbml0IiwiRHMiLCJMcyIsIl8iLCJTZSIsImluaXRpYWxpemUiLCJjb250ZXh0Iiwic3RhcnQiLCJlbmdpbmUiLCJwcm9jZXNzUmVsYXlNZXNzYWdlQ2FjaGUiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImNvbm5lY3QiLCJhcHByb3ZlIiwiZXh0ZW5kIiwicmVzcG9uZCIsImF1dGhlbnRpY2F0ZSIsImZvcm1hdEF1dGhNZXNzYWdlIiwiYXBwcm92ZVNlc3Npb25BdXRoZW50aWNhdGUiLCJyZWplY3RTZXNzaW9uQXV0aGVudGljYXRlIiwibGV2ZWwiLCJNcyIsImtzIiwiQVVUSF9DT05URVhUIiwiQVVUSF9LRVlTX0NPTlRFWFQiLCJBVVRIX1BBSVJJTkdfVE9QSUNfQ09OVEVYVCIsIkFVVEhfUFJPVE9DT0wiLCJBVVRIX1BVQkxJQ19LRVlfTkFNRSIsIkFVVEhfUkVRVUVTVF9DT05URVhUIiwiQVVUSF9TVE9SQUdFX1BSRUZJWCIsIkFVVEhfVkVSU0lPTiIsIkVOR0lORV9DT05URVhUIiwiRU5HSU5FX1FVRVVFX1NUQVRFUyIsIkVOR0lORV9SUENfT1BUUyIsIkhJU1RPUllfQ09OVEVYVCIsIkhJU1RPUllfRVZFTlRTIiwiSElTVE9SWV9TVE9SQUdFX1ZFUlNJT04iLCJNRVRIT0RTX1RPX1ZFUklGWSIsIlBST1BPU0FMX0NPTlRFWFQiLCJQUk9QT1NBTF9FWFBJUlkiLCJQUk9QT1NBTF9FWFBJUllfTUVTU0FHRSIsIlJFUVVFU1RfQ09OVEVYVCIsIlNFU1NJT05fQ09OVEVYVCIsIlNFU1NJT05fRVhQSVJZIiwiU0VTU0lPTl9SRVFVRVNUX0VYUElSWV9CT1VOREFSSUVTIiwiU0lHTl9DTElFTlRfQ09OVEVYVCIsIlNJR05fQ0xJRU5UX0RFRkFVTFQiLCJTSUdOX0NMSUVOVF9FVkVOVFMiLCJTSUdOX0NMSUVOVF9QUk9UT0NPTCIsIlNJR05fQ0xJRU5UX1NUT1JBR0VfT1BUSU9OUyIsIlNJR05fQ0xJRU5UX1NUT1JBR0VfUFJFRklYIiwiU0lHTl9DTElFTlRfVkVSU0lPTiIsIlNlc3Npb25TdG9yZSIsIlNpZ25DbGllbnQiLCJUVkZfTUVUSE9EUyIsIldBTExFVENPTk5FQ1RfREVFUExJTktfQ0hPSUNFIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/sign-client/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./misc */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL2NvbnN0YW50cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyxxR0FBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpR0FBUSxHQUFHSDtBQUN4Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpR0FBUSxHQUFHSCxVQUN4QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3RpbWUvZGlzdC9janMvY29uc3RhbnRzL2luZGV4LmpzPzJlZTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWlzY1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90aW1lXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/misc.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;\nexports.ONE_HUNDRED = 100;\nexports.ONE_THOUSAND = 1000; //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL2NvbnN0YW50cy9taXNjLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBR0EsbUJBQW1CLEdBQUcsS0FBSztBQUNsREEsbUJBQW1CLEdBQUc7QUFDdEJBLG9CQUFvQixHQUFHLE1BQ3ZCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvbWlzYy5qcz9iNDM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PTkVfVEhPVVNBTkQgPSBleHBvcnRzLk9ORV9IVU5EUkVEID0gdm9pZCAwO1xuZXhwb3J0cy5PTkVfSFVORFJFRCA9IDEwMDtcbmV4cG9ydHMuT05FX1RIT1VTQU5EID0gMTAwMDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pc2MuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiT05FX1RIT1VTQU5EIiwiT05FX0hVTkRSRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/time.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;\nexports.ONE_SECOND = 1;\nexports.FIVE_SECONDS = 5;\nexports.TEN_SECONDS = 10;\nexports.THIRTY_SECONDS = 30;\nexports.SIXTY_SECONDS = 60;\nexports.ONE_MINUTE = exports.SIXTY_SECONDS;\nexports.FIVE_MINUTES = exports.ONE_MINUTE * 5;\nexports.TEN_MINUTES = exports.ONE_MINUTE * 10;\nexports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;\nexports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;\nexports.ONE_HOUR = exports.SIXTY_MINUTES;\nexports.THREE_HOURS = exports.ONE_HOUR * 3;\nexports.SIX_HOURS = exports.ONE_HOUR * 6;\nexports.TWELVE_HOURS = exports.ONE_HOUR * 12;\nexports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;\nexports.ONE_DAY = exports.TWENTY_FOUR_HOURS;\nexports.THREE_DAYS = exports.ONE_DAY * 3;\nexports.FIVE_DAYS = exports.ONE_DAY * 5;\nexports.SEVEN_DAYS = exports.ONE_DAY * 7;\nexports.THIRTY_DAYS = exports.ONE_DAY * 30;\nexports.ONE_WEEK = exports.SEVEN_DAYS;\nexports.TWO_WEEKS = exports.ONE_WEEK * 2;\nexports.THREE_WEEKS = exports.ONE_WEEK * 3;\nexports.FOUR_WEEKS = exports.ONE_WEEK * 4;\nexports.ONE_YEAR = exports.ONE_DAY * 365; //# sourceMappingURL=time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL2NvbnN0YW50cy90aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBR0Esa0JBQWtCLEdBQUdBLG1CQUFtQixHQUFHQSxpQkFBaUIsR0FBR0EsZ0JBQWdCLEdBQUdBLG1CQUFtQixHQUFHQSxrQkFBa0IsR0FBR0EsaUJBQWlCLEdBQUdBLGtCQUFrQixHQUFHQSxlQUFlLEdBQUdBLHlCQUF5QixHQUFHQSxvQkFBb0IsR0FBR0EsaUJBQWlCLEdBQUdBLG1CQUFtQixHQUFHQSxnQkFBZ0IsR0FBR0EscUJBQXFCLEdBQUdBLHNCQUFzQixHQUFHQSxtQkFBbUIsR0FBR0Esb0JBQW9CLEdBQUdBLGtCQUFrQixHQUFHQSxxQkFBcUIsR0FBR0Esc0JBQXNCLEdBQUdBLG1CQUFtQixHQUFHQSxvQkFBb0IsR0FBR0Esa0JBQWtCLEdBQUcsS0FBSztBQUN0aUJBLGtCQUFrQixHQUFHO0FBQ3JCQSxvQkFBb0IsR0FBRztBQUN2QkEsbUJBQW1CLEdBQUc7QUFDdEJBLHNCQUFzQixHQUFHO0FBQ3pCQSxxQkFBcUIsR0FBRztBQUN4QkEsa0JBQWtCLEdBQUdBLFFBQVFzQixhQUFhO0FBQzFDdEIsb0JBQW9CLEdBQUdBLFFBQVFxQixVQUFVLEdBQUc7QUFDNUNyQixtQkFBbUIsR0FBR0EsUUFBUXFCLFVBQVUsR0FBRztBQUMzQ3JCLHNCQUFzQixHQUFHQSxRQUFRcUIsVUFBVSxHQUFHO0FBQzlDckIscUJBQXFCLEdBQUdBLFFBQVFxQixVQUFVLEdBQUc7QUFDN0NyQixnQkFBZ0IsR0FBR0EsUUFBUWlCLGFBQWE7QUFDeENqQixtQkFBbUIsR0FBR0EsUUFBUWdCLFFBQVEsR0FBRztBQUN6Q2hCLGlCQUFpQixHQUFHQSxRQUFRZ0IsUUFBUSxHQUFHO0FBQ3ZDaEIsb0JBQW9CLEdBQUdBLFFBQVFnQixRQUFRLEdBQUc7QUFDMUNoQix5QkFBeUIsR0FBR0EsUUFBUWdCLFFBQVEsR0FBRztBQUMvQ2hCLGVBQWUsR0FBR0EsUUFBUVksaUJBQWlCO0FBQzNDWixrQkFBa0IsR0FBR0EsUUFBUVcsT0FBTyxHQUFHO0FBQ3ZDWCxpQkFBaUIsR0FBR0EsUUFBUVcsT0FBTyxHQUFHO0FBQ3RDWCxrQkFBa0IsR0FBR0EsUUFBUVcsT0FBTyxHQUFHO0FBQ3ZDWCxtQkFBbUIsR0FBR0EsUUFBUVcsT0FBTyxHQUFHO0FBQ3hDWCxnQkFBZ0IsR0FBR0EsUUFBUVEsVUFBVTtBQUNyQ1IsaUJBQWlCLEdBQUdBLFFBQVFNLFFBQVEsR0FBRztBQUN2Q04sbUJBQW1CLEdBQUdBLFFBQVFNLFFBQVEsR0FBRztBQUN6Q04sa0JBQWtCLEdBQUdBLFFBQVFNLFFBQVEsR0FBRztBQUN4Q04sZ0JBQWdCLEdBQUdBLFFBQVFXLE9BQU8sR0FBRyxLQUNyQyxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3RpbWUvZGlzdC9janMvY29uc3RhbnRzL3RpbWUuanM/ZGRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT05FX1lFQVIgPSBleHBvcnRzLkZPVVJfV0VFS1MgPSBleHBvcnRzLlRIUkVFX1dFRUtTID0gZXhwb3J0cy5UV09fV0VFS1MgPSBleHBvcnRzLk9ORV9XRUVLID0gZXhwb3J0cy5USElSVFlfREFZUyA9IGV4cG9ydHMuU0VWRU5fREFZUyA9IGV4cG9ydHMuRklWRV9EQVlTID0gZXhwb3J0cy5USFJFRV9EQVlTID0gZXhwb3J0cy5PTkVfREFZID0gZXhwb3J0cy5UV0VOVFlfRk9VUl9IT1VSUyA9IGV4cG9ydHMuVFdFTFZFX0hPVVJTID0gZXhwb3J0cy5TSVhfSE9VUlMgPSBleHBvcnRzLlRIUkVFX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiA9IGV4cG9ydHMuU0lYVFlfTUlOVVRFUyA9IGV4cG9ydHMuVEhJUlRZX01JTlVURVMgPSBleHBvcnRzLlRFTl9NSU5VVEVTID0gZXhwb3J0cy5GSVZFX01JTlVURVMgPSBleHBvcnRzLk9ORV9NSU5VVEUgPSBleHBvcnRzLlNJWFRZX1NFQ09ORFMgPSBleHBvcnRzLlRISVJUWV9TRUNPTkRTID0gZXhwb3J0cy5URU5fU0VDT05EUyA9IGV4cG9ydHMuRklWRV9TRUNPTkRTID0gZXhwb3J0cy5PTkVfU0VDT05EID0gdm9pZCAwO1xuZXhwb3J0cy5PTkVfU0VDT05EID0gMTtcbmV4cG9ydHMuRklWRV9TRUNPTkRTID0gNTtcbmV4cG9ydHMuVEVOX1NFQ09ORFMgPSAxMDtcbmV4cG9ydHMuVEhJUlRZX1NFQ09ORFMgPSAzMDtcbmV4cG9ydHMuU0lYVFlfU0VDT05EUyA9IDYwO1xuZXhwb3J0cy5PTkVfTUlOVVRFID0gZXhwb3J0cy5TSVhUWV9TRUNPTkRTO1xuZXhwb3J0cy5GSVZFX01JTlVURVMgPSBleHBvcnRzLk9ORV9NSU5VVEUgKiA1O1xuZXhwb3J0cy5URU5fTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSAqIDEwO1xuZXhwb3J0cy5USElSVFlfTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSAqIDMwO1xuZXhwb3J0cy5TSVhUWV9NSU5VVEVTID0gZXhwb3J0cy5PTkVfTUlOVVRFICogNjA7XG5leHBvcnRzLk9ORV9IT1VSID0gZXhwb3J0cy5TSVhUWV9NSU5VVEVTO1xuZXhwb3J0cy5USFJFRV9IT1VSUyA9IGV4cG9ydHMuT05FX0hPVVIgKiAzO1xuZXhwb3J0cy5TSVhfSE9VUlMgPSBleHBvcnRzLk9ORV9IT1VSICogNjtcbmV4cG9ydHMuVFdFTFZFX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiAqIDEyO1xuZXhwb3J0cy5UV0VOVFlfRk9VUl9IT1VSUyA9IGV4cG9ydHMuT05FX0hPVVIgKiAyNDtcbmV4cG9ydHMuT05FX0RBWSA9IGV4cG9ydHMuVFdFTlRZX0ZPVVJfSE9VUlM7XG5leHBvcnRzLlRIUkVFX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiAzO1xuZXhwb3J0cy5GSVZFX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiA1O1xuZXhwb3J0cy5TRVZFTl9EQVlTID0gZXhwb3J0cy5PTkVfREFZICogNztcbmV4cG9ydHMuVEhJUlRZX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiAzMDtcbmV4cG9ydHMuT05FX1dFRUsgPSBleHBvcnRzLlNFVkVOX0RBWVM7XG5leHBvcnRzLlRXT19XRUVLUyA9IGV4cG9ydHMuT05FX1dFRUsgKiAyO1xuZXhwb3J0cy5USFJFRV9XRUVLUyA9IGV4cG9ydHMuT05FX1dFRUsgKiAzO1xuZXhwb3J0cy5GT1VSX1dFRUtTID0gZXhwb3J0cy5PTkVfV0VFSyAqIDQ7XG5leHBvcnRzLk9ORV9ZRUFSID0gZXhwb3J0cy5PTkVfREFZICogMzY1O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJPTkVfWUVBUiIsIkZPVVJfV0VFS1MiLCJUSFJFRV9XRUVLUyIsIlRXT19XRUVLUyIsIk9ORV9XRUVLIiwiVEhJUlRZX0RBWVMiLCJTRVZFTl9EQVlTIiwiRklWRV9EQVlTIiwiVEhSRUVfREFZUyIsIk9ORV9EQVkiLCJUV0VOVFlfRk9VUl9IT1VSUyIsIlRXRUxWRV9IT1VSUyIsIlNJWF9IT1VSUyIsIlRIUkVFX0hPVVJTIiwiT05FX0hPVVIiLCJTSVhUWV9NSU5VVEVTIiwiVEhJUlRZX01JTlVURVMiLCJURU5fTUlOVVRFUyIsIkZJVkVfTUlOVVRFUyIsIk9ORV9NSU5VVEUiLCJTSVhUWV9TRUNPTkRTIiwiVEhJUlRZX1NFQ09ORFMiLCJURU5fU0VDT05EUyIsIkZJVkVfU0VDT05EUyIsIk9ORV9TRUNPTkQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./watch */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/watch.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/types/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFVBQVVDLG1CQUFPQSxDQUFDLHFHQUFPO0FBQy9CRCxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLCtGQUFTLEdBQUdIO0FBQ3pDRSxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLHlGQUFTLEdBQUdIO0FBQ3pDRSxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLCtGQUFTLEdBQUdIO0FBQ3pDRSxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLHVHQUFhLEdBQUdILFVBQzdDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9pbmRleC5qcz8yOWI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhdGNoXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/types/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/types/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./watch */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3R5cGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFVBQVVDLG1CQUFPQSxDQUFDLHFHQUFPO0FBQy9CRCxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLCtGQUFTLEdBQUdILFVBQ3pDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcz8zNjI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhdGNoXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/types/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/types/watch.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IWatch = void 0;\nclass IWatch {\n}\nexports.IWatch = IWatch; //# sourceMappingURL=watch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3R5cGVzL3dhdGNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0QixNQUFNRTtBQUNOO0FBQ0FGLGNBQWMsR0FBR0UsUUFDakIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3R5cGVzL3dhdGNoLmpzPzRiY2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklXYXRjaCA9IHZvaWQgMDtcbmNsYXNzIElXYXRjaCB7XG59XG5leHBvcnRzLklXYXRjaCA9IElXYXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhdGNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIklXYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/convert.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromMiliseconds = exports.toMiliseconds = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\");\nfunction toMiliseconds(seconds) {\n    return seconds * constants_1.ONE_THOUSAND;\n}\nexports.toMiliseconds = toMiliseconds;\nfunction fromMiliseconds(miliseconds) {\n    return Math.floor(miliseconds / constants_1.ONE_THOUSAND);\n}\nexports.fromMiliseconds = fromMiliseconds; //# sourceMappingURL=convert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2NvbnZlcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQ3ZELE1BQU1JLGNBQWNDLG1CQUFPQSxDQUFDLHdHQUFjO0FBQzFDLFNBQVNGLGNBQWNHLE9BQU87SUFDMUIsT0FBT0EsVUFBVUYsWUFBWUcsWUFBWTtBQUM3QztBQUNBUCxxQkFBcUIsR0FBR0c7QUFDeEIsU0FBU0QsZ0JBQWdCTSxXQUFXO0lBQ2hDLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0YsY0FBY0osWUFBWUcsWUFBWTtBQUM1RDtBQUNBUCx1QkFBdUIsR0FBR0UsaUJBQzFCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9jb252ZXJ0LmpzPzk5MWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21NaWxpc2Vjb25kcyA9IGV4cG9ydHMudG9NaWxpc2Vjb25kcyA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmZ1bmN0aW9uIHRvTWlsaXNlY29uZHMoc2Vjb25kcykge1xuICAgIHJldHVybiBzZWNvbmRzICogY29uc3RhbnRzXzEuT05FX1RIT1VTQU5EO1xufVxuZXhwb3J0cy50b01pbGlzZWNvbmRzID0gdG9NaWxpc2Vjb25kcztcbmZ1bmN0aW9uIGZyb21NaWxpc2Vjb25kcyhtaWxpc2Vjb25kcykge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1pbGlzZWNvbmRzIC8gY29uc3RhbnRzXzEuT05FX1RIT1VTQU5EKTtcbn1cbmV4cG9ydHMuZnJvbU1pbGlzZWNvbmRzID0gZnJvbU1pbGlzZWNvbmRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udmVydC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmcm9tTWlsaXNlY29uZHMiLCJ0b01pbGlzZWNvbmRzIiwiY29uc3RhbnRzXzEiLCJyZXF1aXJlIiwic2Vjb25kcyIsIk9ORV9USE9VU0FORCIsIm1pbGlzZWNvbmRzIiwiTWF0aCIsImZsb29yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/delay.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.delay = void 0;\nfunction delay(timeout) {\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            resolve(true);\n        }, timeout);\n    });\n}\nexports.delay = delay; //# sourceMappingURL=delay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2RlbGF5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxhQUFhLEdBQUcsS0FBSztBQUNyQixTQUFTRSxNQUFNQyxPQUFPO0lBQ2xCLE9BQU8sSUFBSUMsUUFBUUMsQ0FBQUE7UUFDZkMsV0FBVztZQUNQRCxRQUFRO1FBQ1osR0FBR0Y7SUFDUDtBQUNKO0FBQ0FILGFBQWEsR0FBR0UsT0FDaEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2RlbGF5LmpzPzliOTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlbGF5ID0gdm9pZCAwO1xuZnVuY3Rpb24gZGVsYXkodGltZW91dCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVsYXkgPSBkZWxheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlbGF5IiwidGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./delay */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./convert */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFVBQVVDLG1CQUFPQSxDQUFDLHFHQUFPO0FBQy9CRCxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLCtGQUFTLEdBQUdIO0FBQ3pDRSxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLG1HQUFXLEdBQUdILFVBQzNDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9pbmRleC5qcz9iN2NjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlbGF5XCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnZlcnRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHNsaWJfMSIsInJlcXVpcmUiLCJfX2V4cG9ydFN0YXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/watch.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/watch.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Watch = void 0;\nclass Watch {\n    start(label) {\n        if (this.timestamps.has(label)) {\n            throw new Error(\"Watch already started for label: \".concat(label));\n        }\n        this.timestamps.set(label, {\n            started: Date.now()\n        });\n    }\n    stop(label) {\n        const timestamp = this.get(label);\n        if (typeof timestamp.elapsed !== \"undefined\") {\n            throw new Error(\"Watch already stopped for label: \".concat(label));\n        }\n        const elapsed = Date.now() - timestamp.started;\n        this.timestamps.set(label, {\n            started: timestamp.started,\n            elapsed\n        });\n    }\n    get(label) {\n        const timestamp = this.timestamps.get(label);\n        if (typeof timestamp === \"undefined\") {\n            throw new Error(\"No timestamp found for label: \".concat(label));\n        }\n        return timestamp;\n    }\n    elapsed(label) {\n        const timestamp = this.get(label);\n        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;\n        return elapsed;\n    }\n    constructor(){\n        this.timestamps = new Map();\n    }\n}\nexports.Watch = Watch;\nexports[\"default\"] = Watch; //# sourceMappingURL=watch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3dhdGNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxhQUFhLEdBQUcsS0FBSztBQUNyQixNQUFNRTtJQUlGQyxNQUFNQyxLQUFLLEVBQUU7UUFDVCxJQUFJLElBQUksQ0FBQ0MsVUFBVSxDQUFDQyxHQUFHLENBQUNGLFFBQVE7WUFDNUIsTUFBTSxJQUFJRyxNQUFNLG9DQUEwQyxPQUFOSDtRQUN4RDtRQUNBLElBQUksQ0FBQ0MsVUFBVSxDQUFDRyxHQUFHLENBQUNKLE9BQU87WUFBRUssU0FBU0MsS0FBS0MsR0FBRztRQUFHO0lBQ3JEO0lBQ0FDLEtBQUtSLEtBQUssRUFBRTtRQUNSLE1BQU1TLFlBQVksSUFBSSxDQUFDQyxHQUFHLENBQUNWO1FBQzNCLElBQUksT0FBT1MsVUFBVUUsT0FBTyxLQUFLLGFBQWE7WUFDMUMsTUFBTSxJQUFJUixNQUFNLG9DQUEwQyxPQUFOSDtRQUN4RDtRQUNBLE1BQU1XLFVBQVVMLEtBQUtDLEdBQUcsS0FBS0UsVUFBVUosT0FBTztRQUM5QyxJQUFJLENBQUNKLFVBQVUsQ0FBQ0csR0FBRyxDQUFDSixPQUFPO1lBQUVLLFNBQVNJLFVBQVVKLE9BQU87WUFBRU07UUFBUTtJQUNyRTtJQUNBRCxJQUFJVixLQUFLLEVBQUU7UUFDUCxNQUFNUyxZQUFZLElBQUksQ0FBQ1IsVUFBVSxDQUFDUyxHQUFHLENBQUNWO1FBQ3RDLElBQUksT0FBT1MsY0FBYyxhQUFhO1lBQ2xDLE1BQU0sSUFBSU4sTUFBTSxpQ0FBdUMsT0FBTkg7UUFDckQ7UUFDQSxPQUFPUztJQUNYO0lBQ0FFLFFBQVFYLEtBQUssRUFBRTtRQUNYLE1BQU1TLFlBQVksSUFBSSxDQUFDQyxHQUFHLENBQUNWO1FBQzNCLE1BQU1XLFVBQVVGLFVBQVVFLE9BQU8sSUFBSUwsS0FBS0MsR0FBRyxLQUFLRSxVQUFVSixPQUFPO1FBQ25FLE9BQU9NO0lBQ1g7SUE1QkFDLGFBQWM7UUFDVixJQUFJLENBQUNYLFVBQVUsR0FBRyxJQUFJWTtJQUMxQjtBQTJCSjtBQUNBakIsYUFBYSxHQUFHRTtBQUNoQkYsa0JBQWUsR0FBR0UsT0FDbEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3dhdGNoLmpzPzJkYzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldhdGNoID0gdm9pZCAwO1xuY2xhc3MgV2F0Y2gge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRpbWVzdGFtcHMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHN0YXJ0KGxhYmVsKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVzdGFtcHMuaGFzKGxhYmVsKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXYXRjaCBhbHJlYWR5IHN0YXJ0ZWQgZm9yIGxhYmVsOiAke2xhYmVsfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGltZXN0YW1wcy5zZXQobGFiZWwsIHsgc3RhcnRlZDogRGF0ZS5ub3coKSB9KTtcbiAgICB9XG4gICAgc3RvcChsYWJlbCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLmdldChsYWJlbCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGltZXN0YW1wLmVsYXBzZWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV2F0Y2ggYWxyZWFkeSBzdG9wcGVkIGZvciBsYWJlbDogJHtsYWJlbH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbGFwc2VkID0gRGF0ZS5ub3coKSAtIHRpbWVzdGFtcC5zdGFydGVkO1xuICAgICAgICB0aGlzLnRpbWVzdGFtcHMuc2V0KGxhYmVsLCB7IHN0YXJ0ZWQ6IHRpbWVzdGFtcC5zdGFydGVkLCBlbGFwc2VkIH0pO1xuICAgIH1cbiAgICBnZXQobGFiZWwpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy50aW1lc3RhbXBzLmdldChsYWJlbCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGltZXN0YW1wID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHRpbWVzdGFtcCBmb3VuZCBmb3IgbGFiZWw6ICR7bGFiZWx9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpbWVzdGFtcDtcbiAgICB9XG4gICAgZWxhcHNlZChsYWJlbCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLmdldChsYWJlbCk7XG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSB0aW1lc3RhbXAuZWxhcHNlZCB8fCBEYXRlLm5vdygpIC0gdGltZXN0YW1wLnN0YXJ0ZWQ7XG4gICAgICAgIHJldHVybiBlbGFwc2VkO1xuICAgIH1cbn1cbmV4cG9ydHMuV2F0Y2ggPSBXYXRjaDtcbmV4cG9ydHMuZGVmYXVsdCA9IFdhdGNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2F0Y2guanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV2F0Y2giLCJzdGFydCIsImxhYmVsIiwidGltZXN0YW1wcyIsImhhcyIsIkVycm9yIiwic2V0Iiwic3RhcnRlZCIsIkRhdGUiLCJub3ciLCJzdG9wIiwidGltZXN0YW1wIiwiZ2V0IiwiZWxhcHNlZCIsImNvbnN0cnVjdG9yIiwiTWFwIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/watch.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: function() { return /* binding */ __assign; },\n/* harmony export */   __asyncDelegator: function() { return /* binding */ __asyncDelegator; },\n/* harmony export */   __asyncGenerator: function() { return /* binding */ __asyncGenerator; },\n/* harmony export */   __asyncValues: function() { return /* binding */ __asyncValues; },\n/* harmony export */   __await: function() { return /* binding */ __await; },\n/* harmony export */   __awaiter: function() { return /* binding */ __awaiter; },\n/* harmony export */   __classPrivateFieldGet: function() { return /* binding */ __classPrivateFieldGet; },\n/* harmony export */   __classPrivateFieldSet: function() { return /* binding */ __classPrivateFieldSet; },\n/* harmony export */   __createBinding: function() { return /* binding */ __createBinding; },\n/* harmony export */   __decorate: function() { return /* binding */ __decorate; },\n/* harmony export */   __exportStar: function() { return /* binding */ __exportStar; },\n/* harmony export */   __extends: function() { return /* binding */ __extends; },\n/* harmony export */   __generator: function() { return /* binding */ __generator; },\n/* harmony export */   __importDefault: function() { return /* binding */ __importDefault; },\n/* harmony export */   __importStar: function() { return /* binding */ __importStar; },\n/* harmony export */   __makeTemplateObject: function() { return /* binding */ __makeTemplateObject; },\n/* harmony export */   __metadata: function() { return /* binding */ __metadata; },\n/* harmony export */   __param: function() { return /* binding */ __param; },\n/* harmony export */   __read: function() { return /* binding */ __read; },\n/* harmony export */   __rest: function() { return /* binding */ __rest; },\n/* harmony export */   __spread: function() { return /* binding */ __spread; },\n/* harmony export */   __spreadArrays: function() { return /* binding */ __spreadArrays; },\n/* harmony export */   __values: function() { return /* binding */ __values; }\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __createBinding(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}\nfunction __exportStar(m, exports) {\n    for(var p in m)if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n;\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result.default = mod;\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/types/dist/index.es.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ICore: function() { return /* binding */ h; },\n/* harmony export */   ICrypto: function() { return /* binding */ g; },\n/* harmony export */   IEchoClient: function() { return /* binding */ O; },\n/* harmony export */   IEngine: function() { return /* binding */ V; },\n/* harmony export */   IEngineEvents: function() { return /* binding */ K; },\n/* harmony export */   IEventClient: function() { return /* binding */ R; },\n/* harmony export */   IExpirer: function() { return /* binding */ S; },\n/* harmony export */   IJsonRpcHistory: function() { return /* binding */ I; },\n/* harmony export */   IKeyChain: function() { return /* binding */ j; },\n/* harmony export */   IMessageTracker: function() { return /* binding */ y; },\n/* harmony export */   IPairing: function() { return /* binding */ $; },\n/* harmony export */   IPublisher: function() { return /* binding */ m; },\n/* harmony export */   IRelayer: function() { return /* binding */ d; },\n/* harmony export */   ISignClient: function() { return /* binding */ J; },\n/* harmony export */   ISignClientEvents: function() { return /* binding */ H; },\n/* harmony export */   IStore: function() { return /* binding */ f; },\n/* harmony export */   ISubscriber: function() { return /* binding */ P; },\n/* harmony export */   ISubscriberTopicMap: function() { return /* binding */ C; },\n/* harmony export */   IVerify: function() { return /* binding */ M; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/events */ \"(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar a = Object.defineProperty, u = (e, s, r)=>s in e ? a(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, c = (e, s, r)=>u(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass h extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super(), this.opts = s, c(this, \"protocol\", \"wc\"), c(this, \"version\", 2);\n    }\n}\nclass g {\n    constructor(s, r, t){\n        this.core = s, this.logger = r;\n    }\n}\nvar p = Object.defineProperty, b = (e, s, r)=>s in e ? p(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, v = (e, s, r)=>b(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass I extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.core = s, this.logger = r, v(this, \"records\", new Map);\n    }\n}\nclass y {\n    constructor(s, r){\n        this.logger = s, this.core = r;\n    }\n}\nclass m extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.relayer = s, this.logger = r;\n    }\n}\nclass d extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super();\n    }\n}\nclass f {\n    constructor(s, r, t, q){\n        this.core = s, this.logger = r, this.name = t;\n    }\n}\nvar E = Object.defineProperty, x = (e, s, r)=>s in e ? E(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, w = (e, s, r)=>x(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass C {\n    constructor(){\n        w(this, \"map\", new Map);\n    }\n}\nclass P extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.relayer = s, this.logger = r;\n    }\n}\nclass j {\n    constructor(s, r){\n        this.core = s, this.logger = r;\n    }\n}\nclass S extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.core = s, this.logger = r;\n    }\n}\nclass $ {\n    constructor(s, r){\n        this.logger = s, this.core = r;\n    }\n}\nclass M {\n    constructor(s, r, t){\n        this.core = s, this.logger = r, this.store = t;\n    }\n}\nclass O {\n    constructor(s, r){\n        this.projectId = s, this.logger = r;\n    }\n}\nclass R {\n    constructor(s, r, t){\n        this.core = s, this.logger = r, this.telemetryEnabled = t;\n    }\n}\nvar T = Object.defineProperty, k = (e, s, r)=>s in e ? T(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, i = (e, s, r)=>k(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass H extends (events__WEBPACK_IMPORTED_MODULE_1___default()) {\n    constructor(){\n        super();\n    }\n}\nclass J {\n    constructor(s){\n        this.opts = s, i(this, \"protocol\", \"wc\"), i(this, \"version\", 2);\n    }\n}\nclass K extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(){\n        super();\n    }\n}\nclass V {\n    constructor(s){\n        this.client = s;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/dist/index.es.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/dist/index.es.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UniversalProvider: function() { return /* binding */ oh; },\n/* harmony export */   \"default\": function() { return /* binding */ Z; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/sign-client */ \"(app-pages-browser)/./node_modules/@walletconnect/sign-client/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-http-connection */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\nconst be = \"error\", _t = \"wss://relay.walletconnect.org\", Ct = \"wc\", It = \"universal_provider\", $e = \"\".concat(Ct, \"@2:\").concat(It, \":\"), ye = \"https://rpc.walletconnect.org/v1/\", w = \"generic\", Ot = \"\".concat(ye, \"bundler\"), f = {\n    DEFAULT_CHAIN_CHANGED: \"default_chain_changed\"\n};\nvar G = typeof globalThis < \"u\" ? globalThis :  true ? window : 0;\nfunction At() {\n    this.__data__ = [], this.size = 0;\n}\n_c1 = At;\nvar jt = At;\nfunction Ht(r, e) {\n    return r === e || r !== r && e !== e;\n}\n_c2 = Ht;\nvar z = Ht, Et = z;\nfunction St(r, e) {\n    for(var t = r.length; t--;)if (Et(r[t][0], e)) return t;\n    return -1;\n}\n_c3 = St;\nvar k = St, Nt = k, Tt = Array.prototype, Dt = Tt.splice;\nfunction qt(r) {\n    var e = this.__data__, t = Nt(e, r);\n    if (t < 0) return !1;\n    var i = e.length - 1;\n    return t == i ? e.pop() : Dt.call(e, t, 1), --this.size, !0;\n}\nvar Rt = qt, xt = k;\nfunction Lt(r) {\n    var e = this.__data__, t = xt(e, r);\n    return t < 0 ? void 0 : e[t][1];\n}\n_c4 = Lt;\nvar Ut = Lt, Ft = k;\nfunction Mt(r) {\n    return Ft(this.__data__, r) > -1;\n}\n_c5 = Mt;\nvar Gt = Mt, zt = k;\nfunction kt(r, e) {\n    var t = this.__data__, i = zt(t, r);\n    return i < 0 ? (++this.size, t.push([\n        r,\n        e\n    ])) : t[i][1] = e, this;\n}\nvar Bt = kt, Vt = jt, Jt = Rt, Kt = Ut, Wt = Gt, Xt = Bt;\nfunction _(r) {\n    var e = -1, t = r == null ? 0 : r.length;\n    for(this.clear(); ++e < t;){\n        var i = r[e];\n        this.set(i[0], i[1]);\n    }\n}\n_.prototype.clear = Vt, _.prototype.delete = Jt, _.prototype.get = Kt, _.prototype.has = Wt, _.prototype.set = Xt;\nvar B = _, Yt = B;\nfunction Zt() {\n    this.__data__ = new Yt, this.size = 0;\n}\n_c6 = Zt;\nvar Qt = Zt;\nfunction er(r) {\n    var e = this.__data__, t = e.delete(r);\n    return this.size = e.size, t;\n}\nvar tr = er;\nfunction rr(r) {\n    return this.__data__.get(r);\n}\nvar ir = rr;\nfunction sr(r) {\n    return this.__data__.has(r);\n}\nvar nr = sr, ar = typeof G == \"object\" && G && G.Object === Object && G, we = ar, or = we, cr = typeof self == \"object\" && self && self.Object === Object && self, hr = or || cr || Function(\"return this\")(), C = hr, pr = C, ur = pr.Symbol, _e = ur, Ce = _e, Ie = Object.prototype, lr = Ie.hasOwnProperty, dr = Ie.toString, F = Ce ? Ce.toStringTag : void 0;\nfunction vr(r) {\n    var e = lr.call(r, F), t = r[F];\n    try {\n        r[F] = void 0;\n        var i = !0;\n    } catch (e) {}\n    var s = dr.call(r);\n    return i && (e ? r[F] = t : delete r[F]), s;\n}\nvar fr = vr, mr = Object.prototype, gr = mr.toString;\nfunction Pr(r) {\n    return gr.call(r);\n}\n_c7 = Pr;\nvar br = Pr, Oe = _e, $r = fr, yr = br, wr = \"[object Null]\", _r = \"[object Undefined]\", Ae = Oe ? Oe.toStringTag : void 0;\nfunction Cr(r) {\n    return r == null ? r === void 0 ? _r : wr : Ae && Ae in Object(r) ? $r(r) : yr(r);\n}\n_c8 = Cr;\nvar V = Cr;\nfunction Ir(r) {\n    var e = typeof r;\n    return r != null && (e == \"object\" || e == \"function\");\n}\n_c9 = Ir;\nvar $ = Ir, Or = V, Ar = $, jr = \"[object AsyncFunction]\", Hr = \"[object Function]\", Er = \"[object GeneratorFunction]\", Sr = \"[object Proxy]\";\nfunction Nr(r) {\n    if (!Ar(r)) return !1;\n    var e = Or(r);\n    return e == Hr || e == Er || e == jr || e == Sr;\n}\n_c10 = Nr;\nvar te = Nr, Tr = C, Dr = Tr[\"__core-js_shared__\"], qr = Dr, re = qr, je = function() {\n    var r = /[^.]+$/.exec(re && re.keys && re.keys.IE_PROTO || \"\");\n    return r ? \"Symbol(src)_1.\" + r : \"\";\n}();\nfunction Rr(r) {\n    return !!je && je in r;\n}\n_c11 = Rr;\nvar xr = Rr, Lr = Function.prototype, Ur = Lr.toString;\nfunction Fr(r) {\n    if (r != null) {\n        try {\n            return Ur.call(r);\n        } catch (e) {}\n        try {\n            return r + \"\";\n        } catch (e) {}\n    }\n    return \"\";\n}\n_c12 = Fr;\nvar Mr = Fr, Gr = te, zr = xr, kr = $, Br = Mr, Vr = /[\\\\^$.*+?()[\\]{}|]/g, Jr = /^\\[object .+?Constructor\\]$/, Kr = Function.prototype, Wr = Object.prototype, Xr = Kr.toString, Yr = Wr.hasOwnProperty, Zr = RegExp(\"^\" + Xr.call(Yr).replace(Vr, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\nfunction Qr(r) {\n    if (!kr(r) || zr(r)) return !1;\n    var e = Gr(r) ? Zr : Jr;\n    return e.test(Br(r));\n}\n_c13 = Qr;\nvar ei = Qr;\nfunction ti(r, e) {\n    return r === null || r === void 0 ? void 0 : r[e];\n}\nvar ri = ti, ii = ei, si = ri;\nfunction ni(r, e) {\n    var t = si(r, e);\n    return ii(t) ? t : void 0;\n}\nvar ie = ni, ai = ie, oi = C, ci = ai(oi, \"Map\"), He = ci, hi = ie, pi = hi(Object, \"create\"), J = pi, Ee = J;\nfunction ui() {\n    this.__data__ = Ee ? Ee(null) : {}, this.size = 0;\n}\nvar li = ui;\nfunction di(r) {\n    var e = this.has(r) && delete this.__data__[r];\n    return this.size -= e ? 1 : 0, e;\n}\nvar vi = di, fi = J, mi = \"__lodash_hash_undefined__\", gi = Object.prototype, Pi = gi.hasOwnProperty;\nfunction bi(r) {\n    var e = this.__data__;\n    if (fi) {\n        var t = e[r];\n        return t === mi ? void 0 : t;\n    }\n    return Pi.call(e, r) ? e[r] : void 0;\n}\nvar $i = bi, yi = J, wi = Object.prototype, _i = wi.hasOwnProperty;\nfunction Ci(r) {\n    var e = this.__data__;\n    return yi ? e[r] !== void 0 : _i.call(e, r);\n}\n_c14 = Ci;\nvar Ii = Ci, Oi = J, Ai = \"__lodash_hash_undefined__\";\nfunction ji(r, e) {\n    var t = this.__data__;\n    return this.size += this.has(r) ? 0 : 1, t[r] = Oi && e === void 0 ? Ai : e, this;\n}\nvar Hi = ji, Ei = li, Si = vi, Ni = $i, Ti = Ii, Di = Hi;\nfunction I(r) {\n    var e = -1, t = r == null ? 0 : r.length;\n    for(this.clear(); ++e < t;){\n        var i = r[e];\n        this.set(i[0], i[1]);\n    }\n}\n_c15 = I;\nI.prototype.clear = Ei, I.prototype.delete = Si, I.prototype.get = Ni, I.prototype.has = Ti, I.prototype.set = Di;\nvar qi = I, Se = qi, Ri = B, xi = He;\nfunction Li() {\n    this.size = 0, this.__data__ = {\n        hash: new Se,\n        map: new (xi || Ri),\n        string: new Se\n    };\n}\n_c16 = Li;\nvar Ui = Li;\nfunction Fi(r) {\n    var e = typeof r;\n    return e == \"string\" || e == \"number\" || e == \"symbol\" || e == \"boolean\" ? r !== \"__proto__\" : r === null;\n}\n_c17 = Fi;\nvar Mi = Fi, Gi = Mi;\nfunction zi(r, e) {\n    var t = r.__data__;\n    return Gi(e) ? t[typeof e == \"string\" ? \"string\" : \"hash\"] : t.map;\n}\nvar K = zi, ki = K;\nfunction Bi(r) {\n    var e = ki(this, r).delete(r);\n    return this.size -= e ? 1 : 0, e;\n}\n_c18 = Bi;\nvar Vi = Bi, Ji = K;\nfunction Ki(r) {\n    return Ji(this, r).get(r);\n}\n_c19 = Ki;\nvar Wi = Ki, Xi = K;\nfunction Yi(r) {\n    return Xi(this, r).has(r);\n}\n_c20 = Yi;\nvar Zi = Yi, Qi = K;\nfunction es(r, e) {\n    var t = Qi(this, r), i = t.size;\n    return t.set(r, e), this.size += t.size == i ? 0 : 1, this;\n}\nvar ts = es, rs = Ui, is = Vi, ss = Wi, ns = Zi, as = ts;\nfunction O(r) {\n    var e = -1, t = r == null ? 0 : r.length;\n    for(this.clear(); ++e < t;){\n        var i = r[e];\n        this.set(i[0], i[1]);\n    }\n}\n_c21 = O;\nO.prototype.clear = rs, O.prototype.delete = is, O.prototype.get = ss, O.prototype.has = ns, O.prototype.set = as;\nvar os = O, cs = B, hs = He, ps = os, us = 200;\nfunction ls(r, e) {\n    var t = this.__data__;\n    if (t instanceof cs) {\n        var i = t.__data__;\n        if (!hs || i.length < us - 1) return i.push([\n            r,\n            e\n        ]), this.size = ++t.size, this;\n        t = this.__data__ = new ps(i);\n    }\n    return t.set(r, e), this.size = t.size, this;\n}\nvar ds = ls, vs = B, fs = Qt, ms = tr, gs = ir, Ps = nr, bs = ds;\nfunction A(r) {\n    var e = this.__data__ = new vs(r);\n    this.size = e.size;\n}\n_c22 = A;\nA.prototype.clear = fs, A.prototype.delete = ms, A.prototype.get = gs, A.prototype.has = Ps, A.prototype.set = bs;\nvar $s = A, ys = ie, ws = function() {\n    try {\n        var r = ys(Object, \"defineProperty\");\n        return r({}, \"\", {}), r;\n    } catch (e) {}\n}(), Ne = ws, Te = Ne;\nfunction _s(r, e, t) {\n    e == \"__proto__\" && Te ? Te(r, e, {\n        configurable: !0,\n        enumerable: !0,\n        value: t,\n        writable: !0\n    }) : r[e] = t;\n}\nvar se = _s, Cs = se, Is = z;\nfunction Os(r, e, t) {\n    (t !== void 0 && !Is(r[e], t) || t === void 0 && !(e in r)) && Cs(r, e, t);\n}\n_c23 = Os;\nvar De = Os;\nfunction As(r) {\n    return function(e, t, i) {\n        for(var s = -1, n = Object(e), a = i(e), o = a.length; o--;){\n            var c = a[r ? o : ++s];\n            if (t(n[c], c, n) === !1) break;\n        }\n        return e;\n    };\n}\n_c24 = As;\nvar js = As, Hs = js, Es = Hs(), Ss = Es, ne = {\n    exports: {}\n};\n(function(r, e) {\n    var t = C, i = e && !e.nodeType && e, s = i && !0 && r && !r.nodeType && r, n = s && s.exports === i, a = n ? t.Buffer : void 0, o = a ? a.allocUnsafe : void 0;\n    function c(u, l) {\n        if (l) return u.slice();\n        var P = u.length, d = o ? o(P) : new u.constructor(P);\n        return u.copy(d), d;\n    }\n    r.exports = c;\n})(ne, ne.exports);\nvar Ns = C, Ts = Ns.Uint8Array, Ds = Ts, qe = Ds;\nfunction qs(r) {\n    var e = new r.constructor(r.byteLength);\n    return new qe(e).set(new qe(r)), e;\n}\nvar Rs = qs, xs = Rs;\nfunction Ls(r, e) {\n    var t = e ? xs(r.buffer) : r.buffer;\n    return new r.constructor(t, r.byteOffset, r.length);\n}\n_c25 = Ls;\nvar Us = Ls;\nfunction Fs(r, e) {\n    var t = -1, i = r.length;\n    for(e || (e = Array(i)); ++t < i;)e[t] = r[t];\n    return e;\n}\n_c26 = Fs;\nvar Ms = Fs, Gs = $, Re = Object.create, zs = function() {\n    function r() {}\n    return function(e) {\n        if (!Gs(e)) return {};\n        if (Re) return Re(e);\n        r.prototype = e;\n        var t = new r;\n        return r.prototype = void 0, t;\n    };\n}(), ks = zs;\nfunction Bs(r, e) {\n    return function(t) {\n        return r(e(t));\n    };\n}\n_c27 = Bs;\nvar Vs = Bs, Js = Vs, Ks = Js(Object.getPrototypeOf, Object), xe = Ks, Ws = Object.prototype;\nfunction Xs(r) {\n    var e = r && r.constructor, t = typeof e == \"function\" && e.prototype || Ws;\n    return r === t;\n}\n_c28 = Xs;\nvar Le = Xs, Ys = ks, Zs = xe, Qs = Le;\nfunction en(r) {\n    return typeof r.constructor == \"function\" && !Qs(r) ? Ys(Zs(r)) : {};\n}\nvar tn = en;\nfunction rn(r) {\n    return r != null && typeof r == \"object\";\n}\nvar M = rn, sn = V, nn = M, an = \"[object Arguments]\";\nfunction on(r) {\n    return nn(r) && sn(r) == an;\n}\nvar cn = on, Ue = cn, hn = M, Fe = Object.prototype, pn = Fe.hasOwnProperty, un = Fe.propertyIsEnumerable, ln = Ue(function() {\n    return arguments;\n}()) ? Ue : function(r) {\n    return hn(r) && pn.call(r, \"callee\") && !un.call(r, \"callee\");\n}, Me = ln, dn = Array.isArray, Ge = dn, vn = 9007199254740991;\nfunction fn(r) {\n    return typeof r == \"number\" && r > -1 && r % 1 == 0 && r <= vn;\n}\nvar ze = fn, mn = te, gn = ze;\nfunction Pn(r) {\n    return r != null && gn(r.length) && !mn(r);\n}\n_c29 = Pn;\nvar ae = Pn, bn = ae, $n = M;\nfunction yn(r) {\n    return $n(r) && bn(r);\n}\nvar wn = yn, W = {\n    exports: {}\n};\nfunction _n() {\n    return !1;\n}\nvar Cn = _n;\n(function(r, e) {\n    var t = C, i = Cn, s = e && !e.nodeType && e, n = s && !0 && r && !r.nodeType && r, a = n && n.exports === s, o = a ? t.Buffer : void 0, c = o ? o.isBuffer : void 0, u = c || i;\n    r.exports = u;\n})(W, W.exports);\nvar In = V, On = xe, An = M, jn = \"[object Object]\", Hn = Function.prototype, En = Object.prototype, ke = Hn.toString, Sn = En.hasOwnProperty, Nn = ke.call(Object);\nfunction Tn(r) {\n    if (!An(r) || In(r) != jn) return !1;\n    var e = On(r);\n    if (e === null) return !0;\n    var t = Sn.call(e, \"constructor\") && e.constructor;\n    return typeof t == \"function\" && t instanceof t && ke.call(t) == Nn;\n}\n_c30 = Tn;\nvar Dn = Tn, qn = V, Rn = ze, xn = M, Ln = \"[object Arguments]\", Un = \"[object Array]\", Fn = \"[object Boolean]\", Mn = \"[object Date]\", Gn = \"[object Error]\", zn = \"[object Function]\", kn = \"[object Map]\", Bn = \"[object Number]\", Vn = \"[object Object]\", Jn = \"[object RegExp]\", Kn = \"[object Set]\", Wn = \"[object String]\", Xn = \"[object WeakMap]\", Yn = \"[object ArrayBuffer]\", Zn = \"[object DataView]\", Qn = \"[object Float32Array]\", ea = \"[object Float64Array]\", ta = \"[object Int8Array]\", ra = \"[object Int16Array]\", ia = \"[object Int32Array]\", sa = \"[object Uint8Array]\", na = \"[object Uint8ClampedArray]\", aa = \"[object Uint16Array]\", oa = \"[object Uint32Array]\", p = {};\np[Qn] = p[ea] = p[ta] = p[ra] = p[ia] = p[sa] = p[na] = p[aa] = p[oa] = !0, p[Ln] = p[Un] = p[Yn] = p[Fn] = p[Zn] = p[Mn] = p[Gn] = p[zn] = p[kn] = p[Bn] = p[Vn] = p[Jn] = p[Kn] = p[Wn] = p[Xn] = !1;\nfunction ca(r) {\n    return xn(r) && Rn(r.length) && !!p[qn(r)];\n}\nvar ha = ca;\nfunction pa(r) {\n    return function(e) {\n        return r(e);\n    };\n}\nvar ua = pa, oe = {\n    exports: {}\n};\n(function(r, e) {\n    var t = we, i = e && !e.nodeType && e, s = i && !0 && r && !r.nodeType && r, n = s && s.exports === i, a = n && t.process, o = function() {\n        try {\n            var c = s && s.require && s.require(\"util\").types;\n            return c || a && a.binding && a.binding(\"util\");\n        } catch (e) {}\n    }();\n    r.exports = o;\n})(oe, oe.exports);\nvar la = ha, da = ua, Be = oe.exports, Ve = Be && Be.isTypedArray, va = Ve ? da(Ve) : la, Je = va;\nfunction fa(r, e) {\n    if (!(e === \"constructor\" && typeof r[e] == \"function\") && e != \"__proto__\") return r[e];\n}\nvar Ke = fa, ma = se, ga = z, Pa = Object.prototype, ba = Pa.hasOwnProperty;\nfunction $a(r, e, t) {\n    var i = r[e];\n    (!(ba.call(r, e) && ga(i, t)) || t === void 0 && !(e in r)) && ma(r, e, t);\n}\nvar ya = $a, wa = ya, _a = se;\nfunction Ca(r, e, t, i) {\n    var s = !t;\n    t || (t = {});\n    for(var n = -1, a = e.length; ++n < a;){\n        var o = e[n], c = i ? i(t[o], r[o], o, t, r) : void 0;\n        c === void 0 && (c = r[o]), s ? _a(t, o, c) : wa(t, o, c);\n    }\n    return t;\n}\n_c31 = Ca;\nvar Ia = Ca;\nfunction Oa(r, e) {\n    for(var t = -1, i = Array(r); ++t < r;)i[t] = e(t);\n    return i;\n}\n_c32 = Oa;\nvar Aa = Oa, ja = 9007199254740991, Ha = /^(?:0|[1-9]\\d*)$/;\nfunction Ea(r, e) {\n    var t = typeof r;\n    return e = e !== null && e !== void 0 ? e : ja, !!e && (t == \"number\" || t != \"symbol\" && Ha.test(r)) && r > -1 && r % 1 == 0 && r < e;\n}\n_c33 = Ea;\nvar We = Ea, Sa = Aa, Na = Me, Ta = Ge, Da = W.exports, qa = We, Ra = Je, xa = Object.prototype, La = xa.hasOwnProperty;\nfunction Ua(r, e) {\n    var t = Ta(r), i = !t && Na(r), s = !t && !i && Da(r), n = !t && !i && !s && Ra(r), a = t || i || s || n, o = a ? Sa(r.length, String) : [], c = o.length;\n    for(var u in r)(e || La.call(r, u)) && !(a && (u == \"length\" || s && (u == \"offset\" || u == \"parent\") || n && (u == \"buffer\" || u == \"byteLength\" || u == \"byteOffset\") || qa(u, c))) && o.push(u);\n    return o;\n}\n_c34 = Ua;\nvar Fa = Ua;\nfunction Ma(r) {\n    var e = [];\n    if (r != null) for(var t in Object(r))e.push(t);\n    return e;\n}\n_c35 = Ma;\nvar Ga = Ma, za = $, ka = Le, Ba = Ga, Va = Object.prototype, Ja = Va.hasOwnProperty;\nfunction Ka(r) {\n    if (!za(r)) return Ba(r);\n    var e = ka(r), t = [];\n    for(var i in r)i == \"constructor\" && (e || !Ja.call(r, i)) || t.push(i);\n    return t;\n}\n_c36 = Ka;\nvar Wa = Ka, Xa = Fa, Ya = Wa, Za = ae;\nfunction Qa(r) {\n    return Za(r) ? Xa(r, !0) : Ya(r);\n}\n_c37 = Qa;\nvar Xe = Qa, eo = Ia, to = Xe;\nfunction ro(r) {\n    return eo(r, to(r));\n}\nvar io = ro, Ye = De, so = ne.exports, no = Us, ao = Ms, oo = tn, Ze = Me, Qe = Ge, co = wn, ho = W.exports, po = te, uo = $, lo = Dn, vo = Je, et = Ke, fo = io;\nfunction mo(r, e, t, i, s, n, a) {\n    var o = et(r, t), c = et(e, t), u = a.get(c);\n    if (u) {\n        Ye(r, t, u);\n        return;\n    }\n    var l = n ? n(o, c, t + \"\", r, e, a) : void 0, P = l === void 0;\n    if (P) {\n        var d = Qe(c), Q = !d && ho(c), ve = !d && !Q && vo(c);\n        l = c, d || Q || ve ? Qe(o) ? l = o : co(o) ? l = ao(o) : Q ? (P = !1, l = so(c, !0)) : ve ? (P = !1, l = no(c, !0)) : l = [] : lo(c) || Ze(c) ? (l = o, Ze(o) ? l = fo(o) : (!uo(o) || po(o)) && (l = oo(c))) : P = !1;\n    }\n    P && (a.set(c, l), s(l, c, i, n, a), a.delete(c)), Ye(r, t, l);\n}\nvar go = mo, Po = $s, bo = De, $o = Ss, yo = go, wo = $, _o = Xe, Co = Ke;\nfunction tt(r, e, t, i, s) {\n    r !== e && $o(e, function(n, a) {\n        if (s || (s = new Po), wo(n)) yo(r, e, a, t, tt, i, s);\n        else {\n            var o = i ? i(Co(r, a), n, a + \"\", r, e, s) : void 0;\n            o === void 0 && (o = n), bo(r, a, o);\n        }\n    }, _o);\n}\nvar Io = tt;\nfunction Oo(r) {\n    return r;\n}\n_c38 = Oo;\nvar rt = Oo;\nfunction Ao(r, e, t) {\n    switch(t.length){\n        case 0:\n            return r.call(e);\n        case 1:\n            return r.call(e, t[0]);\n        case 2:\n            return r.call(e, t[0], t[1]);\n        case 3:\n            return r.call(e, t[0], t[1], t[2]);\n    }\n    return r.apply(e, t);\n}\n_c39 = Ao;\nvar jo = Ao, Ho = jo, it = Math.max;\nfunction Eo(r, e, t) {\n    return e = it(e === void 0 ? r.length - 1 : e, 0), function() {\n        for(var i = arguments, s = -1, n = it(i.length - e, 0), a = Array(n); ++s < n;)a[s] = i[e + s];\n        s = -1;\n        for(var o = Array(e + 1); ++s < e;)o[s] = i[s];\n        return o[e] = t(a), Ho(r, this, o);\n    };\n}\n_c40 = Eo;\nvar So = Eo;\nfunction No(r) {\n    return function() {\n        return r;\n    };\n}\n_c41 = No;\nvar To = No, Do = To, st = Ne, qo = rt, Ro = st ? function(r, e) {\n    return st(r, \"toString\", {\n        configurable: !0,\n        enumerable: !1,\n        value: Do(e),\n        writable: !0\n    });\n} : qo, xo = Ro, Lo = 800, Uo = 16, Fo = Date.now;\nfunction Mo(r) {\n    var e = 0, t = 0;\n    return function() {\n        var i = Fo(), s = Uo - (i - t);\n        if (t = i, s > 0) {\n            if (++e >= Lo) return arguments[0];\n        } else e = 0;\n        return r.apply(void 0, arguments);\n    };\n}\n_c42 = Mo;\nvar Go = Mo, zo = xo, ko = Go, Bo = ko(zo), Vo = Bo, Jo = rt, Ko = So, Wo = Vo;\nfunction Xo(r, e) {\n    return Wo(Ko(r, e, Jo), r + \"\");\n}\n_c43 = Xo;\nvar Yo = Xo, Zo = z, Qo = ae, ec = We, tc = $;\nfunction rc(r, e, t) {\n    if (!tc(t)) return !1;\n    var i = typeof e;\n    return (i == \"number\" ? Qo(t) && ec(e, t.length) : i == \"string\" && e in t) ? Zo(t[e], r) : !1;\n}\nvar ic = rc, sc = Yo, nc = ic;\nfunction ac(r) {\n    return sc(function(e, t) {\n        var i = -1, s = t.length, n = s > 1 ? t[s - 1] : void 0, a = s > 2 ? t[2] : void 0;\n        for(n = r.length > 3 && typeof n == \"function\" ? (s--, n) : void 0, a && nc(t[0], t[1], a) && (n = s < 3 ? void 0 : n, s = 1), e = Object(e); ++i < s;){\n            var o = t[i];\n            o && r(e, o, i, n);\n        }\n        return e;\n    });\n}\nvar oc = ac, cc = Io, hc = oc, pc = hc(function(r, e, t) {\n    cc(r, e, t);\n}), uc = pc, lc = Object.defineProperty, dc = Object.defineProperties, vc = Object.getOwnPropertyDescriptors, nt = Object.getOwnPropertySymbols, fc = Object.prototype.hasOwnProperty, mc = Object.prototype.propertyIsEnumerable, at = (r, e, t)=>e in r ? lc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, X = (r, e)=>{\n    for(var t in e || (e = {}))fc.call(e, t) && at(r, t, e[t]);\n    if (nt) for (var t of nt(e))mc.call(e, t) && at(r, t, e[t]);\n    return r;\n}, gc = (r, e)=>dc(r, vc(e));\nfunction v(r, e, t) {\n    var i;\n    const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(r);\n    return ((i = e.rpcMap) == null ? void 0 : i[s.reference]) || \"\".concat(ye, \"?chainId=\").concat(s.namespace, \":\").concat(s.reference, \"&projectId=\").concat(t);\n}\nfunction y(r) {\n    return r.includes(\":\") ? r.split(\":\")[1] : r;\n}\nfunction ot(r) {\n    return r.map((e)=>\"\".concat(e.split(\":\")[0], \":\").concat(e.split(\":\")[1]));\n}\nfunction Pc(r, e) {\n    const t = Object.keys(e.namespaces).filter((s)=>s.includes(r));\n    if (!t.length) return [];\n    const i = [];\n    return t.forEach((s)=>{\n        const n = e.namespaces[s].accounts;\n        i.push(...n);\n    }), i;\n}\n_c44 = Pc;\nfunction ce() {\n    let r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const t = ct(r), i = ct(e);\n    return uc(t, i);\n}\nfunction ct(r) {\n    var e, t, i, s;\n    const n = {};\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(r)) return n;\n    for (const [a, o] of Object.entries(r)){\n        const c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)(a) ? [\n            a\n        ] : o.chains, u = o.methods || [], l = o.events || [], P = o.rpcMap || {}, d = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(a);\n        n[d] = gc(X(X({}, n[d]), o), {\n            chains: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(c, (e = n[d]) == null ? void 0 : e.chains),\n            methods: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(u, (t = n[d]) == null ? void 0 : t.methods),\n            events: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(l, (i = n[d]) == null ? void 0 : i.events),\n            rpcMap: X(X({}, P), (s = n[d]) == null ? void 0 : s.rpcMap)\n        });\n    }\n    return n;\n}\nfunction bc(r) {\n    return r.includes(\":\") ? r.split(\":\")[2] : r;\n}\nfunction ht(r) {\n    const e = {};\n    for (const [t, i] of Object.entries(r)){\n        const s = i.methods || [], n = i.events || [], a = i.accounts || [], o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)(t) ? [\n            t\n        ] : i.chains ? i.chains : ot(i.accounts);\n        e[t] = {\n            chains: o,\n            methods: s,\n            events: n,\n            accounts: a\n        };\n    }\n    return e;\n}\nfunction he(r) {\n    return typeof r == \"number\" ? r : r.includes(\"0x\") ? parseInt(r, 16) : (r = r.includes(\":\") ? r.split(\":\")[1] : r, isNaN(Number(r)) ? r : Number(r));\n}\nconst pt = {}, h = (r)=>pt[r], pe = (r, e)=>{\n    pt[r] = e;\n};\nvar $c = Object.defineProperty, yc = (r, e, t)=>e in r ? $c(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, j = (r, e, t)=>yc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass wc {\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(e));\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = y(t);\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = \"\".concat(this.name, \":\").concat(this.chainId), t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(\"JSON-RPC provider for \".concat(e, \" not found\"));\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(\"No RPC url provided for chainId: \".concat(e));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n    constructor(e){\n        j(this, \"name\", \"polkadot\"), j(this, \"client\"), j(this, \"httpProviders\"), j(this, \"events\"), j(this, \"namespace\"), j(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar _c = Object.defineProperty, Cc = Object.defineProperties, Ic = Object.getOwnPropertyDescriptors, ut = Object.getOwnPropertySymbols, Oc = Object.prototype.hasOwnProperty, Ac = Object.prototype.propertyIsEnumerable, ue = (r, e, t)=>e in r ? _c(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, lt = (r, e)=>{\n    for(var t in e || (e = {}))Oc.call(e, t) && ue(r, t, e[t]);\n    if (ut) for (var t of ut(e))Ac.call(e, t) && ue(r, t, e[t]);\n    return r;\n}, dt = (r, e)=>Cc(r, Ic(e)), H = (r, e, t)=>ue(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass jc {\n    async request(e) {\n        switch(e.request.method){\n            case \"eth_requestAccounts\":\n                return this.getAccounts();\n            case \"eth_accounts\":\n                return this.getAccounts();\n            case \"wallet_switchEthereumChain\":\n                return await this.handleSwitchChain(e);\n            case \"eth_chainId\":\n                return parseInt(this.getDefaultChain());\n            case \"wallet_getCapabilities\":\n                return await this.getCapabilities(e);\n            case \"wallet_getCallsStatus\":\n                return await this.getCallStatus(e);\n        }\n        return this.namespace.methods.includes(e.request.method) ? await this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(parseInt(e), t), this.chainId = parseInt(e), this.events.emit(f.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(e));\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId.toString();\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(\"\".concat(this.name, \":\").concat(e), this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(\"No RPC url provided for chainId: \".concat(e));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__.HttpConnection(i, h(\"disableProviderPing\")));\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = parseInt(y(t));\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    getHttpProvider() {\n        const e = this.chainId, t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(\"JSON-RPC provider for \".concat(e, \" not found\"));\n        return t;\n    }\n    async handleSwitchChain(e) {\n        var t, i;\n        let s = e.request.params ? (t = e.request.params[0]) == null ? void 0 : t.chainId : \"0x0\";\n        s = s.startsWith(\"0x\") ? s : \"0x\".concat(s);\n        const n = parseInt(s, 16);\n        if (this.isChainApproved(n)) this.setDefaultChain(\"\".concat(n));\n        else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) await this.client.request({\n            topic: e.topic,\n            request: {\n                method: e.request.method,\n                params: [\n                    {\n                        chainId: s\n                    }\n                ]\n            },\n            chainId: (i = this.namespace.chains) == null ? void 0 : i[0]\n        }), this.setDefaultChain(\"\".concat(n));\n        else throw new Error(\"Failed to switch to chain 'eip155:\".concat(n, \"'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.\"));\n        return null;\n    }\n    isChainApproved(e) {\n        return this.namespace.chains.includes(\"\".concat(this.name, \":\").concat(e));\n    }\n    async getCapabilities(e) {\n        var t, i, s;\n        const n = (i = (t = e.request) == null ? void 0 : t.params) == null ? void 0 : i[0];\n        if (!n) throw new Error(\"Missing address parameter in `wallet_getCapabilities` request\");\n        const a = this.client.session.get(e.topic), o = ((s = a === null || a === void 0 ? void 0 : a.sessionProperties) == null ? void 0 : s.capabilities) || {};\n        if (o != null && o[n]) return o === null || o === void 0 ? void 0 : o[n];\n        const c = await this.client.request(e);\n        try {\n            await this.client.session.update(e.topic, {\n                sessionProperties: dt(lt({}, a.sessionProperties || {}), {\n                    capabilities: dt(lt({}, o || {}), {\n                        [n]: c\n                    })\n                })\n            });\n        } catch (u) {\n            console.warn(\"Failed to update session with capabilities\", u);\n        }\n        return c;\n    }\n    async getCallStatus(e) {\n        var t, i;\n        const s = this.client.session.get(e.topic), n = (t = s.sessionProperties) == null ? void 0 : t.bundler_name;\n        if (n) {\n            const o = this.getBundlerUrl(e.chainId, n);\n            try {\n                return await this.getUserOperationReceipt(o, e);\n            } catch (c) {\n                console.warn(\"Failed to fetch call status from bundler\", c, o);\n            }\n        }\n        const a = (i = s.sessionProperties) == null ? void 0 : i.bundler_url;\n        if (a) try {\n            return await this.getUserOperationReceipt(a, e);\n        } catch (o) {\n            console.warn(\"Failed to fetch call status from custom bundler\", o, a);\n        }\n        if (this.namespace.methods.includes(e.request.method)) return await this.client.request(e);\n        throw new Error(\"Fetching call status not approved by the wallet.\");\n    }\n    async getUserOperationReceipt(e, t) {\n        var i;\n        const s = new URL(e), n = await fetch(s, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"eth_getUserOperationReceipt\", [\n                (i = t.request.params) == null ? void 0 : i[0]\n            ]))\n        });\n        if (!n.ok) throw new Error(\"Failed to fetch user operation receipt - \".concat(n.status));\n        return await n.json();\n    }\n    getBundlerUrl(e, t) {\n        return \"\".concat(Ot, \"?projectId=\").concat(this.client.core.projectId, \"&chainId=\").concat(e, \"&bundler=\").concat(t);\n    }\n    constructor(e){\n        H(this, \"name\", \"eip155\"), H(this, \"client\"), H(this, \"chainId\"), H(this, \"namespace\"), H(this, \"httpProviders\"), H(this, \"events\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());\n    }\n}\nvar Hc = Object.defineProperty, Ec = (r, e, t)=>e in r ? Hc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, E = (r, e, t)=>Ec(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Sc {\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(e));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = y(t);\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = \"\".concat(this.name, \":\").concat(this.chainId), t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(\"JSON-RPC provider for \".concat(e, \" not found\"));\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(\"No RPC url provided for chainId: \".concat(e));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n    constructor(e){\n        E(this, \"name\", \"solana\"), E(this, \"client\"), E(this, \"httpProviders\"), E(this, \"events\"), E(this, \"namespace\"), E(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar Nc = Object.defineProperty, Tc = (r, e, t)=>e in r ? Nc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, S = (r, e, t)=>Tc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Dc {\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = y(t);\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = \"\".concat(this.name, \":\").concat(this.chainId), t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(\"JSON-RPC provider for \".concat(e, \" not found\"));\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(\"No RPC url provided for chainId: \".concat(e));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n    constructor(e){\n        S(this, \"name\", \"cosmos\"), S(this, \"client\"), S(this, \"httpProviders\"), S(this, \"events\"), S(this, \"namespace\"), S(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar qc = Object.defineProperty, Rc = (r, e, t)=>e in r ? qc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, N = (r, e, t)=>Rc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass xc {\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        if (!this.httpProviders[e]) {\n            const i = t || v(\"\".concat(this.name, \":\").concat(e), this.namespace, this.client.core.projectId);\n            if (!i) throw new Error(\"No RPC url provided for chainId: \".concat(e));\n            this.setHttpProvider(e, i);\n        }\n        this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            e[t] = this.createHttpProvider(t, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = \"\".concat(this.name, \":\").concat(this.chainId), t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(\"JSON-RPC provider for \".concat(e, \" not found\"));\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        return typeof i > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n    constructor(e){\n        N(this, \"name\", \"algorand\"), N(this, \"client\"), N(this, \"httpProviders\"), N(this, \"events\"), N(this, \"namespace\"), N(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar Lc = Object.defineProperty, Uc = (r, e, t)=>e in r ? Lc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, T = (r, e, t)=>Uc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Fc {\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            const i = this.getCardanoRPCUrl(t), s = y(t);\n            e[s] = this.createHttpProvider(s, i);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = \"\".concat(this.name, \":\").concat(this.chainId), t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(\"JSON-RPC provider for \".concat(e, \" not found\"));\n        return t;\n    }\n    getCardanoRPCUrl(e) {\n        const t = this.namespace.rpcMap;\n        if (t) return t[e];\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || this.getCardanoRPCUrl(e);\n        if (!i) throw new Error(\"No RPC url provided for chainId: \".concat(e));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n    constructor(e){\n        T(this, \"name\", \"cip34\"), T(this, \"client\"), T(this, \"httpProviders\"), T(this, \"events\"), T(this, \"namespace\"), T(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar Mc = Object.defineProperty, Gc = (r, e, t)=>e in r ? Mc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, D = (r, e, t)=>Gc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass zc {\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(e));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = y(t);\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = \"\".concat(this.name, \":\").concat(this.chainId), t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(\"JSON-RPC provider for \".concat(e, \" not found\"));\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(\"No RPC url provided for chainId: \".concat(e));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n    constructor(e){\n        D(this, \"name\", \"elrond\"), D(this, \"client\"), D(this, \"httpProviders\"), D(this, \"events\"), D(this, \"namespace\"), D(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar kc = Object.defineProperty, Bc = (r, e, t)=>e in r ? kc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, q = (r, e, t)=>Bc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Vc {\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(e));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            const s = y(t);\n            e[s] = this.createHttpProvider(s, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = \"\".concat(this.name, \":\").concat(this.chainId), t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(\"JSON-RPC provider for \".concat(e, \" not found\"));\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(\"No RPC url provided for chainId: \".concat(e));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n    constructor(e){\n        q(this, \"name\", \"multiversx\"), q(this, \"client\"), q(this, \"httpProviders\"), q(this, \"events\"), q(this, \"namespace\"), q(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar Jc = Object.defineProperty, Kc = (r, e, t)=>e in r ? Jc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, R = (r, e, t)=>Kc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Wc {\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        if (this.chainId = e, !this.httpProviders[e]) {\n            const i = t || v(\"\".concat(this.name, \":\").concat(e), this.namespace);\n            if (!i) throw new Error(\"No RPC url provided for chainId: \".concat(e));\n            this.setHttpProvider(e, i);\n        }\n        this.events.emit(f.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            var i;\n            e[t] = this.createHttpProvider(t, (i = this.namespace.rpcMap) == null ? void 0 : i[t]);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = \"\".concat(this.name, \":\").concat(this.chainId), t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(\"JSON-RPC provider for \".concat(e, \" not found\"));\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace);\n        return typeof i > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n    constructor(e){\n        R(this, \"name\", \"near\"), R(this, \"client\"), R(this, \"httpProviders\"), R(this, \"events\"), R(this, \"namespace\"), R(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar Xc = Object.defineProperty, Yc = (r, e, t)=>e in r ? Xc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, x = (r, e, t)=>Yc(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Zc {\n    updateNamespace(e) {\n        this.namespace = Object.assign(this.namespace, e);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n    }\n    setDefaultChain(e, t) {\n        if (this.chainId = e, !this.httpProviders[e]) {\n            const i = t || v(\"\".concat(this.name, \":\").concat(e), this.namespace);\n            if (!i) throw new Error(\"No RPC url provided for chainId: \".concat(e));\n            this.setHttpProvider(e, i);\n        }\n        this.events.emit(f.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const e = {};\n        return this.namespace.chains.forEach((t)=>{\n            e[t] = this.createHttpProvider(t);\n        }), e;\n    }\n    getHttpProvider() {\n        const e = \"\".concat(this.name, \":\").concat(this.chainId), t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(\"JSON-RPC provider for \".concat(e, \" not found\"));\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace);\n        return typeof i > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i));\n    }\n    constructor(e){\n        x(this, \"name\", \"tezos\"), x(this, \"client\"), x(this, \"httpProviders\"), x(this, \"events\"), x(this, \"namespace\"), x(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar Qc = Object.defineProperty, eh = (r, e, t)=>e in r ? Qc(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, L = (r, e, t)=>eh(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass th {\n    updateNamespace(e) {\n        this.namespace.chains = [\n            ...new Set((this.namespace.chains || []).concat(e.chains || []))\n        ], this.namespace.accounts = [\n            ...new Set((this.namespace.accounts || []).concat(e.accounts || []))\n        ], this.namespace.methods = [\n            ...new Set((this.namespace.methods || []).concat(e.methods || []))\n        ], this.namespace.events = [\n            ...new Set((this.namespace.events || []).concat(e.events || []))\n        ], this.httpProviders = this.createHttpProviders();\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(e) {\n        return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider(e.chainId).request(e.request);\n    }\n    setDefaultChain(e, t) {\n        this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(e));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const e = this.namespace.chains[0];\n        if (!e) throw new Error(\"ChainId not found\");\n        return e.split(\":\")[1];\n    }\n    getAccounts() {\n        const e = this.namespace.accounts;\n        return e ? [\n            ...new Set(e.filter((t)=>t.split(\":\")[1] === this.chainId.toString()).map((t)=>t.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        var e, t;\n        const i = {};\n        return (t = (e = this.namespace) == null ? void 0 : e.accounts) == null || t.forEach((s)=>{\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(s);\n            i[\"\".concat(n.namespace, \":\").concat(n.reference)] = this.createHttpProvider(s);\n        }), i;\n    }\n    getHttpProvider(e) {\n        const t = this.httpProviders[e];\n        if (typeof t > \"u\") throw new Error(\"JSON-RPC provider for \".concat(e, \" not found\"));\n        return t;\n    }\n    setHttpProvider(e, t) {\n        const i = this.createHttpProvider(e, t);\n        i && (this.httpProviders[e] = i);\n    }\n    createHttpProvider(e, t) {\n        const i = t || v(e, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(\"No RPC url provided for chainId: \".concat(e));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n    constructor(e){\n        L(this, \"name\", w), L(this, \"client\"), L(this, \"httpProviders\"), L(this, \"events\"), L(this, \"namespace\"), L(this, \"chainId\"), this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar rh = Object.defineProperty, ih = Object.defineProperties, sh = Object.getOwnPropertyDescriptors, vt = Object.getOwnPropertySymbols, nh = Object.prototype.hasOwnProperty, ah = Object.prototype.propertyIsEnumerable, le = (r, e, t)=>e in r ? rh(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, Y = (r, e)=>{\n    for(var t in e || (e = {}))nh.call(e, t) && le(r, t, e[t]);\n    if (vt) for (var t of vt(e))ah.call(e, t) && le(r, t, e[t]);\n    return r;\n}, de = (r, e)=>ih(r, sh(e)), g = (r, e, t)=>le(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Z {\n    static async init(e) {\n        const t = new Z(e);\n        return await t.initialize(), t;\n    }\n    async request(e, t, i) {\n        const [s, n] = this.validateChain(t);\n        if (!this.session) throw new Error(\"Please call connect() before request()\");\n        return await this.getProvider(s).request({\n            request: Y({}, e),\n            chainId: \"\".concat(s, \":\").concat(n),\n            topic: this.session.topic,\n            expiry: i\n        });\n    }\n    sendAsync(e, t, i, s) {\n        const n = new Date().getTime();\n        this.request(e, i, s).then((a)=>t(null, (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult)(n, a))).catch((a)=>t(a, void 0));\n    }\n    async enable() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        return this.session || await this.connect({\n            namespaces: this.namespaces,\n            optionalNamespaces: this.optionalNamespaces,\n            sessionProperties: this.sessionProperties\n        }), await this.requestAccounts();\n    }\n    async disconnect() {\n        var e;\n        if (!this.session) throw new Error(\"Please call connect() before enable()\");\n        await this.client.disconnect({\n            topic: (e = this.session) == null ? void 0 : e.topic,\n            reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")\n        }), await this.cleanup();\n    }\n    async connect(e) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (this.setNamespaces(e), await this.cleanupPendingPairings(), !e.skipPairing) return await this.pair(e.pairingTopic);\n    }\n    async authenticate(e, t) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        this.setNamespaces(e), await this.cleanupPendingPairings();\n        const { uri: i, response: s } = await this.client.authenticate(e, t);\n        i && (this.uri = i, this.events.emit(\"display_uri\", i));\n        const n = await s();\n        if (this.session = n.session, this.session) {\n            const a = ht(this.session.namespaces);\n            this.namespaces = ce(this.namespaces, a), this.persist(\"namespaces\", this.namespaces), this.onConnect();\n        }\n        return n;\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    async pair(e) {\n        const { uri: t, approval: i } = await this.client.connect({\n            pairingTopic: e,\n            requiredNamespaces: this.namespaces,\n            optionalNamespaces: this.optionalNamespaces,\n            sessionProperties: this.sessionProperties\n        });\n        t && (this.uri = t, this.events.emit(\"display_uri\", t));\n        const s = await i();\n        this.session = s;\n        const n = ht(s.namespaces);\n        return this.namespaces = ce(this.namespaces, n), this.persist(\"namespaces\", this.namespaces), this.onConnect(), this.session;\n    }\n    setDefaultChain(e, t) {\n        try {\n            if (!this.session) return;\n            const [i, s] = this.validateChain(e), n = this.getProvider(i);\n            n.name === w ? n.setDefaultChain(\"\".concat(i, \":\").concat(s), t) : n.setDefaultChain(s, t);\n        } catch (i) {\n            if (!/Please call connect/.test(i.message)) throw i;\n        }\n    }\n    async cleanupPendingPairings() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        this.logger.info(\"Cleaning up inactive pairings...\");\n        const t = this.client.pairing.getAll();\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(t)) {\n            for (const i of t)e.deletePairings ? this.client.core.expirer.set(i.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i.topic);\n            this.logger.info(\"Inactive pairings cleared: \".concat(t.length));\n        }\n    }\n    abortPairingAttempt() {\n        this.logger.warn(\"abortPairingAttempt is deprecated. This is now a no-op.\");\n    }\n    async checkStorage() {\n        if (this.namespaces = await this.getFromStore(\"namespaces\"), this.optionalNamespaces = await this.getFromStore(\"optionalNamespaces\") || {}, this.client.session.length) {\n            const e = this.client.session.keys.length - 1;\n            this.session = this.client.session.get(this.client.session.keys[e]), this.createProviders();\n        }\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();\n    }\n    async createClient() {\n        this.client = this.providerOpts.client || await _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__[\"default\"].init({\n            core: this.providerOpts.core,\n            logger: this.providerOpts.logger || be,\n            relayUrl: this.providerOpts.relayUrl || _t,\n            projectId: this.providerOpts.projectId,\n            metadata: this.providerOpts.metadata,\n            storageOptions: this.providerOpts.storageOptions,\n            storage: this.providerOpts.storage,\n            name: this.providerOpts.name,\n            customStoragePrefix: this.providerOpts.customStoragePrefix,\n            telemetryEnabled: this.providerOpts.telemetryEnabled\n        }), this.logger.trace(\"SignClient Initialized\");\n    }\n    createProviders() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (!this.session) throw new Error(\"Session not initialized. Please call connect() before enable()\");\n        const e = [\n            ...new Set(Object.keys(this.session.namespaces).map((t)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(t)))\n        ];\n        pe(\"client\", this.client), pe(\"events\", this.events), pe(\"disableProviderPing\", this.disableProviderPing), e.forEach((t)=>{\n            if (!this.session) return;\n            const i = Pc(t, this.session), s = ot(i), n = ce(this.namespaces, this.optionalNamespaces), a = de(Y({}, n[t]), {\n                accounts: i,\n                chains: s\n            });\n            switch(t){\n                case \"eip155\":\n                    this.rpcProviders[t] = new jc({\n                        namespace: a\n                    });\n                    break;\n                case \"algorand\":\n                    this.rpcProviders[t] = new xc({\n                        namespace: a\n                    });\n                    break;\n                case \"solana\":\n                    this.rpcProviders[t] = new Sc({\n                        namespace: a\n                    });\n                    break;\n                case \"cosmos\":\n                    this.rpcProviders[t] = new Dc({\n                        namespace: a\n                    });\n                    break;\n                case \"polkadot\":\n                    this.rpcProviders[t] = new wc({\n                        namespace: a\n                    });\n                    break;\n                case \"cip34\":\n                    this.rpcProviders[t] = new Fc({\n                        namespace: a\n                    });\n                    break;\n                case \"elrond\":\n                    this.rpcProviders[t] = new zc({\n                        namespace: a\n                    });\n                    break;\n                case \"multiversx\":\n                    this.rpcProviders[t] = new Vc({\n                        namespace: a\n                    });\n                    break;\n                case \"near\":\n                    this.rpcProviders[t] = new Wc({\n                        namespace: a\n                    });\n                    break;\n                case \"tezos\":\n                    this.rpcProviders[t] = new Zc({\n                        namespace: a\n                    });\n                    break;\n                default:\n                    this.rpcProviders[w] ? this.rpcProviders[w].updateNamespace(a) : this.rpcProviders[w] = new th({\n                        namespace: a\n                    });\n            }\n        });\n    }\n    registerEventListeners() {\n        if (typeof this.client > \"u\") throw new Error(\"Sign Client is not initialized\");\n        this.client.on(\"session_ping\", (e)=>{\n            this.events.emit(\"session_ping\", e);\n        }), this.client.on(\"session_event\", (e)=>{\n            const { params: t } = e, { event: i } = t;\n            if (i.name === \"accountsChanged\") {\n                const s = i.data;\n                s && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(s) && this.events.emit(\"accountsChanged\", s.map(bc));\n            } else if (i.name === \"chainChanged\") {\n                const s = t.chainId, n = t.event.data, a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(s), o = he(s) !== he(n) ? \"\".concat(a, \":\").concat(he(n)) : s;\n                this.onChainChanged(o);\n            } else this.events.emit(i.name, i.data);\n            this.events.emit(\"session_event\", e);\n        }), this.client.on(\"session_update\", (param)=>{\n            let { topic: e, params: t } = param;\n            var i;\n            const { namespaces: s } = t, n = (i = this.client) == null ? void 0 : i.session.get(e);\n            this.session = de(Y({}, n), {\n                namespaces: s\n            }), this.onSessionUpdate(), this.events.emit(\"session_update\", {\n                topic: e,\n                params: t\n            });\n        }), this.client.on(\"session_delete\", async (e)=>{\n            await this.cleanup(), this.events.emit(\"session_delete\", e), this.events.emit(\"disconnect\", de(Y({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: e.topic\n            }));\n        }), this.on(f.DEFAULT_CHAIN_CHANGED, (e)=>{\n            this.onChainChanged(e, !0);\n        });\n    }\n    getProvider(e) {\n        return this.rpcProviders[e] || this.rpcProviders[w];\n    }\n    onSessionUpdate() {\n        Object.keys(this.rpcProviders).forEach((e)=>{\n            var t;\n            this.getProvider(e).updateNamespace((t = this.session) == null ? void 0 : t.namespaces[e]);\n        });\n    }\n    setNamespaces(e) {\n        const { namespaces: t, optionalNamespaces: i, sessionProperties: s } = e;\n        t && Object.keys(t).length && (this.namespaces = t), i && Object.keys(i).length && (this.optionalNamespaces = i), this.sessionProperties = s, this.persist(\"namespaces\", t), this.persist(\"optionalNamespaces\", i);\n    }\n    validateChain(e) {\n        const [t, i] = (e === null || e === void 0 ? void 0 : e.split(\":\")) || [\n            \"\",\n            \"\"\n        ];\n        if (!this.namespaces || !Object.keys(this.namespaces).length) return [\n            t,\n            i\n        ];\n        if (t && !Object.keys(this.namespaces || {}).map((a)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(a)).includes(t)) throw new Error(\"Namespace '\".concat(t, \"' is not configured. Please call connect() first with namespace config.\"));\n        if (t && i) return [\n            t,\n            i\n        ];\n        const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(Object.keys(this.namespaces)[0]), n = this.rpcProviders[s].getDefaultChain();\n        return [\n            s,\n            n\n        ];\n    }\n    async requestAccounts() {\n        const [e] = this.validateChain();\n        return await this.getProvider(e).requestAccounts();\n    }\n    onChainChanged(e) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n        if (!this.namespaces) return;\n        const [i, s] = this.validateChain(e);\n        s && (t || this.getProvider(i).setDefaultChain(s), this.namespaces[i] ? this.namespaces[i].defaultChain = s : this.namespaces[\"\".concat(i, \":\").concat(s)] ? this.namespaces[\"\".concat(i, \":\").concat(s)].defaultChain = s : this.namespaces[\"\".concat(i, \":\").concat(s)] = {\n            defaultChain: s\n        }, this.persist(\"namespaces\", this.namespaces), this.events.emit(\"chainChanged\", s));\n    }\n    onConnect() {\n        this.createProviders(), this.events.emit(\"connect\", {\n            session: this.session\n        });\n    }\n    async cleanup() {\n        this.session = void 0, this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, this.persist(\"namespaces\", void 0), this.persist(\"optionalNamespaces\", void 0), this.persist(\"sessionProperties\", void 0), await this.cleanupPendingPairings({\n            deletePairings: !0\n        });\n    }\n    persist(e, t) {\n        this.client.core.storage.setItem(\"\".concat($e, \"/\").concat(e), t);\n    }\n    async getFromStore(e) {\n        return await this.client.core.storage.getItem(\"\".concat($e, \"/\").concat(e));\n    }\n    constructor(e){\n        g(this, \"client\"), g(this, \"namespaces\"), g(this, \"optionalNamespaces\"), g(this, \"sessionProperties\"), g(this, \"events\", new (events__WEBPACK_IMPORTED_MODULE_4___default())), g(this, \"rpcProviders\", {}), g(this, \"session\"), g(this, \"providerOpts\"), g(this, \"logger\"), g(this, \"uri\"), g(this, \"disableProviderPing\", !1), this.providerOpts = e, this.logger = typeof (e === null || e === void 0 ? void 0 : e.logger) < \"u\" && typeof (e === null || e === void 0 ? void 0 : e.logger) != \"string\" ? e.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: (e === null || e === void 0 ? void 0 : e.logger) || be\n        })), this.disableProviderPing = (e === null || e === void 0 ? void 0 : e.disableProviderPing) || !1;\n    }\n}\nconst oh = Z;\n //# sourceMappingURL=index.es.js.map\nvar _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44;\n$RefreshReg$(_c1, \"At\");\n$RefreshReg$(_c2, \"Ht\");\n$RefreshReg$(_c3, \"St\");\n$RefreshReg$(_c4, \"Lt\");\n$RefreshReg$(_c5, \"Mt\");\n$RefreshReg$(_c6, \"Zt\");\n$RefreshReg$(_c7, \"Pr\");\n$RefreshReg$(_c8, \"Cr\");\n$RefreshReg$(_c9, \"Ir\");\n$RefreshReg$(_c10, \"Nr\");\n$RefreshReg$(_c11, \"Rr\");\n$RefreshReg$(_c12, \"Fr\");\n$RefreshReg$(_c13, \"Qr\");\n$RefreshReg$(_c14, \"Ci\");\n$RefreshReg$(_c15, \"I\");\n$RefreshReg$(_c16, \"Li\");\n$RefreshReg$(_c17, \"Fi\");\n$RefreshReg$(_c18, \"Bi\");\n$RefreshReg$(_c19, \"Ki\");\n$RefreshReg$(_c20, \"Yi\");\n$RefreshReg$(_c21, \"O\");\n$RefreshReg$(_c22, \"A\");\n$RefreshReg$(_c23, \"Os\");\n$RefreshReg$(_c24, \"As\");\n$RefreshReg$(_c25, \"Ls\");\n$RefreshReg$(_c26, \"Fs\");\n$RefreshReg$(_c27, \"Bs\");\n$RefreshReg$(_c28, \"Xs\");\n$RefreshReg$(_c29, \"Pn\");\n$RefreshReg$(_c30, \"Tn\");\n$RefreshReg$(_c31, \"Ca\");\n$RefreshReg$(_c32, \"Oa\");\n$RefreshReg$(_c33, \"Ea\");\n$RefreshReg$(_c34, \"Ua\");\n$RefreshReg$(_c35, \"Ma\");\n$RefreshReg$(_c36, \"Ka\");\n$RefreshReg$(_c37, \"Qa\");\n$RefreshReg$(_c38, \"Oo\");\n$RefreshReg$(_c39, \"Ao\");\n$RefreshReg$(_c40, \"Eo\");\n$RefreshReg$(_c41, \"No\");\n$RefreshReg$(_c42, \"Mo\");\n$RefreshReg$(_c43, \"Xo\");\n$RefreshReg$(_c44, \"Pc\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/dist/index.es.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE10: function() { return /* binding */ It; },\n/* harmony export */   BASE16: function() { return /* binding */ V; },\n/* harmony export */   BASE64: function() { return /* binding */ At; },\n/* harmony export */   BASE64URL: function() { return /* binding */ Qs; },\n/* harmony export */   COLON: function() { return /* binding */ qr; },\n/* harmony export */   DEFAULT_DEPTH: function() { return /* binding */ Qe; },\n/* harmony export */   EMPTY_SPACE: function() { return /* binding */ Be; },\n/* harmony export */   ENV_MAP: function() { return /* binding */ H; },\n/* harmony export */   INTERNAL_ERRORS: function() { return /* binding */ mr; },\n/* harmony export */   MemoryStore: function() { return /* binding */ Zi; },\n/* harmony export */   ONE_THOUSAND: function() { return /* binding */ Gr; },\n/* harmony export */   REACT_NATIVE_PRODUCT: function() { return /* binding */ Ft; },\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: function() { return /* binding */ sr; },\n/* harmony export */   SDK_ERRORS: function() { return /* binding */ yr; },\n/* harmony export */   SDK_TYPE: function() { return /* binding */ Gt; },\n/* harmony export */   SLASH: function() { return /* binding */ qt; },\n/* harmony export */   TYPE_0: function() { return /* binding */ Nt; },\n/* harmony export */   TYPE_1: function() { return /* binding */ Ie; },\n/* harmony export */   TYPE_2: function() { return /* binding */ _e; },\n/* harmony export */   UTF8: function() { return /* binding */ Oe; },\n/* harmony export */   addResourceToRecap: function() { return /* binding */ $n; },\n/* harmony export */   appendToQueryString: function() { return /* binding */ Wt; },\n/* harmony export */   assertType: function() { return /* binding */ eo; },\n/* harmony export */   assignAbilityToActions: function() { return /* binding */ ft; },\n/* harmony export */   base64Decode: function() { return /* binding */ _n; },\n/* harmony export */   base64Encode: function() { return /* binding */ Un; },\n/* harmony export */   buildApprovedNamespaces: function() { return /* binding */ _i; },\n/* harmony export */   buildAuthObject: function() { return /* binding */ Xo; },\n/* harmony export */   buildNamespacesFromAuth: function() { return /* binding */ Ti; },\n/* harmony export */   buildRecapStatement: function() { return /* binding */ Pn; },\n/* harmony export */   calcExpiry: function() { return /* binding */ ho; },\n/* harmony export */   capitalize: function() { return /* binding */ io; },\n/* harmony export */   capitalizeWord: function() { return /* binding */ Qt; },\n/* harmony export */   createDelayedPromise: function() { return /* binding */ co; },\n/* harmony export */   createEncodedRecap: function() { return /* binding */ ts; },\n/* harmony export */   createExpiringPromise: function() { return /* binding */ ao; },\n/* harmony export */   createRecap: function() { return /* binding */ Tn; },\n/* harmony export */   decodeRecap: function() { return /* binding */ oe; },\n/* harmony export */   decodeTypeByte: function() { return /* binding */ fe; },\n/* harmony export */   decodeTypeTwoEnvelope: function() { return /* binding */ ui; },\n/* harmony export */   decrypt: function() { return /* binding */ ci; },\n/* harmony export */   deriveSymKey: function() { return /* binding */ ri; },\n/* harmony export */   deserialize: function() { return /* binding */ Fe; },\n/* harmony export */   encodeRecap: function() { return /* binding */ De; },\n/* harmony export */   encodeTypeByte: function() { return /* binding */ Ut; },\n/* harmony export */   encodeTypeTwoEnvelope: function() { return /* binding */ ai; },\n/* harmony export */   encrypt: function() { return /* binding */ ii; },\n/* harmony export */   engineEvent: function() { return /* binding */ go; },\n/* harmony export */   enumify: function() { return /* binding */ so; },\n/* harmony export */   formatAccountId: function() { return /* binding */ Mt; },\n/* harmony export */   formatAccountWithChain: function() { return /* binding */ Mr; },\n/* harmony export */   formatChainId: function() { return /* binding */ Dt; },\n/* harmony export */   formatDeeplinkUrl: function() { return /* binding */ en; },\n/* harmony export */   formatExpirerTarget: function() { return /* binding */ tt; },\n/* harmony export */   formatIdTarget: function() { return /* binding */ fo; },\n/* harmony export */   formatMessage: function() { return /* binding */ In; },\n/* harmony export */   formatMessageContext: function() { return /* binding */ to; },\n/* harmony export */   formatRelayParams: function() { return /* binding */ ar; },\n/* harmony export */   formatRelayRpcUrl: function() { return /* binding */ Zr; },\n/* harmony export */   formatStatementFromRecap: function() { return /* binding */ dt; },\n/* harmony export */   formatTopicTarget: function() { return /* binding */ uo; },\n/* harmony export */   formatUA: function() { return /* binding */ Yt; },\n/* harmony export */   formatUri: function() { return /* binding */ wi; },\n/* harmony export */   fromBase64: function() { return /* binding */ rt; },\n/* harmony export */   generateKeyPair: function() { return /* binding */ ti; },\n/* harmony export */   generateRandomBytes32: function() { return /* binding */ ni; },\n/* harmony export */   getAccountsChains: function() { return /* binding */ le; },\n/* harmony export */   getAccountsFromNamespaces: function() { return /* binding */ Hr; },\n/* harmony export */   getAddressFromAccount: function() { return /* binding */ Vt; },\n/* harmony export */   getAddressesFromAccounts: function() { return /* binding */ Vr; },\n/* harmony export */   getAppId: function() { return /* binding */ Jr; },\n/* harmony export */   getAppMetadata: function() { return /* binding */ Yr; },\n/* harmony export */   getBrowserOnlineStatus: function() { return /* binding */ Ur; },\n/* harmony export */   getChainFromAccount: function() { return /* binding */ Ht; },\n/* harmony export */   getChainsFromAccounts: function() { return /* binding */ Kt; },\n/* harmony export */   getChainsFromNamespace: function() { return /* binding */ Le; },\n/* harmony export */   getChainsFromNamespaces: function() { return /* binding */ Kr; },\n/* harmony export */   getChainsFromRecap: function() { return /* binding */ os; },\n/* harmony export */   getChainsFromRequiredNamespaces: function() { return /* binding */ Fr; },\n/* harmony export */   getCommonValuesInArrays: function() { return /* binding */ nt; },\n/* harmony export */   getCryptoKeyFromKeyData: function() { return /* binding */ or; },\n/* harmony export */   getDecodedRecapFromResources: function() { return /* binding */ An; },\n/* harmony export */   getDeepLink: function() { return /* binding */ mo; },\n/* harmony export */   getDidAddress: function() { return /* binding */ ut; },\n/* harmony export */   getDidAddressSegments: function() { return /* binding */ ke; },\n/* harmony export */   getDidChainId: function() { return /* binding */ xn; },\n/* harmony export */   getEnvironment: function() { return /* binding */ ue; },\n/* harmony export */   getHttpUrl: function() { return /* binding */ Qr; },\n/* harmony export */   getInternalError: function() { return /* binding */ te; },\n/* harmony export */   getJavascriptID: function() { return /* binding */ Jt; },\n/* harmony export */   getJavascriptOS: function() { return /* binding */ zt; },\n/* harmony export */   getLastItems: function() { return /* binding */ Zt; },\n/* harmony export */   getLinkModeURL: function() { return /* binding */ Ei; },\n/* harmony export */   getMethodsFromRecap: function() { return /* binding */ rs; },\n/* harmony export */   getNamespacedDidChainId: function() { return /* binding */ On; },\n/* harmony export */   getNamespacesChains: function() { return /* binding */ lr; },\n/* harmony export */   getNamespacesEventsForChainId: function() { return /* binding */ hr; },\n/* harmony export */   getNamespacesFromAccounts: function() { return /* binding */ gr; },\n/* harmony export */   getNamespacesMethodsForChainId: function() { return /* binding */ dr; },\n/* harmony export */   getNodeOnlineStatus: function() { return /* binding */ Tr; },\n/* harmony export */   getReCapActions: function() { return /* binding */ Sn; },\n/* harmony export */   getReactNativeOnlineStatus: function() { return /* binding */ _r; },\n/* harmony export */   getRecapAbilitiesFromResource: function() { return /* binding */ es; },\n/* harmony export */   getRecapFromResources: function() { return /* binding */ Me; },\n/* harmony export */   getRecapResource: function() { return /* binding */ Nn; },\n/* harmony export */   getRelayClientMetadata: function() { return /* binding */ Xr; },\n/* harmony export */   getRelayProtocolApi: function() { return /* binding */ mi; },\n/* harmony export */   getRelayProtocolName: function() { return /* binding */ yi; },\n/* harmony export */   getRequiredNamespacesFromNamespaces: function() { return /* binding */ Ui; },\n/* harmony export */   getSdkError: function() { return /* binding */ de; },\n/* harmony export */   getSearchParamFromURL: function() { return /* binding */ bo; },\n/* harmony export */   getUniqueValues: function() { return /* binding */ Ze; },\n/* harmony export */   handleDeeplinkRedirect: function() { return /* binding */ yo; },\n/* harmony export */   hasOverlap: function() { return /* binding */ re; },\n/* harmony export */   hashEthereumMessage: function() { return /* binding */ ct; },\n/* harmony export */   hashKey: function() { return /* binding */ oi; },\n/* harmony export */   hashMessage: function() { return /* binding */ si; },\n/* harmony export */   isAndroid: function() { return /* binding */ Wr; },\n/* harmony export */   isBrowser: function() { return /* binding */ Ae; },\n/* harmony export */   isCaipNamespace: function() { return /* binding */ Tt; },\n/* harmony export */   isConformingNamespaces: function() { return /* binding */ Nr; },\n/* harmony export */   isExpired: function() { return /* binding */ po; },\n/* harmony export */   isIframe: function() { return /* binding */ rn; },\n/* harmony export */   isIos: function() { return /* binding */ zr; },\n/* harmony export */   isNode: function() { return /* binding */ et; },\n/* harmony export */   isOnline: function() { return /* binding */ Yi; },\n/* harmony export */   isProposalStruct: function() { return /* binding */ Pi; },\n/* harmony export */   isReactNative: function() { return /* binding */ ne; },\n/* harmony export */   isRecap: function() { return /* binding */ lt; },\n/* harmony export */   isSessionCompatible: function() { return /* binding */ $i; },\n/* harmony export */   isSessionStruct: function() { return /* binding */ Li; },\n/* harmony export */   isTelegram: function() { return /* binding */ nn; },\n/* harmony export */   isTestRun: function() { return /* binding */ Eo; },\n/* harmony export */   isTypeOneEnvelope: function() { return /* binding */ li; },\n/* harmony export */   isTypeTwoEnvelope: function() { return /* binding */ di; },\n/* harmony export */   isUndefined: function() { return /* binding */ ae; },\n/* harmony export */   isValidAccountId: function() { return /* binding */ br; },\n/* harmony export */   isValidAccounts: function() { return /* binding */ vr; },\n/* harmony export */   isValidActions: function() { return /* binding */ Or; },\n/* harmony export */   isValidArray: function() { return /* binding */ $e; },\n/* harmony export */   isValidChainId: function() { return /* binding */ Re; },\n/* harmony export */   isValidChains: function() { return /* binding */ wr; },\n/* harmony export */   isValidController: function() { return /* binding */ Bi; },\n/* harmony export */   isValidEip1271Signature: function() { return /* binding */ bn; },\n/* harmony export */   isValidEip191Signature: function() { return /* binding */ mn; },\n/* harmony export */   isValidErrorReason: function() { return /* binding */ Mi; },\n/* harmony export */   isValidEvent: function() { return /* binding */ Ki; },\n/* harmony export */   isValidId: function() { return /* binding */ ki; },\n/* harmony export */   isValidNamespaceAccounts: function() { return /* binding */ xr; },\n/* harmony export */   isValidNamespaceActions: function() { return /* binding */ Pt; },\n/* harmony export */   isValidNamespaceChains: function() { return /* binding */ Er; },\n/* harmony export */   isValidNamespaceMethodsOrEvents: function() { return /* binding */ Rt; },\n/* harmony export */   isValidNamespaces: function() { return /* binding */ Ir; },\n/* harmony export */   isValidNamespacesChainId: function() { return /* binding */ Fi; },\n/* harmony export */   isValidNamespacesEvent: function() { return /* binding */ Gi; },\n/* harmony export */   isValidNamespacesRequest: function() { return /* binding */ qi; },\n/* harmony export */   isValidNumber: function() { return /* binding */ Ge; },\n/* harmony export */   isValidObject: function() { return /* binding */ qe; },\n/* harmony export */   isValidParams: function() { return /* binding */ Di; },\n/* harmony export */   isValidRecap: function() { return /* binding */ Y; },\n/* harmony export */   isValidRelay: function() { return /* binding */ Ar; },\n/* harmony export */   isValidRelays: function() { return /* binding */ Ci; },\n/* harmony export */   isValidRequest: function() { return /* binding */ Vi; },\n/* harmony export */   isValidRequestExpiry: function() { return /* binding */ Ji; },\n/* harmony export */   isValidRequiredNamespaces: function() { return /* binding */ ji; },\n/* harmony export */   isValidResponse: function() { return /* binding */ Hi; },\n/* harmony export */   isValidString: function() { return /* binding */ q; },\n/* harmony export */   isValidUrl: function() { return /* binding */ Ri; },\n/* harmony export */   mapEntries: function() { return /* binding */ oo; },\n/* harmony export */   mapToObj: function() { return /* binding */ no; },\n/* harmony export */   mergeArrays: function() { return /* binding */ Q; },\n/* harmony export */   mergeEncodedRecaps: function() { return /* binding */ ns; },\n/* harmony export */   mergeRecaps: function() { return /* binding */ Rn; },\n/* harmony export */   normalizeNamespaces: function() { return /* binding */ $t; },\n/* harmony export */   objToMap: function() { return /* binding */ ro; },\n/* harmony export */   openDeeplink: function() { return /* binding */ tn; },\n/* harmony export */   parseAccountId: function() { return /* binding */ Xe; },\n/* harmony export */   parseChainId: function() { return /* binding */ Ye; },\n/* harmony export */   parseContextNames: function() { return /* binding */ Xt; },\n/* harmony export */   parseExpirerTarget: function() { return /* binding */ lo; },\n/* harmony export */   parseNamespaceKey: function() { return /* binding */ pr; },\n/* harmony export */   parseRelayParams: function() { return /* binding */ ir; },\n/* harmony export */   parseTopic: function() { return /* binding */ cr; },\n/* harmony export */   parseUri: function() { return /* binding */ bi; },\n/* harmony export */   populateAuthPayload: function() { return /* binding */ Zo; },\n/* harmony export */   recapHasResource: function() { return /* binding */ Qo; },\n/* harmony export */   serialize: function() { return /* binding */ _t; },\n/* harmony export */   sleep: function() { return /* binding */ vo; },\n/* harmony export */   subscribeToBrowserNetworkChange: function() { return /* binding */ $r; },\n/* harmony export */   subscribeToNetworkChange: function() { return /* binding */ Xi; },\n/* harmony export */   subscribeToReactNativeNetworkChange: function() { return /* binding */ Rr; },\n/* harmony export */   toBase64: function() { return /* binding */ on; },\n/* harmony export */   uuidv4: function() { return /* binding */ wo; },\n/* harmony export */   validateDecoding: function() { return /* binding */ fi; },\n/* harmony export */   validateEncoding: function() { return /* binding */ rr; },\n/* harmony export */   validateSignedCacao: function() { return /* binding */ Yo; },\n/* harmony export */   verifyP256Jwt: function() { return /* binding */ gi; },\n/* harmony export */   verifySignature: function() { return /* binding */ yn; }\n/* harmony export */ });\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! detect-browser */ \"(app-pages-browser)/./node_modules/detect-browser/es/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/window-getters */ \"(app-pages-browser)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/window-metadata */ \"(app-pages-browser)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js\");\n/* harmony import */ var _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/relay-auth */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/index.es.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! elliptic */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/relay-api */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-api/dist/index.es.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n\n\n\n\nconst Pe = \":\";\nfunction Ye(e) {\n    const [t, n] = e.split(Pe);\n    return {\n        namespace: t,\n        reference: n\n    };\n}\n_c = Ye;\nfunction Dt(e) {\n    const { namespace: t, reference: n } = e;\n    return [\n        t,\n        n\n    ].join(Pe);\n}\n_c1 = Dt;\nfunction Xe(e) {\n    const [t, n, r] = e.split(Pe);\n    return {\n        namespace: t,\n        reference: n,\n        address: r\n    };\n}\n_c2 = Xe;\nfunction Mt(e) {\n    const { namespace: t, reference: n, address: r } = e;\n    return [\n        t,\n        n,\n        r\n    ].join(Pe);\n}\n_c3 = Mt;\nfunction Ze(e, t) {\n    const n = [];\n    return e.forEach((r)=>{\n        const o = t(r);\n        n.includes(o) || n.push(o);\n    }), n;\n}\n_c4 = Ze;\nfunction Vt(e) {\n    const { address: t } = Xe(e);\n    return t;\n}\n_c5 = Vt;\nfunction Ht(e) {\n    const { namespace: t, reference: n } = Xe(e);\n    return Dt({\n        namespace: t,\n        reference: n\n    });\n}\n_c6 = Ht;\nfunction Mr(e, t) {\n    const { namespace: n, reference: r } = Ye(t);\n    return Mt({\n        namespace: n,\n        reference: r,\n        address: e\n    });\n}\n_c7 = Mr;\nfunction Vr(e) {\n    return Ze(e, Vt);\n}\n_c8 = Vr;\nfunction Kt(e) {\n    return Ze(e, Ht);\n}\n_c9 = Kt;\nfunction Hr(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const n = [];\n    return Object.keys(e).forEach((r)=>{\n        if (t.length && !t.includes(r)) return;\n        const o = e[r];\n        n.push(...o.accounts);\n    }), n;\n}\n_c10 = Hr;\nfunction Kr(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const n = [];\n    return Object.keys(e).forEach((r)=>{\n        if (t.length && !t.includes(r)) return;\n        const o = e[r];\n        n.push(...Kt(o.accounts));\n    }), n;\n}\n_c11 = Kr;\nfunction Fr(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const n = [];\n    return Object.keys(e).forEach((r)=>{\n        if (t.length && !t.includes(r)) return;\n        const o = e[r];\n        n.push(...Le(r, o));\n    }), n;\n}\n_c12 = Fr;\nfunction Le(e, t) {\n    return e.includes(\":\") ? [\n        e\n    ] : t.chains || [];\n}\n_c13 = Le;\nconst Ft = \"ReactNative\", H = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\"\n}, Be = \" \", qr = \":\", qt = \"/\", Qe = 2, Gr = 1e3, Gt = \"js\";\nfunction et() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction ne() {\n    return !(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && navigator.product === Ft;\n}\nfunction Wr() {\n    return ne() && typeof __webpack_require__.g < \"u\" && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Platform) < \"u\" && (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Platform.OS) === \"android\";\n}\n_c14 = Wr;\nfunction zr() {\n    return ne() && typeof __webpack_require__.g < \"u\" && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Platform) < \"u\" && (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Platform.OS) === \"ios\";\n}\nfunction Ae() {\n    return !et() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)();\n}\n_c15 = Ae;\nfunction ue() {\n    return ne() ? H.reactNative : et() ? H.node : Ae() ? H.browser : H.unknown;\n}\nfunction Jr() {\n    var e;\n    try {\n        return ne() && typeof __webpack_require__.g < \"u\" && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Application) < \"u\" ? (e = __webpack_require__.g.Application) == null ? void 0 : e.applicationId : void 0;\n    } catch (e) {\n        return;\n    }\n}\n_c16 = Jr;\nfunction Wt(e, t) {\n    const n = new URLSearchParams(e);\n    for (const r of Object.keys(t).sort())if (t.hasOwnProperty(r)) {\n        const o = t[r];\n        o !== void 0 && n.set(r, o);\n    }\n    return n.toString();\n}\n_c17 = Wt;\nfunction Yr() {\n    return (0,_walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__.getWindowMetadata)() || {\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        icons: [\n            \"\"\n        ]\n    };\n}\n_c18 = Yr;\nfunction Xr(e, t) {\n    var n;\n    const r = ue(), o = {\n        protocol: e,\n        version: t,\n        env: r\n    };\n    return r === \"browser\" && (o.host = ((n = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : n.host) || \"unknown\"), o;\n}\n_c19 = Xr;\nfunction zt() {\n    if (ue() === H.reactNative && typeof __webpack_require__.g < \"u\" && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Platform) < \"u\") {\n        const { OS: n, Version: r } = __webpack_require__.g.Platform;\n        return [\n            n,\n            r\n        ].join(\"-\");\n    }\n    const e = (0,detect_browser__WEBPACK_IMPORTED_MODULE_7__.detect)();\n    if (e === null) return \"unknown\";\n    const t = e.os ? e.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n    return e.type === \"browser\" ? [\n        t,\n        e.name,\n        e.version\n    ].join(\"-\") : [\n        t,\n        e.version\n    ].join(\"-\");\n}\nfunction Jt() {\n    var e;\n    const t = ue();\n    return t === H.browser ? [\n        t,\n        ((e = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : e.host) || \"unknown\"\n    ].join(\":\") : t;\n}\n_c20 = Jt;\nfunction Yt(e, t, n) {\n    const r = zt(), o = Jt();\n    return [\n        [\n            e,\n            t\n        ].join(\"-\"),\n        [\n            Gt,\n            n\n        ].join(\"-\"),\n        r,\n        o\n    ].join(\"/\");\n}\n_c21 = Yt;\nfunction Zr(param) {\n    let { protocol: e, version: t, relayUrl: n, sdkVersion: r, auth: o, projectId: s, useOnCloseEvent: i, bundleId: c, packageName: u } = param;\n    const a = n.split(\"?\"), l = Yt(e, t, r), f = {\n        auth: o,\n        ua: l,\n        projectId: s,\n        useOnCloseEvent: i || void 0,\n        packageName: u || void 0,\n        bundleId: c || void 0\n    }, d = Wt(a[1] || \"\", f);\n    return a[0] + \"?\" + d;\n}\n_c22 = Zr;\nfunction Qr(e) {\n    let t = (e.match(/^[^:]+(?=:\\/\\/)/gi) || [])[0];\n    const n = typeof t < \"u\" ? e.split(\"://\")[1] : e;\n    return t = t === \"wss\" ? \"https\" : \"http\", [\n        t,\n        n\n    ].join(\"://\");\n}\n_c23 = Qr;\nfunction eo(e, t, n) {\n    if (!e[t] || typeof e[t] !== n) throw new Error('Missing or invalid \"'.concat(t, '\" param'));\n}\nfunction Xt(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Qe;\n    return Zt(e.split(qt), t);\n}\n_c24 = Xt;\nfunction to(e) {\n    return Xt(e).join(Be);\n}\nfunction re(e, t) {\n    return e.filter((n)=>t.includes(n)).length === e.length;\n}\nfunction Zt(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Qe;\n    return e.slice(Math.max(e.length - t, 0));\n}\n_c25 = Zt;\nfunction no(e) {\n    return Object.fromEntries(e.entries());\n}\nfunction ro(e) {\n    return new Map(Object.entries(e));\n}\nfunction oo(e, t) {\n    const n = {};\n    return Object.keys(e).forEach((r)=>{\n        n[r] = t(e[r]);\n    }), n;\n}\nconst so = (e)=>e;\nfunction Qt(e) {\n    return e.trim().replace(/^\\w/, (t)=>t.toUpperCase());\n}\n_c26 = Qt;\nfunction io(e) {\n    return e.split(Be).map((t)=>Qt(t)).join(Be);\n}\nfunction co() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES, t = arguments.length > 1 ? arguments[1] : void 0;\n    const n = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e || _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES);\n    let r, o, s, i;\n    return {\n        resolve: (c)=>{\n            s && r && (clearTimeout(s), r(c), i = Promise.resolve(c));\n        },\n        reject: (c)=>{\n            s && o && (clearTimeout(s), o(c));\n        },\n        done: ()=>new Promise((c, u)=>{\n                if (i) return c(i);\n                s = setTimeout(()=>{\n                    const a = new Error(t);\n                    i = Promise.reject(a), u(a);\n                }, n), r = c, o = u;\n            })\n    };\n}\nfunction ao(e, t, n) {\n    return new Promise(async (r, o)=>{\n        const s = setTimeout(()=>o(new Error(n)), t);\n        try {\n            const i = await e;\n            r(i);\n        } catch (i) {\n            o(i);\n        }\n        clearTimeout(s);\n    });\n}\nfunction tt(e, t) {\n    if (typeof t == \"string\" && t.startsWith(\"\".concat(e, \":\"))) return t;\n    if (e.toLowerCase() === \"topic\") {\n        if (typeof t != \"string\") throw new Error('Value must be \"string\" for expirer target type: topic');\n        return \"topic:\".concat(t);\n    } else if (e.toLowerCase() === \"id\") {\n        if (typeof t != \"number\") throw new Error('Value must be \"number\" for expirer target type: id');\n        return \"id:\".concat(t);\n    }\n    throw new Error(\"Unknown expirer target type: \".concat(e));\n}\nfunction uo(e) {\n    return tt(\"topic\", e);\n}\nfunction fo(e) {\n    return tt(\"id\", e);\n}\nfunction lo(e) {\n    const [t, n] = e.split(\":\"), r = {\n        id: void 0,\n        topic: void 0\n    };\n    if (t === \"topic\" && typeof n == \"string\") r.topic = n;\n    else if (t === \"id\" && Number.isInteger(Number(n))) r.id = Number(n);\n    else throw new Error(\"Invalid target, expected id:number or topic:string, got \".concat(t, \":\").concat(n));\n    return r;\n}\nfunction ho(e, t) {\n    return (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.fromMiliseconds)((t || Date.now()) + (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e));\n}\nfunction po(e) {\n    return Date.now() >= (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e);\n}\nfunction go(e, t) {\n    return \"\".concat(e).concat(t ? \":\".concat(t) : \"\");\n}\nfunction Q() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    return [\n        ...new Set([\n            ...e,\n            ...t\n        ])\n    ];\n}\n_c27 = Q;\nasync function yo(param) {\n    let { id: e, topic: t, wcDeepLink: n } = param;\n    var r;\n    try {\n        if (!n) return;\n        const o = typeof n == \"string\" ? JSON.parse(n) : n, s = o === null || o === void 0 ? void 0 : o.href;\n        if (typeof s != \"string\") return;\n        const i = en(s, e, t), c = ue();\n        if (c === H.browser) {\n            if (!((r = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)()) != null && r.hasFocus())) {\n                console.warn(\"Document does not have focus, skipping deeplink.\");\n                return;\n            }\n            tn(i);\n        } else c === H.reactNative && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Linking) < \"u\" && await __webpack_require__.g.Linking.openURL(i);\n    } catch (o) {\n        console.error(o);\n    }\n}\nfunction en(e, t, n) {\n    const r = \"requestId=\".concat(t, \"&sessionTopic=\").concat(n);\n    e.endsWith(\"/\") && (e = e.slice(0, -1));\n    let o = \"\".concat(e);\n    if (e.startsWith(\"https://t.me\")) {\n        const s = e.includes(\"?\") ? \"&startapp=\" : \"?startapp=\";\n        o = \"\".concat(o).concat(s).concat(on(r, !0));\n    } else o = \"\".concat(o, \"/wc?\").concat(r);\n    return o;\n}\nfunction tn(e) {\n    let t = \"_self\";\n    rn() ? t = \"_top\" : (nn() || e.startsWith(\"https://\") || e.startsWith(\"http://\")) && (t = \"_blank\"), window.open(e, t, \"noreferrer noopener\");\n}\nasync function mo(e, t) {\n    let n = \"\";\n    try {\n        if (Ae() && (n = localStorage.getItem(t), n)) return n;\n        n = await e.getItem(t);\n    } catch (r) {\n        console.error(r);\n    }\n    return n;\n}\nfunction nt(e, t) {\n    return e.filter((n)=>t.includes(n));\n}\nfunction bo(e, t) {\n    if (!e.includes(t)) return null;\n    const n = e.split(/([&,?,=])/), r = n.indexOf(t);\n    return n[r + 2];\n}\nfunction wo() {\n    return typeof crypto < \"u\" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/gu, (e)=>{\n        const t = Math.random() * 16 | 0;\n        return (e === \"x\" ? t : t & 3 | 8).toString(16);\n    });\n}\nfunction Eo() {\n    return typeof process < \"u\" && process.env.IS_VITEST === \"true\";\n}\n_c28 = Eo;\nfunction nn() {\n    return  true && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);\n}\nfunction rn() {\n    try {\n        return window.self !== window.top;\n    } catch (e) {\n        return !1;\n    }\n}\nfunction on(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n    const n = Buffer.from(e).toString(\"base64\");\n    return t ? n.replace(/[=]/g, \"\") : n;\n}\nfunction rt(e) {\n    return Buffer.from(e, \"base64\").toString(\"utf-8\");\n}\nfunction vo(e) {\n    return new Promise((t)=>setTimeout(t, e));\n}\nfunction Ne(e) {\n    if (!Number.isSafeInteger(e) || e < 0) throw new Error(\"positive integer expected, got \" + e);\n}\n_c29 = Ne;\nfunction xo(e) {\n    return e instanceof Uint8Array || ArrayBuffer.isView(e) && e.constructor.name === \"Uint8Array\";\n}\nfunction je(e) {\n    for(var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        t[_key - 1] = arguments[_key];\n    }\n    if (!xo(e)) throw new Error(\"Uint8Array expected\");\n    if (t.length > 0 && !t.includes(e.length)) throw new Error(\"Uint8Array expected of length \" + t + \", got length=\" + e.length);\n}\nfunction ot(e) {\n    if (typeof e != \"function\" || typeof e.create != \"function\") throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");\n    Ne(e.outputLen), Ne(e.blockLen);\n}\nfunction me(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n    if (e.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (t && e.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nfunction sn(e, t) {\n    je(e);\n    const n = t.outputLen;\n    if (e.length < n) throw new Error(\"digestInto() expects output buffer of length at least \" + n);\n}\nconst Ce = BigInt(2 ** 32 - 1), cn = BigInt(32);\nfunction Oo(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n    return t ? {\n        h: Number(e & Ce),\n        l: Number(e >> cn & Ce)\n    } : {\n        h: Number(e >> cn & Ce) | 0,\n        l: Number(e & Ce) | 0\n    };\n}\n_c30 = Oo;\nfunction Io(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n    let n = new Uint32Array(e.length), r = new Uint32Array(e.length);\n    for(let o = 0; o < e.length; o++){\n        const { h: s, l: i } = Oo(e[o], t);\n        [n[o], r[o]] = [\n            s,\n            i\n        ];\n    }\n    return [\n        n,\n        r\n    ];\n}\n_c31 = Io;\nconst Ao = (e, t, n)=>e << n | t >>> 32 - n, No = (e, t, n)=>t << n | e >>> 32 - n, So = (e, t, n)=>t << n - 32 | e >>> 64 - n, Uo = (e, t, n)=>e << n - 32 | t >>> 64 - n, be = typeof globalThis == \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0;\nfunction _o(e) {\n    return new Uint32Array(e.buffer, e.byteOffset, Math.floor(e.byteLength / 4));\n}\nfunction st(e) {\n    return new DataView(e.buffer, e.byteOffset, e.byteLength);\n}\nfunction J(e, t) {\n    return e << 32 - t | e >>> t;\n}\n_c32 = J;\nconst an = new Uint8Array(new Uint32Array([\n    287454020\n]).buffer)[0] === 68;\nfunction To(e) {\n    return e << 24 & 4278190080 | e << 8 & 16711680 | e >>> 8 & 65280 | e >>> 24 & 255;\n}\n_c33 = To;\nfunction un(e) {\n    for(let t = 0; t < e.length; t++)e[t] = To(e[t]);\n}\nfunction $o(e) {\n    if (typeof e != \"string\") throw new Error(\"utf8ToBytes expected string, got \" + typeof e);\n    return new Uint8Array(new TextEncoder().encode(e));\n}\nfunction we(e) {\n    return typeof e == \"string\" && (e = $o(e)), je(e), e;\n}\nclass it {\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction fn(e) {\n    const t = (r)=>e().update(we(r)).digest(), n = e();\n    return t.outputLen = n.outputLen, t.blockLen = n.blockLen, t.create = ()=>e(), t;\n}\nfunction Se() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 32;\n    if (be && typeof be.getRandomValues == \"function\") return be.getRandomValues(new Uint8Array(e));\n    if (be && typeof be.randomBytes == \"function\") return be.randomBytes(e);\n    throw new Error(\"crypto.getRandomValues must be defined\");\n}\n_c34 = Se;\nconst ln = [], dn = [], hn = [], Ro = BigInt(0), Ue = BigInt(1), Po = BigInt(2), Lo = BigInt(7), Bo = BigInt(256), jo = BigInt(113);\nfor(let e = 0, t = Ue, n = 1, r = 0; e < 24; e++){\n    [n, r] = [\n        r,\n        (2 * n + 3 * r) % 5\n    ], ln.push(2 * (5 * r + n)), dn.push((e + 1) * (e + 2) / 2 % 64);\n    let o = Ro;\n    for(let s = 0; s < 7; s++)t = (t << Ue ^ (t >> Lo) * jo) % Bo, t & Po && (o ^= Ue << (Ue << BigInt(s)) - Ue);\n    hn.push(o);\n}\nconst [Co, ko] = Io(hn, !0), pn = (e, t, n)=>n > 32 ? So(e, t, n) : Ao(e, t, n), gn = (e, t, n)=>n > 32 ? Uo(e, t, n) : No(e, t, n);\nfunction Do(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 24;\n    const n = new Uint32Array(10);\n    for(let r = 24 - t; r < 24; r++){\n        for(let i = 0; i < 10; i++)n[i] = e[i] ^ e[i + 10] ^ e[i + 20] ^ e[i + 30] ^ e[i + 40];\n        for(let i = 0; i < 10; i += 2){\n            const c = (i + 8) % 10, u = (i + 2) % 10, a = n[u], l = n[u + 1], f = pn(a, l, 1) ^ n[c], d = gn(a, l, 1) ^ n[c + 1];\n            for(let g = 0; g < 50; g += 10)e[i + g] ^= f, e[i + g + 1] ^= d;\n        }\n        let o = e[2], s = e[3];\n        for(let i = 0; i < 24; i++){\n            const c = dn[i], u = pn(o, s, c), a = gn(o, s, c), l = ln[i];\n            o = e[l], s = e[l + 1], e[l] = u, e[l + 1] = a;\n        }\n        for(let i = 0; i < 50; i += 10){\n            for(let c = 0; c < 10; c++)n[c] = e[i + c];\n            for(let c = 0; c < 10; c++)e[i + c] ^= ~n[(c + 2) % 10] & n[(c + 4) % 10];\n        }\n        e[0] ^= Co[r], e[1] ^= ko[r];\n    }\n    n.fill(0);\n}\n_c35 = Do;\nclass Bt extends it {\n    keccak() {\n        an || un(this.state32), Do(this.state32, this.rounds), an || un(this.state32), this.posOut = 0, this.pos = 0;\n    }\n    update(t) {\n        me(this);\n        const { blockLen: n, state: r } = this;\n        t = we(t);\n        const o = t.length;\n        for(let s = 0; s < o;){\n            const i = Math.min(n - this.pos, o - s);\n            for(let c = 0; c < i; c++)r[this.pos++] ^= t[s++];\n            this.pos === n && this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished) return;\n        this.finished = !0;\n        const { state: t, suffix: n, pos: r, blockLen: o } = this;\n        t[r] ^= n, (n & 128) !== 0 && r === o - 1 && this.keccak(), t[o - 1] ^= 128, this.keccak();\n    }\n    writeInto(t) {\n        me(this, !1), je(t), this.finish();\n        const n = this.state, { blockLen: r } = this;\n        for(let o = 0, s = t.length; o < s;){\n            this.posOut >= r && this.keccak();\n            const i = Math.min(r - this.posOut, s - o);\n            t.set(n.subarray(this.posOut, this.posOut + i), o), this.posOut += i, o += i;\n        }\n        return t;\n    }\n    xofInto(t) {\n        if (!this.enableXOF) throw new Error(\"XOF is not possible for this instance\");\n        return this.writeInto(t);\n    }\n    xof(t) {\n        return Ne(t), this.xofInto(new Uint8Array(t));\n    }\n    digestInto(t) {\n        if (sn(t, this), this.finished) throw new Error(\"digest() was already called\");\n        return this.writeInto(t), this.destroy(), t;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = !0, this.state.fill(0);\n    }\n    _cloneInto(t) {\n        const { blockLen: n, suffix: r, outputLen: o, rounds: s, enableXOF: i } = this;\n        return t || (t = new Bt(n, r, o, i, s)), t.state32.set(this.state32), t.pos = this.pos, t.posOut = this.posOut, t.finished = this.finished, t.rounds = s, t.suffix = r, t.outputLen = o, t.enableXOF = i, t.destroyed = this.destroyed, t;\n    }\n    constructor(t, n, r, o = !1, s = 24){\n        if (super(), this.blockLen = t, this.suffix = n, this.outputLen = r, this.enableXOF = o, this.rounds = s, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, Ne(r), 0 >= this.blockLen || this.blockLen >= 200) throw new Error(\"Sha3 supports only keccak-f1600 function\");\n        this.state = new Uint8Array(200), this.state32 = _o(this.state);\n    }\n}\nconst Mo = (e, t, n)=>fn(()=>new Bt(t, e, n)), Vo = Mo(1, 136, 256 / 8), Ho = \"https://rpc.walletconnect.org/v1\";\nfunction ct(e) {\n    const t = \"\\x19Ethereum Signed Message:\\n\".concat(e.length), n = new TextEncoder().encode(t + e);\n    return \"0x\" + Buffer.from(Vo(n)).toString(\"hex\");\n}\nasync function yn(e, t, n, r, o, s) {\n    switch(n.t){\n        case \"eip191\":\n            return await mn(e, t, n.s);\n        case \"eip1271\":\n            return await bn(e, t, n.s, r, o, s);\n        default:\n            throw new Error(\"verifySignature failed: Attempted to verify CacaoSignature with unknown type: \".concat(n.t));\n    }\n}\nasync function mn(e, t, n) {\n    return (await (0,viem__WEBPACK_IMPORTED_MODULE_8__.recoverAddress)({\n        hash: ct(t),\n        signature: n\n    })).toLowerCase() === e.toLowerCase();\n}\nasync function bn(e, t, n, r, o, s) {\n    const i = Ye(r);\n    if (!i.namespace || !i.reference) throw new Error(\"isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: \".concat(r));\n    try {\n        const c = \"0x1626ba7e\", u = \"0000000000000000000000000000000000000000000000000000000000000040\", a = \"0000000000000000000000000000000000000000000000000000000000000041\", l = n.substring(2), f = ct(t).substring(2), d = c + f + u + a + l, g = await fetch(\"\".concat(s || Ho, \"/?chainId=\").concat(r, \"&projectId=\").concat(o), {\n            method: \"POST\",\n            body: JSON.stringify({\n                id: Ko(),\n                jsonrpc: \"2.0\",\n                method: \"eth_call\",\n                params: [\n                    {\n                        to: e,\n                        data: d\n                    },\n                    \"latest\"\n                ]\n            })\n        }), { result: y } = await g.json();\n        return y ? y.slice(0, c.length).toLowerCase() === c.toLowerCase() : !1;\n    } catch (c) {\n        return console.error(\"isValidEip1271Signature: \", c), !1;\n    }\n}\nfunction Ko() {\n    return Date.now() + Math.floor(Math.random() * 1e3);\n}\n_c36 = Ko;\nvar Fo = Object.defineProperty, qo = Object.defineProperties, Go = Object.getOwnPropertyDescriptors, wn = Object.getOwnPropertySymbols, Wo = Object.prototype.hasOwnProperty, zo = Object.prototype.propertyIsEnumerable, En = (e, t, n)=>t in e ? Fo(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: n\n    }) : e[t] = n, at = (e, t)=>{\n    for(var n in t || (t = {}))Wo.call(t, n) && En(e, n, t[n]);\n    if (wn) for (var n of wn(t))zo.call(t, n) && En(e, n, t[n]);\n    return e;\n}, vn = (e, t)=>qo(e, Go(t));\nconst Jo = \"did:pkh:\", ke = (e)=>e === null || e === void 0 ? void 0 : e.split(\":\"), xn = (e)=>{\n    const t = e && ke(e);\n    if (t) return e.includes(Jo) ? t[3] : t[1];\n}, On = (e)=>{\n    const t = e && ke(e);\n    if (t) return t[2] + \":\" + t[3];\n}, ut = (e)=>{\n    const t = e && ke(e);\n    if (t) return t.pop();\n};\nasync function Yo(e) {\n    const { cacao: t, projectId: n } = e, { s: r, p: o } = t, s = In(o, o.iss), i = ut(o.iss);\n    return await yn(i, s, r, On(o.iss), n);\n}\n_c37 = Yo;\nconst In = (e, t)=>{\n    const n = \"\".concat(e.domain, \" wants you to sign in with your Ethereum account:\"), r = ut(t);\n    if (!e.aud && !e.uri) throw new Error(\"Either `aud` or `uri` is required to construct the message\");\n    let o = e.statement || void 0;\n    const s = \"URI: \".concat(e.aud || e.uri), i = \"Version: \".concat(e.version), c = \"Chain ID: \".concat(xn(t)), u = \"Nonce: \".concat(e.nonce), a = \"Issued At: \".concat(e.iat), l = e.exp ? \"Expiration Time: \".concat(e.exp) : void 0, f = e.nbf ? \"Not Before: \".concat(e.nbf) : void 0, d = e.requestId ? \"Request ID: \".concat(e.requestId) : void 0, g = e.resources ? \"Resources:\".concat(e.resources.map((h)=>\"\\n- \".concat(h)).join(\"\")) : void 0, y = Me(e.resources);\n    if (y) {\n        const h = oe(y);\n        o = dt(o, h);\n    }\n    return [\n        n,\n        r,\n        \"\",\n        o,\n        \"\",\n        s,\n        i,\n        c,\n        u,\n        a,\n        l,\n        f,\n        d,\n        g\n    ].filter((h)=>h != null).join(\"\\n\");\n};\n_c38 = In;\nfunction Xo(e, t, n) {\n    return n.includes(\"did:pkh:\") || (n = \"did:pkh:\".concat(n)), {\n        h: {\n            t: \"caip122\"\n        },\n        p: {\n            iss: n,\n            domain: e.domain,\n            aud: e.aud,\n            version: e.version,\n            nonce: e.nonce,\n            iat: e.iat,\n            statement: e.statement,\n            requestId: e.requestId,\n            resources: e.resources,\n            nbf: e.nbf,\n            exp: e.exp\n        },\n        s: t\n    };\n}\n_c39 = Xo;\nfunction Zo(e) {\n    var t;\n    const { authPayload: n, chains: r, methods: o } = e, s = n.statement || \"\";\n    if (!(r != null && r.length)) return n;\n    const i = n.chains, c = nt(i, r);\n    if (!(c != null && c.length)) throw new Error(\"No supported chains\");\n    const u = An(n.resources);\n    if (!u) return n;\n    Y(u);\n    const a = Nn(u, \"eip155\");\n    let l = (n === null || n === void 0 ? void 0 : n.resources) || [];\n    if (a != null && a.length) {\n        const f = Sn(a), d = nt(f, o);\n        if (!(d != null && d.length)) throw new Error(\"Supported methods don't satisfy the requested: \".concat(JSON.stringify(f), \", supported: \").concat(JSON.stringify(o)));\n        const g = ft(\"request\", d, {\n            chains: c\n        }), y = $n(u, \"eip155\", g);\n        l = ((t = n === null || n === void 0 ? void 0 : n.resources) == null ? void 0 : t.slice(0, -1)) || [], l.push(De(y));\n    }\n    return vn(at({}, n), {\n        statement: Pn(s, Me(l)),\n        chains: c,\n        resources: n != null && n.resources || l.length > 0 ? l : void 0\n    });\n}\n_c40 = Zo;\nfunction An(e) {\n    const t = Me(e);\n    if (t && lt(t)) return oe(t);\n}\n_c41 = An;\nfunction Qo(e, t) {\n    var n;\n    return (n = e === null || e === void 0 ? void 0 : e.att) == null ? void 0 : n.hasOwnProperty(t);\n}\n_c42 = Qo;\nfunction Nn(e, t) {\n    var n, r;\n    return (n = e === null || e === void 0 ? void 0 : e.att) != null && n[t] ? Object.keys((r = e === null || e === void 0 ? void 0 : e.att) == null ? void 0 : r[t]) : [];\n}\n_c43 = Nn;\nfunction es(e) {\n    return (e === null || e === void 0 ? void 0 : e.map((t)=>Object.keys(t))) || [];\n}\nfunction Sn(e) {\n    return (e === null || e === void 0 ? void 0 : e.map((t)=>{\n        var n;\n        return (n = t.split(\"/\")) == null ? void 0 : n[1];\n    })) || [];\n}\n_c44 = Sn;\nfunction Un(e) {\n    return Buffer.from(JSON.stringify(e)).toString(\"base64\");\n}\n_c45 = Un;\nfunction _n(e) {\n    return JSON.parse(Buffer.from(e, \"base64\").toString(\"utf-8\"));\n}\nfunction Y(e) {\n    if (!e) throw new Error(\"No recap provided, value is undefined\");\n    if (!e.att) throw new Error(\"No `att` property found\");\n    const t = Object.keys(e.att);\n    if (!(t != null && t.length)) throw new Error(\"No resources found in `att` property\");\n    t.forEach((n)=>{\n        const r = e.att[n];\n        if (Array.isArray(r)) throw new Error(\"Resource must be an object: \".concat(n));\n        if (typeof r != \"object\") throw new Error(\"Resource must be an object: \".concat(n));\n        if (!Object.keys(r).length) throw new Error(\"Resource object is empty: \".concat(n));\n        Object.keys(r).forEach((o)=>{\n            const s = r[o];\n            if (!Array.isArray(s)) throw new Error(\"Ability limits \".concat(o, \" must be an array of objects, found: \").concat(s));\n            if (!s.length) throw new Error(\"Value of \".concat(o, \" is empty array, must be an array with objects\"));\n            s.forEach((i)=>{\n                if (typeof i != \"object\") throw new Error(\"Ability limits (\".concat(o, \") must be an array of objects, found: \").concat(i));\n            });\n        });\n    });\n}\n_c46 = Y;\nfunction Tn(e, t, n) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    return n === null || n === void 0 ? void 0 : n.sort((o, s)=>o.localeCompare(s)), {\n        att: {\n            [e]: ft(t, n, r)\n        }\n    };\n}\n_c47 = Tn;\nfunction $n(e, t, n) {\n    var r;\n    e.att[t] = at({}, n);\n    const o = (r = Object.keys(e.att)) == null ? void 0 : r.sort((i, c)=>i.localeCompare(c)), s = {\n        att: {}\n    };\n    return o.reduce((i, c)=>(i.att[c] = e.att[c], i), s);\n}\nfunction ft(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    t = t === null || t === void 0 ? void 0 : t.sort((o, s)=>o.localeCompare(s));\n    const r = t.map((o)=>({\n            [\"\".concat(e, \"/\").concat(o)]: [\n                n\n            ]\n        }));\n    return Object.assign({}, ...r);\n}\nfunction De(e) {\n    return Y(e), \"urn:recap:\".concat(Un(e).replace(/=/g, \"\"));\n}\n_c48 = De;\nfunction oe(e) {\n    const t = _n(e.replace(\"urn:recap:\", \"\"));\n    return Y(t), t;\n}\nfunction ts(e, t, n) {\n    const r = Tn(e, t, n);\n    return De(r);\n}\nfunction lt(e) {\n    return e && e.includes(\"urn:recap:\");\n}\nfunction ns(e, t) {\n    const n = oe(e), r = oe(t), o = Rn(n, r);\n    return De(o);\n}\nfunction Rn(e, t) {\n    Y(e), Y(t);\n    const n = Object.keys(e.att).concat(Object.keys(t.att)).sort((o, s)=>o.localeCompare(s)), r = {\n        att: {}\n    };\n    return n.forEach((o)=>{\n        var s, i;\n        Object.keys(((s = e.att) == null ? void 0 : s[o]) || {}).concat(Object.keys(((i = t.att) == null ? void 0 : i[o]) || {})).sort((c, u)=>c.localeCompare(u)).forEach((c)=>{\n            var u, a;\n            r.att[o] = vn(at({}, r.att[o]), {\n                [c]: ((u = e.att[o]) == null ? void 0 : u[c]) || ((a = t.att[o]) == null ? void 0 : a[c])\n            });\n        });\n    }), r;\n}\n_c49 = Rn;\nfunction dt() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", t = arguments.length > 1 ? arguments[1] : void 0;\n    Y(t);\n    const n = \"I further authorize the stated URI to perform the following actions on my behalf: \";\n    if (e.includes(n)) return e;\n    const r = [];\n    let o = 0;\n    Object.keys(t.att).forEach((c)=>{\n        const u = Object.keys(t.att[c]).map((f)=>({\n                ability: f.split(\"/\")[0],\n                action: f.split(\"/\")[1]\n            }));\n        u.sort((f, d)=>f.action.localeCompare(d.action));\n        const a = {};\n        u.forEach((f)=>{\n            a[f.ability] || (a[f.ability] = []), a[f.ability].push(f.action);\n        });\n        const l = Object.keys(a).map((f)=>(o++, \"(\".concat(o, \") '\").concat(f, \"': '\").concat(a[f].join(\"', '\"), \"' for '\").concat(c, \"'.\")));\n        r.push(l.join(\", \").replace(\".,\", \".\"));\n    });\n    const s = r.join(\" \"), i = \"\".concat(n).concat(s);\n    return \"\".concat(e ? e + \" \" : \"\").concat(i);\n}\nfunction rs(e) {\n    var t;\n    const n = oe(e);\n    Y(n);\n    const r = (t = n.att) == null ? void 0 : t.eip155;\n    return r ? Object.keys(r).map((o)=>o.split(\"/\")[1]) : [];\n}\nfunction os(e) {\n    const t = oe(e);\n    Y(t);\n    const n = [];\n    return Object.values(t.att).forEach((r)=>{\n        Object.values(r).forEach((o)=>{\n            var s;\n            (s = o === null || o === void 0 ? void 0 : o[0]) != null && s.chains && n.push(o[0].chains);\n        });\n    }), [\n        ...new Set(n.flat())\n    ];\n}\nfunction Pn(e, t) {\n    if (!t) return e;\n    const n = oe(t);\n    return Y(n), dt(e, n);\n}\n_c50 = Pn;\nfunction Me(e) {\n    if (!e) return;\n    const t = e === null || e === void 0 ? void 0 : e[e.length - 1];\n    return lt(t) ? t : void 0;\n}\n_c51 = Me;\nfunction ht(e) {\n    if (!Number.isSafeInteger(e) || e < 0) throw new Error(\"positive integer expected, got \" + e);\n}\nfunction Ln(e) {\n    return e instanceof Uint8Array || ArrayBuffer.isView(e) && e.constructor.name === \"Uint8Array\";\n}\n_c52 = Ln;\nfunction F(e) {\n    for(var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        t[_key - 1] = arguments[_key];\n    }\n    if (!Ln(e)) throw new Error(\"Uint8Array expected\");\n    if (t.length > 0 && !t.includes(e.length)) throw new Error(\"Uint8Array expected of length \" + t + \", got length=\" + e.length);\n}\n_c53 = F;\nfunction Bn(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n    if (e.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (t && e.finished) throw new Error(\"Hash#digest() has already been called\");\n}\n_c54 = Bn;\nfunction ss(e, t) {\n    F(e);\n    const n = t.outputLen;\n    if (e.length < n) throw new Error(\"digestInto() expects output buffer of length at least \" + n);\n}\nfunction jn(e) {\n    if (typeof e != \"boolean\") throw new Error(\"boolean expected, not \".concat(e));\n}\nconst se = (e)=>new Uint32Array(e.buffer, e.byteOffset, Math.floor(e.byteLength / 4)), is = (e)=>new DataView(e.buffer, e.byteOffset, e.byteLength), cs = new Uint8Array(new Uint32Array([\n    287454020\n]).buffer)[0] === 68;\nif (!cs) throw new Error(\"Non little-endian hardware is not supported\");\nfunction as(e) {\n    if (typeof e != \"string\") throw new Error(\"string expected\");\n    return new Uint8Array(new TextEncoder().encode(e));\n}\nfunction pt(e) {\n    if (typeof e == \"string\") e = as(e);\n    else if (Ln(e)) e = gt(e);\n    else throw new Error(\"Uint8Array expected, got \" + typeof e);\n    return e;\n}\nfunction us(e, t) {\n    if (t == null || typeof t != \"object\") throw new Error(\"options must be defined\");\n    return Object.assign(e, t);\n}\nfunction fs(e, t) {\n    if (e.length !== t.length) return !1;\n    let n = 0;\n    for(let r = 0; r < e.length; r++)n |= e[r] ^ t[r];\n    return n === 0;\n}\nconst ls = (e, t)=>{\n    function n(r) {\n        for(var _len = arguments.length, o = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            o[_key - 1] = arguments[_key];\n        }\n        if (F(r), e.nonceLength !== void 0) {\n            const l = o[0];\n            if (!l) throw new Error(\"nonce / iv required\");\n            e.varSizeNonce ? F(l) : F(l, e.nonceLength);\n        }\n        const s = e.tagLength;\n        s && o[1] !== void 0 && F(o[1]);\n        const i = t(r, ...o), c = (l, f)=>{\n            if (f !== void 0) {\n                if (l !== 2) throw new Error(\"cipher output not supported\");\n                F(f);\n            }\n        };\n        let u = !1;\n        return {\n            encrypt (l, f) {\n                if (u) throw new Error(\"cannot encrypt() twice with same key + nonce\");\n                return u = !0, F(l), c(i.encrypt.length, f), i.encrypt(l, f);\n            },\n            decrypt (l, f) {\n                if (F(l), s && l.length < s) throw new Error(\"invalid ciphertext length: smaller than tagLength=\" + s);\n                return c(i.decrypt.length, f), i.decrypt(l, f);\n            }\n        };\n    }\n    return Object.assign(n, e), n;\n};\nfunction Cn(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;\n    if (t === void 0) return new Uint8Array(e);\n    if (t.length !== e) throw new Error(\"invalid output length, expected \" + e + \", got: \" + t.length);\n    if (n && !ds(t)) throw new Error(\"invalid output, must be aligned\");\n    return t;\n}\n_c55 = Cn;\nfunction kn(e, t, n, r) {\n    if (typeof e.setBigUint64 == \"function\") return e.setBigUint64(t, n, r);\n    const o = BigInt(32), s = BigInt(4294967295), i = Number(n >> o & s), c = Number(n & s), u = r ? 4 : 0, a = r ? 0 : 4;\n    e.setUint32(t + u, i, r), e.setUint32(t + a, c, r);\n}\nfunction ds(e) {\n    return e.byteOffset % 4 === 0;\n}\nfunction gt(e) {\n    return Uint8Array.from(e);\n}\nfunction Ee() {\n    for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n        e[_key] = arguments[_key];\n    }\n    for(let t = 0; t < e.length; t++)e[t].fill(0);\n}\n_c56 = Ee;\nconst Dn = (e)=>Uint8Array.from(e.split(\"\").map((t)=>t.charCodeAt(0))), hs = Dn(\"expand 16-byte k\"), ps = Dn(\"expand 32-byte k\"), gs = se(hs), ys = se(ps);\nfunction x(e, t) {\n    return e << t | e >>> 32 - t;\n}\nfunction yt(e) {\n    return e.byteOffset % 4 === 0;\n}\nconst Ve = 64, ms = 16, Mn = 2 ** 32 - 1, Vn = new Uint32Array;\nfunction bs(e, t, n, r, o, s, i, c) {\n    const u = o.length, a = new Uint8Array(Ve), l = se(a), f = yt(o) && yt(s), d = f ? se(o) : Vn, g = f ? se(s) : Vn;\n    for(let y = 0; y < u; i++){\n        if (e(t, n, r, l, i, c), i >= Mn) throw new Error(\"arx: counter overflow\");\n        const h = Math.min(Ve, u - y);\n        if (f && h === Ve) {\n            const m = y / 4;\n            if (y % 4 !== 0) throw new Error(\"arx: invalid block position\");\n            for(let B = 0, b; B < ms; B++)b = m + B, g[b] = d[b] ^ l[B];\n            y += Ve;\n            continue;\n        }\n        for(let m = 0, B; m < h; m++)B = y + m, s[B] = o[B] ^ a[m];\n        y += h;\n    }\n}\nfunction ws(e, t) {\n    const { allowShortKeys: n, extendNonceFn: r, counterLength: o, counterRight: s, rounds: i } = us({\n        allowShortKeys: !1,\n        counterLength: 8,\n        counterRight: !1,\n        rounds: 20\n    }, t);\n    if (typeof e != \"function\") throw new Error(\"core must be a function\");\n    return ht(o), ht(i), jn(s), jn(n), function(c, u, a, l) {\n        let f = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;\n        F(c), F(u), F(a);\n        const d = a.length;\n        if (l === void 0 && (l = new Uint8Array(d)), F(l), ht(f), f < 0 || f >= Mn) throw new Error(\"arx: counter overflow\");\n        if (l.length < d) throw new Error(\"arx: output (\".concat(l.length, \") is shorter than data (\").concat(d, \")\"));\n        const g = [];\n        let y = c.length, h, m;\n        if (y === 32) g.push(h = gt(c)), m = ys;\n        else if (y === 16 && n) h = new Uint8Array(32), h.set(c), h.set(c, 16), m = gs, g.push(h);\n        else throw new Error(\"arx: invalid 32-byte key, got length=\".concat(y));\n        yt(u) || g.push(u = gt(u));\n        const B = se(h);\n        if (r) {\n            if (u.length !== 24) throw new Error(\"arx: extended nonce must be 24 bytes\");\n            r(m, B, se(u.subarray(0, 16)), B), u = u.subarray(16);\n        }\n        const b = 16 - o;\n        if (b !== u.length) throw new Error(\"arx: nonce must be \".concat(b, \" or 16 bytes\"));\n        if (b !== 12) {\n            const I = new Uint8Array(12);\n            I.set(u, s ? 0 : 12 - u.length), u = I, g.push(u);\n        }\n        const _ = se(u);\n        return bs(e, m, B, _, a, l, f, i), Ee(...g), l;\n    };\n}\nconst M = (e, t)=>e[t++] & 255 | (e[t++] & 255) << 8;\n_c57 = M;\nclass Es {\n    process(t, n) {\n        let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n        const o = r ? 0 : 2048, { h: s, r: i } = this, c = i[0], u = i[1], a = i[2], l = i[3], f = i[4], d = i[5], g = i[6], y = i[7], h = i[8], m = i[9], B = M(t, n + 0), b = M(t, n + 2), _ = M(t, n + 4), I = M(t, n + 6), k = M(t, n + 8), E = M(t, n + 10), L = M(t, n + 12), j = M(t, n + 14);\n        let v = s[0] + (B & 8191), O = s[1] + ((B >>> 13 | b << 3) & 8191), w = s[2] + ((b >>> 10 | _ << 6) & 8191), R = s[3] + ((_ >>> 7 | I << 9) & 8191), A = s[4] + ((I >>> 4 | k << 12) & 8191), T = s[5] + (k >>> 1 & 8191), N = s[6] + ((k >>> 14 | E << 2) & 8191), S = s[7] + ((E >>> 11 | L << 5) & 8191), U = s[8] + ((L >>> 8 | j << 8) & 8191), $ = s[9] + (j >>> 5 | o), p = 0, C = p + v * c + O * (5 * m) + w * (5 * h) + R * (5 * y) + A * (5 * g);\n        p = C >>> 13, C &= 8191, C += T * (5 * d) + N * (5 * f) + S * (5 * l) + U * (5 * a) + $ * (5 * u), p += C >>> 13, C &= 8191;\n        let D = p + v * u + O * c + w * (5 * m) + R * (5 * h) + A * (5 * y);\n        p = D >>> 13, D &= 8191, D += T * (5 * g) + N * (5 * d) + S * (5 * f) + U * (5 * l) + $ * (5 * a), p += D >>> 13, D &= 8191;\n        let P = p + v * a + O * u + w * c + R * (5 * m) + A * (5 * h);\n        p = P >>> 13, P &= 8191, P += T * (5 * y) + N * (5 * g) + S * (5 * d) + U * (5 * f) + $ * (5 * l), p += P >>> 13, P &= 8191;\n        let G = p + v * l + O * a + w * u + R * c + A * (5 * m);\n        p = G >>> 13, G &= 8191, G += T * (5 * h) + N * (5 * y) + S * (5 * g) + U * (5 * d) + $ * (5 * f), p += G >>> 13, G &= 8191;\n        let X = p + v * f + O * l + w * a + R * u + A * c;\n        p = X >>> 13, X &= 8191, X += T * (5 * m) + N * (5 * h) + S * (5 * y) + U * (5 * g) + $ * (5 * d), p += X >>> 13, X &= 8191;\n        let Z = p + v * d + O * f + w * l + R * a + A * u;\n        p = Z >>> 13, Z &= 8191, Z += T * c + N * (5 * m) + S * (5 * h) + U * (5 * y) + $ * (5 * g), p += Z >>> 13, Z &= 8191;\n        let he = p + v * g + O * d + w * f + R * l + A * a;\n        p = he >>> 13, he &= 8191, he += T * u + N * c + S * (5 * m) + U * (5 * h) + $ * (5 * y), p += he >>> 13, he &= 8191;\n        let pe = p + v * y + O * g + w * d + R * f + A * l;\n        p = pe >>> 13, pe &= 8191, pe += T * a + N * u + S * c + U * (5 * m) + $ * (5 * h), p += pe >>> 13, pe &= 8191;\n        let ge = p + v * h + O * y + w * g + R * d + A * f;\n        p = ge >>> 13, ge &= 8191, ge += T * l + N * a + S * u + U * c + $ * (5 * m), p += ge >>> 13, ge &= 8191;\n        let ye = p + v * m + O * h + w * y + R * g + A * d;\n        p = ye >>> 13, ye &= 8191, ye += T * f + N * l + S * a + U * u + $ * c, p += ye >>> 13, ye &= 8191, p = (p << 2) + p | 0, p = p + C | 0, C = p & 8191, p = p >>> 13, D += p, s[0] = C, s[1] = D, s[2] = P, s[3] = G, s[4] = X, s[5] = Z, s[6] = he, s[7] = pe, s[8] = ge, s[9] = ye;\n    }\n    finalize() {\n        const { h: t, pad: n } = this, r = new Uint16Array(10);\n        let o = t[1] >>> 13;\n        t[1] &= 8191;\n        for(let c = 2; c < 10; c++)t[c] += o, o = t[c] >>> 13, t[c] &= 8191;\n        t[0] += o * 5, o = t[0] >>> 13, t[0] &= 8191, t[1] += o, o = t[1] >>> 13, t[1] &= 8191, t[2] += o, r[0] = t[0] + 5, o = r[0] >>> 13, r[0] &= 8191;\n        for(let c = 1; c < 10; c++)r[c] = t[c] + o, o = r[c] >>> 13, r[c] &= 8191;\n        r[9] -= 8192;\n        let s = (o ^ 1) - 1;\n        for(let c = 0; c < 10; c++)r[c] &= s;\n        s = ~s;\n        for(let c = 0; c < 10; c++)t[c] = t[c] & s | r[c];\n        t[0] = (t[0] | t[1] << 13) & 65535, t[1] = (t[1] >>> 3 | t[2] << 10) & 65535, t[2] = (t[2] >>> 6 | t[3] << 7) & 65535, t[3] = (t[3] >>> 9 | t[4] << 4) & 65535, t[4] = (t[4] >>> 12 | t[5] << 1 | t[6] << 14) & 65535, t[5] = (t[6] >>> 2 | t[7] << 11) & 65535, t[6] = (t[7] >>> 5 | t[8] << 8) & 65535, t[7] = (t[8] >>> 8 | t[9] << 5) & 65535;\n        let i = t[0] + n[0];\n        t[0] = i & 65535;\n        for(let c = 1; c < 8; c++)i = (t[c] + n[c] | 0) + (i >>> 16) | 0, t[c] = i & 65535;\n        Ee(r);\n    }\n    update(t) {\n        Bn(this);\n        const { buffer: n, blockLen: r } = this;\n        t = pt(t);\n        const o = t.length;\n        for(let s = 0; s < o;){\n            const i = Math.min(r - this.pos, o - s);\n            if (i === r) {\n                for(; r <= o - s; s += r)this.process(t, s);\n                continue;\n            }\n            n.set(t.subarray(s, s + i), this.pos), this.pos += i, s += i, this.pos === r && (this.process(n, 0, !1), this.pos = 0);\n        }\n        return this;\n    }\n    destroy() {\n        Ee(this.h, this.r, this.buffer, this.pad);\n    }\n    digestInto(t) {\n        Bn(this), ss(t, this), this.finished = !0;\n        const { buffer: n, h: r } = this;\n        let { pos: o } = this;\n        if (o) {\n            for(n[o++] = 1; o < 16; o++)n[o] = 0;\n            this.process(n, 0, !0);\n        }\n        this.finalize();\n        let s = 0;\n        for(let i = 0; i < 8; i++)t[s++] = r[i] >>> 0, t[s++] = r[i] >>> 8;\n        return t;\n    }\n    digest() {\n        const { buffer: t, outputLen: n } = this;\n        this.digestInto(t);\n        const r = t.slice(0, n);\n        return this.destroy(), r;\n    }\n    constructor(t){\n        this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = !1, t = pt(t), F(t, 32);\n        const n = M(t, 0), r = M(t, 2), o = M(t, 4), s = M(t, 6), i = M(t, 8), c = M(t, 10), u = M(t, 12), a = M(t, 14);\n        this.r[0] = n & 8191, this.r[1] = (n >>> 13 | r << 3) & 8191, this.r[2] = (r >>> 10 | o << 6) & 7939, this.r[3] = (o >>> 7 | s << 9) & 8191, this.r[4] = (s >>> 4 | i << 12) & 255, this.r[5] = i >>> 1 & 8190, this.r[6] = (i >>> 14 | c << 2) & 8191, this.r[7] = (c >>> 11 | u << 5) & 8065, this.r[8] = (u >>> 8 | a << 8) & 8191, this.r[9] = a >>> 5 & 127;\n        for(let l = 0; l < 8; l++)this.pad[l] = M(t, 16 + 2 * l);\n    }\n}\nfunction vs(e) {\n    const t = (r, o)=>e(o).update(pt(r)).digest(), n = e(new Uint8Array(32));\n    return t.outputLen = n.outputLen, t.blockLen = n.blockLen, t.create = (r)=>e(r), t;\n}\nconst xs = vs((e)=>new Es(e));\nfunction Os(e, t, n, r, o) {\n    let s = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 20;\n    let i = e[0], c = e[1], u = e[2], a = e[3], l = t[0], f = t[1], d = t[2], g = t[3], y = t[4], h = t[5], m = t[6], B = t[7], b = o, _ = n[0], I = n[1], k = n[2], E = i, L = c, j = u, v = a, O = l, w = f, R = d, A = g, T = y, N = h, S = m, U = B, $ = b, p = _, C = I, D = k;\n    for(let G = 0; G < s; G += 2)E = E + O | 0, $ = x($ ^ E, 16), T = T + $ | 0, O = x(O ^ T, 12), E = E + O | 0, $ = x($ ^ E, 8), T = T + $ | 0, O = x(O ^ T, 7), L = L + w | 0, p = x(p ^ L, 16), N = N + p | 0, w = x(w ^ N, 12), L = L + w | 0, p = x(p ^ L, 8), N = N + p | 0, w = x(w ^ N, 7), j = j + R | 0, C = x(C ^ j, 16), S = S + C | 0, R = x(R ^ S, 12), j = j + R | 0, C = x(C ^ j, 8), S = S + C | 0, R = x(R ^ S, 7), v = v + A | 0, D = x(D ^ v, 16), U = U + D | 0, A = x(A ^ U, 12), v = v + A | 0, D = x(D ^ v, 8), U = U + D | 0, A = x(A ^ U, 7), E = E + w | 0, D = x(D ^ E, 16), S = S + D | 0, w = x(w ^ S, 12), E = E + w | 0, D = x(D ^ E, 8), S = S + D | 0, w = x(w ^ S, 7), L = L + R | 0, $ = x($ ^ L, 16), U = U + $ | 0, R = x(R ^ U, 12), L = L + R | 0, $ = x($ ^ L, 8), U = U + $ | 0, R = x(R ^ U, 7), j = j + A | 0, p = x(p ^ j, 16), T = T + p | 0, A = x(A ^ T, 12), j = j + A | 0, p = x(p ^ j, 8), T = T + p | 0, A = x(A ^ T, 7), v = v + O | 0, C = x(C ^ v, 16), N = N + C | 0, O = x(O ^ N, 12), v = v + O | 0, C = x(C ^ v, 8), N = N + C | 0, O = x(O ^ N, 7);\n    let P = 0;\n    r[P++] = i + E | 0, r[P++] = c + L | 0, r[P++] = u + j | 0, r[P++] = a + v | 0, r[P++] = l + O | 0, r[P++] = f + w | 0, r[P++] = d + R | 0, r[P++] = g + A | 0, r[P++] = y + T | 0, r[P++] = h + N | 0, r[P++] = m + S | 0, r[P++] = B + U | 0, r[P++] = b + $ | 0, r[P++] = _ + p | 0, r[P++] = I + C | 0, r[P++] = k + D | 0;\n}\n_c58 = Os;\nconst Is = ws(Os, {\n    counterRight: !1,\n    counterLength: 4,\n    allowShortKeys: !1\n}), As = new Uint8Array(16), Hn = (e, t)=>{\n    e.update(t);\n    const n = t.length % 16;\n    n && e.update(As.subarray(n));\n}, Ns = new Uint8Array(32);\nfunction Kn(e, t, n, r, o) {\n    const s = e(t, n, Ns), i = xs.create(s);\n    o && Hn(i, o), Hn(i, r);\n    const c = new Uint8Array(16), u = is(c);\n    kn(u, 0, BigInt(o ? o.length : 0), !0), kn(u, 8, BigInt(r.length), !0), i.update(c);\n    const a = i.digest();\n    return Ee(s, c), a;\n}\n_c59 = Kn;\nconst Ss = (e)=>(t, n, r)=>({\n            encrypt (s, i) {\n                const c = s.length;\n                i = Cn(c + 16, i, !1), i.set(s);\n                const u = i.subarray(0, -16);\n                e(t, n, u, u, 1);\n                const a = Kn(e, t, n, u, r);\n                return i.set(a, c), Ee(a), i;\n            },\n            decrypt (s, i) {\n                i = Cn(s.length - 16, i, !1);\n                const c = s.subarray(0, -16), u = s.subarray(-16), a = Kn(e, t, n, c, r);\n                if (!fs(u, a)) throw new Error(\"invalid tag\");\n                return i.set(s.subarray(0, -16)), e(t, n, i, i, 1), Ee(a), i;\n            }\n        }), Fn = ls({\n    blockSize: 64,\n    nonceLength: 12,\n    tagLength: 16\n}, Ss(Is));\nclass qn extends it {\n    update(t) {\n        return me(this), this.iHash.update(t), this;\n    }\n    digestInto(t) {\n        me(this), je(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();\n    }\n    digest() {\n        const t = new Uint8Array(this.oHash.outputLen);\n        return this.digestInto(t), t;\n    }\n    _cloneInto(t) {\n        t || (t = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash: n, iHash: r, finished: o, destroyed: s, blockLen: i, outputLen: c } = this;\n        return t = t, t.finished = o, t.destroyed = s, t.blockLen = i, t.outputLen = c, t.oHash = n._cloneInto(t.oHash), t.iHash = r._cloneInto(t.iHash), t;\n    }\n    destroy() {\n        this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();\n    }\n    constructor(t, n){\n        super(), this.finished = !1, this.destroyed = !1, ot(t);\n        const r = we(n);\n        if (this.iHash = t.create(), typeof this.iHash.update != \"function\") throw new Error(\"Expected instance of class which extends utils.Hash\");\n        this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;\n        const o = this.blockLen, s = new Uint8Array(o);\n        s.set(r.length > o ? t.create().update(r).digest() : r);\n        for(let i = 0; i < s.length; i++)s[i] ^= 54;\n        this.iHash.update(s), this.oHash = t.create();\n        for(let i = 0; i < s.length; i++)s[i] ^= 106;\n        this.oHash.update(s), s.fill(0);\n    }\n}\nconst mt = (e, t, n)=>new qn(e, t).update(n).digest();\nmt.create = (e, t)=>new qn(e, t);\nfunction Us(e, t, n) {\n    return ot(e), n === void 0 && (n = new Uint8Array(e.outputLen)), mt(e, we(n), we(t));\n}\n_c60 = Us;\nconst bt = new Uint8Array([\n    0\n]), Gn = new Uint8Array;\nfunction _s(e, t, n) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 32;\n    if (ot(e), Ne(r), r > 255 * e.outputLen) throw new Error(\"Length should be <= 255*HashLen\");\n    const o = Math.ceil(r / e.outputLen);\n    n === void 0 && (n = Gn);\n    const s = new Uint8Array(o * e.outputLen), i = mt.create(e, t), c = i._cloneInto(), u = new Uint8Array(i.outputLen);\n    for(let a = 0; a < o; a++)bt[0] = a + 1, c.update(a === 0 ? Gn : u).update(n).update(bt).digestInto(u), s.set(u, e.outputLen * a), i._cloneInto(c);\n    return i.destroy(), c.destroy(), u.fill(0), bt.fill(0), s.slice(0, r);\n}\nconst Ts = (e, t, n, r, o)=>_s(e, Us(e, t, n), r, o);\n_c61 = Ts;\nfunction $s(e, t, n, r) {\n    if (typeof e.setBigUint64 == \"function\") return e.setBigUint64(t, n, r);\n    const o = BigInt(32), s = BigInt(4294967295), i = Number(n >> o & s), c = Number(n & s), u = r ? 4 : 0, a = r ? 0 : 4;\n    e.setUint32(t + u, i, r), e.setUint32(t + a, c, r);\n}\nfunction Rs(e, t, n) {\n    return e & t ^ ~e & n;\n}\n_c62 = Rs;\nfunction Ps(e, t, n) {\n    return e & t ^ e & n ^ t & n;\n}\n_c63 = Ps;\nclass Ls extends it {\n    update(t) {\n        me(this);\n        const { view: n, buffer: r, blockLen: o } = this;\n        t = we(t);\n        const s = t.length;\n        for(let i = 0; i < s;){\n            const c = Math.min(o - this.pos, s - i);\n            if (c === o) {\n                const u = st(t);\n                for(; o <= s - i; i += o)this.process(u, i);\n                continue;\n            }\n            r.set(t.subarray(i, i + c), this.pos), this.pos += c, i += c, this.pos === o && (this.process(n, 0), this.pos = 0);\n        }\n        return this.length += t.length, this.roundClean(), this;\n    }\n    digestInto(t) {\n        me(this), sn(t, this), this.finished = !0;\n        const { buffer: n, view: r, blockLen: o, isLE: s } = this;\n        let { pos: i } = this;\n        n[i++] = 128, this.buffer.subarray(i).fill(0), this.padOffset > o - i && (this.process(r, 0), i = 0);\n        for(let f = i; f < o; f++)n[f] = 0;\n        $s(r, o - 8, BigInt(this.length * 8), s), this.process(r, 0);\n        const c = st(t), u = this.outputLen;\n        if (u % 4) throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n        const a = u / 4, l = this.get();\n        if (a > l.length) throw new Error(\"_sha2: outputLen bigger than state\");\n        for(let f = 0; f < a; f++)c.setUint32(4 * f, l[f], s);\n    }\n    digest() {\n        const { buffer: t, outputLen: n } = this;\n        this.digestInto(t);\n        const r = t.slice(0, n);\n        return this.destroy(), r;\n    }\n    _cloneInto(t) {\n        t || (t = new this.constructor), t.set(...this.get());\n        const { blockLen: n, buffer: r, length: o, finished: s, destroyed: i, pos: c } = this;\n        return t.length = o, t.pos = c, t.finished = s, t.destroyed = i, o % n && t.buffer.set(r), t;\n    }\n    constructor(t, n, r, o){\n        super(), this.blockLen = t, this.outputLen = n, this.padOffset = r, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = st(this.buffer);\n    }\n}\nconst Bs = new Uint32Array([\n    1116352408,\n    1899447441,\n    3049323471,\n    3921009573,\n    961987163,\n    1508970993,\n    2453635748,\n    2870763221,\n    3624381080,\n    310598401,\n    607225278,\n    1426881987,\n    1925078388,\n    2162078206,\n    2614888103,\n    3248222580,\n    3835390401,\n    4022224774,\n    264347078,\n    604807628,\n    770255983,\n    1249150122,\n    1555081692,\n    1996064986,\n    2554220882,\n    2821834349,\n    2952996808,\n    3210313671,\n    3336571891,\n    3584528711,\n    113926993,\n    338241895,\n    666307205,\n    773529912,\n    1294757372,\n    1396182291,\n    1695183700,\n    1986661051,\n    2177026350,\n    2456956037,\n    2730485921,\n    2820302411,\n    3259730800,\n    3345764771,\n    3516065817,\n    3600352804,\n    4094571909,\n    275423344,\n    430227734,\n    506948616,\n    659060556,\n    883997877,\n    958139571,\n    1322822218,\n    1537002063,\n    1747873779,\n    1955562222,\n    2024104815,\n    2227730452,\n    2361852424,\n    2428436474,\n    2756734187,\n    3204031479,\n    3329325298\n]), ie = new Uint32Array([\n    1779033703,\n    3144134277,\n    1013904242,\n    2773480762,\n    1359893119,\n    2600822924,\n    528734635,\n    1541459225\n]), ce = new Uint32Array(64);\nclass js extends Ls {\n    get() {\n        const { A: t, B: n, C: r, D: o, E: s, F: i, G: c, H: u } = this;\n        return [\n            t,\n            n,\n            r,\n            o,\n            s,\n            i,\n            c,\n            u\n        ];\n    }\n    set(t, n, r, o, s, i, c, u) {\n        this.A = t | 0, this.B = n | 0, this.C = r | 0, this.D = o | 0, this.E = s | 0, this.F = i | 0, this.G = c | 0, this.H = u | 0;\n    }\n    process(t, n) {\n        for(let f = 0; f < 16; f++, n += 4)ce[f] = t.getUint32(n, !1);\n        for(let f = 16; f < 64; f++){\n            const d = ce[f - 15], g = ce[f - 2], y = J(d, 7) ^ J(d, 18) ^ d >>> 3, h = J(g, 17) ^ J(g, 19) ^ g >>> 10;\n            ce[f] = h + ce[f - 7] + y + ce[f - 16] | 0;\n        }\n        let { A: r, B: o, C: s, D: i, E: c, F: u, G: a, H: l } = this;\n        for(let f = 0; f < 64; f++){\n            const d = J(c, 6) ^ J(c, 11) ^ J(c, 25), g = l + d + Rs(c, u, a) + Bs[f] + ce[f] | 0, h = (J(r, 2) ^ J(r, 13) ^ J(r, 22)) + Ps(r, o, s) | 0;\n            l = a, a = u, u = c, c = i + g | 0, i = s, s = o, o = r, r = g + h | 0;\n        }\n        r = r + this.A | 0, o = o + this.B | 0, s = s + this.C | 0, i = i + this.D | 0, c = c + this.E | 0, u = u + this.F | 0, a = a + this.G | 0, l = l + this.H | 0, this.set(r, o, s, i, c, u, a, l);\n    }\n    roundClean() {\n        ce.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);\n    }\n    constructor(){\n        super(64, 32, 8, !1), this.A = ie[0] | 0, this.B = ie[1] | 0, this.C = ie[2] | 0, this.D = ie[3] | 0, this.E = ie[4] | 0, this.F = ie[5] | 0, this.G = ie[6] | 0, this.H = ie[7] | 0;\n    }\n}\nconst He = fn(_c64 = ()=>new js); /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \n_c65 = He;\nconst Wn = BigInt(0);\nfunction wt(e) {\n    return e instanceof Uint8Array || ArrayBuffer.isView(e) && e.constructor.name === \"Uint8Array\";\n}\nfunction zn(e) {\n    if (!wt(e)) throw new Error(\"Uint8Array expected\");\n}\nconst Cs = Array.from({\n    length: 256\n}, (e, t)=>t.toString(16).padStart(2, \"0\"));\nfunction ks(e) {\n    zn(e);\n    let t = \"\";\n    for(let n = 0; n < e.length; n++)t += Cs[e[n]];\n    return t;\n}\nfunction Ds(e) {\n    if (typeof e != \"string\") throw new Error(\"hex string expected, got \" + typeof e);\n    return e === \"\" ? Wn : BigInt(\"0x\" + e);\n}\n_c66 = Ds;\nconst ee = {\n    _0: 48,\n    _9: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction Jn(e) {\n    if (e >= ee._0 && e <= ee._9) return e - ee._0;\n    if (e >= ee.A && e <= ee.F) return e - (ee.A - 10);\n    if (e >= ee.a && e <= ee.f) return e - (ee.a - 10);\n}\n_c67 = Jn;\nfunction Yn(e) {\n    if (typeof e != \"string\") throw new Error(\"hex string expected, got \" + typeof e);\n    const t = e.length, n = t / 2;\n    if (t % 2) throw new Error(\"hex string expected, got unpadded hex of length \" + t);\n    const r = new Uint8Array(n);\n    for(let o = 0, s = 0; o < n; o++, s += 2){\n        const i = Jn(e.charCodeAt(s)), c = Jn(e.charCodeAt(s + 1));\n        if (i === void 0 || c === void 0) {\n            const u = e[s] + e[s + 1];\n            throw new Error('hex string expected, got non-hex character \"' + u + '\" at index ' + s);\n        }\n        r[o] = i * 16 + c;\n    }\n    return r;\n}\n_c68 = Yn;\nfunction Xn(e) {\n    return zn(e), Ds(ks(Uint8Array.from(e).reverse()));\n}\n_c69 = Xn;\nfunction Ms(e, t) {\n    return Yn(e.toString(16).padStart(t * 2, \"0\"));\n}\n_c70 = Ms;\nfunction Vs(e, t) {\n    return Ms(e, t).reverse();\n}\n_c71 = Vs;\nfunction Zn(e, t, n) {\n    let r;\n    if (typeof t == \"string\") try {\n        r = Yn(t);\n    } catch (s) {\n        throw new Error(e + \" must be hex string or Uint8Array, cause: \" + s);\n    }\n    else if (wt(t)) r = Uint8Array.from(t);\n    else throw new Error(e + \" must be hex string or Uint8Array\");\n    const o = r.length;\n    if (typeof n == \"number\" && o !== n) throw new Error(e + \" of length \" + n + \" expected, got \" + o);\n    return r;\n}\n_c72 = Zn;\nconst Et = (e)=>typeof e == \"bigint\" && Wn <= e;\n_c73 = Et;\nfunction Hs(e, t, n) {\n    return Et(e) && Et(t) && Et(n) && t <= e && e < n;\n}\n_c74 = Hs;\nfunction Qn(e, t, n, r) {\n    if (!Hs(t, n, r)) throw new Error(\"expected valid \" + e + \": \" + n + \" <= n < \" + r + \", got \" + t);\n}\n_c75 = Qn;\nconst Ks = {\n    bigint: (e)=>typeof e == \"bigint\",\n    function: (e)=>typeof e == \"function\",\n    boolean: (e)=>typeof e == \"boolean\",\n    string: (e)=>typeof e == \"string\",\n    stringOrUint8Array: (e)=>typeof e == \"string\" || wt(e),\n    isSafeInteger: (e)=>Number.isSafeInteger(e),\n    array: (e)=>Array.isArray(e),\n    field: (e, t)=>t.Fp.isValid(e),\n    hash: (e)=>typeof e == \"function\" && Number.isSafeInteger(e.outputLen)\n};\nfunction Fs(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const r = (o, s, i)=>{\n        const c = Ks[s];\n        if (typeof c != \"function\") throw new Error(\"invalid validator function\");\n        const u = e[o];\n        if (!(i && u === void 0) && !c(u, e)) throw new Error(\"param \" + String(o) + \" is invalid. Expected \" + s + \", got \" + u);\n    };\n    for (const [o, s] of Object.entries(t))r(o, s, !1);\n    for (const [o, s] of Object.entries(n))r(o, s, !0);\n    return e;\n}\n_c76 = Fs;\nconst ve = BigInt(0), Ke = BigInt(1);\nfunction er(e, t) {\n    const n = e % t;\n    return n >= ve ? n : t + n;\n}\nfunction qs(e, t, n) {\n    if (t < ve) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (n <= ve) throw new Error(\"invalid modulus\");\n    if (n === Ke) return ve;\n    let r = Ke;\n    for(; t > ve;)t & Ke && (r = r * e % n), e = e * e % n, t >>= Ke;\n    return r;\n}\nfunction z(e, t, n) {\n    let r = e;\n    for(; t-- > ve;)r *= r, r %= n;\n    return r;\n}\nBigInt(0), BigInt(1), BigInt(0), BigInt(1), BigInt(2), BigInt(8);\nconst xe = BigInt(0), vt = BigInt(1);\nfunction Gs(e) {\n    return Fs(e, {\n        a: \"bigint\"\n    }, {\n        montgomeryBits: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\",\n        adjustScalarBytes: \"function\",\n        domain: \"function\",\n        powPminus2: \"function\",\n        Gu: \"bigint\"\n    }), Object.freeze({\n        ...e\n    });\n}\n_c77 = Gs;\nfunction Ws(e) {\n    const t = Gs(e), { P: n } = t, r = (b)=>er(b, n), o = t.montgomeryBits, s = Math.ceil(o / 8), i = t.nByteLength, c = t.adjustScalarBytes || ((b)=>b), u = t.powPminus2 || ((b)=>qs(b, n - BigInt(2), n));\n    function a(b, _, I) {\n        const k = r(b * (_ - I));\n        return _ = r(_ - k), I = r(I + k), [\n            _,\n            I\n        ];\n    }\n    const l = (t.a - BigInt(2)) / BigInt(4);\n    function f(b, _) {\n        Qn(\"u\", b, xe, n), Qn(\"scalar\", _, xe, n);\n        const I = _, k = b;\n        let E = vt, L = xe, j = b, v = vt, O = xe, w;\n        for(let A = BigInt(o - 1); A >= xe; A--){\n            const T = I >> A & vt;\n            O ^= T, w = a(O, E, j), E = w[0], j = w[1], w = a(O, L, v), L = w[0], v = w[1], O = T;\n            const N = E + L, S = r(N * N), U = E - L, $ = r(U * U), p = S - $, C = j + v, D = j - v, P = r(D * N), G = r(C * U), X = P + G, Z = P - G;\n            j = r(X * X), v = r(k * r(Z * Z)), E = r(S * $), L = r(p * (S + r(l * p)));\n        }\n        w = a(O, E, j), E = w[0], j = w[1], w = a(O, L, v), L = w[0], v = w[1];\n        const R = u(L);\n        return r(E * R);\n    }\n    function d(b) {\n        return Vs(r(b), s);\n    }\n    function g(b) {\n        const _ = Zn(\"u coordinate\", b, s);\n        return i === 32 && (_[31] &= 127), Xn(_);\n    }\n    function y(b) {\n        const _ = Zn(\"scalar\", b), I = _.length;\n        if (I !== s && I !== i) {\n            let k = \"\" + s + \" or \" + i;\n            throw new Error(\"invalid scalar, expected \" + k + \" bytes, got \" + I);\n        }\n        return Xn(c(_));\n    }\n    function h(b, _) {\n        const I = g(_), k = y(b), E = f(I, k);\n        if (E === xe) throw new Error(\"invalid private or public key received\");\n        return d(E);\n    }\n    const m = d(t.Gu);\n    function B(b) {\n        return h(b, m);\n    }\n    return {\n        scalarMult: h,\n        scalarMultBase: B,\n        getSharedSecret: (b, _)=>h(b, _),\n        getPublicKey: (b)=>B(b),\n        utils: {\n            randomPrivateKey: ()=>t.randomBytes(t.nByteLength)\n        },\n        GuBytes: m\n    };\n}\n_c78 = Ws;\nconst xt = BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\");\nBigInt(0);\nconst zs = BigInt(1), tr = BigInt(2), Js = BigInt(3), Ys = BigInt(5);\nBigInt(8);\nfunction Xs(e) {\n    const t = BigInt(10), n = BigInt(20), r = BigInt(40), o = BigInt(80), s = xt, c = e * e % s * e % s, u = z(c, tr, s) * c % s, a = z(u, zs, s) * e % s, l = z(a, Ys, s) * a % s, f = z(l, t, s) * l % s, d = z(f, n, s) * f % s, g = z(d, r, s) * d % s, y = z(g, o, s) * g % s, h = z(y, o, s) * g % s, m = z(h, t, s) * l % s;\n    return {\n        pow_p_5_8: z(m, tr, s) * e % s,\n        b2: c\n    };\n}\n_c79 = Xs;\nfunction Zs(e) {\n    return e[0] &= 248, e[31] &= 127, e[31] |= 64, e;\n}\n_c80 = Zs;\nconst Ot = Ws({\n    P: xt,\n    a: BigInt(486662),\n    montgomeryBits: 255,\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (e)=>{\n        const t = xt, { pow_p_5_8: n, b2: r } = Xs(e);\n        return er(z(n, Js, t) * r, t);\n    },\n    adjustScalarBytes: Zs,\n    randomBytes: Se\n}), It = \"base10\", V = \"base16\", At = \"base64pad\", Qs = \"base64url\", Oe = \"utf8\", Nt = 0, Ie = 1, _e = 2, ei = 0, nr = 1, Te = 12, St = 32;\nfunction ti() {\n    const e = Ot.utils.randomPrivateKey(), t = Ot.getPublicKey(e);\n    return {\n        privateKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(e, V),\n        publicKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(t, V)\n    };\n}\nfunction ni() {\n    const e = Se(St);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(e, V);\n}\nfunction ri(e, t) {\n    const n = Ot.getSharedSecret((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e, V), (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(t, V)), r = Ts(He, n, void 0, void 0, St);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(r, V);\n}\nfunction oi(e) {\n    const t = He((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e, V));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(t, V);\n}\nfunction si(e) {\n    const t = He((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e, Oe));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(t, V);\n}\nfunction Ut(e) {\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(\"\".concat(e), It);\n}\n_c81 = Ut;\nfunction fe(e) {\n    return Number((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(e, It));\n}\nfunction ii(e) {\n    const t = Ut(typeof e.type < \"u\" ? e.type : Nt);\n    if (fe(t) === Ie && typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n    const n = typeof e.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e.senderPublicKey, V) : void 0, r = typeof e.iv < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e.iv, V) : Se(Te), o = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e.symKey, V), s = Fn(o, r).encrypt((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e.message, Oe));\n    return _t({\n        type: t,\n        sealed: s,\n        iv: r,\n        senderPublicKey: n,\n        encoding: e.encoding\n    });\n}\nfunction ci(e) {\n    const t = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e.symKey, V), { sealed: n, iv: r } = Fe(e), o = Fn(t, r).decrypt(n);\n    if (o === null) throw new Error(\"Failed to decrypt\");\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(o, Oe);\n}\nfunction ai(e, t) {\n    const n = Ut(_e), r = Se(Te), o = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(e, Oe);\n    return _t({\n        type: n,\n        sealed: o,\n        iv: r,\n        encoding: t\n    });\n}\nfunction ui(e, t) {\n    const { sealed: n } = Fe({\n        encoded: e,\n        encoding: t\n    });\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(n, Oe);\n}\nfunction _t(e) {\n    const { encoding: t = At } = e;\n    if (fe(e.type) === _e) return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.concat)([\n        e.type,\n        e.sealed\n    ]), t);\n    if (fe(e.type) === Ie) {\n        if (typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n        return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.concat)([\n            e.type,\n            e.senderPublicKey,\n            e.iv,\n            e.sealed\n        ]), t);\n    }\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.concat)([\n        e.type,\n        e.iv,\n        e.sealed\n    ]), t);\n}\nfunction Fe(e) {\n    const { encoded: t, encoding: n = At } = e, r = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.fromString)(t, n), o = r.slice(ei, nr), s = nr;\n    if (fe(o) === Ie) {\n        const a = s + St, l = a + Te, f = r.slice(s, a), d = r.slice(a, l), g = r.slice(l);\n        return {\n            type: o,\n            sealed: g,\n            iv: d,\n            senderPublicKey: f\n        };\n    }\n    if (fe(o) === _e) {\n        const a = r.slice(s), l = Se(Te);\n        return {\n            type: o,\n            sealed: a,\n            iv: l\n        };\n    }\n    const i = s + Te, c = r.slice(s, i), u = r.slice(i);\n    return {\n        type: o,\n        sealed: u,\n        iv: c\n    };\n}\n_c82 = Fe;\nfunction fi(e, t) {\n    const n = Fe({\n        encoded: e,\n        encoding: t === null || t === void 0 ? void 0 : t.encoding\n    });\n    return rr({\n        type: fe(n.type),\n        senderPublicKey: typeof n.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(n.senderPublicKey, V) : void 0,\n        receiverPublicKey: t === null || t === void 0 ? void 0 : t.receiverPublicKey\n    });\n}\nfunction rr(e) {\n    const t = (e === null || e === void 0 ? void 0 : e.type) || Nt;\n    if (t === Ie) {\n        if (typeof (e === null || e === void 0 ? void 0 : e.senderPublicKey) > \"u\") throw new Error(\"missing sender public key\");\n        if (typeof (e === null || e === void 0 ? void 0 : e.receiverPublicKey) > \"u\") throw new Error(\"missing receiver public key\");\n    }\n    return {\n        type: t,\n        senderPublicKey: e === null || e === void 0 ? void 0 : e.senderPublicKey,\n        receiverPublicKey: e === null || e === void 0 ? void 0 : e.receiverPublicKey\n    };\n}\nfunction li(e) {\n    return e.type === Ie && typeof e.senderPublicKey == \"string\" && typeof e.receiverPublicKey == \"string\";\n}\nfunction di(e) {\n    return e.type === _e;\n}\nfunction or(e) {\n    return new elliptic__WEBPACK_IMPORTED_MODULE_5__.ec(\"p256\").keyFromPublic({\n        x: Buffer.from(e.x, \"base64\").toString(\"hex\"),\n        y: Buffer.from(e.y, \"base64\").toString(\"hex\")\n    }, \"hex\");\n}\nfunction hi(e) {\n    let t = e.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const n = t.length % 4;\n    return n > 0 && (t += \"=\".repeat(4 - n)), t;\n}\nfunction pi(e) {\n    return Buffer.from(hi(e), \"base64\");\n}\nfunction gi(e, t) {\n    const [n, r, o] = e.split(\".\"), s = pi(o);\n    if (s.length !== 64) throw new Error(\"Invalid signature length\");\n    const i = s.slice(0, 32).toString(\"hex\"), c = s.slice(32, 64).toString(\"hex\"), u = \"\".concat(n, \".\").concat(r), a = He(u), l = or(t), f = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_4__.toString)(a, V);\n    if (!l.verify(f, {\n        r: i,\n        s: c\n    })) throw new Error(\"Invalid signature\");\n    return (0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_3__.decodeJWT)(e).payload;\n}\nconst sr = \"irn\";\nfunction yi(e) {\n    return (e === null || e === void 0 ? void 0 : e.relay) || {\n        protocol: sr\n    };\n}\nfunction mi(e) {\n    const t = _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_6__.RELAY_JSONRPC[e];\n    if (typeof t > \"u\") throw new Error(\"Relay Protocol not supported: \".concat(e));\n    return t;\n}\nfunction ir(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-\";\n    const n = {}, r = \"relay\" + t;\n    return Object.keys(e).forEach((o)=>{\n        if (o.startsWith(r)) {\n            const s = o.replace(r, \"\"), i = e[o];\n            n[s] = i;\n        }\n    }), n;\n}\nfunction bi(e) {\n    if (!e.includes(\"wc:\")) {\n        const a = rt(e);\n        a != null && a.includes(\"wc:\") && (e = a);\n    }\n    e = e.includes(\"wc://\") ? e.replace(\"wc://\", \"\") : e, e = e.includes(\"wc:\") ? e.replace(\"wc:\", \"\") : e;\n    const t = e.indexOf(\":\"), n = e.indexOf(\"?\") !== -1 ? e.indexOf(\"?\") : void 0, r = e.substring(0, t), o = e.substring(t + 1, n).split(\"@\"), s = typeof n < \"u\" ? e.substring(n) : \"\", i = new URLSearchParams(s), c = {};\n    i.forEach((a, l)=>{\n        c[l] = a;\n    });\n    const u = typeof c.methods == \"string\" ? c.methods.split(\",\") : void 0;\n    return {\n        protocol: r,\n        topic: cr(o[0]),\n        version: parseInt(o[1], 10),\n        symKey: c.symKey,\n        relay: ir(c),\n        methods: u,\n        expiryTimestamp: c.expiryTimestamp ? parseInt(c.expiryTimestamp, 10) : void 0\n    };\n}\nfunction cr(e) {\n    return e.startsWith(\"//\") ? e.substring(2) : e;\n}\nfunction ar(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-\";\n    const n = \"relay\", r = {};\n    return Object.keys(e).forEach((o)=>{\n        const s = o, i = n + t + s;\n        e[s] && (r[i] = e[s]);\n    }), r;\n}\nfunction wi(e) {\n    const t = new URLSearchParams, n = ar(e.relay);\n    Object.keys(n).sort().forEach((o)=>{\n        t.set(o, n[o]);\n    }), t.set(\"symKey\", e.symKey), e.expiryTimestamp && t.set(\"expiryTimestamp\", e.expiryTimestamp.toString()), e.methods && t.set(\"methods\", e.methods.join(\",\"));\n    const r = t.toString();\n    return \"\".concat(e.protocol, \":\").concat(e.topic, \"@\").concat(e.version, \"?\").concat(r);\n}\nfunction Ei(e, t, n) {\n    return \"\".concat(e, \"?wc_ev=\").concat(n, \"&topic=\").concat(t);\n}\n_c83 = Ei;\nvar vi = Object.defineProperty, xi = Object.defineProperties, Oi = Object.getOwnPropertyDescriptors, ur = Object.getOwnPropertySymbols, Ii = Object.prototype.hasOwnProperty, Ai = Object.prototype.propertyIsEnumerable, fr = (e, t, n)=>t in e ? vi(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: n\n    }) : e[t] = n, Ni = (e, t)=>{\n    for(var n in t || (t = {}))Ii.call(t, n) && fr(e, n, t[n]);\n    if (ur) for (var n of ur(t))Ai.call(t, n) && fr(e, n, t[n]);\n    return e;\n}, Si = (e, t)=>xi(e, Oi(t));\nfunction le(e) {\n    const t = [];\n    return e.forEach((n)=>{\n        const [r, o] = n.split(\":\");\n        t.push(\"\".concat(r, \":\").concat(o));\n    }), t;\n}\nfunction lr(e) {\n    const t = [];\n    return Object.values(e).forEach((n)=>{\n        t.push(...le(n.accounts));\n    }), t;\n}\nfunction dr(e, t) {\n    const n = [];\n    return Object.values(e).forEach((r)=>{\n        le(r.accounts).includes(t) && n.push(...r.methods);\n    }), n;\n}\nfunction hr(e, t) {\n    const n = [];\n    return Object.values(e).forEach((r)=>{\n        le(r.accounts).includes(t) && n.push(...r.events);\n    }), n;\n}\nfunction Ui(e, t) {\n    const n = Ir(e, t);\n    if (n) throw new Error(n.message);\n    const r = {};\n    for (const [o, s] of Object.entries(e))r[o] = {\n        methods: s.methods,\n        events: s.events,\n        chains: s.accounts.map((i)=>\"\".concat(i.split(\":\")[0], \":\").concat(i.split(\":\")[1]))\n    };\n    return r;\n}\n_c84 = Ui;\nfunction _i(e) {\n    const { proposal: { requiredNamespaces: t, optionalNamespaces: n = {} }, supportedNamespaces: r } = e, o = $t(t), s = $t(n), i = {};\n    Object.keys(r).forEach((a)=>{\n        const l = r[a].chains, f = r[a].methods, d = r[a].events, g = r[a].accounts;\n        l.forEach((y)=>{\n            if (!g.some((h)=>h.includes(y))) throw new Error(\"No accounts provided for chain \".concat(y, \" in namespace \").concat(a));\n        }), i[a] = {\n            chains: l,\n            methods: f,\n            events: d,\n            accounts: g\n        };\n    });\n    const c = Nr(t, i, \"approve()\");\n    if (c) throw new Error(c.message);\n    const u = {};\n    return !Object.keys(t).length && !Object.keys(n).length ? i : (Object.keys(o).forEach((a)=>{\n        const l = r[a].chains.filter((y)=>{\n            var h, m;\n            return (m = (h = o[a]) == null ? void 0 : h.chains) == null ? void 0 : m.includes(y);\n        }), f = r[a].methods.filter((y)=>{\n            var h, m;\n            return (m = (h = o[a]) == null ? void 0 : h.methods) == null ? void 0 : m.includes(y);\n        }), d = r[a].events.filter((y)=>{\n            var h, m;\n            return (m = (h = o[a]) == null ? void 0 : h.events) == null ? void 0 : m.includes(y);\n        }), g = l.map((y)=>r[a].accounts.filter((h)=>h.includes(\"\".concat(y, \":\")))).flat();\n        u[a] = {\n            chains: l,\n            methods: f,\n            events: d,\n            accounts: g\n        };\n    }), Object.keys(s).forEach((a)=>{\n        var l, f, d, g, y, h;\n        if (!r[a]) return;\n        const m = (f = (l = s[a]) == null ? void 0 : l.chains) == null ? void 0 : f.filter((I)=>r[a].chains.includes(I)), B = r[a].methods.filter((I)=>{\n            var k, E;\n            return (E = (k = s[a]) == null ? void 0 : k.methods) == null ? void 0 : E.includes(I);\n        }), b = r[a].events.filter((I)=>{\n            var k, E;\n            return (E = (k = s[a]) == null ? void 0 : k.events) == null ? void 0 : E.includes(I);\n        }), _ = m === null || m === void 0 ? void 0 : m.map((I)=>r[a].accounts.filter((k)=>k.includes(\"\".concat(I, \":\")))).flat();\n        u[a] = {\n            chains: Q((d = u[a]) == null ? void 0 : d.chains, m),\n            methods: Q((g = u[a]) == null ? void 0 : g.methods, B),\n            events: Q((y = u[a]) == null ? void 0 : y.events, b),\n            accounts: Q((h = u[a]) == null ? void 0 : h.accounts, _)\n        };\n    }), u);\n}\nfunction Tt(e) {\n    return e.includes(\":\");\n}\n_c85 = Tt;\nfunction pr(e) {\n    return Tt(e) ? e.split(\":\")[0] : e;\n}\nfunction $t(e) {\n    var t, n, r;\n    const o = {};\n    if (!qe(e)) return o;\n    for (const [s, i] of Object.entries(e)){\n        const c = Tt(s) ? [\n            s\n        ] : i.chains, u = i.methods || [], a = i.events || [], l = pr(s);\n        o[l] = Si(Ni({}, o[l]), {\n            chains: Q(c, (t = o[l]) == null ? void 0 : t.chains),\n            methods: Q(u, (n = o[l]) == null ? void 0 : n.methods),\n            events: Q(a, (r = o[l]) == null ? void 0 : r.events)\n        });\n    }\n    return o;\n}\nfunction gr(e) {\n    const t = {};\n    return e === null || e === void 0 ? void 0 : e.forEach((n)=>{\n        var r;\n        const [o, s] = n.split(\":\");\n        t[o] || (t[o] = {\n            accounts: [],\n            chains: [],\n            events: [],\n            methods: []\n        }), t[o].accounts.push(n), (r = t[o].chains) == null || r.push(\"\".concat(o, \":\").concat(s));\n    }), t;\n}\nfunction Ti(e, t) {\n    t = t.map((r)=>r.replace(\"did:pkh:\", \"\"));\n    const n = gr(t);\n    for (const [r, o] of Object.entries(n))o.methods ? o.methods = Q(o.methods, e) : o.methods = e, o.events = [\n        \"chainChanged\",\n        \"accountsChanged\"\n    ];\n    return n;\n}\n_c86 = Ti;\nconst yr = {\n    INVALID_METHOD: {\n        message: \"Invalid method.\",\n        code: 1001\n    },\n    INVALID_EVENT: {\n        message: \"Invalid event.\",\n        code: 1002\n    },\n    INVALID_UPDATE_REQUEST: {\n        message: \"Invalid update request.\",\n        code: 1003\n    },\n    INVALID_EXTEND_REQUEST: {\n        message: \"Invalid extend request.\",\n        code: 1004\n    },\n    INVALID_SESSION_SETTLE_REQUEST: {\n        message: \"Invalid session settle request.\",\n        code: 1005\n    },\n    UNAUTHORIZED_METHOD: {\n        message: \"Unauthorized method.\",\n        code: 3001\n    },\n    UNAUTHORIZED_EVENT: {\n        message: \"Unauthorized event.\",\n        code: 3002\n    },\n    UNAUTHORIZED_UPDATE_REQUEST: {\n        message: \"Unauthorized update request.\",\n        code: 3003\n    },\n    UNAUTHORIZED_EXTEND_REQUEST: {\n        message: \"Unauthorized extend request.\",\n        code: 3004\n    },\n    USER_REJECTED: {\n        message: \"User rejected.\",\n        code: 5e3\n    },\n    USER_REJECTED_CHAINS: {\n        message: \"User rejected chains.\",\n        code: 5001\n    },\n    USER_REJECTED_METHODS: {\n        message: \"User rejected methods.\",\n        code: 5002\n    },\n    USER_REJECTED_EVENTS: {\n        message: \"User rejected events.\",\n        code: 5003\n    },\n    UNSUPPORTED_CHAINS: {\n        message: \"Unsupported chains.\",\n        code: 5100\n    },\n    UNSUPPORTED_METHODS: {\n        message: \"Unsupported methods.\",\n        code: 5101\n    },\n    UNSUPPORTED_EVENTS: {\n        message: \"Unsupported events.\",\n        code: 5102\n    },\n    UNSUPPORTED_ACCOUNTS: {\n        message: \"Unsupported accounts.\",\n        code: 5103\n    },\n    UNSUPPORTED_NAMESPACE_KEY: {\n        message: \"Unsupported namespace key.\",\n        code: 5104\n    },\n    USER_DISCONNECTED: {\n        message: \"User disconnected.\",\n        code: 6e3\n    },\n    SESSION_SETTLEMENT_FAILED: {\n        message: \"Session settlement failed.\",\n        code: 7e3\n    },\n    WC_METHOD_UNSUPPORTED: {\n        message: \"Unsupported wc_ method.\",\n        code: 10001\n    }\n}, mr = {\n    NOT_INITIALIZED: {\n        message: \"Not initialized.\",\n        code: 1\n    },\n    NO_MATCHING_KEY: {\n        message: \"No matching key.\",\n        code: 2\n    },\n    RESTORE_WILL_OVERRIDE: {\n        message: \"Restore will override.\",\n        code: 3\n    },\n    RESUBSCRIBED: {\n        message: \"Resubscribed.\",\n        code: 4\n    },\n    MISSING_OR_INVALID: {\n        message: \"Missing or invalid.\",\n        code: 5\n    },\n    EXPIRED: {\n        message: \"Expired.\",\n        code: 6\n    },\n    UNKNOWN_TYPE: {\n        message: \"Unknown type.\",\n        code: 7\n    },\n    MISMATCHED_TOPIC: {\n        message: \"Mismatched topic.\",\n        code: 8\n    },\n    NON_CONFORMING_NAMESPACES: {\n        message: \"Non conforming namespaces.\",\n        code: 9\n    }\n};\nfunction te(e, t) {\n    const { message: n, code: r } = mr[e];\n    return {\n        message: t ? \"\".concat(n, \" \").concat(t) : n,\n        code: r\n    };\n}\nfunction de(e, t) {\n    const { message: n, code: r } = yr[e];\n    return {\n        message: t ? \"\".concat(n, \" \").concat(t) : n,\n        code: r\n    };\n}\nfunction $e(e, t) {\n    return Array.isArray(e) ? typeof t < \"u\" && e.length ? e.every(t) : !0 : !1;\n}\nfunction qe(e) {\n    return Object.getPrototypeOf(e) === Object.prototype && Object.keys(e).length;\n}\nfunction ae(e) {\n    return typeof e > \"u\";\n}\nfunction q(e, t) {\n    return t && ae(e) ? !0 : typeof e == \"string\" && !!e.trim().length;\n}\nfunction Ge(e, t) {\n    return t && ae(e) ? !0 : typeof e == \"number\" && !isNaN(e);\n}\n_c87 = Ge;\nfunction $i(e, t) {\n    const { requiredNamespaces: n } = t, r = Object.keys(e.namespaces), o = Object.keys(n);\n    let s = !0;\n    return re(o, r) ? (r.forEach((i)=>{\n        const { accounts: c, methods: u, events: a } = e.namespaces[i], l = le(c), f = n[i];\n        (!re(Le(i, f), l) || !re(f.methods, u) || !re(f.events, a)) && (s = !1);\n    }), s) : !1;\n}\nfunction Re(e) {\n    return q(e, !1) && e.includes(\":\") ? e.split(\":\").length === 2 : !1;\n}\n_c88 = Re;\nfunction br(e) {\n    if (q(e, !1) && e.includes(\":\")) {\n        const t = e.split(\":\");\n        if (t.length === 3) {\n            const n = t[0] + \":\" + t[1];\n            return !!t[2] && Re(n);\n        }\n    }\n    return !1;\n}\nfunction Ri(e) {\n    function t(n) {\n        try {\n            return typeof new URL(n) < \"u\";\n        } catch (e) {\n            return !1;\n        }\n    }\n    try {\n        if (q(e, !1)) {\n            if (t(e)) return !0;\n            const n = rt(e);\n            return t(n);\n        }\n    } catch (e) {}\n    return !1;\n}\n_c89 = Ri;\nfunction Pi(e) {\n    var t;\n    return (t = e === null || e === void 0 ? void 0 : e.proposer) == null ? void 0 : t.publicKey;\n}\n_c90 = Pi;\nfunction Li(e) {\n    return e === null || e === void 0 ? void 0 : e.topic;\n}\n_c91 = Li;\nfunction Bi(e, t) {\n    let n = null;\n    return q(e === null || e === void 0 ? void 0 : e.publicKey, !1) || (n = te(\"MISSING_OR_INVALID\", \"\".concat(t, \" controller public key should be a string\"))), n;\n}\n_c92 = Bi;\nfunction Rt(e) {\n    let t = !0;\n    return $e(e) ? e.length && (t = e.every((n)=>q(n, !1))) : t = !1, t;\n}\n_c93 = Rt;\nfunction wr(e, t, n) {\n    let r = null;\n    return $e(t) && t.length ? t.forEach((o)=>{\n        r || Re(o) || (r = de(\"UNSUPPORTED_CHAINS\", \"\".concat(n, \", chain \").concat(o, ' should be a string and conform to \"namespace:chainId\" format')));\n    }) : Re(e) || (r = de(\"UNSUPPORTED_CHAINS\", \"\".concat(n, ', chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }'))), r;\n}\nfunction Er(e, t, n) {\n    let r = null;\n    return Object.entries(e).forEach((param)=>{\n        let [o, s] = param;\n        if (r) return;\n        const i = wr(o, Le(o, s), \"\".concat(t, \" \").concat(n));\n        i && (r = i);\n    }), r;\n}\n_c94 = Er;\nfunction vr(e, t) {\n    let n = null;\n    return $e(e) ? e.forEach((r)=>{\n        n || br(r) || (n = de(\"UNSUPPORTED_ACCOUNTS\", \"\".concat(t, \", account \").concat(r, ' should be a string and conform to \"namespace:chainId:address\" format')));\n    }) : n = de(\"UNSUPPORTED_ACCOUNTS\", \"\".concat(t, ', accounts should be an array of strings conforming to \"namespace:chainId:address\" format')), n;\n}\nfunction xr(e, t) {\n    let n = null;\n    return Object.values(e).forEach((r)=>{\n        if (n) return;\n        const o = vr(r === null || r === void 0 ? void 0 : r.accounts, \"\".concat(t, \" namespace\"));\n        o && (n = o);\n    }), n;\n}\nfunction Or(e, t) {\n    let n = null;\n    return Rt(e === null || e === void 0 ? void 0 : e.methods) ? Rt(e === null || e === void 0 ? void 0 : e.events) || (n = de(\"UNSUPPORTED_EVENTS\", \"\".concat(t, \", events should be an array of strings or empty array for no events\"))) : n = de(\"UNSUPPORTED_METHODS\", \"\".concat(t, \", methods should be an array of strings or empty array for no methods\")), n;\n}\n_c95 = Or;\nfunction Pt(e, t) {\n    let n = null;\n    return Object.values(e).forEach((r)=>{\n        if (n) return;\n        const o = Or(r, \"\".concat(t, \", namespace\"));\n        o && (n = o);\n    }), n;\n}\n_c96 = Pt;\nfunction ji(e, t, n) {\n    let r = null;\n    if (e && qe(e)) {\n        const o = Pt(e, t);\n        o && (r = o);\n        const s = Er(e, t, n);\n        s && (r = s);\n    } else r = te(\"MISSING_OR_INVALID\", \"\".concat(t, \", \").concat(n, \" should be an object with data\"));\n    return r;\n}\nfunction Ir(e, t) {\n    let n = null;\n    if (e && qe(e)) {\n        const r = Pt(e, t);\n        r && (n = r);\n        const o = xr(e, t);\n        o && (n = o);\n    } else n = te(\"MISSING_OR_INVALID\", \"\".concat(t, \", namespaces should be an object with data\"));\n    return n;\n}\n_c97 = Ir;\nfunction Ar(e) {\n    return q(e.protocol, !0);\n}\n_c98 = Ar;\nfunction Ci(e, t) {\n    let n = !1;\n    return t && !e ? n = !0 : e && $e(e) && e.length && e.forEach((r)=>{\n        n = Ar(r);\n    }), n;\n}\n_c99 = Ci;\nfunction ki(e) {\n    return typeof e == \"number\";\n}\nfunction Di(e) {\n    return typeof e < \"u\" && typeof e !== null;\n}\n_c100 = Di;\nfunction Mi(e) {\n    return !(!e || typeof e != \"object\" || !e.code || !Ge(e.code, !1) || !e.message || !q(e.message, !1));\n}\n_c101 = Mi;\nfunction Vi(e) {\n    return !(ae(e) || !q(e.method, !1));\n}\n_c102 = Vi;\nfunction Hi(e) {\n    return !(ae(e) || ae(e.result) && ae(e.error) || !Ge(e.id, !1) || !q(e.jsonrpc, !1));\n}\n_c103 = Hi;\nfunction Ki(e) {\n    return !(ae(e) || !q(e.name, !1));\n}\n_c104 = Ki;\nfunction Fi(e, t) {\n    return !(!Re(t) || !lr(e).includes(t));\n}\n_c105 = Fi;\nfunction qi(e, t, n) {\n    return q(n, !1) ? dr(e, t).includes(n) : !1;\n}\nfunction Gi(e, t, n) {\n    return q(n, !1) ? hr(e, t).includes(n) : !1;\n}\n_c106 = Gi;\nfunction Nr(e, t, n) {\n    let r = null;\n    const o = Wi(e), s = zi(t), i = Object.keys(o), c = Object.keys(s), u = Sr(Object.keys(e)), a = Sr(Object.keys(t)), l = u.filter((f)=>!a.includes(f));\n    return l.length && (r = te(\"NON_CONFORMING_NAMESPACES\", \"\".concat(n, \" namespaces keys don't satisfy requiredNamespaces.\\n      Required: \").concat(l.toString(), \"\\n      Received: \").concat(Object.keys(t).toString()))), re(i, c) || (r = te(\"NON_CONFORMING_NAMESPACES\", \"\".concat(n, \" namespaces chains don't satisfy required namespaces.\\n      Required: \").concat(i.toString(), \"\\n      Approved: \").concat(c.toString()))), Object.keys(t).forEach((f)=>{\n        if (!f.includes(\":\") || r) return;\n        const d = le(t[f].accounts);\n        d.includes(f) || (r = te(\"NON_CONFORMING_NAMESPACES\", \"\".concat(n, \" namespaces accounts don't satisfy namespace accounts for \").concat(f, \"\\n        Required: \").concat(f, \"\\n        Approved: \").concat(d.toString())));\n    }), i.forEach((f)=>{\n        r || (re(o[f].methods, s[f].methods) ? re(o[f].events, s[f].events) || (r = te(\"NON_CONFORMING_NAMESPACES\", \"\".concat(n, \" namespaces events don't satisfy namespace events for \").concat(f))) : r = te(\"NON_CONFORMING_NAMESPACES\", \"\".concat(n, \" namespaces methods don't satisfy namespace methods for \").concat(f)));\n    }), r;\n}\n_c107 = Nr;\nfunction Wi(e) {\n    const t = {};\n    return Object.keys(e).forEach((n)=>{\n        var r;\n        n.includes(\":\") ? t[n] = e[n] : (r = e[n].chains) == null || r.forEach((o)=>{\n            t[o] = {\n                methods: e[n].methods,\n                events: e[n].events\n            };\n        });\n    }), t;\n}\n_c108 = Wi;\nfunction Sr(e) {\n    return [\n        ...new Set(e.map((t)=>t.includes(\":\") ? t.split(\":\")[0] : t))\n    ];\n}\n_c109 = Sr;\nfunction zi(e) {\n    const t = {};\n    return Object.keys(e).forEach((n)=>{\n        if (n.includes(\":\")) t[n] = e[n];\n        else {\n            const r = le(e[n].accounts);\n            r === null || r === void 0 ? void 0 : r.forEach((o)=>{\n                t[o] = {\n                    accounts: e[n].accounts.filter((s)=>s.includes(\"\".concat(o, \":\"))),\n                    methods: e[n].methods,\n                    events: e[n].events\n                };\n            });\n        }\n    }), t;\n}\nfunction Ji(e, t) {\n    return Ge(e, !1) && e <= t.max && e >= t.min;\n}\n_c110 = Ji;\nfunction Yi() {\n    const e = ue();\n    return new Promise((t)=>{\n        switch(e){\n            case H.browser:\n                t(Ur());\n                break;\n            case H.reactNative:\n                t(_r());\n                break;\n            case H.node:\n                t(Tr());\n                break;\n            default:\n                t(!0);\n        }\n    });\n}\n_c111 = Yi;\nfunction Ur() {\n    var _navigator;\n    return Ae() && ((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.onLine);\n}\n_c112 = Ur;\nasync function _r() {\n    if (ne() && typeof __webpack_require__.g < \"u\" && __webpack_require__.g != null && __webpack_require__.g.NetInfo) {\n        const e = await (__webpack_require__.g == null ? void 0 : __webpack_require__.g.NetInfo.fetch());\n        return e === null || e === void 0 ? void 0 : e.isConnected;\n    }\n    return !0;\n}\nfunction Tr() {\n    return !0;\n}\n_c113 = Tr;\nfunction Xi(e) {\n    switch(ue()){\n        case H.browser:\n            $r(e);\n            break;\n        case H.reactNative:\n            Rr(e);\n            break;\n        case H.node:\n            break;\n    }\n}\n_c114 = Xi;\nfunction $r(e) {\n    !ne() && Ae() && (window.addEventListener(\"online\", ()=>e(!0)), window.addEventListener(\"offline\", ()=>e(!1)));\n}\nfunction Rr(e) {\n    var _global;\n    ne() && typeof __webpack_require__.g < \"u\" && __webpack_require__.g != null && __webpack_require__.g.NetInfo && ((_global = __webpack_require__.g) === null || _global === void 0 ? void 0 : _global.NetInfo.addEventListener((t)=>e(t === null || t === void 0 ? void 0 : t.isConnected)));\n}\n_c115 = Rr;\nconst Lt = {};\nclass Zi {\n    static get(t) {\n        return Lt[t];\n    }\n    static set(t, n) {\n        Lt[t] = n;\n    }\n    static delete(t) {\n        delete Lt[t];\n    }\n}\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72, _c73, _c74, _c75, _c76, _c77, _c78, _c79, _c80, _c81, _c82, _c83, _c84, _c85, _c86, _c87, _c88, _c89, _c90, _c91, _c92, _c93, _c94, _c95, _c96, _c97, _c98, _c99, _c100, _c101, _c102, _c103, _c104, _c105, _c106, _c107, _c108, _c109, _c110, _c111, _c112, _c113, _c114, _c115;\n$RefreshReg$(_c, \"Ye\");\n$RefreshReg$(_c1, \"Dt\");\n$RefreshReg$(_c2, \"Xe\");\n$RefreshReg$(_c3, \"Mt\");\n$RefreshReg$(_c4, \"Ze\");\n$RefreshReg$(_c5, \"Vt\");\n$RefreshReg$(_c6, \"Ht\");\n$RefreshReg$(_c7, \"Mr\");\n$RefreshReg$(_c8, \"Vr\");\n$RefreshReg$(_c9, \"Kt\");\n$RefreshReg$(_c10, \"Hr\");\n$RefreshReg$(_c11, \"Kr\");\n$RefreshReg$(_c12, \"Fr\");\n$RefreshReg$(_c13, \"Le\");\n$RefreshReg$(_c14, \"Wr\");\n$RefreshReg$(_c15, \"Ae\");\n$RefreshReg$(_c16, \"Jr\");\n$RefreshReg$(_c17, \"Wt\");\n$RefreshReg$(_c18, \"Yr\");\n$RefreshReg$(_c19, \"Xr\");\n$RefreshReg$(_c20, \"Jt\");\n$RefreshReg$(_c21, \"Yt\");\n$RefreshReg$(_c22, \"Zr\");\n$RefreshReg$(_c23, \"Qr\");\n$RefreshReg$(_c24, \"Xt\");\n$RefreshReg$(_c25, \"Zt\");\n$RefreshReg$(_c26, \"Qt\");\n$RefreshReg$(_c27, \"Q\");\n$RefreshReg$(_c28, \"Eo\");\n$RefreshReg$(_c29, \"Ne\");\n$RefreshReg$(_c30, \"Oo\");\n$RefreshReg$(_c31, \"Io\");\n$RefreshReg$(_c32, \"J\");\n$RefreshReg$(_c33, \"To\");\n$RefreshReg$(_c34, \"Se\");\n$RefreshReg$(_c35, \"Do\");\n$RefreshReg$(_c36, \"Ko\");\n$RefreshReg$(_c37, \"Yo\");\n$RefreshReg$(_c38, \"In\");\n$RefreshReg$(_c39, \"Xo\");\n$RefreshReg$(_c40, \"Zo\");\n$RefreshReg$(_c41, \"An\");\n$RefreshReg$(_c42, \"Qo\");\n$RefreshReg$(_c43, \"Nn\");\n$RefreshReg$(_c44, \"Sn\");\n$RefreshReg$(_c45, \"Un\");\n$RefreshReg$(_c46, \"Y\");\n$RefreshReg$(_c47, \"Tn\");\n$RefreshReg$(_c48, \"De\");\n$RefreshReg$(_c49, \"Rn\");\n$RefreshReg$(_c50, \"Pn\");\n$RefreshReg$(_c51, \"Me\");\n$RefreshReg$(_c52, \"Ln\");\n$RefreshReg$(_c53, \"F\");\n$RefreshReg$(_c54, \"Bn\");\n$RefreshReg$(_c55, \"Cn\");\n$RefreshReg$(_c56, \"Ee\");\n$RefreshReg$(_c57, \"M\");\n$RefreshReg$(_c58, \"Os\");\n$RefreshReg$(_c59, \"Kn\");\n$RefreshReg$(_c60, \"Us\");\n$RefreshReg$(_c61, \"Ts\");\n$RefreshReg$(_c62, \"Rs\");\n$RefreshReg$(_c63, \"Ps\");\n$RefreshReg$(_c64, \"He$fn\");\n$RefreshReg$(_c65, \"He\");\n$RefreshReg$(_c66, \"Ds\");\n$RefreshReg$(_c67, \"Jn\");\n$RefreshReg$(_c68, \"Yn\");\n$RefreshReg$(_c69, \"Xn\");\n$RefreshReg$(_c70, \"Ms\");\n$RefreshReg$(_c71, \"Vs\");\n$RefreshReg$(_c72, \"Zn\");\n$RefreshReg$(_c73, \"Et\");\n$RefreshReg$(_c74, \"Hs\");\n$RefreshReg$(_c75, \"Qn\");\n$RefreshReg$(_c76, \"Fs\");\n$RefreshReg$(_c77, \"Gs\");\n$RefreshReg$(_c78, \"Ws\");\n$RefreshReg$(_c79, \"Xs\");\n$RefreshReg$(_c80, \"Zs\");\n$RefreshReg$(_c81, \"Ut\");\n$RefreshReg$(_c82, \"Fe\");\n$RefreshReg$(_c83, \"Ei\");\n$RefreshReg$(_c84, \"Ui\");\n$RefreshReg$(_c85, \"Tt\");\n$RefreshReg$(_c86, \"Ti\");\n$RefreshReg$(_c87, \"Ge\");\n$RefreshReg$(_c88, \"Re\");\n$RefreshReg$(_c89, \"Ri\");\n$RefreshReg$(_c90, \"Pi\");\n$RefreshReg$(_c91, \"Li\");\n$RefreshReg$(_c92, \"Bi\");\n$RefreshReg$(_c93, \"Rt\");\n$RefreshReg$(_c94, \"Er\");\n$RefreshReg$(_c95, \"Or\");\n$RefreshReg$(_c96, \"Pt\");\n$RefreshReg$(_c97, \"Ir\");\n$RefreshReg$(_c98, \"Ar\");\n$RefreshReg$(_c99, \"Ci\");\n$RefreshReg$(_c100, \"Di\");\n$RefreshReg$(_c101, \"Mi\");\n$RefreshReg$(_c102, \"Vi\");\n$RefreshReg$(_c103, \"Hi\");\n$RefreshReg$(_c104, \"Ki\");\n$RefreshReg$(_c105, \"Fi\");\n$RefreshReg$(_c106, \"Gi\");\n$RefreshReg$(_c107, \"Nr\");\n$RefreshReg$(_c108, \"Wi\");\n$RefreshReg$(_c109, \"Sr\");\n$RefreshReg$(_c110, \"Ji\");\n$RefreshReg$(_c111, \"Yi\");\n$RefreshReg$(_c112, \"Ur\");\n$RefreshReg$(_c113, \"Tr\");\n$RefreshReg$(_c114, \"Xi\");\n$RefreshReg$(_c115, \"Rr\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/window-getters/dist/cjs/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;\nfunction getFromWindow(name) {\n    let res = undefined;\n    if ( true && typeof window[name] !== \"undefined\") {\n        res = window[name];\n    }\n    return res;\n}\nexports.getFromWindow = getFromWindow;\nfunction getFromWindowOrThrow(name) {\n    const res = getFromWindow(name);\n    if (!res) {\n        throw new Error(\"\".concat(name, \" is not defined in Window\"));\n    }\n    return res;\n}\nexports.getFromWindowOrThrow = getFromWindowOrThrow;\nfunction getDocumentOrThrow() {\n    return getFromWindowOrThrow(\"document\");\n}\nexports.getDocumentOrThrow = getDocumentOrThrow;\nfunction getDocument() {\n    return getFromWindow(\"document\");\n}\nexports.getDocument = getDocument;\nfunction getNavigatorOrThrow() {\n    return getFromWindowOrThrow(\"navigator\");\n}\nexports.getNavigatorOrThrow = getNavigatorOrThrow;\nfunction getNavigator() {\n    return getFromWindow(\"navigator\");\n}\nexports.getNavigator = getNavigator;\nfunction getLocationOrThrow() {\n    return getFromWindowOrThrow(\"location\");\n}\nexports.getLocationOrThrow = getLocationOrThrow;\nfunction getLocation() {\n    return getFromWindow(\"location\");\n}\nexports.getLocation = getLocation;\nfunction getCryptoOrThrow() {\n    return getFromWindowOrThrow(\"crypto\");\n}\nexports.getCryptoOrThrow = getCryptoOrThrow;\nfunction getCrypto() {\n    return getFromWindow(\"crypto\");\n}\nexports.getCrypto = getCrypto;\nfunction getLocalStorageOrThrow() {\n    return getFromWindowOrThrow(\"localStorage\");\n}\nexports.getLocalStorageOrThrow = getLocalStorageOrThrow;\nfunction getLocalStorage() {\n    return getFromWindow(\"localStorage\");\n}\nexports.getLocalStorage = getLocalStorage; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93aW5kb3ctZ2V0dGVycy9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLDhCQUE4QixHQUFHQSxpQkFBaUIsR0FBR0Esd0JBQXdCLEdBQUdBLG1CQUFtQixHQUFHQSwwQkFBMEIsR0FBR0Esb0JBQW9CLEdBQUdBLDJCQUEyQixHQUFHQSxtQkFBbUIsR0FBR0EsMEJBQTBCLEdBQUdBLDRCQUE0QixHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQ2pVLFNBQVNhLGNBQWNDLElBQUk7SUFDdkIsSUFBSUMsTUFBTUM7SUFDVixJQUFJLEtBQTZCLElBQUksT0FBT0MsTUFBTSxDQUFDSCxLQUFLLEtBQUssYUFBYTtRQUN0RUMsTUFBTUUsTUFBTSxDQUFDSCxLQUFLO0lBQ3RCO0lBQ0EsT0FBT0M7QUFDWDtBQUNBZixxQkFBcUIsR0FBR2E7QUFDeEIsU0FBU0QscUJBQXFCRSxJQUFJO0lBQzlCLE1BQU1DLE1BQU1GLGNBQWNDO0lBQzFCLElBQUksQ0FBQ0MsS0FBSztRQUNOLE1BQU0sSUFBSUcsTUFBTSxHQUFRLE9BQUxKLE1BQUs7SUFDNUI7SUFDQSxPQUFPQztBQUNYO0FBQ0FmLDRCQUE0QixHQUFHWTtBQUMvQixTQUFTRDtJQUNMLE9BQU9DLHFCQUFxQjtBQUNoQztBQUNBWiwwQkFBMEIsR0FBR1c7QUFDN0IsU0FBU0Q7SUFDTCxPQUFPRyxjQUFjO0FBQ3pCO0FBQ0FiLG1CQUFtQixHQUFHVTtBQUN0QixTQUFTRDtJQUNMLE9BQU9HLHFCQUFxQjtBQUNoQztBQUNBWiwyQkFBMkIsR0FBR1M7QUFDOUIsU0FBU0Q7SUFDTCxPQUFPSyxjQUFjO0FBQ3pCO0FBQ0FiLG9CQUFvQixHQUFHUTtBQUN2QixTQUFTRDtJQUNMLE9BQU9LLHFCQUFxQjtBQUNoQztBQUNBWiwwQkFBMEIsR0FBR087QUFDN0IsU0FBU0Q7SUFDTCxPQUFPTyxjQUFjO0FBQ3pCO0FBQ0FiLG1CQUFtQixHQUFHTTtBQUN0QixTQUFTRDtJQUNMLE9BQU9PLHFCQUFxQjtBQUNoQztBQUNBWix3QkFBd0IsR0FBR0s7QUFDM0IsU0FBU0Q7SUFDTCxPQUFPUyxjQUFjO0FBQ3pCO0FBQ0FiLGlCQUFpQixHQUFHSTtBQUNwQixTQUFTRDtJQUNMLE9BQU9TLHFCQUFxQjtBQUNoQztBQUNBWiw4QkFBOEIsR0FBR0c7QUFDakMsU0FBU0Q7SUFDTCxPQUFPVyxjQUFjO0FBQ3pCO0FBQ0FiLHVCQUF1QixHQUFHRSxpQkFDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93aW5kb3ctZ2V0dGVycy9kaXN0L2Nqcy9pbmRleC5qcz83YjIzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRMb2NhbFN0b3JhZ2UgPSBleHBvcnRzLmdldExvY2FsU3RvcmFnZU9yVGhyb3cgPSBleHBvcnRzLmdldENyeXB0byA9IGV4cG9ydHMuZ2V0Q3J5cHRvT3JUaHJvdyA9IGV4cG9ydHMuZ2V0TG9jYXRpb24gPSBleHBvcnRzLmdldExvY2F0aW9uT3JUaHJvdyA9IGV4cG9ydHMuZ2V0TmF2aWdhdG9yID0gZXhwb3J0cy5nZXROYXZpZ2F0b3JPclRocm93ID0gZXhwb3J0cy5nZXREb2N1bWVudCA9IGV4cG9ydHMuZ2V0RG9jdW1lbnRPclRocm93ID0gZXhwb3J0cy5nZXRGcm9tV2luZG93T3JUaHJvdyA9IGV4cG9ydHMuZ2V0RnJvbVdpbmRvdyA9IHZvaWQgMDtcbmZ1bmN0aW9uIGdldEZyb21XaW5kb3cobmFtZSkge1xuICAgIGxldCByZXMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvd1tuYW1lXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXMgPSB3aW5kb3dbbmFtZV07XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmdldEZyb21XaW5kb3cgPSBnZXRGcm9tV2luZG93O1xuZnVuY3Rpb24gZ2V0RnJvbVdpbmRvd09yVGhyb3cobmFtZSkge1xuICAgIGNvbnN0IHJlcyA9IGdldEZyb21XaW5kb3cobmFtZSk7XG4gICAgaWYgKCFyZXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke25hbWV9IGlzIG5vdCBkZWZpbmVkIGluIFdpbmRvd2ApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5nZXRGcm9tV2luZG93T3JUaHJvdyA9IGdldEZyb21XaW5kb3dPclRocm93O1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnRPclRocm93KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93T3JUaHJvdyhcImRvY3VtZW50XCIpO1xufVxuZXhwb3J0cy5nZXREb2N1bWVudE9yVGhyb3cgPSBnZXREb2N1bWVudE9yVGhyb3c7XG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvdyhcImRvY3VtZW50XCIpO1xufVxuZXhwb3J0cy5nZXREb2N1bWVudCA9IGdldERvY3VtZW50O1xuZnVuY3Rpb24gZ2V0TmF2aWdhdG9yT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJuYXZpZ2F0b3JcIik7XG59XG5leHBvcnRzLmdldE5hdmlnYXRvck9yVGhyb3cgPSBnZXROYXZpZ2F0b3JPclRocm93O1xuZnVuY3Rpb24gZ2V0TmF2aWdhdG9yKCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwibmF2aWdhdG9yXCIpO1xufVxuZXhwb3J0cy5nZXROYXZpZ2F0b3IgPSBnZXROYXZpZ2F0b3I7XG5mdW5jdGlvbiBnZXRMb2NhdGlvbk9yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwibG9jYXRpb25cIik7XG59XG5leHBvcnRzLmdldExvY2F0aW9uT3JUaHJvdyA9IGdldExvY2F0aW9uT3JUaHJvdztcbmZ1bmN0aW9uIGdldExvY2F0aW9uKCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwibG9jYXRpb25cIik7XG59XG5leHBvcnRzLmdldExvY2F0aW9uID0gZ2V0TG9jYXRpb247XG5mdW5jdGlvbiBnZXRDcnlwdG9PclRocm93KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93T3JUaHJvdyhcImNyeXB0b1wiKTtcbn1cbmV4cG9ydHMuZ2V0Q3J5cHRvT3JUaHJvdyA9IGdldENyeXB0b09yVGhyb3c7XG5mdW5jdGlvbiBnZXRDcnlwdG8oKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJjcnlwdG9cIik7XG59XG5leHBvcnRzLmdldENyeXB0byA9IGdldENyeXB0bztcbmZ1bmN0aW9uIGdldExvY2FsU3RvcmFnZU9yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwibG9jYWxTdG9yYWdlXCIpO1xufVxuZXhwb3J0cy5nZXRMb2NhbFN0b3JhZ2VPclRocm93ID0gZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdztcbmZ1bmN0aW9uIGdldExvY2FsU3RvcmFnZSgpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvdyhcImxvY2FsU3RvcmFnZVwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYWxTdG9yYWdlID0gZ2V0TG9jYWxTdG9yYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0TG9jYWxTdG9yYWdlIiwiZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdyIsImdldENyeXB0byIsImdldENyeXB0b09yVGhyb3ciLCJnZXRMb2NhdGlvbiIsImdldExvY2F0aW9uT3JUaHJvdyIsImdldE5hdmlnYXRvciIsImdldE5hdmlnYXRvck9yVGhyb3ciLCJnZXREb2N1bWVudCIsImdldERvY3VtZW50T3JUaHJvdyIsImdldEZyb21XaW5kb3dPclRocm93IiwiZ2V0RnJvbVdpbmRvdyIsIm5hbWUiLCJyZXMiLCJ1bmRlZmluZWQiLCJ3aW5kb3ciLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/window-metadata/dist/cjs/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getWindowMetadata = void 0;\nconst window_getters_1 = __webpack_require__(/*! @walletconnect/window-getters */ \"(app-pages-browser)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\nfunction getWindowMetadata() {\n    let doc;\n    let loc;\n    try {\n        doc = window_getters_1.getDocumentOrThrow();\n        loc = window_getters_1.getLocationOrThrow();\n    } catch (e) {\n        return null;\n    }\n    function getIcons() {\n        const links = doc.getElementsByTagName(\"link\");\n        const icons = [];\n        for(let i = 0; i < links.length; i++){\n            const link = links[i];\n            const rel = link.getAttribute(\"rel\");\n            if (rel) {\n                if (rel.toLowerCase().indexOf(\"icon\") > -1) {\n                    const href = link.getAttribute(\"href\");\n                    if (href) {\n                        if (href.toLowerCase().indexOf(\"https:\") === -1 && href.toLowerCase().indexOf(\"http:\") === -1 && href.indexOf(\"//\") !== 0) {\n                            let absoluteHref = loc.protocol + \"//\" + loc.host;\n                            if (href.indexOf(\"/\") === 0) {\n                                absoluteHref += href;\n                            } else {\n                                const path = loc.pathname.split(\"/\");\n                                path.pop();\n                                const finalPath = path.join(\"/\");\n                                absoluteHref += finalPath + \"/\" + href;\n                            }\n                            icons.push(absoluteHref);\n                        } else if (href.indexOf(\"//\") === 0) {\n                            const absoluteUrl = loc.protocol + href;\n                            icons.push(absoluteUrl);\n                        } else {\n                            icons.push(href);\n                        }\n                    }\n                }\n            }\n        }\n        return icons;\n    }\n    function getWindowMetadataOfAny() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const metaTags = doc.getElementsByTagName(\"meta\");\n        for(let i = 0; i < metaTags.length; i++){\n            const tag = metaTags[i];\n            const attributes = [\n                \"itemprop\",\n                \"property\",\n                \"name\"\n            ].map((target)=>tag.getAttribute(target)).filter((attr)=>{\n                if (attr) {\n                    return args.includes(attr);\n                }\n                return false;\n            });\n            if (attributes.length && attributes) {\n                const content = tag.getAttribute(\"content\");\n                if (content) {\n                    return content;\n                }\n            }\n        }\n        return \"\";\n    }\n    function getName() {\n        let name = getWindowMetadataOfAny(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n        if (!name) {\n            name = doc.title;\n        }\n        return name;\n    }\n    function getDescription() {\n        const description = getWindowMetadataOfAny(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n        return description;\n    }\n    const name = getName();\n    const description = getDescription();\n    const url = loc.origin;\n    const icons = getIcons();\n    const meta = {\n        description,\n        url,\n        icons,\n        name\n    };\n    return meta;\n}\nexports.getWindowMetadata = getWindowMetadata; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\nvar code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfor(var i = 0, len = code.length; i < len; ++i){\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n}\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup[\"-\".charCodeAt(0)] = 62;\nrevLookup[\"_\".charCodeAt(0)] = 63;\nfunction getLens(b64) {\n    var len = b64.length;\n    if (len % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    }\n    // Trim off extra bytes after placeholder bytes are found\n    // See: https://github.com/beatgammit/base64-js/issues/42\n    var validLen = b64.indexOf(\"=\");\n    if (validLen === -1) validLen = len;\n    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength(b64) {\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n    var tmp;\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    // if there are placeholders, only get up to the last complete 4 chars\n    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i;\n    for(i = 0; i < len; i += 4){\n        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 0xFF;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    return arr;\n}\nfunction tripletToBase64(num) {\n    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\nfunction encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for(var i = start; i < end; i += 3){\n        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n        output.push(tripletToBase64(tmp));\n    }\n    return output.join(\"\");\n}\nfunction fromByteArray(uint8) {\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    ;\n    var parts = [];\n    var maxChunkLength = 16383 // must be multiple of 3\n    ;\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){\n        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    }\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + \"==\");\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + \"=\");\n    }\n    return parts.join(\"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/base64-js/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/brorand/index.js":
/*!***************************************!*\
  !*** ./node_modules/brorand/index.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar r;\nmodule.exports = function rand(len) {\n    if (!r) r = new Rand(null);\n    return r.generate(len);\n};\nfunction Rand(rand) {\n    this.rand = rand;\n}\n_c = Rand;\nmodule.exports.Rand = Rand;\nRand.prototype.generate = function generate(len) {\n    return this._rand(len);\n};\n// Emulate crypto API using randy\nRand.prototype._rand = function _rand(n) {\n    if (this.rand.getBytes) return this.rand.getBytes(n);\n    var res = new Uint8Array(n);\n    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();\n    return res;\n};\nif (typeof self === \"object\") {\n    if (self.crypto && self.crypto.getRandomValues) {\n        // Modern browsers\n        Rand.prototype._rand = function _rand(n) {\n            var arr = new Uint8Array(n);\n            self.crypto.getRandomValues(arr);\n            return arr;\n        };\n    } else if (self.msCrypto && self.msCrypto.getRandomValues) {\n        // IE\n        Rand.prototype._rand = function _rand(n) {\n            var arr = new Uint8Array(n);\n            self.msCrypto.getRandomValues(arr);\n            return arr;\n        };\n    // Safari's WebWorkers do not have `crypto`\n    } else if (true) {\n        // Old junk\n        Rand.prototype._rand = function() {\n            throw new Error(\"Not implemented yet\");\n        };\n    }\n} else {\n    // Node.js or Web worker with no crypto support\n    try {\n        var crypto = __webpack_require__(/*! crypto */ \"?8d7a\");\n        if (typeof crypto.randomBytes !== \"function\") throw new Error(\"Not supported\");\n        Rand.prototype._rand = function _rand(n) {\n            return crypto.randomBytes(n);\n        };\n    } catch (e) {}\n}\nvar _c;\n$RefreshReg$(_c, \"Rand\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9icm9yYW5kL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQTtBQUVKQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsS0FBS0MsR0FBRztJQUNoQyxJQUFJLENBQUNKLEdBQ0hBLElBQUksSUFBSUssS0FBSztJQUVmLE9BQU9MLEVBQUVNLFFBQVEsQ0FBQ0Y7QUFDcEI7QUFFQSxTQUFTQyxLQUFLRixJQUFJO0lBQ2hCLElBQUksQ0FBQ0EsSUFBSSxHQUFHQTtBQUNkO0tBRlNFO0FBR1RKLG1CQUFtQixHQUFHSTtBQUV0QkEsS0FBS0UsU0FBUyxDQUFDRCxRQUFRLEdBQUcsU0FBU0EsU0FBU0YsR0FBRztJQUM3QyxPQUFPLElBQUksQ0FBQ0ksS0FBSyxDQUFDSjtBQUNwQjtBQUVBLGlDQUFpQztBQUNqQ0MsS0FBS0UsU0FBUyxDQUFDQyxLQUFLLEdBQUcsU0FBU0EsTUFBTUMsQ0FBQztJQUNyQyxJQUFJLElBQUksQ0FBQ04sSUFBSSxDQUFDTyxRQUFRLEVBQ3BCLE9BQU8sSUFBSSxDQUFDUCxJQUFJLENBQUNPLFFBQVEsQ0FBQ0Q7SUFFNUIsSUFBSUUsTUFBTSxJQUFJQyxXQUFXSDtJQUN6QixJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUYsSUFBSUcsTUFBTSxFQUFFRCxJQUM5QkYsR0FBRyxDQUFDRSxFQUFFLEdBQUcsSUFBSSxDQUFDVixJQUFJLENBQUNZLE9BQU87SUFDNUIsT0FBT0o7QUFDVDtBQUVBLElBQUksT0FBT0ssU0FBUyxVQUFVO0lBQzVCLElBQUlBLEtBQUtDLE1BQU0sSUFBSUQsS0FBS0MsTUFBTSxDQUFDQyxlQUFlLEVBQUU7UUFDOUMsa0JBQWtCO1FBQ2xCYixLQUFLRSxTQUFTLENBQUNDLEtBQUssR0FBRyxTQUFTQSxNQUFNQyxDQUFDO1lBQ3JDLElBQUlVLE1BQU0sSUFBSVAsV0FBV0g7WUFDekJPLEtBQUtDLE1BQU0sQ0FBQ0MsZUFBZSxDQUFDQztZQUM1QixPQUFPQTtRQUNUO0lBQ0YsT0FBTyxJQUFJSCxLQUFLSSxRQUFRLElBQUlKLEtBQUtJLFFBQVEsQ0FBQ0YsZUFBZSxFQUFFO1FBQ3pELEtBQUs7UUFDTGIsS0FBS0UsU0FBUyxDQUFDQyxLQUFLLEdBQUcsU0FBU0EsTUFBTUMsQ0FBQztZQUNyQyxJQUFJVSxNQUFNLElBQUlQLFdBQVdIO1lBQ3pCTyxLQUFLSSxRQUFRLENBQUNGLGVBQWUsQ0FBQ0M7WUFDOUIsT0FBT0E7UUFDVDtJQUVGLDJDQUEyQztJQUMzQyxPQUFPLElBQUksSUFBa0IsRUFBVTtRQUNyQyxXQUFXO1FBQ1hkLEtBQUtFLFNBQVMsQ0FBQ0MsS0FBSyxHQUFHO1lBQ3JCLE1BQU0sSUFBSWEsTUFBTTtRQUNsQjtJQUNGO0FBQ0YsT0FBTztJQUNMLCtDQUErQztJQUMvQyxJQUFJO1FBQ0YsSUFBSUosU0FBU0ssbUJBQU9BLENBQUM7UUFDckIsSUFBSSxPQUFPTCxPQUFPTSxXQUFXLEtBQUssWUFDaEMsTUFBTSxJQUFJRixNQUFNO1FBRWxCaEIsS0FBS0UsU0FBUyxDQUFDQyxLQUFLLEdBQUcsU0FBU0EsTUFBTUMsQ0FBQztZQUNyQyxPQUFPUSxPQUFPTSxXQUFXLENBQUNkO1FBQzVCO0lBQ0YsRUFBRSxPQUFPZSxHQUFHLENBQ1o7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvYnJvcmFuZC9pbmRleC5qcz82NTBkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciByO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJhbmQobGVuKSB7XG4gIGlmICghcilcbiAgICByID0gbmV3IFJhbmQobnVsbCk7XG5cbiAgcmV0dXJuIHIuZ2VuZXJhdGUobGVuKTtcbn07XG5cbmZ1bmN0aW9uIFJhbmQocmFuZCkge1xuICB0aGlzLnJhbmQgPSByYW5kO1xufVxubW9kdWxlLmV4cG9ydHMuUmFuZCA9IFJhbmQ7XG5cblJhbmQucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuKSB7XG4gIHJldHVybiB0aGlzLl9yYW5kKGxlbik7XG59O1xuXG4vLyBFbXVsYXRlIGNyeXB0byBBUEkgdXNpbmcgcmFuZHlcblJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICBpZiAodGhpcy5yYW5kLmdldEJ5dGVzKVxuICAgIHJldHVybiB0aGlzLnJhbmQuZ2V0Qnl0ZXMobik7XG5cbiAgdmFyIHJlcyA9IG5ldyBVaW50OEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkrKylcbiAgICByZXNbaV0gPSB0aGlzLnJhbmQuZ2V0Qnl0ZSgpO1xuICByZXR1cm4gcmVzO1xufTtcblxuaWYgKHR5cGVvZiBzZWxmID09PSAnb2JqZWN0Jykge1xuICBpZiAoc2VsZi5jcnlwdG8gJiYgc2VsZi5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gTW9kZXJuIGJyb3dzZXJzXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gICAgICBzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcbiAgfSBlbHNlIGlmIChzZWxmLm1zQ3J5cHRvICYmIHNlbGYubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gSUVcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHNlbGYubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH07XG5cbiAgLy8gU2FmYXJpJ3MgV2ViV29ya2VycyBkbyBub3QgaGF2ZSBgY3J5cHRvYFxuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gT2xkIGp1bmtcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgeWV0Jyk7XG4gICAgfTtcbiAgfVxufSBlbHNlIHtcbiAgLy8gTm9kZS5qcyBvciBXZWIgd29ya2VyIHdpdGggbm8gY3J5cHRvIHN1cHBvcnRcbiAgdHJ5IHtcbiAgICB2YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gICAgaWYgKHR5cGVvZiBjcnlwdG8ucmFuZG9tQnl0ZXMgIT09ICdmdW5jdGlvbicpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQnKTtcblxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhuKTtcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJyIiwibW9kdWxlIiwiZXhwb3J0cyIsInJhbmQiLCJsZW4iLCJSYW5kIiwiZ2VuZXJhdGUiLCJwcm90b3R5cGUiLCJfcmFuZCIsIm4iLCJnZXRCeXRlcyIsInJlcyIsIlVpbnQ4QXJyYXkiLCJpIiwibGVuZ3RoIiwiZ2V0Qnl0ZSIsInNlbGYiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJhcnIiLCJtc0NyeXB0byIsIkVycm9yIiwicmVxdWlyZSIsInJhbmRvbUJ5dGVzIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/brorand/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */ /* eslint-disable no-proto */ \nconst base64 = __webpack_require__(/*! base64-js */ \"(app-pages-browser)/./node_modules/base64-js/index.js\");\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"(app-pages-browser)/./node_modules/ieee754/index.js\");\nconst customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" // eslint-disable-line dot-notation\n ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") // eslint-disable-line dot-notation\n : null;\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\nconst K_MAX_LENGTH = 0x7fffffff;\nexports.kMaxLength = K_MAX_LENGTH;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n    console.error(\"This browser lacks typed array (Uint8Array) support which is required by \" + \"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n}\nfunction typedArraySupport() {\n    // Can typed array instances can be augmented?\n    try {\n        const arr = new Uint8Array(1);\n        const proto = {\n            foo: function() {\n                return 42;\n            }\n        };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n    } catch (e) {\n        return false;\n    }\n}\nObject.defineProperty(Buffer.prototype, \"parent\", {\n    enumerable: true,\n    get: function() {\n        if (!Buffer.isBuffer(this)) return undefined;\n        return this.buffer;\n    }\n});\nObject.defineProperty(Buffer.prototype, \"offset\", {\n    enumerable: true,\n    get: function() {\n        if (!Buffer.isBuffer(this)) return undefined;\n        return this.byteOffset;\n    }\n});\nfunction createBuffer(length) {\n    if (length > K_MAX_LENGTH) {\n        throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n    }\n    // Return an augmented `Uint8Array` instance\n    const buf = new Uint8Array(length);\n    Object.setPrototypeOf(buf, Buffer.prototype);\n    return buf;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */ function Buffer(arg, encodingOrOffset, length) {\n    // Common case.\n    if (typeof arg === \"number\") {\n        if (typeof encodingOrOffset === \"string\") {\n            throw new TypeError('The \"string\" argument must be of type string. Received type number');\n        }\n        return allocUnsafe(arg);\n    }\n    return from(arg, encodingOrOffset, length);\n}\n_c = Buffer;\nBuffer.poolSize = 8192 // not used by this implementation\n;\nfunction from(value, encodingOrOffset, length) {\n    if (typeof value === \"string\") {\n        return fromString(value, encodingOrOffset);\n    }\n    if (ArrayBuffer.isView(value)) {\n        return fromArrayView(value);\n    }\n    if (value == null) {\n        throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \" + \"or Array-like Object. Received type \" + typeof value);\n    }\n    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n    }\n    if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n    }\n    if (typeof value === \"number\") {\n        throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n    }\n    const valueOf = value.valueOf && value.valueOf();\n    if (valueOf != null && valueOf !== value) {\n        return Buffer.from(valueOf, encodingOrOffset, length);\n    }\n    const b = fromObject(value);\n    if (b) return b;\n    if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n        return Buffer.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n    }\n    throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \" + \"or Array-like Object. Received type \" + typeof value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/ Buffer.from = function(value, encodingOrOffset, length) {\n    return from(value, encodingOrOffset, length);\n};\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\nObject.setPrototypeOf(Buffer, Uint8Array);\nfunction assertSize(size) {\n    if (typeof size !== \"number\") {\n        throw new TypeError('\"size\" argument must be of type number');\n    } else if (size < 0) {\n        throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n    }\n}\nfunction alloc(size, fill, encoding) {\n    assertSize(size);\n    if (size <= 0) {\n        return createBuffer(size);\n    }\n    if (fill !== undefined) {\n        // Only pay attention to encoding if it's a string. This\n        // prevents accidentally sending in a number that would\n        // be interpreted as a start offset.\n        return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n    }\n    return createBuffer(size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/ Buffer.alloc = function(size, fill, encoding) {\n    return alloc(size, fill, encoding);\n};\nfunction allocUnsafe(size) {\n    assertSize(size);\n    return createBuffer(size < 0 ? 0 : checked(size) | 0);\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */ Buffer.allocUnsafe = function(size) {\n    return allocUnsafe(size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */ Buffer.allocUnsafeSlow = function(size) {\n    return allocUnsafe(size);\n};\nfunction fromString(string, encoding) {\n    if (typeof encoding !== \"string\" || encoding === \"\") {\n        encoding = \"utf8\";\n    }\n    if (!Buffer.isEncoding(encoding)) {\n        throw new TypeError(\"Unknown encoding: \" + encoding);\n    }\n    const length = byteLength(string, encoding) | 0;\n    let buf = createBuffer(length);\n    const actual = buf.write(string, encoding);\n    if (actual !== length) {\n        // Writing a hex string, for example, that contains invalid characters will\n        // cause everything after the first invalid character to be ignored. (e.g.\n        // 'abxxcd' will be treated as 'ab')\n        buf = buf.slice(0, actual);\n    }\n    return buf;\n}\nfunction fromArrayLike(array) {\n    const length = array.length < 0 ? 0 : checked(array.length) | 0;\n    const buf = createBuffer(length);\n    for(let i = 0; i < length; i += 1){\n        buf[i] = array[i] & 255;\n    }\n    return buf;\n}\nfunction fromArrayView(arrayView) {\n    if (isInstance(arrayView, Uint8Array)) {\n        const copy = new Uint8Array(arrayView);\n        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n    }\n    return fromArrayLike(arrayView);\n}\nfunction fromArrayBuffer(array, byteOffset, length) {\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError('\"offset\" is outside of buffer bounds');\n    }\n    if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError('\"length\" is outside of buffer bounds');\n    }\n    let buf;\n    if (byteOffset === undefined && length === undefined) {\n        buf = new Uint8Array(array);\n    } else if (length === undefined) {\n        buf = new Uint8Array(array, byteOffset);\n    } else {\n        buf = new Uint8Array(array, byteOffset, length);\n    }\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(buf, Buffer.prototype);\n    return buf;\n}\nfunction fromObject(obj) {\n    if (Buffer.isBuffer(obj)) {\n        const len = checked(obj.length) | 0;\n        const buf = createBuffer(len);\n        if (buf.length === 0) {\n            return buf;\n        }\n        obj.copy(buf, 0, 0, len);\n        return buf;\n    }\n    if (obj.length !== undefined) {\n        if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n        }\n        return fromArrayLike(obj);\n    }\n    if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n        return fromArrayLike(obj.data);\n    }\n}\nfunction checked(length) {\n    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= K_MAX_LENGTH) {\n        throw new RangeError(\"Attempt to allocate Buffer larger than maximum \" + \"size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n    }\n    return length | 0;\n}\nfunction SlowBuffer(length) {\n    if (+length != length) {\n        length = 0;\n    }\n    return Buffer.alloc(+length);\n}\n_c1 = SlowBuffer;\nBuffer.isBuffer = function isBuffer(b) {\n    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n    ;\n};\nBuffer.compare = function compare(a, b) {\n    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n        throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n    }\n    if (a === b) return 0;\n    let x = a.length;\n    let y = b.length;\n    for(let i = 0, len = Math.min(x, y); i < len; ++i){\n        if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n        }\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\nBuffer.isEncoding = function isEncoding(encoding) {\n    switch(String(encoding).toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return true;\n        default:\n            return false;\n    }\n};\nBuffer.concat = function concat(list, length) {\n    if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n    if (list.length === 0) {\n        return Buffer.alloc(0);\n    }\n    let i;\n    if (length === undefined) {\n        length = 0;\n        for(i = 0; i < list.length; ++i){\n            length += list[i].length;\n        }\n    }\n    const buffer = Buffer.allocUnsafe(length);\n    let pos = 0;\n    for(i = 0; i < list.length; ++i){\n        let buf = list[i];\n        if (isInstance(buf, Uint8Array)) {\n            if (pos + buf.length > buffer.length) {\n                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);\n                buf.copy(buffer, pos);\n            } else {\n                Uint8Array.prototype.set.call(buffer, buf, pos);\n            }\n        } else if (!Buffer.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n        } else {\n            buf.copy(buffer, pos);\n        }\n        pos += buf.length;\n    }\n    return buffer;\n};\nfunction byteLength(string, encoding) {\n    if (Buffer.isBuffer(string)) {\n        return string.length;\n    }\n    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n        return string.byteLength;\n    }\n    if (typeof string !== \"string\") {\n        throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' + \"Received type \" + typeof string);\n    }\n    const len = string.length;\n    const mustMatch = arguments.length > 2 && arguments[2] === true;\n    if (!mustMatch && len === 0) return 0;\n    // Use a for loop to avoid recursion\n    let loweredCase = false;\n    for(;;){\n        switch(encoding){\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return len;\n            case \"utf8\":\n            case \"utf-8\":\n                return utf8ToBytes(string).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return len * 2;\n            case \"hex\":\n                return len >>> 1;\n            case \"base64\":\n                return base64ToBytes(string).length;\n            default:\n                if (loweredCase) {\n                    return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n                    ;\n                }\n                encoding = (\"\" + encoding).toLowerCase();\n                loweredCase = true;\n        }\n    }\n}\nBuffer.byteLength = byteLength;\nfunction slowToString(encoding, start, end) {\n    let loweredCase = false;\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n    if (start === undefined || start < 0) {\n        start = 0;\n    }\n    // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n    if (start > this.length) {\n        return \"\";\n    }\n    if (end === undefined || end > this.length) {\n        end = this.length;\n    }\n    if (end <= 0) {\n        return \"\";\n    }\n    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0;\n    start >>>= 0;\n    if (end <= start) {\n        return \"\";\n    }\n    if (!encoding) encoding = \"utf8\";\n    while(true){\n        switch(encoding){\n            case \"hex\":\n                return hexSlice(this, start, end);\n            case \"utf8\":\n            case \"utf-8\":\n                return utf8Slice(this, start, end);\n            case \"ascii\":\n                return asciiSlice(this, start, end);\n            case \"latin1\":\n            case \"binary\":\n                return latin1Slice(this, start, end);\n            case \"base64\":\n                return base64Slice(this, start, end);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return utf16leSlice(this, start, end);\n            default:\n                if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n                encoding = (encoding + \"\").toLowerCase();\n                loweredCase = true;\n        }\n    }\n}\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true;\nfunction swap(b, n, m) {\n    const i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n}\nBuffer.prototype.swap16 = function swap16() {\n    const len = this.length;\n    if (len % 2 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n    }\n    for(let i = 0; i < len; i += 2){\n        swap(this, i, i + 1);\n    }\n    return this;\n};\nBuffer.prototype.swap32 = function swap32() {\n    const len = this.length;\n    if (len % 4 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n    }\n    for(let i = 0; i < len; i += 4){\n        swap(this, i, i + 3);\n        swap(this, i + 1, i + 2);\n    }\n    return this;\n};\nBuffer.prototype.swap64 = function swap64() {\n    const len = this.length;\n    if (len % 8 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n    }\n    for(let i = 0; i < len; i += 8){\n        swap(this, i, i + 7);\n        swap(this, i + 1, i + 6);\n        swap(this, i + 2, i + 5);\n        swap(this, i + 3, i + 4);\n    }\n    return this;\n};\nBuffer.prototype.toString = function toString() {\n    const length = this.length;\n    if (length === 0) return \"\";\n    if (arguments.length === 0) return utf8Slice(this, 0, length);\n    return slowToString.apply(this, arguments);\n};\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\nBuffer.prototype.equals = function equals(b) {\n    if (!Buffer.isBuffer(b)) throw new TypeError(\"Argument must be a Buffer\");\n    if (this === b) return true;\n    return Buffer.compare(this, b) === 0;\n};\nBuffer.prototype.inspect = function inspect() {\n    let str = \"\";\n    const max = exports.INSPECT_MAX_BYTES;\n    str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n    if (this.length > max) str += \" ... \";\n    return \"<Buffer \" + str + \">\";\n};\nif (customInspectSymbol) {\n    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n}\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n    if (isInstance(target, Uint8Array)) {\n        target = Buffer.from(target, target.offset, target.byteLength);\n    }\n    if (!Buffer.isBuffer(target)) {\n        throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' + \"Received type \" + typeof target);\n    }\n    if (start === undefined) {\n        start = 0;\n    }\n    if (end === undefined) {\n        end = target ? target.length : 0;\n    }\n    if (thisStart === undefined) {\n        thisStart = 0;\n    }\n    if (thisEnd === undefined) {\n        thisEnd = this.length;\n    }\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n        throw new RangeError(\"out of range index\");\n    }\n    if (thisStart >= thisEnd && start >= end) {\n        return 0;\n    }\n    if (thisStart >= thisEnd) {\n        return -1;\n    }\n    if (start >= end) {\n        return 1;\n    }\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n    if (this === target) return 0;\n    let x = thisEnd - thisStart;\n    let y = end - start;\n    const len = Math.min(x, y);\n    const thisCopy = this.slice(thisStart, thisEnd);\n    const targetCopy = target.slice(start, end);\n    for(let i = 0; i < len; ++i){\n        if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n        }\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1;\n    // Normalize byteOffset\n    if (typeof byteOffset === \"string\") {\n        encoding = byteOffset;\n        byteOffset = 0;\n    } else if (byteOffset > 0x7fffffff) {\n        byteOffset = 0x7fffffff;\n    } else if (byteOffset < -0x80000000) {\n        byteOffset = -0x80000000;\n    }\n    byteOffset = +byteOffset // Coerce to Number.\n    ;\n    if (numberIsNaN(byteOffset)) {\n        // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n        byteOffset = dir ? 0 : buffer.length - 1;\n    }\n    // Normalize byteOffset: negative offsets start from the end of the buffer\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n    if (byteOffset >= buffer.length) {\n        if (dir) return -1;\n        else byteOffset = buffer.length - 1;\n    } else if (byteOffset < 0) {\n        if (dir) byteOffset = 0;\n        else return -1;\n    }\n    // Normalize val\n    if (typeof val === \"string\") {\n        val = Buffer.from(val, encoding);\n    }\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\n    if (Buffer.isBuffer(val)) {\n        // Special case: looking for empty string/buffer always fails\n        if (val.length === 0) {\n            return -1;\n        }\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n    } else if (typeof val === \"number\") {\n        val = val & 0xFF // Search for a byte value [0-255]\n        ;\n        if (typeof Uint8Array.prototype.indexOf === \"function\") {\n            if (dir) {\n                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n        }\n        return arrayIndexOf(buffer, [\n            val\n        ], byteOffset, encoding, dir);\n    }\n    throw new TypeError(\"val must be string, number or Buffer\");\n}\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    let indexSize = 1;\n    let arrLength = arr.length;\n    let valLength = val.length;\n    if (encoding !== undefined) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) {\n                return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n        }\n    }\n    function read(buf, i) {\n        if (indexSize === 1) {\n            return buf[i];\n        } else {\n            return buf.readUInt16BE(i * indexSize);\n        }\n    }\n    let i;\n    if (dir) {\n        let foundIndex = -1;\n        for(i = byteOffset; i < arrLength; i++){\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n                if (foundIndex === -1) foundIndex = i;\n                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n            } else {\n                if (foundIndex !== -1) i -= i - foundIndex;\n                foundIndex = -1;\n            }\n        }\n    } else {\n        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n        for(i = byteOffset; i >= 0; i--){\n            let found = true;\n            for(let j = 0; j < valLength; j++){\n                if (read(arr, i + j) !== read(val, j)) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return i;\n        }\n    }\n    return -1;\n}\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1;\n};\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\nfunction hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0;\n    const remaining = buf.length - offset;\n    if (!length) {\n        length = remaining;\n    } else {\n        length = Number(length);\n        if (length > remaining) {\n            length = remaining;\n        }\n    }\n    const strLen = string.length;\n    if (length > strLen / 2) {\n        length = strLen / 2;\n    }\n    let i;\n    for(i = 0; i < length; ++i){\n        const parsed = parseInt(string.substr(i * 2, 2), 16);\n        if (numberIsNaN(parsed)) return i;\n        buf[offset + i] = parsed;\n    }\n    return i;\n}\nfunction utf8Write(buf, string, offset, length) {\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\nfunction asciiWrite(buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\nfunction base64Write(buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\nfunction ucs2Write(buf, string, offset, length) {\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n        encoding = \"utf8\";\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === \"string\") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === undefined) encoding = \"utf8\";\n        } else {\n            encoding = length;\n            length = undefined;\n        }\n    } else {\n        throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n    }\n    const remaining = this.length - offset;\n    if (length === undefined || length > remaining) length = remaining;\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n        throw new RangeError(\"Attempt to write outside buffer bounds\");\n    }\n    if (!encoding) encoding = \"utf8\";\n    let loweredCase = false;\n    for(;;){\n        switch(encoding){\n            case \"hex\":\n                return hexWrite(this, string, offset, length);\n            case \"utf8\":\n            case \"utf-8\":\n                return utf8Write(this, string, offset, length);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return asciiWrite(this, string, offset, length);\n            case \"base64\":\n                // Warning: maxLength not taken into account in base64Write\n                return base64Write(this, string, offset, length);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return ucs2Write(this, string, offset, length);\n            default:\n                if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n                encoding = (\"\" + encoding).toLowerCase();\n                loweredCase = true;\n        }\n    }\n};\nBuffer.prototype.toJSON = function toJSON() {\n    return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n};\nfunction base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) {\n        return base64.fromByteArray(buf);\n    } else {\n        return base64.fromByteArray(buf.slice(start, end));\n    }\n}\nfunction utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end);\n    const res = [];\n    let i = start;\n    while(i < end){\n        const firstByte = buf[i];\n        let codePoint = null;\n        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch(bytesPerSequence){\n                case 1:\n                    if (firstByte < 0x80) {\n                        codePoint = firstByte;\n                    }\n                    break;\n                case 2:\n                    secondByte = buf[i + 1];\n                    if ((secondByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n                        if (tempCodePoint > 0x7F) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n                    break;\n                case 3:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n                    break;\n                case 4:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    fourthByte = buf[i + 3];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n            }\n        }\n        if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xFFFD;\n            bytesPerSequence = 1;\n        } else if (codePoint > 0xFFFF) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000;\n            res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n            codePoint = 0xDC00 | codePoint & 0x3FF;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n    }\n    return decodeCodePointsArray(res);\n}\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000;\nfunction decodeCodePointsArray(codePoints) {\n    const len = codePoints.length;\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n        ;\n    }\n    // Decode in chunks to avoid \"call stack size exceeded\".\n    let res = \"\";\n    let i = 0;\n    while(i < len){\n        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n    }\n    return res;\n}\nfunction asciiSlice(buf, start, end) {\n    let ret = \"\";\n    end = Math.min(buf.length, end);\n    for(let i = start; i < end; ++i){\n        ret += String.fromCharCode(buf[i] & 0x7F);\n    }\n    return ret;\n}\nfunction latin1Slice(buf, start, end) {\n    let ret = \"\";\n    end = Math.min(buf.length, end);\n    for(let i = start; i < end; ++i){\n        ret += String.fromCharCode(buf[i]);\n    }\n    return ret;\n}\nfunction hexSlice(buf, start, end) {\n    const len = buf.length;\n    if (!start || start < 0) start = 0;\n    if (!end || end < 0 || end > len) end = len;\n    let out = \"\";\n    for(let i = start; i < end; ++i){\n        out += hexSliceLookupTable[buf[i]];\n    }\n    return out;\n}\nfunction utf16leSlice(buf, start, end) {\n    const bytes = buf.slice(start, end);\n    let res = \"\";\n    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n    for(let i = 0; i < bytes.length - 1; i += 2){\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n    }\n    return res;\n}\nBuffer.prototype.slice = function slice(start, end) {\n    const len = this.length;\n    start = ~~start;\n    end = end === undefined ? len : ~~end;\n    if (start < 0) {\n        start += len;\n        if (start < 0) start = 0;\n    } else if (start > len) {\n        start = len;\n    }\n    if (end < 0) {\n        end += len;\n        if (end < 0) end = 0;\n    } else if (end > len) {\n        end = len;\n    }\n    if (end < start) end = start;\n    const newBuf = this.subarray(start, end);\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(newBuf, Buffer.prototype);\n    return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */ function checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) throw new RangeError(\"offset is not uint\");\n    if (offset + ext > length) throw new RangeError(\"Trying to access beyond buffer length\");\n}\nBuffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let val = this[offset];\n    let mul = 1;\n    let i = 0;\n    while(++i < byteLength && (mul *= 0x100)){\n        val += this[offset + i] * mul;\n    }\n    return val;\n};\nBuffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        checkOffset(offset, byteLength, this.length);\n    }\n    let val = this[offset + --byteLength];\n    let mul = 1;\n    while(byteLength > 0 && (mul *= 0x100)){\n        val += this[offset + --byteLength] * mul;\n    }\n    return val;\n};\nBuffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    return this[offset];\n};\nBuffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] | this[offset + 1] << 8;\n};\nBuffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] << 8 | this[offset + 1];\n};\nBuffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\nBuffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n    return BigInt(lo) + (BigInt(hi) << BigInt(32));\n});\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n    return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n});\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let val = this[offset];\n    let mul = 1;\n    let i = 0;\n    while(++i < byteLength && (mul *= 0x100)){\n        val += this[offset + i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let i = byteLength;\n    let mul = 1;\n    let val = this[offset + --i];\n    while(i > 0 && (mul *= 0x100)){\n        val += this[offset + --i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    if (!(this[offset] & 0x80)) return this[offset];\n    return (0xff - this[offset] + 1) * -1;\n};\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    const val = this[offset] | this[offset + 1] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    const val = this[offset + 1] | this[offset] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow\n    );\n    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n});\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n});\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return ieee754.read(this, offset, true, 23, 4);\n};\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return ieee754.read(this, offset, false, 23, 4);\n};\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return ieee754.read(this, offset, true, 52, 8);\n};\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return ieee754.read(this, offset, false, 52, 8);\n};\nfunction checkInt(buf, value, offset, ext, max, min) {\n    if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n    if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n}\nBuffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    let mul = 1;\n    let i = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100)){\n        this[offset + i] = value / mul & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    let i = byteLength - 1;\n    let mul = 1;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100)){\n        this[offset + i] = value / mul & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\nBuffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\nBuffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\nBuffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n    return offset + 4;\n};\nBuffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\nfunction wrtBigUInt64LE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    let lo = Number(value & BigInt(0xffffffff));\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    return offset;\n}\nfunction wrtBigUInt64BE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    let lo = Number(value & BigInt(0xffffffff));\n    buf[offset + 7] = lo;\n    lo = lo >> 8;\n    buf[offset + 6] = lo;\n    lo = lo >> 8;\n    buf[offset + 5] = lo;\n    lo = lo >> 8;\n    buf[offset + 4] = lo;\n    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset + 3] = hi;\n    hi = hi >> 8;\n    buf[offset + 2] = hi;\n    hi = hi >> 8;\n    buf[offset + 1] = hi;\n    hi = hi >> 8;\n    buf[offset] = hi;\n    return offset + 8;\n}\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n});\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n});\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength - 1);\n        checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    let i = 0;\n    let mul = 1;\n    let sub = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength - 1);\n        checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    let i = byteLength - 1;\n    let mul = 1;\n    let sub = 0;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n    if (value < 0) value = 0xff + value + 1;\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n    return offset + 4;\n};\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    if (value < 0) value = 0xffffffff + value + 1;\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n});\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n});\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n    if (offset < 0) throw new RangeError(\"Index out of range\");\n}\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n    }\n    ieee754.write(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4;\n}\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert);\n};\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n    }\n    ieee754.write(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8;\n}\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, false, noAssert);\n};\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!Buffer.isBuffer(target)) throw new TypeError(\"argument should be a Buffer\");\n    if (!start) start = 0;\n    if (!end && end !== 0) end = this.length;\n    if (targetStart >= target.length) targetStart = target.length;\n    if (!targetStart) targetStart = 0;\n    if (end > 0 && end < start) end = start;\n    // Copy 0 bytes; we're done\n    if (end === start) return 0;\n    if (target.length === 0 || this.length === 0) return 0;\n    // Fatal error conditions\n    if (targetStart < 0) {\n        throw new RangeError(\"targetStart out of bounds\");\n    }\n    if (start < 0 || start >= this.length) throw new RangeError(\"Index out of range\");\n    if (end < 0) throw new RangeError(\"sourceEnd out of bounds\");\n    // Are we oob?\n    if (end > this.length) end = this.length;\n    if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start;\n    }\n    const len = end - start;\n    if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") {\n        // Use built-in when available, missing from IE11\n        this.copyWithin(targetStart, start, end);\n    } else {\n        Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n    }\n    return len;\n};\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === \"string\") {\n        if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n        } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n        }\n        if (encoding !== undefined && typeof encoding !== \"string\") {\n            throw new TypeError(\"encoding must be a string\");\n        }\n        if (typeof encoding === \"string\" && !Buffer.isEncoding(encoding)) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        if (val.length === 1) {\n            const code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n                // Fast path: If `val` fits into a single byte, use that numeric value.\n                val = code;\n            }\n        }\n    } else if (typeof val === \"number\") {\n        val = val & 255;\n    } else if (typeof val === \"boolean\") {\n        val = Number(val);\n    }\n    // Invalid ranges are not set to a default, so can range check early.\n    if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError(\"Out of range index\");\n    }\n    if (end <= start) {\n        return this;\n    }\n    start = start >>> 0;\n    end = end === undefined ? this.length : end >>> 0;\n    if (!val) val = 0;\n    let i;\n    if (typeof val === \"number\") {\n        for(i = start; i < end; ++i){\n            this[i] = val;\n        }\n    } else {\n        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n        const len = bytes.length;\n        if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        }\n        for(i = 0; i < end - start; ++i){\n            this[i + start] = bytes[i % len];\n        }\n    }\n    return this;\n};\n// CUSTOM ERRORS\n// =============\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {};\nfunction E(sym, getMessage, Base) {\n    errors[sym] = class NodeError extends Base {\n        get code() {\n            return sym;\n        }\n        set code(value) {\n            Object.defineProperty(this, \"code\", {\n                configurable: true,\n                enumerable: true,\n                value,\n                writable: true\n            });\n        }\n        toString() {\n            return \"\".concat(this.name, \" [\").concat(sym, \"]: \").concat(this.message);\n        }\n        constructor(){\n            super();\n            Object.defineProperty(this, \"message\", {\n                value: getMessage.apply(this, arguments),\n                writable: true,\n                configurable: true\n            });\n            // Add the error code to the name to include it in the stack trace.\n            this.name = \"\".concat(this.name, \" [\").concat(sym, \"]\");\n            // Access the stack to generate the error message including the error code\n            // from the name.\n            this.stack // eslint-disable-line no-unused-expressions\n            ;\n            // Reset the name to the actual name.\n            delete this.name;\n        }\n    };\n}\n_c2 = E;\nE(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(name) {\n    if (name) {\n        return \"\".concat(name, \" is outside of buffer bounds\");\n    }\n    return \"Attempt to access memory outside buffer bounds\";\n}, RangeError);\nE(\"ERR_INVALID_ARG_TYPE\", function(name, actual) {\n    return 'The \"'.concat(name, '\" argument must be of type number. Received type ').concat(typeof actual);\n}, TypeError);\nE(\"ERR_OUT_OF_RANGE\", function(str, range, input) {\n    let msg = 'The value of \"'.concat(str, '\" is out of range.');\n    let received = input;\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n        received = addNumericalSeparator(String(input));\n    } else if (typeof input === \"bigint\") {\n        received = String(input);\n        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n            received = addNumericalSeparator(received);\n        }\n        received += \"n\";\n    }\n    msg += \" It must be \".concat(range, \". Received \").concat(received);\n    return msg;\n}, RangeError);\nfunction addNumericalSeparator(val) {\n    let res = \"\";\n    let i = val.length;\n    const start = val[0] === \"-\" ? 1 : 0;\n    for(; i >= start + 4; i -= 3){\n        res = \"_\".concat(val.slice(i - 3, i)).concat(res);\n    }\n    return \"\".concat(val.slice(0, i)).concat(res);\n}\n// CHECK FUNCTIONS\n// ===============\nfunction checkBounds(buf, offset, byteLength) {\n    validateNumber(offset, \"offset\");\n    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n        boundsError(offset, buf.length - (byteLength + 1));\n    }\n}\nfunction checkIntBI(value, min, max, buf, offset, byteLength) {\n    if (value > max || value < min) {\n        const n = typeof min === \"bigint\" ? \"n\" : \"\";\n        let range;\n        if (byteLength > 3) {\n            if (min === 0 || min === BigInt(0)) {\n                range = \">= 0\".concat(n, \" and < 2\").concat(n, \" ** \").concat((byteLength + 1) * 8).concat(n);\n            } else {\n                range = \">= -(2\".concat(n, \" ** \").concat((byteLength + 1) * 8 - 1).concat(n, \") and < 2 ** \") + \"\".concat((byteLength + 1) * 8 - 1).concat(n);\n            }\n        } else {\n            range = \">= \".concat(min).concat(n, \" and <= \").concat(max).concat(n);\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n    }\n    checkBounds(buf, offset, byteLength);\n}\nfunction validateNumber(value, name) {\n    if (typeof value !== \"number\") {\n        throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n    }\n}\nfunction boundsError(value, length, type) {\n    if (Math.floor(value) !== value) {\n        validateNumber(value, type);\n        throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n    }\n    if (length < 0) {\n        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n    }\n    throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \">= \".concat(type ? 1 : 0, \" and <= \").concat(length), value);\n}\n// HELPER FUNCTIONS\n// ================\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\nfunction base64clean(str) {\n    // Node takes equal signs as end of the Base64 encoding\n    str = str.split(\"=\")[0];\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = str.trim().replace(INVALID_BASE64_RE, \"\");\n    // Node converts strings with length < 2 to ''\n    if (str.length < 2) return \"\";\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n    while(str.length % 4 !== 0){\n        str = str + \"=\";\n    }\n    return str;\n}\nfunction utf8ToBytes(string, units) {\n    units = units || Infinity;\n    let codePoint;\n    const length = string.length;\n    let leadSurrogate = null;\n    const bytes = [];\n    for(let i = 0; i < length; ++i){\n        codePoint = string.charCodeAt(i);\n        // is surrogate component\n        if (codePoint > 0xD7FF && codePoint < 0xE000) {\n            // last char was a lead\n            if (!leadSurrogate) {\n                // no lead yet\n                if (codePoint > 0xDBFF) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                }\n                // valid lead\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // 2 leads in a row\n            if (codePoint < 0xDC00) {\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // valid surrogate pair\n            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n        } else if (leadSurrogate) {\n            // valid bmp char, but last char was a lead\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        }\n        leadSurrogate = null;\n        // encode utf8\n        if (codePoint < 0x80) {\n            if ((units -= 1) < 0) break;\n            bytes.push(codePoint);\n        } else if (codePoint < 0x800) {\n            if ((units -= 2) < 0) break;\n            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x10000) {\n            if ((units -= 3) < 0) break;\n            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x110000) {\n            if ((units -= 4) < 0) break;\n            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else {\n            throw new Error(\"Invalid code point\");\n        }\n    }\n    return bytes;\n}\nfunction asciiToBytes(str) {\n    const byteArray = [];\n    for(let i = 0; i < str.length; ++i){\n        // Node's code seems to be doing this and not & 0x7F..\n        byteArray.push(str.charCodeAt(i) & 0xFF);\n    }\n    return byteArray;\n}\nfunction utf16leToBytes(str, units) {\n    let c, hi, lo;\n    const byteArray = [];\n    for(let i = 0; i < str.length; ++i){\n        if ((units -= 2) < 0) break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n    }\n    return byteArray;\n}\nfunction base64ToBytes(str) {\n    return base64.toByteArray(base64clean(str));\n}\nfunction blitBuffer(src, dst, offset, length) {\n    let i;\n    for(i = 0; i < length; ++i){\n        if (i + offset >= dst.length || i >= src.length) break;\n        dst[i + offset] = src[i];\n    }\n    return i;\n}\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance(obj, type) {\n    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n}\nfunction numberIsNaN(obj) {\n    // For IE11 support\n    return obj !== obj // eslint-disable-line no-self-compare\n    ;\n}\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = function() {\n    const alphabet = \"0123456789abcdef\";\n    const table = new Array(256);\n    for(let i = 0; i < 16; ++i){\n        const i16 = i * 16;\n        for(let j = 0; j < 16; ++j){\n            table[i16 + j] = alphabet[i] + alphabet[j];\n        }\n    }\n    return table;\n}();\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod(fn) {\n    return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n}\nfunction BufferBigIntNotDefined() {\n    throw new Error(\"BigInt not supported\");\n}\n_c3 = BufferBigIntNotDefined;\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"Buffer\");\n$RefreshReg$(_c1, \"SlowBuffer\");\n$RefreshReg$(_c2, \"E\");\n$RefreshReg$(_c3, \"BufferBigIntNotDefined\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/buffer/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/detect-browser/es/index.js":
/*!*************************************************!*\
  !*** ./node_modules/detect-browser/es/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BotInfo: function() { return /* binding */ BotInfo; },\n/* harmony export */   BrowserInfo: function() { return /* binding */ BrowserInfo; },\n/* harmony export */   NodeInfo: function() { return /* binding */ NodeInfo; },\n/* harmony export */   ReactNativeInfo: function() { return /* binding */ ReactNativeInfo; },\n/* harmony export */   SearchBotDeviceInfo: function() { return /* binding */ SearchBotDeviceInfo; },\n/* harmony export */   browserName: function() { return /* binding */ browserName; },\n/* harmony export */   detect: function() { return /* binding */ detect; },\n/* harmony export */   detectOS: function() { return /* binding */ detectOS; },\n/* harmony export */   getNodeVersion: function() { return /* binding */ getNodeVersion; },\n/* harmony export */   parseUserAgent: function() { return /* binding */ parseUserAgent; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nvar __spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar BrowserInfo = /** @class */ function() {\n    function BrowserInfo(name, version, os) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.type = \"browser\";\n    }\n    return BrowserInfo;\n}();\n\nvar NodeInfo = /** @class */ function() {\n    function NodeInfo(version) {\n        this.version = version;\n        this.type = \"node\";\n        this.name = \"node\";\n        this.os = process.platform;\n    }\n    return NodeInfo;\n}();\n\nvar SearchBotDeviceInfo = /** @class */ function() {\n    function SearchBotDeviceInfo(name, version, os, bot) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.bot = bot;\n        this.type = \"bot-device\";\n    }\n    return SearchBotDeviceInfo;\n}();\n\nvar BotInfo = /** @class */ function() {\n    function BotInfo() {\n        this.type = \"bot\";\n        this.bot = true; // NOTE: deprecated test name instead\n        this.name = \"bot\";\n        this.version = null;\n        this.os = null;\n    }\n    return BotInfo;\n}();\n\nvar ReactNativeInfo = /** @class */ function() {\n    function ReactNativeInfo() {\n        this.type = \"react-native\";\n        this.name = \"react-native\";\n        this.version = null;\n        this.os = null;\n    }\n    return ReactNativeInfo;\n}();\n\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [\n    [\n        \"aol\",\n        /AOLShield\\/([0-9\\._]+)/\n    ],\n    [\n        \"edge\",\n        /Edge\\/([0-9\\._]+)/\n    ],\n    [\n        \"edge-ios\",\n        /EdgiOS\\/([0-9\\._]+)/\n    ],\n    [\n        \"yandexbrowser\",\n        /YaBrowser\\/([0-9\\._]+)/\n    ],\n    [\n        \"kakaotalk\",\n        /KAKAOTALK\\s([0-9\\.]+)/\n    ],\n    [\n        \"samsung\",\n        /SamsungBrowser\\/([0-9\\.]+)/\n    ],\n    [\n        \"silk\",\n        /\\bSilk\\/([0-9._-]+)\\b/\n    ],\n    [\n        \"miui\",\n        /MiuiBrowser\\/([0-9\\.]+)$/\n    ],\n    [\n        \"beaker\",\n        /BeakerBrowser\\/([0-9\\.]+)/\n    ],\n    [\n        \"edge-chromium\",\n        /EdgA?\\/([0-9\\.]+)/\n    ],\n    [\n        \"chromium-webview\",\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"chrome\",\n        /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"phantomjs\",\n        /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"crios\",\n        /CriOS\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"firefox\",\n        /Firefox\\/([0-9\\.]+)(?:\\s|$)/\n    ],\n    [\n        \"fxios\",\n        /FxiOS\\/([0-9\\.]+)/\n    ],\n    [\n        \"opera-mini\",\n        /Opera Mini.*Version\\/([0-9\\.]+)/\n    ],\n    [\n        \"opera\",\n        /Opera\\/([0-9\\.]+)(?:\\s|$)/\n    ],\n    [\n        \"opera\",\n        /OPR\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"pie\",\n        /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/\n    ],\n    [\n        \"pie\",\n        /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/\n    ],\n    [\n        \"netfront\",\n        /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/\n    ],\n    [\n        \"ie\",\n        /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/\n    ],\n    [\n        \"ie\",\n        /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/\n    ],\n    [\n        \"ie\",\n        /MSIE\\s(7\\.0)/\n    ],\n    [\n        \"bb10\",\n        /BB10;\\sTouch.*Version\\/([0-9\\.]+)/\n    ],\n    [\n        \"android\",\n        /Android\\s([0-9\\.]+)/\n    ],\n    [\n        \"ios\",\n        /Version\\/([0-9\\._]+).*Mobile.*Safari.*/\n    ],\n    [\n        \"safari\",\n        /Version\\/([0-9\\._]+).*Safari/\n    ],\n    [\n        \"facebook\",\n        /FB[AS]V\\/([0-9\\.]+)/\n    ],\n    [\n        \"instagram\",\n        /Instagram\\s([0-9\\.]+)/\n    ],\n    [\n        \"ios-webview\",\n        /AppleWebKit\\/([0-9\\.]+).*Mobile/\n    ],\n    [\n        \"ios-webview\",\n        /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/\n    ],\n    [\n        \"curl\",\n        /^curl\\/([0-9\\.]+)$/\n    ],\n    [\n        \"searchbot\",\n        SEARCHBOX_UA_REGEX\n    ]\n];\nvar operatingSystemRules = [\n    [\n        \"iOS\",\n        /iP(hone|od|ad)/\n    ],\n    [\n        \"Android OS\",\n        /Android/\n    ],\n    [\n        \"BlackBerry OS\",\n        /BlackBerry|BB10/\n    ],\n    [\n        \"Windows Mobile\",\n        /IEMobile/\n    ],\n    [\n        \"Amazon OS\",\n        /Kindle/\n    ],\n    [\n        \"Windows 3.11\",\n        /Win16/\n    ],\n    [\n        \"Windows 95\",\n        /(Windows 95)|(Win95)|(Windows_95)/\n    ],\n    [\n        \"Windows 98\",\n        /(Windows 98)|(Win98)/\n    ],\n    [\n        \"Windows 2000\",\n        /(Windows NT 5.0)|(Windows 2000)/\n    ],\n    [\n        \"Windows XP\",\n        /(Windows NT 5.1)|(Windows XP)/\n    ],\n    [\n        \"Windows Server 2003\",\n        /(Windows NT 5.2)/\n    ],\n    [\n        \"Windows Vista\",\n        /(Windows NT 6.0)/\n    ],\n    [\n        \"Windows 7\",\n        /(Windows NT 6.1)/\n    ],\n    [\n        \"Windows 8\",\n        /(Windows NT 6.2)/\n    ],\n    [\n        \"Windows 8.1\",\n        /(Windows NT 6.3)/\n    ],\n    [\n        \"Windows 10\",\n        /(Windows NT 10.0)/\n    ],\n    [\n        \"Windows ME\",\n        /Windows ME/\n    ],\n    [\n        \"Windows CE\",\n        /Windows CE|WinCE|Microsoft Pocket Internet Explorer/\n    ],\n    [\n        \"Open BSD\",\n        /OpenBSD/\n    ],\n    [\n        \"Sun OS\",\n        /SunOS/\n    ],\n    [\n        \"Chrome OS\",\n        /CrOS/\n    ],\n    [\n        \"Linux\",\n        /(Linux)|(X11)/\n    ],\n    [\n        \"Mac OS\",\n        /(Mac_PowerPC)|(Macintosh)/\n    ],\n    [\n        \"QNX\",\n        /QNX/\n    ],\n    [\n        \"BeOS\",\n        /BeOS/\n    ],\n    [\n        \"OS/2\",\n        /OS\\/2/\n    ]\n];\nfunction detect(userAgent) {\n    if (!!userAgent) {\n        return parseUserAgent(userAgent);\n    }\n    if (typeof document === \"undefined\" && typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") {\n        return new ReactNativeInfo();\n    }\n    if (typeof navigator !== \"undefined\") {\n        return parseUserAgent(navigator.userAgent);\n    }\n    return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n    // opted for using reduce here rather than Array#first with a regex.test call\n    // this is primarily because using the reduce we only perform the regex\n    // execution once rather than once for the test and for the exec again below\n    // probably something that needs to be benchmarked though\n    return ua !== \"\" && userAgentRules.reduce(function(matched, _a) {\n        var browser = _a[0], regex = _a[1];\n        if (matched) {\n            return matched;\n        }\n        var uaMatch = regex.exec(ua);\n        return !!uaMatch && [\n            browser,\n            uaMatch\n        ];\n    }, false);\n}\nfunction browserName(ua) {\n    var data = matchUserAgent(ua);\n    return data ? data[0] : null;\n}\nfunction parseUserAgent(ua) {\n    var matchedRule = matchUserAgent(ua);\n    if (!matchedRule) {\n        return null;\n    }\n    var name = matchedRule[0], match = matchedRule[1];\n    if (name === \"searchbot\") {\n        return new BotInfo();\n    }\n    // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)\n    var versionParts = match[1] && match[1].split(\".\").join(\"_\").split(\"_\").slice(0, 3);\n    if (versionParts) {\n        if (versionParts.length < REQUIRED_VERSION_PARTS) {\n            versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);\n        }\n    } else {\n        versionParts = [];\n    }\n    var version = versionParts.join(\".\");\n    var os = detectOS(ua);\n    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n    if (searchBotMatch && searchBotMatch[1]) {\n        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n    }\n    return new BrowserInfo(name, version, os);\n}\nfunction detectOS(ua) {\n    for(var ii = 0, count = operatingSystemRules.length; ii < count; ii++){\n        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];\n        var match = regex.exec(ua);\n        if (match) {\n            return os;\n        }\n    }\n    return null;\n}\nfunction getNodeVersion() {\n    var isNode = typeof process !== \"undefined\" && process.version;\n    return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n    var output = [];\n    for(var ii = 0; ii < count; ii++){\n        output.push(\"0\");\n    }\n    return output;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/detect-browser/es/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic.js":
/*!***********************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar elliptic = exports;\nelliptic.version = (__webpack_require__(/*! ../package.json */ \"(app-pages-browser)/./node_modules/elliptic/package.json\").version);\nelliptic.utils = __webpack_require__(/*! ./elliptic/utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nelliptic.rand = __webpack_require__(/*! brorand */ \"(app-pages-browser)/./node_modules/brorand/index.js\");\nelliptic.curve = __webpack_require__(/*! ./elliptic/curve */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/index.js\");\nelliptic.curves = __webpack_require__(/*! ./elliptic/curves */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curves.js\");\n// Protocols\nelliptic.ec = __webpack_require__(/*! ./elliptic/ec */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/ec/index.js\");\nelliptic.eddsa = __webpack_require__(/*! ./elliptic/eddsa */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/eddsa/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxXQUFXQztBQUVmRCxTQUFTRSxPQUFPLEdBQUdDLGdIQUFrQztBQUNyREgsU0FBU0ksS0FBSyxHQUFHRCxtQkFBT0EsQ0FBQztBQUN6QkgsU0FBU0ssSUFBSSxHQUFHRixtQkFBT0EsQ0FBQztBQUN4QkgsU0FBU00sS0FBSyxHQUFHSCxtQkFBT0EsQ0FBQztBQUN6QkgsU0FBU08sTUFBTSxHQUFHSixtQkFBT0EsQ0FBQztBQUUxQixZQUFZO0FBQ1pILFNBQVNRLEVBQUUsR0FBR0wsbUJBQU9BLENBQUM7QUFDdEJILFNBQVNTLEtBQUssR0FBR04sbUJBQU9BLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy5qcz9jYzhhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGVsbGlwdGljID0gZXhwb3J0cztcblxuZWxsaXB0aWMudmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5lbGxpcHRpYy51dGlscyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvdXRpbHMnKTtcbmVsbGlwdGljLnJhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG5lbGxpcHRpYy5jdXJ2ZSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmUnKTtcbmVsbGlwdGljLmN1cnZlcyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmVzJyk7XG5cbi8vIFByb3RvY29sc1xuZWxsaXB0aWMuZWMgPSByZXF1aXJlKCcuL2VsbGlwdGljL2VjJyk7XG5lbGxpcHRpYy5lZGRzYSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWRkc2EnKTtcbiJdLCJuYW1lcyI6WyJlbGxpcHRpYyIsImV4cG9ydHMiLCJ2ZXJzaW9uIiwicmVxdWlyZSIsInV0aWxzIiwicmFuZCIsImN1cnZlIiwiY3VydmVzIiwiZWMiLCJlZGRzYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/base.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar BN = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/elliptic/node_modules/bn.js/lib/bn.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\nfunction BaseCurve(type, conf) {\n    this.type = type;\n    this.p = new BN(conf.p, 16);\n    // Use Montgomery, when there is no fast reduction for the prime\n    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n    // Useful for many curves\n    this.zero = new BN(0).toRed(this.red);\n    this.one = new BN(1).toRed(this.red);\n    this.two = new BN(2).toRed(this.red);\n    // Curve configuration, optional\n    this.n = conf.n && new BN(conf.n, 16);\n    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n    // Temporary arrays\n    this._wnafT1 = new Array(4);\n    this._wnafT2 = new Array(4);\n    this._wnafT3 = new Array(4);\n    this._wnafT4 = new Array(4);\n    this._bitLength = this.n ? this.n.bitLength() : 0;\n    // Generalized Greg Maxwell's trick\n    var adjustCount = this.n && this.p.div(this.n);\n    if (!adjustCount || adjustCount.cmpn(100) > 0) {\n        this.redN = null;\n    } else {\n        this._maxwellTrick = true;\n        this.redN = this.n.toRed(this.red);\n    }\n}\n_c = BaseCurve;\nmodule.exports = BaseCurve;\nBaseCurve.prototype.point = function point() {\n    throw new Error(\"Not implemented\");\n};\nBaseCurve.prototype.validate = function validate() {\n    throw new Error(\"Not implemented\");\n};\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n    assert(p.precomputed);\n    var doubles = p._getDoubles();\n    var naf = getNAF(k, 1, this._bitLength);\n    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n    I /= 3;\n    // Translate into more windowed form\n    var repr = [];\n    var j;\n    var nafW;\n    for(j = 0; j < naf.length; j += doubles.step){\n        nafW = 0;\n        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];\n        repr.push(nafW);\n    }\n    var a = this.jpoint(null, null, null);\n    var b = this.jpoint(null, null, null);\n    for(var i = I; i > 0; i--){\n        for(j = 0; j < repr.length; j++){\n            nafW = repr[j];\n            if (nafW === i) b = b.mixedAdd(doubles.points[j]);\n            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n        }\n        a = a.add(b);\n    }\n    return a.toP();\n};\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n    var w = 4;\n    // Precompute window\n    var nafPoints = p._getNAFPoints(w);\n    w = nafPoints.wnd;\n    var wnd = nafPoints.points;\n    // Get NAF form\n    var naf = getNAF(k, w, this._bitLength);\n    // Add `this`*(N+1) for every w-NAF index\n    var acc = this.jpoint(null, null, null);\n    for(var i = naf.length - 1; i >= 0; i--){\n        // Count zeroes\n        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;\n        if (i >= 0) l++;\n        acc = acc.dblp(l);\n        if (i < 0) break;\n        var z = naf[i];\n        assert(z !== 0);\n        if (p.type === \"affine\") {\n            // J +- P\n            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);\n            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n        } else {\n            // J +- J\n            if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);\n            else acc = acc.add(wnd[-z - 1 >> 1].neg());\n        }\n    }\n    return p.type === \"affine\" ? acc.toP() : acc;\n};\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n    var wndWidth = this._wnafT1;\n    var wnd = this._wnafT2;\n    var naf = this._wnafT3;\n    // Fill all arrays\n    var max = 0;\n    var i;\n    var j;\n    var p;\n    for(i = 0; i < len; i++){\n        p = points[i];\n        var nafPoints = p._getNAFPoints(defW);\n        wndWidth[i] = nafPoints.wnd;\n        wnd[i] = nafPoints.points;\n    }\n    // Comb small window NAFs\n    for(i = len - 1; i >= 1; i -= 2){\n        var a = i - 1;\n        var b = i;\n        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n            max = Math.max(naf[a].length, max);\n            max = Math.max(naf[b].length, max);\n            continue;\n        }\n        var comb = [\n            points[a],\n            /* 1 */ null,\n            /* 3 */ null,\n            /* 5 */ points[b]\n        ];\n        // Try to avoid Projective points, if possible\n        if (points[a].y.cmp(points[b].y) === 0) {\n            comb[1] = points[a].add(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].add(points[b].neg());\n        } else {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        }\n        var index = [\n            -3,\n            /* -1 -1 */ -1,\n            /* -1 0 */ -5,\n            /* -1 1 */ -7,\n            /* 0 -1 */ 0,\n            /* 0 0 */ 7,\n            /* 0 1 */ 5,\n            /* 1 -1 */ 1,\n            /* 1 0 */ 3\n        ];\n        var jsf = getJSF(coeffs[a], coeffs[b]);\n        max = Math.max(jsf[0].length, max);\n        naf[a] = new Array(max);\n        naf[b] = new Array(max);\n        for(j = 0; j < max; j++){\n            var ja = jsf[0][j] | 0;\n            var jb = jsf[1][j] | 0;\n            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n            naf[b][j] = 0;\n            wnd[a] = comb;\n        }\n    }\n    var acc = this.jpoint(null, null, null);\n    var tmp = this._wnafT4;\n    for(i = max; i >= 0; i--){\n        var k = 0;\n        while(i >= 0){\n            var zero = true;\n            for(j = 0; j < len; j++){\n                tmp[j] = naf[j][i] | 0;\n                if (tmp[j] !== 0) zero = false;\n            }\n            if (!zero) break;\n            k++;\n            i--;\n        }\n        if (i >= 0) k++;\n        acc = acc.dblp(k);\n        if (i < 0) break;\n        for(j = 0; j < len; j++){\n            var z = tmp[j];\n            p;\n            if (z === 0) continue;\n            else if (z > 0) p = wnd[j][z - 1 >> 1];\n            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n            if (p.type === \"affine\") acc = acc.mixedAdd(p);\n            else acc = acc.add(p);\n        }\n    }\n    // Zeroify references\n    for(i = 0; i < len; i++)wnd[i] = null;\n    if (jacobianResult) return acc;\n    else return acc.toP();\n};\nfunction BasePoint(curve, type) {\n    this.curve = curve;\n    this.type = type;\n    this.precomputed = null;\n}\n_c1 = BasePoint;\nBaseCurve.BasePoint = BasePoint;\nBasePoint.prototype.eq = function eq() {\n    throw new Error(\"Not implemented\");\n};\nBasePoint.prototype.validate = function validate() {\n    return this.curve.validate(this);\n};\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    bytes = utils.toArray(bytes, enc);\n    var len = this.p.byteLength();\n    // uncompressed, hybrid-odd, hybrid-even\n    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {\n        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);\n        else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);\n        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));\n        return res;\n    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {\n        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n    }\n    throw new Error(\"Unknown point format\");\n};\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n    return this.encode(enc, true);\n};\nBasePoint.prototype._encode = function _encode(compact) {\n    var len = this.curve.p.byteLength();\n    var x = this.getX().toArray(\"be\", len);\n    if (compact) return [\n        this.getY().isEven() ? 0x02 : 0x03\n    ].concat(x);\n    return [\n        0x04\n    ].concat(x, this.getY().toArray(\"be\", len));\n};\nBasePoint.prototype.encode = function encode(enc, compact) {\n    return utils.encode(this._encode(compact), enc);\n};\nBasePoint.prototype.precompute = function precompute(power) {\n    if (this.precomputed) return this;\n    var precomputed = {\n        doubles: null,\n        naf: null,\n        beta: null\n    };\n    precomputed.naf = this._getNAFPoints(8);\n    precomputed.doubles = this._getDoubles(4, power);\n    precomputed.beta = this._getBeta();\n    this.precomputed = precomputed;\n    return this;\n};\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n    if (!this.precomputed) return false;\n    var doubles = this.precomputed.doubles;\n    if (!doubles) return false;\n    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n    var doubles = [\n        this\n    ];\n    var acc = this;\n    for(var i = 0; i < power; i += step){\n        for(var j = 0; j < step; j++)acc = acc.dbl();\n        doubles.push(acc);\n    }\n    return {\n        step: step,\n        points: doubles\n    };\n};\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n    var res = [\n        this\n    ];\n    var max = (1 << wnd) - 1;\n    var dbl = max === 1 ? null : this.dbl();\n    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);\n    return {\n        wnd: wnd,\n        points: res\n    };\n};\nBasePoint.prototype._getBeta = function _getBeta() {\n    return null;\n};\nBasePoint.prototype.dblp = function dblp(k) {\n    var r = this;\n    for(var i = 0; i < k; i++)r = r.dbl();\n    return r;\n};\nvar _c, _c1;\n$RefreshReg$(_c, \"BaseCurve\");\n$RefreshReg$(_c1, \"BasePoint\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLEtBQUtDLG1CQUFPQSxDQUFDO0FBQ2pCLElBQUlDLFFBQVFELG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlFLFNBQVNELE1BQU1DLE1BQU07QUFDekIsSUFBSUMsU0FBU0YsTUFBTUUsTUFBTTtBQUN6QixJQUFJQyxTQUFTSCxNQUFNRyxNQUFNO0FBRXpCLFNBQVNDLFVBQVVDLElBQUksRUFBRUMsSUFBSTtJQUMzQixJQUFJLENBQUNELElBQUksR0FBR0E7SUFDWixJQUFJLENBQUNFLENBQUMsR0FBRyxJQUFJVCxHQUFHUSxLQUFLQyxDQUFDLEVBQUU7SUFFeEIsZ0VBQWdFO0lBQ2hFLElBQUksQ0FBQ0MsR0FBRyxHQUFHRixLQUFLRyxLQUFLLEdBQUdYLEdBQUdVLEdBQUcsQ0FBQ0YsS0FBS0csS0FBSyxJQUFJWCxHQUFHWSxJQUFJLENBQUMsSUFBSSxDQUFDSCxDQUFDO0lBRTNELHlCQUF5QjtJQUN6QixJQUFJLENBQUNJLElBQUksR0FBRyxJQUFJYixHQUFHLEdBQUdjLEtBQUssQ0FBQyxJQUFJLENBQUNKLEdBQUc7SUFDcEMsSUFBSSxDQUFDSyxHQUFHLEdBQUcsSUFBSWYsR0FBRyxHQUFHYyxLQUFLLENBQUMsSUFBSSxDQUFDSixHQUFHO0lBQ25DLElBQUksQ0FBQ00sR0FBRyxHQUFHLElBQUloQixHQUFHLEdBQUdjLEtBQUssQ0FBQyxJQUFJLENBQUNKLEdBQUc7SUFFbkMsZ0NBQWdDO0lBQ2hDLElBQUksQ0FBQ08sQ0FBQyxHQUFHVCxLQUFLUyxDQUFDLElBQUksSUFBSWpCLEdBQUdRLEtBQUtTLENBQUMsRUFBRTtJQUNsQyxJQUFJLENBQUNDLENBQUMsR0FBR1YsS0FBS1UsQ0FBQyxJQUFJLElBQUksQ0FBQ0MsYUFBYSxDQUFDWCxLQUFLVSxDQUFDLEVBQUVWLEtBQUtZLElBQUk7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RUE4QyxVQUFVckQsU0FBUyxDQUFDOEIsYUFBYSxHQUFHLFNBQVNBLGNBQWNDLEdBQUc7SUFDNUQsSUFBSSxJQUFJLENBQUN6QixXQUFXLElBQUksSUFBSSxDQUFDQSxXQUFXLENBQUNHLEdBQUcsRUFDMUMsT0FBTyxJQUFJLENBQUNILFdBQVcsQ0FBQ0csR0FBRztJQUU3QixJQUFJb0QsTUFBTTtRQUFFLElBQUk7S0FBRTtJQUNsQixJQUFJcEIsTUFBTSxDQUFDLEtBQUtWLEdBQUUsSUFBSztJQUN2QixJQUFJZ0QsTUFBTXRDLFFBQVEsSUFBSSxPQUFPLElBQUksQ0FBQ3NDLEdBQUc7SUFDckMsSUFBSyxJQUFJMUQsSUFBSSxHQUFHQSxJQUFJb0IsS0FBS3BCLElBQ3ZCd0MsR0FBRyxDQUFDeEMsRUFBRSxHQUFHd0MsR0FBRyxDQUFDeEMsSUFBSSxFQUFFLENBQUNJLEdBQUcsQ0FBQ3NEO0lBQzFCLE9BQU87UUFDTGhELEtBQUtBO1FBQ0xSLFFBQVFzQztJQUNWO0FBQ0Y7QUFFQVIsVUFBVXJELFNBQVMsQ0FBQzRFLFFBQVEsR0FBRyxTQUFTQTtJQUN0QyxPQUFPO0FBQ1Q7QUFFQXZCLFVBQVVyRCxTQUFTLENBQUNpQyxJQUFJLEdBQUcsU0FBU0EsS0FBSzVCLENBQUM7SUFDeEMsSUFBSTJFLElBQUksSUFBSTtJQUNaLElBQUssSUFBSTNELElBQUksR0FBR0EsSUFBSWhCLEdBQUdnQixJQUNyQjJELElBQUlBLEVBQUVELEdBQUc7SUFDWCxPQUFPQztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvYmFzZS5qcz8yMjNjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgZ2V0TkFGID0gdXRpbHMuZ2V0TkFGO1xudmFyIGdldEpTRiA9IHV0aWxzLmdldEpTRjtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEJhc2VDdXJ2ZSh0eXBlLCBjb25mKSB7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMucCA9IG5ldyBCTihjb25mLnAsIDE2KTtcblxuICAvLyBVc2UgTW9udGdvbWVyeSwgd2hlbiB0aGVyZSBpcyBubyBmYXN0IHJlZHVjdGlvbiBmb3IgdGhlIHByaW1lXG4gIHRoaXMucmVkID0gY29uZi5wcmltZSA/IEJOLnJlZChjb25mLnByaW1lKSA6IEJOLm1vbnQodGhpcy5wKTtcblxuICAvLyBVc2VmdWwgZm9yIG1hbnkgY3VydmVzXG4gIHRoaXMuemVybyA9IG5ldyBCTigwKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMub25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy50d28gPSBuZXcgQk4oMikudG9SZWQodGhpcy5yZWQpO1xuXG4gIC8vIEN1cnZlIGNvbmZpZ3VyYXRpb24sIG9wdGlvbmFsXG4gIHRoaXMubiA9IGNvbmYubiAmJiBuZXcgQk4oY29uZi5uLCAxNik7XG4gIHRoaXMuZyA9IGNvbmYuZyAmJiB0aGlzLnBvaW50RnJvbUpTT04oY29uZi5nLCBjb25mLmdSZWQpO1xuXG4gIC8vIFRlbXBvcmFyeSBhcnJheXNcbiAgdGhpcy5fd25hZlQxID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDIgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUMyA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQ0ID0gbmV3IEFycmF5KDQpO1xuXG4gIHRoaXMuX2JpdExlbmd0aCA9IHRoaXMubiA/IHRoaXMubi5iaXRMZW5ndGgoKSA6IDA7XG5cbiAgLy8gR2VuZXJhbGl6ZWQgR3JlZyBNYXh3ZWxsJ3MgdHJpY2tcbiAgdmFyIGFkanVzdENvdW50ID0gdGhpcy5uICYmIHRoaXMucC5kaXYodGhpcy5uKTtcbiAgaWYgKCFhZGp1c3RDb3VudCB8fCBhZGp1c3RDb3VudC5jbXBuKDEwMCkgPiAwKSB7XG4gICAgdGhpcy5yZWROID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9tYXh3ZWxsVHJpY2sgPSB0cnVlO1xuICAgIHRoaXMucmVkTiA9IHRoaXMubi50b1JlZCh0aGlzLnJlZCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gQmFzZUN1cnZlO1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl9maXhlZE5hZk11bCA9IGZ1bmN0aW9uIF9maXhlZE5hZk11bChwLCBrKSB7XG4gIGFzc2VydChwLnByZWNvbXB1dGVkKTtcbiAgdmFyIGRvdWJsZXMgPSBwLl9nZXREb3VibGVzKCk7XG5cbiAgdmFyIG5hZiA9IGdldE5BRihrLCAxLCB0aGlzLl9iaXRMZW5ndGgpO1xuICB2YXIgSSA9ICgxIDw8IChkb3VibGVzLnN0ZXAgKyAxKSkgLSAoZG91Ymxlcy5zdGVwICUgMiA9PT0gMCA/IDIgOiAxKTtcbiAgSSAvPSAzO1xuXG4gIC8vIFRyYW5zbGF0ZSBpbnRvIG1vcmUgd2luZG93ZWQgZm9ybVxuICB2YXIgcmVwciA9IFtdO1xuICB2YXIgajtcbiAgdmFyIG5hZlc7XG4gIGZvciAoaiA9IDA7IGogPCBuYWYubGVuZ3RoOyBqICs9IGRvdWJsZXMuc3RlcCkge1xuICAgIG5hZlcgPSAwO1xuICAgIGZvciAodmFyIGwgPSBqICsgZG91Ymxlcy5zdGVwIC0gMTsgbCA+PSBqOyBsLS0pXG4gICAgICBuYWZXID0gKG5hZlcgPDwgMSkgKyBuYWZbbF07XG4gICAgcmVwci5wdXNoKG5hZlcpO1xuICB9XG5cbiAgdmFyIGEgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIGIgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IEk7IGkgPiAwOyBpLS0pIHtcbiAgICBmb3IgKGogPSAwOyBqIDwgcmVwci5sZW5ndGg7IGorKykge1xuICAgICAgbmFmVyA9IHJlcHJbal07XG4gICAgICBpZiAobmFmVyA9PT0gaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0pO1xuICAgICAgZWxzZSBpZiAobmFmVyA9PT0gLWkpXG4gICAgICAgIGIgPSBiLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdLm5lZygpKTtcbiAgICB9XG4gICAgYSA9IGEuYWRkKGIpO1xuICB9XG4gIHJldHVybiBhLnRvUCgpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bCA9IGZ1bmN0aW9uIF93bmFmTXVsKHAsIGspIHtcbiAgdmFyIHcgPSA0O1xuXG4gIC8vIFByZWNvbXB1dGUgd2luZG93XG4gIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHModyk7XG4gIHcgPSBuYWZQb2ludHMud25kO1xuICB2YXIgd25kID0gbmFmUG9pbnRzLnBvaW50cztcblxuICAvLyBHZXQgTkFGIGZvcm1cbiAgdmFyIG5hZiA9IGdldE5BRihrLCB3LCB0aGlzLl9iaXRMZW5ndGgpO1xuXG4gIC8vIEFkZCBgdGhpc2AqKE4rMSkgZm9yIGV2ZXJ5IHctTkFGIGluZGV4XG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IG5hZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIC8vIENvdW50IHplcm9lc1xuICAgIGZvciAodmFyIGwgPSAwOyBpID49IDAgJiYgbmFmW2ldID09PSAwOyBpLS0pXG4gICAgICBsKys7XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGwrKztcbiAgICBhY2MgPSBhY2MuZGJscChsKTtcblxuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuICAgIHZhciB6ID0gbmFmW2ldO1xuICAgIGFzc2VydCh6ICE9PSAwKTtcbiAgICBpZiAocC50eXBlID09PSAnYWZmaW5lJykge1xuICAgICAgLy8gSiArLSBQXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKC16IC0gMSkgPj4gMV0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBKICstIEpcbiAgICAgIGlmICh6ID4gMClcbiAgICAgICAgYWNjID0gYWNjLmFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHAudHlwZSA9PT0gJ2FmZmluZScgPyBhY2MudG9QKCkgOiBhY2M7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsQWRkID0gZnVuY3Rpb24gX3duYWZNdWxBZGQoZGVmVyxcbiAgcG9pbnRzLFxuICBjb2VmZnMsXG4gIGxlbixcbiAgamFjb2JpYW5SZXN1bHQpIHtcbiAgdmFyIHduZFdpZHRoID0gdGhpcy5fd25hZlQxO1xuICB2YXIgd25kID0gdGhpcy5fd25hZlQyO1xuICB2YXIgbmFmID0gdGhpcy5fd25hZlQzO1xuXG4gIC8vIEZpbGwgYWxsIGFycmF5c1xuICB2YXIgbWF4ID0gMDtcbiAgdmFyIGk7XG4gIHZhciBqO1xuICB2YXIgcDtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgcCA9IHBvaW50c1tpXTtcbiAgICB2YXIgbmFmUG9pbnRzID0gcC5fZ2V0TkFGUG9pbnRzKGRlZlcpO1xuICAgIHduZFdpZHRoW2ldID0gbmFmUG9pbnRzLnduZDtcbiAgICB3bmRbaV0gPSBuYWZQb2ludHMucG9pbnRzO1xuICB9XG5cbiAgLy8gQ29tYiBzbWFsbCB3aW5kb3cgTkFGc1xuICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDE7IGkgLT0gMikge1xuICAgIHZhciBhID0gaSAtIDE7XG4gICAgdmFyIGIgPSBpO1xuICAgIGlmICh3bmRXaWR0aFthXSAhPT0gMSB8fCB3bmRXaWR0aFtiXSAhPT0gMSkge1xuICAgICAgbmFmW2FdID0gZ2V0TkFGKGNvZWZmc1thXSwgd25kV2lkdGhbYV0sIHRoaXMuX2JpdExlbmd0aCk7XG4gICAgICBuYWZbYl0gPSBnZXROQUYoY29lZmZzW2JdLCB3bmRXaWR0aFtiXSwgdGhpcy5fYml0TGVuZ3RoKTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG5hZlthXS5sZW5ndGgsIG1heCk7XG4gICAgICBtYXggPSBNYXRoLm1heChuYWZbYl0ubGVuZ3RoLCBtYXgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGNvbWIgPSBbXG4gICAgICBwb2ludHNbYV0sIC8qIDEgKi9cbiAgICAgIG51bGwsIC8qIDMgKi9cbiAgICAgIG51bGwsIC8qIDUgKi9cbiAgICAgIHBvaW50c1tiXSwgLyogNyAqL1xuICAgIF07XG5cbiAgICAvLyBUcnkgdG8gYXZvaWQgUHJvamVjdGl2ZSBwb2ludHMsIGlmIHBvc3NpYmxlXG4gICAgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueSkgPT09IDApIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0uYWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfSBlbHNlIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkucmVkTmVnKCkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gW1xuICAgICAgLTMsIC8qIC0xIC0xICovXG4gICAgICAtMSwgLyogLTEgMCAqL1xuICAgICAgLTUsIC8qIC0xIDEgKi9cbiAgICAgIC03LCAvKiAwIC0xICovXG4gICAgICAwLCAvKiAwIDAgKi9cbiAgICAgIDcsIC8qIDAgMSAqL1xuICAgICAgNSwgLyogMSAtMSAqL1xuICAgICAgMSwgLyogMSAwICovXG4gICAgICAzLCAgLyogMSAxICovXG4gICAgXTtcblxuICAgIHZhciBqc2YgPSBnZXRKU0YoY29lZmZzW2FdLCBjb2VmZnNbYl0pO1xuICAgIG1heCA9IE1hdGgubWF4KGpzZlswXS5sZW5ndGgsIG1heCk7XG4gICAgbmFmW2FdID0gbmV3IEFycmF5KG1heCk7XG4gICAgbmFmW2JdID0gbmV3IEFycmF5KG1heCk7XG4gICAgZm9yIChqID0gMDsgaiA8IG1heDsgaisrKSB7XG4gICAgICB2YXIgamEgPSBqc2ZbMF1bal0gfCAwO1xuICAgICAgdmFyIGpiID0ganNmWzFdW2pdIHwgMDtcblxuICAgICAgbmFmW2FdW2pdID0gaW5kZXhbKGphICsgMSkgKiAzICsgKGpiICsgMSldO1xuICAgICAgbmFmW2JdW2pdID0gMDtcbiAgICAgIHduZFthXSA9IGNvbWI7XG4gICAgfVxuICB9XG5cbiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICB2YXIgdG1wID0gdGhpcy5fd25hZlQ0O1xuICBmb3IgKGkgPSBtYXg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGsgPSAwO1xuXG4gICAgd2hpbGUgKGkgPj0gMCkge1xuICAgICAgdmFyIHplcm8gPSB0cnVlO1xuICAgICAgZm9yIChqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIHRtcFtqXSA9IG5hZltqXVtpXSB8IDA7XG4gICAgICAgIGlmICh0bXBbal0gIT09IDApXG4gICAgICAgICAgemVybyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF6ZXJvKVxuICAgICAgICBicmVhaztcbiAgICAgIGsrKztcbiAgICAgIGktLTtcbiAgICB9XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGsrKztcbiAgICBhY2MgPSBhY2MuZGJscChrKTtcbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcblxuICAgIGZvciAoaiA9IDA7IGogPCBsZW47IGorKykge1xuICAgICAgdmFyIHogPSB0bXBbal07XG4gICAgICBwO1xuICAgICAgaWYgKHogPT09IDApXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgZWxzZSBpZiAoeiA+IDApXG4gICAgICAgIHAgPSB3bmRbal1bKHogLSAxKSA+PiAxXTtcbiAgICAgIGVsc2UgaWYgKHogPCAwKVxuICAgICAgICBwID0gd25kW2pdWygteiAtIDEpID4+IDFdLm5lZygpO1xuXG4gICAgICBpZiAocC50eXBlID09PSAnYWZmaW5lJylcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHApO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHApO1xuICAgIH1cbiAgfVxuICAvLyBaZXJvaWZ5IHJlZmVyZW5jZXNcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgIHduZFtpXSA9IG51bGw7XG5cbiAgaWYgKGphY29iaWFuUmVzdWx0KVxuICAgIHJldHVybiBhY2M7XG4gIGVsc2VcbiAgICByZXR1cm4gYWNjLnRvUCgpO1xufTtcblxuZnVuY3Rpb24gQmFzZVBvaW50KGN1cnZlLCB0eXBlKSB7XG4gIHRoaXMuY3VydmUgPSBjdXJ2ZTtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5wcmVjb21wdXRlZCA9IG51bGw7XG59XG5CYXNlQ3VydmUuQmFzZVBvaW50ID0gQmFzZVBvaW50O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEoLypvdGhlciovKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLnZhbGlkYXRlKHRoaXMpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5kZWNvZGVQb2ludCA9IGZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzLCBlbmMpIHtcbiAgYnl0ZXMgPSB1dGlscy50b0FycmF5KGJ5dGVzLCBlbmMpO1xuXG4gIHZhciBsZW4gPSB0aGlzLnAuYnl0ZUxlbmd0aCgpO1xuXG4gIC8vIHVuY29tcHJlc3NlZCwgaHlicmlkLW9kZCwgaHlicmlkLWV2ZW5cbiAgaWYgKChieXRlc1swXSA9PT0gMHgwNCB8fCBieXRlc1swXSA9PT0gMHgwNiB8fCBieXRlc1swXSA9PT0gMHgwNykgJiZcbiAgICAgIGJ5dGVzLmxlbmd0aCAtIDEgPT09IDIgKiBsZW4pIHtcbiAgICBpZiAoYnl0ZXNbMF0gPT09IDB4MDYpXG4gICAgICBhc3NlcnQoYnl0ZXNbYnl0ZXMubGVuZ3RoIC0gMV0gJSAyID09PSAwKTtcbiAgICBlbHNlIGlmIChieXRlc1swXSA9PT0gMHgwNylcbiAgICAgIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDEpO1xuXG4gICAgdmFyIHJlcyA9ICB0aGlzLnBvaW50KGJ5dGVzLnNsaWNlKDEsIDEgKyBsZW4pLFxuICAgICAgYnl0ZXMuc2xpY2UoMSArIGxlbiwgMSArIDIgKiBsZW4pKTtcblxuICAgIHJldHVybiByZXM7XG4gIH0gZWxzZSBpZiAoKGJ5dGVzWzBdID09PSAweDAyIHx8IGJ5dGVzWzBdID09PSAweDAzKSAmJlxuICAgICAgICAgICAgICBieXRlcy5sZW5ndGggLSAxID09PSBsZW4pIHtcbiAgICByZXR1cm4gdGhpcy5wb2ludEZyb21YKGJ5dGVzLnNsaWNlKDEsIDEgKyBsZW4pLCBieXRlc1swXSA9PT0gMHgwMyk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHBvaW50IGZvcm1hdCcpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5lbmNvZGVDb21wcmVzc2VkID0gZnVuY3Rpb24gZW5jb2RlQ29tcHJlc3NlZChlbmMpIHtcbiAgcmV0dXJuIHRoaXMuZW5jb2RlKGVuYywgdHJ1ZSk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9lbmNvZGUgPSBmdW5jdGlvbiBfZW5jb2RlKGNvbXBhY3QpIHtcbiAgdmFyIGxlbiA9IHRoaXMuY3VydmUucC5ieXRlTGVuZ3RoKCk7XG4gIHZhciB4ID0gdGhpcy5nZXRYKCkudG9BcnJheSgnYmUnLCBsZW4pO1xuXG4gIGlmIChjb21wYWN0KVxuICAgIHJldHVybiBbIHRoaXMuZ2V0WSgpLmlzRXZlbigpID8gMHgwMiA6IDB4MDMgXS5jb25jYXQoeCk7XG5cbiAgcmV0dXJuIFsgMHgwNCBdLmNvbmNhdCh4LCB0aGlzLmdldFkoKS50b0FycmF5KCdiZScsIGxlbikpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZW5jLCBjb21wYWN0KSB7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5fZW5jb2RlKGNvbXBhY3QpLCBlbmMpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5wcmVjb21wdXRlID0gZnVuY3Rpb24gcHJlY29tcHV0ZShwb3dlcikge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gdGhpcztcblxuICB2YXIgcHJlY29tcHV0ZWQgPSB7XG4gICAgZG91YmxlczogbnVsbCxcbiAgICBuYWY6IG51bGwsXG4gICAgYmV0YTogbnVsbCxcbiAgfTtcbiAgcHJlY29tcHV0ZWQubmFmID0gdGhpcy5fZ2V0TkFGUG9pbnRzKDgpO1xuICBwcmVjb21wdXRlZC5kb3VibGVzID0gdGhpcy5fZ2V0RG91Ymxlcyg0LCBwb3dlcik7XG4gIHByZWNvbXB1dGVkLmJldGEgPSB0aGlzLl9nZXRCZXRhKCk7XG4gIHRoaXMucHJlY29tcHV0ZWQgPSBwcmVjb21wdXRlZDtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2hhc0RvdWJsZXMgPSBmdW5jdGlvbiBfaGFzRG91YmxlcyhrKSB7XG4gIGlmICghdGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGRvdWJsZXMgPSB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXM7XG4gIGlmICghZG91YmxlcylcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIGRvdWJsZXMucG9pbnRzLmxlbmd0aCA+PSBNYXRoLmNlaWwoKGsuYml0TGVuZ3RoKCkgKyAxKSAvIGRvdWJsZXMuc3RlcCk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXREb3VibGVzID0gZnVuY3Rpb24gX2dldERvdWJsZXMoc3RlcCwgcG93ZXIpIHtcbiAgaWYgKHRoaXMucHJlY29tcHV0ZWQgJiYgdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzKVxuICAgIHJldHVybiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXM7XG5cbiAgdmFyIGRvdWJsZXMgPSBbIHRoaXMgXTtcbiAgdmFyIGFjYyA9IHRoaXM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG93ZXI7IGkgKz0gc3RlcCkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3RlcDsgaisrKVxuICAgICAgYWNjID0gYWNjLmRibCgpO1xuICAgIGRvdWJsZXMucHVzaChhY2MpO1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RlcDogc3RlcCxcbiAgICBwb2ludHM6IGRvdWJsZXMsXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXROQUZQb2ludHMgPSBmdW5jdGlvbiBfZ2V0TkFGUG9pbnRzKHduZCkge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLm5hZilcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5uYWY7XG5cbiAgdmFyIHJlcyA9IFsgdGhpcyBdO1xuICB2YXIgbWF4ID0gKDEgPDwgd25kKSAtIDE7XG4gIHZhciBkYmwgPSBtYXggPT09IDEgPyBudWxsIDogdGhpcy5kYmwoKTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXg7IGkrKylcbiAgICByZXNbaV0gPSByZXNbaSAtIDFdLmFkZChkYmwpO1xuICByZXR1cm4ge1xuICAgIHduZDogd25kLFxuICAgIHBvaW50czogcmVzLFxuICB9O1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0QmV0YSA9IGZ1bmN0aW9uIF9nZXRCZXRhKCkge1xuICByZXR1cm4gbnVsbDtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZGJscCA9IGZ1bmN0aW9uIGRibHAoaykge1xuICB2YXIgciA9IHRoaXM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgazsgaSsrKVxuICAgIHIgPSByLmRibCgpO1xuICByZXR1cm4gcjtcbn07XG4iXSwibmFtZXMiOlsiQk4iLCJyZXF1aXJlIiwidXRpbHMiLCJnZXROQUYiLCJnZXRKU0YiLCJhc3NlcnQiLCJCYXNlQ3VydmUiLCJ0eXBlIiwiY29uZiIsInAiLCJyZWQiLCJwcmltZSIsIm1vbnQiLCJ6ZXJvIiwidG9SZWQiLCJvbmUiLCJ0d28iLCJuIiwiZyIsInBvaW50RnJvbUpTT04iLCJnUmVkIiwiX3duYWZUMSIsIkFycmF5IiwiX3duYWZUMiIsIl93bmFmVDMiLCJfd25hZlQ0IiwiX2JpdExlbmd0aCIsImJpdExlbmd0aCIsImFkanVzdENvdW50IiwiZGl2IiwiY21wbiIsInJlZE4iLCJfbWF4d2VsbFRyaWNrIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsInBvaW50IiwiRXJyb3IiLCJ2YWxpZGF0ZSIsIl9maXhlZE5hZk11bCIsImsiLCJwcmVjb21wdXRlZCIsImRvdWJsZXMiLCJfZ2V0RG91YmxlcyIsIm5hZiIsIkkiLCJzdGVwIiwicmVwciIsImoiLCJuYWZXIiwibGVuZ3RoIiwibCIsInB1c2giLCJhIiwianBvaW50IiwiYiIsImkiLCJtaXhlZEFkZCIsInBvaW50cyIsIm5lZyIsImFkZCIsInRvUCIsIl93bmFmTXVsIiwidyIsIm5hZlBvaW50cyIsIl9nZXROQUZQb2ludHMiLCJ3bmQiLCJhY2MiLCJkYmxwIiwieiIsIl93bmFmTXVsQWRkIiwiZGVmVyIsImNvZWZmcyIsImxlbiIsImphY29iaWFuUmVzdWx0Iiwid25kV2lkdGgiLCJtYXgiLCJNYXRoIiwiY29tYiIsInkiLCJjbXAiLCJ0b0oiLCJyZWROZWciLCJpbmRleCIsImpzZiIsImphIiwiamIiLCJ0bXAiLCJCYXNlUG9pbnQiLCJjdXJ2ZSIsImVxIiwiZGVjb2RlUG9pbnQiLCJieXRlcyIsImVuYyIsInRvQXJyYXkiLCJieXRlTGVuZ3RoIiwicmVzIiwic2xpY2UiLCJwb2ludEZyb21YIiwiZW5jb2RlQ29tcHJlc3NlZCIsImVuY29kZSIsIl9lbmNvZGUiLCJjb21wYWN0IiwieCIsImdldFgiLCJnZXRZIiwiaXNFdmVuIiwiY29uY2F0IiwicHJlY29tcHV0ZSIsInBvd2VyIiwiYmV0YSIsIl9nZXRCZXRhIiwiX2hhc0RvdWJsZXMiLCJjZWlsIiwiZGJsIiwiciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/base.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/edwards.js":
/*!*************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/edwards.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nvar BN = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/elliptic/node_modules/bn.js/lib/bn.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(app-pages-browser)/./node_modules/inherits/inherits_browser.js\");\nvar Base = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/base.js\");\nvar assert = utils.assert;\nfunction EdwardsCurve(conf) {\n    // NOTE: Important as we are creating point in Base.call()\n    this.twisted = (conf.a | 0) !== 1;\n    this.mOneA = this.twisted && (conf.a | 0) === -1;\n    this.extended = this.mOneA;\n    Base.call(this, \"edwards\", conf);\n    this.a = new BN(conf.a, 16).umod(this.red.m);\n    this.a = this.a.toRed(this.red);\n    this.c = new BN(conf.c, 16).toRed(this.red);\n    this.c2 = this.c.redSqr();\n    this.d = new BN(conf.d, 16).toRed(this.red);\n    this.dd = this.d.redAdd(this.d);\n    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n    this.oneC = (conf.c | 0) === 1;\n}\n_c = EdwardsCurve;\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n    if (this.mOneA) return num.redNeg();\n    else return this.a.redMul(num);\n};\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n    if (this.oneC) return num;\n    else return this.c.redMul(num);\n};\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n    return this.point(x, y, z, t);\n};\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new BN(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var x2 = x.redSqr();\n    var rhs = this.c2.redSub(this.a.redMul(x2));\n    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n    var y2 = rhs.redMul(lhs.redInvm());\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n};\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n    y = new BN(y, 16);\n    if (!y.red) y = y.toRed(this.red);\n    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n    var y2 = y.redSqr();\n    var lhs = y2.redSub(this.c2);\n    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n    var x2 = lhs.redMul(rhs.redInvm());\n    if (x2.cmp(this.zero) === 0) {\n        if (odd) throw new Error(\"invalid point\");\n        else return this.point(this.zero, y);\n    }\n    var x = x2.redSqrt();\n    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    if (x.fromRed().isOdd() !== odd) x = x.redNeg();\n    return this.point(x, y);\n};\nEdwardsCurve.prototype.validate = function validate(point) {\n    if (point.isInfinity()) return true;\n    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n    point.normalize();\n    var x2 = point.x.redSqr();\n    var y2 = point.y.redSqr();\n    var lhs = x2.redMul(this.a).redAdd(y2);\n    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n    return lhs.cmp(rhs) === 0;\n};\nfunction Point(curve, x, y, z, t) {\n    Base.BasePoint.call(this, curve, \"projective\");\n    if (x === null && y === null && z === null) {\n        this.x = this.curve.zero;\n        this.y = this.curve.one;\n        this.z = this.curve.one;\n        this.t = this.curve.zero;\n        this.zOne = true;\n    } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        this.z = z ? new BN(z, 16) : this.curve.one;\n        this.t = t && new BN(t, 16);\n        if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n        if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);\n        this.zOne = this.z === this.curve.one;\n        // Use extended coordinates\n        if (this.curve.extended && !this.t) {\n            this.t = this.x.redMul(this.y);\n            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());\n        }\n    }\n}\n_c1 = Point;\ninherits(Point, Base.BasePoint);\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n    return Point.fromJSON(this, obj);\n};\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n    return new Point(this, x, y, z, t);\n};\nPoint.fromJSON = function fromJSON(curve, obj) {\n    return new Point(curve, obj[0], obj[1], obj[2]);\n};\nPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC Point Infinity>\";\n    return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \" z: \" + this.z.fromRed().toString(16, 2) + \">\";\n};\nPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);\n};\nPoint.prototype._extDbl = function _extDbl() {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n    //     #doubling-dbl-2008-hwcd\n    // 4M + 4S\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = 2 * Z1^2\n    var c = this.z.redSqr();\n    c = c.redIAdd(c);\n    // D = a * A\n    var d = this.curve._mulA(a);\n    // E = (X1 + Y1)^2 - A - B\n    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n    // G = D + B\n    var g = d.redAdd(b);\n    // F = G - C\n    var f = g.redSub(c);\n    // H = D - B\n    var h = d.redSub(b);\n    // X3 = E * F\n    var nx = e.redMul(f);\n    // Y3 = G * H\n    var ny = g.redMul(h);\n    // T3 = E * H\n    var nt = e.redMul(h);\n    // Z3 = F * G\n    var nz = f.redMul(g);\n    return this.curve.point(nx, ny, nz, nt);\n};\nPoint.prototype._projDbl = function _projDbl() {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n    //     #doubling-dbl-2008-bbjlp\n    //     #doubling-dbl-2007-bl\n    // and others\n    // Generally 3M + 4S or 2M + 4S\n    // B = (X1 + Y1)^2\n    var b = this.x.redAdd(this.y).redSqr();\n    // C = X1^2\n    var c = this.x.redSqr();\n    // D = Y1^2\n    var d = this.y.redSqr();\n    var nx;\n    var ny;\n    var nz;\n    var e;\n    var h;\n    var j;\n    if (this.curve.twisted) {\n        // E = a * C\n        e = this.curve._mulA(c);\n        // F = E + D\n        var f = e.redAdd(d);\n        if (this.zOne) {\n            // X3 = (B - C - D) * (F - 2)\n            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n            // Y3 = F * (E - D)\n            ny = f.redMul(e.redSub(d));\n            // Z3 = F^2 - 2 * F\n            nz = f.redSqr().redSub(f).redSub(f);\n        } else {\n            // H = Z1^2\n            h = this.z.redSqr();\n            // J = F - 2 * H\n            j = f.redSub(h).redISub(h);\n            // X3 = (B-C-D)*J\n            nx = b.redSub(c).redISub(d).redMul(j);\n            // Y3 = F * (E - D)\n            ny = f.redMul(e.redSub(d));\n            // Z3 = F * J\n            nz = f.redMul(j);\n        }\n    } else {\n        // E = C + D\n        e = c.redAdd(d);\n        // H = (c * Z1)^2\n        h = this.curve._mulC(this.z).redSqr();\n        // J = E - 2 * H\n        j = e.redSub(h).redSub(h);\n        // X3 = c * (B - E) * J\n        nx = this.curve._mulC(b.redISub(e)).redMul(j);\n        // Y3 = c * E * (C - D)\n        ny = this.curve._mulC(e).redMul(c.redISub(d));\n        // Z3 = E * J\n        nz = e.redMul(j);\n    }\n    return this.curve.point(nx, ny, nz);\n};\nPoint.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this;\n    // Double in extended coordinates\n    if (this.curve.extended) return this._extDbl();\n    else return this._projDbl();\n};\nPoint.prototype._extAdd = function _extAdd(p) {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n    //     #addition-add-2008-hwcd-3\n    // 8M\n    // A = (Y1 - X1) * (Y2 - X2)\n    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n    // B = (Y1 + X1) * (Y2 + X2)\n    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n    // C = T1 * k * T2\n    var c = this.t.redMul(this.curve.dd).redMul(p.t);\n    // D = Z1 * 2 * Z2\n    var d = this.z.redMul(p.z.redAdd(p.z));\n    // E = B - A\n    var e = b.redSub(a);\n    // F = D - C\n    var f = d.redSub(c);\n    // G = D + C\n    var g = d.redAdd(c);\n    // H = B + A\n    var h = b.redAdd(a);\n    // X3 = E * F\n    var nx = e.redMul(f);\n    // Y3 = G * H\n    var ny = g.redMul(h);\n    // T3 = E * H\n    var nt = e.redMul(h);\n    // Z3 = F * G\n    var nz = f.redMul(g);\n    return this.curve.point(nx, ny, nz, nt);\n};\nPoint.prototype._projAdd = function _projAdd(p) {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n    //     #addition-add-2008-bbjlp\n    //     #addition-add-2007-bl\n    // 10M + 1S\n    // A = Z1 * Z2\n    var a = this.z.redMul(p.z);\n    // B = A^2\n    var b = a.redSqr();\n    // C = X1 * X2\n    var c = this.x.redMul(p.x);\n    // D = Y1 * Y2\n    var d = this.y.redMul(p.y);\n    // E = d * C * D\n    var e = this.curve.d.redMul(c).redMul(d);\n    // F = B - E\n    var f = b.redSub(e);\n    // G = B + E\n    var g = b.redAdd(e);\n    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n    var nx = a.redMul(f).redMul(tmp);\n    var ny;\n    var nz;\n    if (this.curve.twisted) {\n        // Y3 = A * G * (D - a * C)\n        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n        // Z3 = F * G\n        nz = f.redMul(g);\n    } else {\n        // Y3 = A * G * (D - C)\n        ny = a.redMul(g).redMul(d.redSub(c));\n        // Z3 = c * F * G\n        nz = this.curve._mulC(f).redMul(g);\n    }\n    return this.curve.point(nx, ny, nz);\n};\nPoint.prototype.add = function add(p) {\n    if (this.isInfinity()) return p;\n    if (p.isInfinity()) return this;\n    if (this.curve.extended) return this._extAdd(p);\n    else return this._projAdd(p);\n};\nPoint.prototype.mul = function mul(k) {\n    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);\n    else return this.curve._wnafMul(this, k);\n};\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n    return this.curve._wnafMulAdd(1, [\n        this,\n        p\n    ], [\n        k1,\n        k2\n    ], 2, false);\n};\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n    return this.curve._wnafMulAdd(1, [\n        this,\n        p\n    ], [\n        k1,\n        k2\n    ], 2, true);\n};\nPoint.prototype.normalize = function normalize() {\n    if (this.zOne) return this;\n    // Normalize coordinates\n    var zi = this.z.redInvm();\n    this.x = this.x.redMul(zi);\n    this.y = this.y.redMul(zi);\n    if (this.t) this.t = this.t.redMul(zi);\n    this.z = this.curve.one;\n    this.zOne = true;\n    return this;\n};\nPoint.prototype.neg = function neg() {\n    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());\n};\nPoint.prototype.getX = function getX() {\n    this.normalize();\n    return this.x.fromRed();\n};\nPoint.prototype.getY = function getY() {\n    this.normalize();\n    return this.y.fromRed();\n};\nPoint.prototype.eq = function eq(other) {\n    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;\n};\nPoint.prototype.eqXToP = function eqXToP(x) {\n    var rx = x.toRed(this.curve.red).redMul(this.z);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(this.z);\n    for(;;){\n        xc.iadd(this.curve.n);\n        if (xc.cmp(this.curve.p) >= 0) return false;\n        rx.redIAdd(t);\n        if (this.x.cmp(rx) === 0) return true;\n    }\n};\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\nvar _c, _c1;\n$RefreshReg$(_c, \"EdwardsCurve\");\n$RefreshReg$(_c1, \"Point\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvZWR3YXJkcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlDLEtBQUtELG1CQUFPQSxDQUFDO0FBQ2pCLElBQUlFLFdBQVdGLG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUlHLE9BQU9ILG1CQUFPQSxDQUFDO0FBRW5CLElBQUlJLFNBQVNMLE1BQU1LLE1BQU07QUFFekIsU0FBU0MsYUFBYUMsSUFBSTtJQUN4QiwwREFBMEQ7SUFDMUQsSUFBSSxDQUFDQyxPQUFPLEdBQUcsQ0FBQ0QsS0FBS0UsQ0FBQyxHQUFHLE9BQU87SUFDaEMsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDRixPQUFPLElBQUksQ0FBQ0QsS0FBS0UsQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUMvQyxJQUFJLENBQUNFLFFBQVEsR0FBRyxJQUFJLENBQUNELEtBQUs7SUFFMUJOLEtBQUtRLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBV0w7SUFFM0IsSUFBSSxDQUFDRSxDQUFDLEdBQUcsSUFBSVAsR0FBR0ssS0FBS0UsQ0FBQyxFQUFFLElBQUlJLElBQUksQ0FBQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0MsQ0FBQztJQUMzQyxJQUFJLENBQUNOLENBQUMsR0FBRyxJQUFJLENBQUNBLENBQUMsQ0FBQ08sS0FBSyxDQUFDLElBQUksQ0FBQ0YsR0FBRztJQUM5QixJQUFJLENBQUNHLENBQUMsR0FBRyxJQUFJZixHQUFHSyxLQUFLVSxDQUFDLEVBQUUsSUFBSUQsS0FBSyxDQUFDLElBQUksQ0FBQ0YsR0FBRztJQUMxQyxJQUFJLENBQUNJLEVBQUUsR0FBRyxJQUFJLENBQUNELENBQUMsQ0FBQ0UsTUFBTTtJQUN2QixJQUFJLENBQUNDLENBQUMsR0FBRyxJQUFJbEIsR0FBR0ssS0FBS2EsQ0FBQyxFQUFFLElBQUlKLEtBQUssQ0FBQyxJ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cEIsSUFBSUosR0FBR3hELEdBQUcsQ0FBQyxJQUFJLENBQUNTLEtBQUssQ0FBQ3lCLENBQUMsS0FBSyxHQUMxQixPQUFPO1FBRVRxQixHQUFHcEMsT0FBTyxDQUFDL0I7UUFDWCxJQUFJLElBQUksQ0FBQ0gsQ0FBQyxDQUFDZSxHQUFHLENBQUN1RCxRQUFRLEdBQ3JCLE9BQU87SUFDWDtBQUNGO0FBRUEsK0JBQStCO0FBQy9CL0MsTUFBTTlCLFNBQVMsQ0FBQ21GLEdBQUcsR0FBR3JELE1BQU05QixTQUFTLENBQUM2QixTQUFTO0FBQy9DQyxNQUFNOUIsU0FBUyxDQUFDb0YsUUFBUSxHQUFHdEQsTUFBTTlCLFNBQVMsQ0FBQzJELEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9lZHdhcmRzLmpzPzk5MTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuXG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBFZHdhcmRzQ3VydmUoY29uZikge1xuICAvLyBOT1RFOiBJbXBvcnRhbnQgYXMgd2UgYXJlIGNyZWF0aW5nIHBvaW50IGluIEJhc2UuY2FsbCgpXG4gIHRoaXMudHdpc3RlZCA9IChjb25mLmEgfCAwKSAhPT0gMTtcbiAgdGhpcy5tT25lQSA9IHRoaXMudHdpc3RlZCAmJiAoY29uZi5hIHwgMCkgPT09IC0xO1xuICB0aGlzLmV4dGVuZGVkID0gdGhpcy5tT25lQTtcblxuICBCYXNlLmNhbGwodGhpcywgJ2Vkd2FyZHMnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudW1vZCh0aGlzLnJlZC5tKTtcbiAgdGhpcy5hID0gdGhpcy5hLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5jID0gbmV3IEJOKGNvbmYuYywgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5jMiA9IHRoaXMuYy5yZWRTcXIoKTtcbiAgdGhpcy5kID0gbmV3IEJOKGNvbmYuZCwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5kZCA9IHRoaXMuZC5yZWRBZGQodGhpcy5kKTtcblxuICBhc3NlcnQoIXRoaXMudHdpc3RlZCB8fCB0aGlzLmMuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDApO1xuICB0aGlzLm9uZUMgPSAoY29uZi5jIHwgMCkgPT09IDE7XG59XG5pbmhlcml0cyhFZHdhcmRzQ3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBFZHdhcmRzQ3VydmU7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuX211bEEgPSBmdW5jdGlvbiBfbXVsQShudW0pIHtcbiAgaWYgKHRoaXMubU9uZUEpXG4gICAgcmV0dXJuIG51bS5yZWROZWcoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmEucmVkTXVsKG51bSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxDID0gZnVuY3Rpb24gX211bEMobnVtKSB7XG4gIGlmICh0aGlzLm9uZUMpXG4gICAgcmV0dXJuIG51bTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmMucmVkTXVsKG51bSk7XG59O1xuXG4vLyBKdXN0IGZvciBjb21wYXRpYmlsaXR5IHdpdGggU2hvcnQgY3VydmVcbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuanBvaW50ID0gZnVuY3Rpb24ganBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSwgeiwgdCk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiBwb2ludEZyb21YKHgsIG9kZCkge1xuICB4ID0gbmV3IEJOKHgsIDE2KTtcbiAgaWYgKCF4LnJlZClcbiAgICB4ID0geC50b1JlZCh0aGlzLnJlZCk7XG5cbiAgdmFyIHgyID0geC5yZWRTcXIoKTtcbiAgdmFyIHJocyA9IHRoaXMuYzIucmVkU3ViKHRoaXMuYS5yZWRNdWwoeDIpKTtcbiAgdmFyIGxocyA9IHRoaXMub25lLnJlZFN1Yih0aGlzLmMyLnJlZE11bCh0aGlzLmQpLnJlZE11bCh4MikpO1xuXG4gIHZhciB5MiA9IHJocy5yZWRNdWwobGhzLnJlZEludm0oKSk7XG4gIHZhciB5ID0geTIucmVkU3FydCgpO1xuICBpZiAoeS5yZWRTcXIoKS5yZWRTdWIoeTIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIHZhciBpc09kZCA9IHkuZnJvbVJlZCgpLmlzT2RkKCk7XG4gIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNPZGQpXG4gICAgeSA9IHkucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVkgPSBmdW5jdGlvbiBwb2ludEZyb21ZKHksIG9kZCkge1xuICB5ID0gbmV3IEJOKHksIDE2KTtcbiAgaWYgKCF5LnJlZClcbiAgICB5ID0geS50b1JlZCh0aGlzLnJlZCk7XG5cbiAgLy8geF4yID0gKHleMiAtIGNeMikgLyAoY14yIGQgeV4yIC0gYSlcbiAgdmFyIHkyID0geS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHkyLnJlZFN1Yih0aGlzLmMyKTtcbiAgdmFyIHJocyA9IHkyLnJlZE11bCh0aGlzLmQpLnJlZE11bCh0aGlzLmMyKS5yZWRTdWIodGhpcy5hKTtcbiAgdmFyIHgyID0gbGhzLnJlZE11bChyaHMucmVkSW52bSgpKTtcblxuICBpZiAoeDIuY21wKHRoaXMuemVybykgPT09IDApIHtcbiAgICBpZiAob2RkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMucG9pbnQodGhpcy56ZXJvLCB5KTtcbiAgfVxuXG4gIHZhciB4ID0geDIucmVkU3FydCgpO1xuICBpZiAoeC5yZWRTcXIoKS5yZWRTdWIoeDIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIGlmICh4LmZyb21SZWQoKS5pc09kZCgpICE9PSBvZGQpXG4gICAgeCA9IHgucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyBDdXJ2ZTogQSAqIFheMiArIFleMiA9IENeMiAqICgxICsgRCAqIFheMiAqIFleMilcbiAgcG9pbnQubm9ybWFsaXplKCk7XG5cbiAgdmFyIHgyID0gcG9pbnQueC5yZWRTcXIoKTtcbiAgdmFyIHkyID0gcG9pbnQueS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHgyLnJlZE11bCh0aGlzLmEpLnJlZEFkZCh5Mik7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZE11bCh0aGlzLm9uZS5yZWRBZGQodGhpcy5kLnJlZE11bCh4MikucmVkTXVsKHkyKSkpO1xuXG4gIHJldHVybiBsaHMuY21wKHJocykgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgeiwgdCkge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLnplcm87XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICAgIHRoaXMuek9uZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIHRoaXMueiA9IHogPyBuZXcgQk4oeiwgMTYpIDogdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdCAmJiBuZXcgQk4odCwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMuei5yZWQpXG4gICAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICh0aGlzLnQgJiYgIXRoaXMudC5yZWQpXG4gICAgICB0aGlzLnQgPSB0aGlzLnQudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIHRoaXMuek9uZSA9IHRoaXMueiA9PT0gdGhpcy5jdXJ2ZS5vbmU7XG5cbiAgICAvLyBVc2UgZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZCAmJiAhdGhpcy50KSB7XG4gICAgICB0aGlzLnQgPSB0aGlzLngucmVkTXVsKHRoaXMueSk7XG4gICAgICBpZiAoIXRoaXMuek9uZSlcbiAgICAgICAgdGhpcy50ID0gdGhpcy50LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTtcbiAgICB9XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCB6LCB0KTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaikge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSwgb2JqWzJdKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMueC5jbXBuKDApID09PSAwICYmXG4gICAgKHRoaXMueS5jbXAodGhpcy56KSA9PT0gMCB8fFxuICAgICh0aGlzLnpPbmUgJiYgdGhpcy55LmNtcCh0aGlzLmN1cnZlLmMpID09PSAwKSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2V4dERibCA9IGZ1bmN0aW9uIF9leHREYmwoKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA4LWh3Y2RcbiAgLy8gNE0gKyA0U1xuXG4gIC8vIEEgPSBYMV4yXG4gIHZhciBhID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBCID0gWTFeMlxuICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTtcbiAgLy8gQyA9IDIgKiBaMV4yXG4gIHZhciBjID0gdGhpcy56LnJlZFNxcigpO1xuICBjID0gYy5yZWRJQWRkKGMpO1xuICAvLyBEID0gYSAqIEFcbiAgdmFyIGQgPSB0aGlzLmN1cnZlLl9tdWxBKGEpO1xuICAvLyBFID0gKFgxICsgWTEpXjIgLSBBIC0gQlxuICB2YXIgZSA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYik7XG4gIC8vIEcgPSBEICsgQlxuICB2YXIgZyA9IGQucmVkQWRkKGIpO1xuICAvLyBGID0gRyAtIENcbiAgdmFyIGYgPSBnLnJlZFN1YihjKTtcbiAgLy8gSCA9IEQgLSBCXG4gIHZhciBoID0gZC5yZWRTdWIoYik7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakRibCA9IGZ1bmN0aW9uIF9wcm9qRGJsKCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1wcm9qZWN0aXZlLmh0bWxcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOC1iYmpscFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA3LWJsXG4gIC8vIGFuZCBvdGhlcnNcbiAgLy8gR2VuZXJhbGx5IDNNICsgNFMgb3IgMk0gKyA0U1xuXG4gIC8vIEIgPSAoWDEgKyBZMSleMlxuICB2YXIgYiA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxXjJcbiAgdmFyIGMgPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIEQgPSBZMV4yXG4gIHZhciBkID0gdGhpcy55LnJlZFNxcigpO1xuXG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIHZhciBlO1xuICB2YXIgaDtcbiAgdmFyIGo7XG4gIGlmICh0aGlzLmN1cnZlLnR3aXN0ZWQpIHtcbiAgICAvLyBFID0gYSAqIENcbiAgICBlID0gdGhpcy5jdXJ2ZS5fbXVsQShjKTtcbiAgICAvLyBGID0gRSArIERcbiAgICB2YXIgZiA9IGUucmVkQWRkKGQpO1xuICAgIGlmICh0aGlzLnpPbmUpIHtcbiAgICAgIC8vIFgzID0gKEIgLSBDIC0gRCkgKiAoRiAtIDIpXG4gICAgICBueCA9IGIucmVkU3ViKGMpLnJlZFN1YihkKS5yZWRNdWwoZi5yZWRTdWIodGhpcy5jdXJ2ZS50d28pKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGXjIgLSAyICogRlxuICAgICAgbnogPSBmLnJlZFNxcigpLnJlZFN1YihmKS5yZWRTdWIoZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEggPSBaMV4yXG4gICAgICBoID0gdGhpcy56LnJlZFNxcigpO1xuICAgICAgLy8gSiA9IEYgLSAyICogSFxuICAgICAgaiA9IGYucmVkU3ViKGgpLnJlZElTdWIoaCk7XG4gICAgICAvLyBYMyA9IChCLUMtRCkqSlxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRJU3ViKGQpLnJlZE11bChqKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGICogSlxuICAgICAgbnogPSBmLnJlZE11bChqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRSA9IEMgKyBEXG4gICAgZSA9IGMucmVkQWRkKGQpO1xuICAgIC8vIEggPSAoYyAqIFoxKV4yXG4gICAgaCA9IHRoaXMuY3VydmUuX211bEModGhpcy56KS5yZWRTcXIoKTtcbiAgICAvLyBKID0gRSAtIDIgKiBIXG4gICAgaiA9IGUucmVkU3ViKGgpLnJlZFN1YihoKTtcbiAgICAvLyBYMyA9IGMgKiAoQiAtIEUpICogSlxuICAgIG54ID0gdGhpcy5jdXJ2ZS5fbXVsQyhiLnJlZElTdWIoZSkpLnJlZE11bChqKTtcbiAgICAvLyBZMyA9IGMgKiBFICogKEMgLSBEKVxuICAgIG55ID0gdGhpcy5jdXJ2ZS5fbXVsQyhlKS5yZWRNdWwoYy5yZWRJU3ViKGQpKTtcbiAgICAvLyBaMyA9IEUgKiBKXG4gICAgbnogPSBlLnJlZE11bChqKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBEb3VibGUgaW4gZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dERibCgpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX3Byb2pEYmwoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZXh0QWRkID0gZnVuY3Rpb24gX2V4dEFkZChwKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA4LWh3Y2QtM1xuICAvLyA4TVxuXG4gIC8vIEEgPSAoWTEgLSBYMSkgKiAoWTIgLSBYMilcbiAgdmFyIGEgPSB0aGlzLnkucmVkU3ViKHRoaXMueCkucmVkTXVsKHAueS5yZWRTdWIocC54KSk7XG4gIC8vIEIgPSAoWTEgKyBYMSkgKiAoWTIgKyBYMilcbiAgdmFyIGIgPSB0aGlzLnkucmVkQWRkKHRoaXMueCkucmVkTXVsKHAueS5yZWRBZGQocC54KSk7XG4gIC8vIEMgPSBUMSAqIGsgKiBUMlxuICB2YXIgYyA9IHRoaXMudC5yZWRNdWwodGhpcy5jdXJ2ZS5kZCkucmVkTXVsKHAudCk7XG4gIC8vIEQgPSBaMSAqIDIgKiBaMlxuICB2YXIgZCA9IHRoaXMuei5yZWRNdWwocC56LnJlZEFkZChwLnopKTtcbiAgLy8gRSA9IEIgLSBBXG4gIHZhciBlID0gYi5yZWRTdWIoYSk7XG4gIC8vIEYgPSBEIC0gQ1xuICB2YXIgZiA9IGQucmVkU3ViKGMpO1xuICAvLyBHID0gRCArIENcbiAgdmFyIGcgPSBkLnJlZEFkZChjKTtcbiAgLy8gSCA9IEIgKyBBXG4gIHZhciBoID0gYi5yZWRBZGQoYSk7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakFkZCA9IGZ1bmN0aW9uIF9wcm9qQWRkKHApIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtcHJvamVjdGl2ZS5odG1sXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtYmJqbHBcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwNy1ibFxuICAvLyAxME0gKyAxU1xuXG4gIC8vIEEgPSBaMSAqIFoyXG4gIHZhciBhID0gdGhpcy56LnJlZE11bChwLnopO1xuICAvLyBCID0gQV4yXG4gIHZhciBiID0gYS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxICogWDJcbiAgdmFyIGMgPSB0aGlzLngucmVkTXVsKHAueCk7XG4gIC8vIEQgPSBZMSAqIFkyXG4gIHZhciBkID0gdGhpcy55LnJlZE11bChwLnkpO1xuICAvLyBFID0gZCAqIEMgKiBEXG4gIHZhciBlID0gdGhpcy5jdXJ2ZS5kLnJlZE11bChjKS5yZWRNdWwoZCk7XG4gIC8vIEYgPSBCIC0gRVxuICB2YXIgZiA9IGIucmVkU3ViKGUpO1xuICAvLyBHID0gQiArIEVcbiAgdmFyIGcgPSBiLnJlZEFkZChlKTtcbiAgLy8gWDMgPSBBICogRiAqICgoWDEgKyBZMSkgKiAoWDIgKyBZMikgLSBDIC0gRClcbiAgdmFyIHRtcCA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRNdWwocC54LnJlZEFkZChwLnkpKS5yZWRJU3ViKGMpLnJlZElTdWIoZCk7XG4gIHZhciBueCA9IGEucmVkTXVsKGYpLnJlZE11bCh0bXApO1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkge1xuICAgIC8vIFkzID0gQSAqIEcgKiAoRCAtIGEgKiBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKHRoaXMuY3VydmUuX211bEEoYykpKTtcbiAgICAvLyBaMyA9IEYgKiBHXG4gICAgbnogPSBmLnJlZE11bChnKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBZMyA9IEEgKiBHICogKEQgLSBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKGMpKTtcbiAgICAvLyBaMyA9IGMgKiBGICogR1xuICAgIG56ID0gdGhpcy5jdXJ2ZS5fbXVsQyhmKS5yZWRNdWwoZyk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dEFkZChwKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9wcm9qQWRkKHApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIGlmICh0aGlzLl9oYXNEb3VibGVzKGspKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIsIGZhbHNlKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qbXVsQWRkID0gZnVuY3Rpb24gam11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIsIHRydWUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgaWYgKHRoaXMuek9uZSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXNcbiAgdmFyIHppID0gdGhpcy56LnJlZEludm0oKTtcbiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh6aSk7XG4gIHRoaXMueSA9IHRoaXMueS5yZWRNdWwoemkpO1xuICBpZiAodGhpcy50KVxuICAgIHRoaXMudCA9IHRoaXMudC5yZWRNdWwoemkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgdGhpcy56T25lID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTmVnKCksXG4gICAgdGhpcy55LFxuICAgIHRoaXMueixcbiAgICB0aGlzLnQgJiYgdGhpcy50LnJlZE5lZygpKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgdGhpcy5ub3JtYWxpemUoKTtcbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7XG4gIHRoaXMubm9ybWFsaXplKCk7XG4gIHJldHVybiB0aGlzLnkuZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMgPT09IG90aGVyIHx8XG4gICAgICAgICB0aGlzLmdldFgoKS5jbXAob3RoZXIuZ2V0WCgpKSA9PT0gMCAmJlxuICAgICAgICAgdGhpcy5nZXRZKCkuY21wKG90aGVyLmdldFkoKSkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXFYVG9QID0gZnVuY3Rpb24gZXFYVG9QKHgpIHtcbiAgdmFyIHJ4ID0geC50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHRoaXMueik7XG4gIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeGMgPSB4LmNsb25lKCk7XG4gIHZhciB0ID0gdGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh0aGlzLnopO1xuICBmb3IgKDs7KSB7XG4gICAgeGMuaWFkZCh0aGlzLmN1cnZlLm4pO1xuICAgIGlmICh4Yy5jbXAodGhpcy5jdXJ2ZS5wKSA+PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcngucmVkSUFkZCh0KTtcbiAgICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLy8gQ29tcGF0aWJpbGl0eSB3aXRoIEJhc2VDdXJ2ZVxuUG9pbnQucHJvdG90eXBlLnRvUCA9IFBvaW50LnByb3RvdHlwZS5ub3JtYWxpemU7XG5Qb2ludC5wcm90b3R5cGUubWl4ZWRBZGQgPSBQb2ludC5wcm90b3R5cGUuYWRkO1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsIkJOIiwiaW5oZXJpdHMiLCJCYXNlIiwiYXNzZXJ0IiwiRWR3YXJkc0N1cnZlIiwiY29uZiIsInR3aXN0ZWQiLCJhIiwibU9uZUEiLCJleHRlbmRlZCIsImNhbGwiLCJ1bW9kIiwicmVkIiwibSIsInRvUmVkIiwiYyIsImMyIiwicmVkU3FyIiwiZCIsImRkIiwicmVkQWRkIiwiZnJvbVJlZCIsImNtcG4iLCJvbmVDIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsIl9tdWxBIiwibnVtIiwicmVkTmVnIiwicmVkTXVsIiwiX211bEMiLCJqcG9pbnQiLCJ4IiwieSIsInoiLCJ0IiwicG9pbnQiLCJwb2ludEZyb21YIiwib2RkIiwieDIiLCJyaHMiLCJyZWRTdWIiLCJsaHMiLCJvbmUiLCJ5MiIsInJlZEludm0iLCJyZWRTcXJ0IiwiY21wIiwiemVybyIsIkVycm9yIiwiaXNPZGQiLCJwb2ludEZyb21ZIiwidmFsaWRhdGUiLCJpc0luZmluaXR5Iiwibm9ybWFsaXplIiwiUG9pbnQiLCJjdXJ2ZSIsIkJhc2VQb2ludCIsInpPbmUiLCJwb2ludEZyb21KU09OIiwib2JqIiwiZnJvbUpTT04iLCJpbnNwZWN0IiwidG9TdHJpbmciLCJfZXh0RGJsIiwiYiIsInJlZElBZGQiLCJlIiwicmVkSVN1YiIsImciLCJmIiwiaCIsIm54IiwibnkiLCJudCIsIm56IiwiX3Byb2pEYmwiLCJqIiwidHdvIiwiZGJsIiwiX2V4dEFkZCIsInAiLCJfcHJvakFkZCIsInRtcCIsImFkZCIsIm11bCIsImsiLCJfaGFzRG91YmxlcyIsIl9maXhlZE5hZk11bCIsIl93bmFmTXVsIiwibXVsQWRkIiwiazEiLCJrMiIsIl93bmFmTXVsQWRkIiwiam11bEFkZCIsInppIiwibmVnIiwiZ2V0WCIsImdldFkiLCJlcSIsIm90aGVyIiwiZXFYVG9QIiwicngiLCJ4YyIsImNsb25lIiwicmVkTiIsImlhZGQiLCJuIiwidG9QIiwibWl4ZWRBZGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/edwards.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar curve = exports;\ncurve.base = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/base.js\");\ncurve.short = __webpack_require__(/*! ./short */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/short.js\");\ncurve.mont = __webpack_require__(/*! ./mont */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/mont.js\");\ncurve.edwards = __webpack_require__(/*! ./edwards */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/edwards.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQztBQUVaRCxNQUFNRSxJQUFJLEdBQUdDLG1CQUFPQSxDQUFDO0FBQ3JCSCxNQUFNSSxLQUFLLEdBQUdELG1CQUFPQSxDQUFDO0FBQ3RCSCxNQUFNSyxJQUFJLEdBQUdGLG1CQUFPQSxDQUFDO0FBQ3JCSCxNQUFNTSxPQUFPLEdBQUdILG1CQUFPQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvaW5kZXguanM/YzI0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZSA9IGV4cG9ydHM7XG5cbmN1cnZlLmJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcbmN1cnZlLnNob3J0ID0gcmVxdWlyZSgnLi9zaG9ydCcpO1xuY3VydmUubW9udCA9IHJlcXVpcmUoJy4vbW9udCcpO1xuY3VydmUuZWR3YXJkcyA9IHJlcXVpcmUoJy4vZWR3YXJkcycpO1xuIl0sIm5hbWVzIjpbImN1cnZlIiwiZXhwb3J0cyIsImJhc2UiLCJyZXF1aXJlIiwic2hvcnQiLCJtb250IiwiZWR3YXJkcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/mont.js":
/*!**********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/mont.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar BN = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/elliptic/node_modules/bn.js/lib/bn.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(app-pages-browser)/./node_modules/inherits/inherits_browser.js\");\nvar Base = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/base.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nfunction MontCurve(conf) {\n    Base.call(this, \"mont\", conf);\n    this.a = new BN(conf.a, 16).toRed(this.red);\n    this.b = new BN(conf.b, 16).toRed(this.red);\n    this.i4 = new BN(4).toRed(this.red).redInvm();\n    this.two = new BN(2).toRed(this.red);\n    this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\n_c = MontCurve;\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\nMontCurve.prototype.validate = function validate(point) {\n    var x = point.normalize().x;\n    var x2 = x.redSqr();\n    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n    var y = rhs.redSqrt();\n    return y.redSqr().cmp(rhs) === 0;\n};\nfunction Point(curve, x, z) {\n    Base.BasePoint.call(this, curve, \"projective\");\n    if (x === null && z === null) {\n        this.x = this.curve.one;\n        this.z = this.curve.zero;\n    } else {\n        this.x = new BN(x, 16);\n        this.z = new BN(z, 16);\n        if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n        if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    }\n}\n_c1 = Point;\ninherits(Point, Base.BasePoint);\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    return this.point(utils.toArray(bytes, enc), 1);\n};\nMontCurve.prototype.point = function point(x, z) {\n    return new Point(this, x, z);\n};\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n    return Point.fromJSON(this, obj);\n};\nPoint.prototype.precompute = function precompute() {\n// No-op\n};\nPoint.prototype._encode = function _encode() {\n    return this.getX().toArray(\"be\", this.curve.p.byteLength());\n};\nPoint.fromJSON = function fromJSON(curve, obj) {\n    return new Point(curve, obj[0], obj[1] || curve.one);\n};\nPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC Point Infinity>\";\n    return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" z: \" + this.z.fromRed().toString(16, 2) + \">\";\n};\nPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n};\nPoint.prototype.dbl = function dbl() {\n    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n    // 2M + 2S + 4A\n    // A = X1 + Z1\n    var a = this.x.redAdd(this.z);\n    // AA = A^2\n    var aa = a.redSqr();\n    // B = X1 - Z1\n    var b = this.x.redSub(this.z);\n    // BB = B^2\n    var bb = b.redSqr();\n    // C = AA - BB\n    var c = aa.redSub(bb);\n    // X3 = AA * BB\n    var nx = aa.redMul(bb);\n    // Z3 = C * (BB + A24 * C)\n    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n    return this.curve.point(nx, nz);\n};\nPoint.prototype.add = function add() {\n    throw new Error(\"Not supported on Montgomery curve\");\n};\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n    // 4M + 2S + 6A\n    // A = X2 + Z2\n    var a = this.x.redAdd(this.z);\n    // B = X2 - Z2\n    var b = this.x.redSub(this.z);\n    // C = X3 + Z3\n    var c = p.x.redAdd(p.z);\n    // D = X3 - Z3\n    var d = p.x.redSub(p.z);\n    // DA = D * A\n    var da = d.redMul(a);\n    // CB = C * B\n    var cb = c.redMul(b);\n    // X5 = Z1 * (DA + CB)^2\n    var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n    // Z5 = X1 * (DA - CB)^2\n    var nz = diff.x.redMul(da.redISub(cb).redSqr());\n    return this.curve.point(nx, nz);\n};\nPoint.prototype.mul = function mul(k) {\n    var t = k.clone();\n    var a = this; // (N / 2) * Q + Q\n    var b = this.curve.point(null, null); // (N / 2) * Q\n    var c = this; // Q\n    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));\n    for(var i = bits.length - 1; i >= 0; i--){\n        if (bits[i] === 0) {\n            // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n            a = a.diffAdd(b, c);\n            // N * Q = 2 * ((N / 2) * Q + Q))\n            b = b.dbl();\n        } else {\n            // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n            b = a.diffAdd(b, c);\n            // N * Q + Q = 2 * ((N / 2) * Q + Q)\n            a = a.dbl();\n        }\n    }\n    return b;\n};\nPoint.prototype.mulAdd = function mulAdd() {\n    throw new Error(\"Not supported on Montgomery curve\");\n};\nPoint.prototype.jumlAdd = function jumlAdd() {\n    throw new Error(\"Not supported on Montgomery curve\");\n};\nPoint.prototype.eq = function eq(other) {\n    return this.getX().cmp(other.getX()) === 0;\n};\nPoint.prototype.normalize = function normalize() {\n    this.x = this.x.redMul(this.z.redInvm());\n    this.z = this.curve.one;\n    return this;\n};\nPoint.prototype.getX = function getX() {\n    // Normalize coordinates\n    this.normalize();\n    return this.x.fromRed();\n};\nvar _c, _c1;\n$RefreshReg$(_c, \"MontCurve\");\n$RefreshReg$(_c1, \"Point\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/mont.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/short.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/short.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nvar BN = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/elliptic/node_modules/bn.js/lib/bn.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(app-pages-browser)/./node_modules/inherits/inherits_browser.js\");\nvar Base = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/base.js\");\nvar assert = utils.assert;\nfunction ShortCurve(conf) {\n    Base.call(this, \"short\", conf);\n    this.a = new BN(conf.a, 16).toRed(this.red);\n    this.b = new BN(conf.b, 16).toRed(this.red);\n    this.tinv = this.two.redInvm();\n    this.zeroA = this.a.fromRed().cmpn(0) === 0;\n    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n    // If the curve is endomorphic, precalculate beta and lambda\n    this.endo = this._getEndomorphism(conf);\n    this._endoWnafT1 = new Array(4);\n    this._endoWnafT2 = new Array(4);\n}\n_c = ShortCurve;\ninherits(ShortCurve, Base);\nmodule.exports = ShortCurve;\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n    // No efficient endomorphism\n    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;\n    // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n    var beta;\n    var lambda;\n    if (conf.beta) {\n        beta = new BN(conf.beta, 16).toRed(this.red);\n    } else {\n        var betas = this._getEndoRoots(this.p);\n        // Choose the smallest beta\n        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n        beta = beta.toRed(this.red);\n    }\n    if (conf.lambda) {\n        lambda = new BN(conf.lambda, 16);\n    } else {\n        // Choose the lambda that is matching selected beta\n        var lambdas = this._getEndoRoots(this.n);\n        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n            lambda = lambdas[0];\n        } else {\n            lambda = lambdas[1];\n            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n        }\n    }\n    // Get basis vectors, used for balanced length-two representation\n    var basis;\n    if (conf.basis) {\n        basis = conf.basis.map(function(vec) {\n            return {\n                a: new BN(vec.a, 16),\n                b: new BN(vec.b, 16)\n            };\n        });\n    } else {\n        basis = this._getEndoBasis(lambda);\n    }\n    return {\n        beta: beta,\n        lambda: lambda,\n        basis: basis\n    };\n};\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n    // Find roots of for x^2 + x + 1 in F\n    // Root = (-1 +- Sqrt(-3)) / 2\n    //\n    var red = num === this.p ? this.red : BN.mont(num);\n    var tinv = new BN(2).toRed(red).redInvm();\n    var ntinv = tinv.redNeg();\n    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n    var l1 = ntinv.redAdd(s).fromRed();\n    var l2 = ntinv.redSub(s).fromRed();\n    return [\n        l1,\n        l2\n    ];\n};\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n    // aprxSqrt >= sqrt(this.n)\n    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n    // 3.74\n    // Run EGCD, until r(L + 1) < aprxSqrt\n    var u = lambda;\n    var v = this.n.clone();\n    var x1 = new BN(1);\n    var y1 = new BN(0);\n    var x2 = new BN(0);\n    var y2 = new BN(1);\n    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n    var a0;\n    var b0;\n    // First vector\n    var a1;\n    var b1;\n    // Second vector\n    var a2;\n    var b2;\n    var prevR;\n    var i = 0;\n    var r;\n    var x;\n    while(u.cmpn(0) !== 0){\n        var q = v.div(u);\n        r = v.sub(q.mul(u));\n        x = x2.sub(q.mul(x1));\n        var y = y2.sub(q.mul(y1));\n        if (!a1 && r.cmp(aprxSqrt) < 0) {\n            a0 = prevR.neg();\n            b0 = x1;\n            a1 = r.neg();\n            b1 = x;\n        } else if (a1 && ++i === 2) {\n            break;\n        }\n        prevR = r;\n        v = u;\n        u = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    a2 = r.neg();\n    b2 = x;\n    var len1 = a1.sqr().add(b1.sqr());\n    var len2 = a2.sqr().add(b2.sqr());\n    if (len2.cmp(len1) >= 0) {\n        a2 = a0;\n        b2 = b0;\n    }\n    // Normalize signs\n    if (a1.negative) {\n        a1 = a1.neg();\n        b1 = b1.neg();\n    }\n    if (a2.negative) {\n        a2 = a2.neg();\n        b2 = b2.neg();\n    }\n    return [\n        {\n            a: a1,\n            b: b1\n        },\n        {\n            a: a2,\n            b: b2\n        }\n    ];\n};\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n    var basis = this.endo.basis;\n    var v1 = basis[0];\n    var v2 = basis[1];\n    var c1 = v2.b.mul(k).divRound(this.n);\n    var c2 = v1.b.neg().mul(k).divRound(this.n);\n    var p1 = c1.mul(v1.a);\n    var p2 = c2.mul(v2.a);\n    var q1 = c1.mul(v1.b);\n    var q2 = c2.mul(v2.b);\n    // Calculate answer\n    var k1 = k.sub(p1).sub(p2);\n    var k2 = q1.add(q2).neg();\n    return {\n        k1: k1,\n        k2: k2\n    };\n};\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new BN(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    // XXX Is there any way to tell if the number is odd without converting it\n    // to non-red form?\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n};\nShortCurve.prototype.validate = function validate(point) {\n    if (point.inf) return true;\n    var x = point.x;\n    var y = point.y;\n    var ax = this.a.redMul(x);\n    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n    return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\nShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n    var npoints = this._endoWnafT1;\n    var ncoeffs = this._endoWnafT2;\n    for(var i = 0; i < points.length; i++){\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n        if (split.k1.negative) {\n            split.k1.ineg();\n            p = p.neg(true);\n        }\n        if (split.k2.negative) {\n            split.k2.ineg();\n            beta = beta.neg(true);\n        }\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n    }\n    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n    // Clean-up references to points and coefficients\n    for(var j = 0; j < i * 2; j++){\n        npoints[j] = null;\n        ncoeffs[j] = null;\n    }\n    return res;\n};\nfunction Point(curve, x, y, isRed) {\n    Base.BasePoint.call(this, curve, \"affine\");\n    if (x === null && y === null) {\n        this.x = null;\n        this.y = null;\n        this.inf = true;\n    } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        // Force redgomery representation when loading from JSON\n        if (isRed) {\n            this.x.forceRed(this.curve.red);\n            this.y.forceRed(this.curve.red);\n        }\n        if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n        this.inf = false;\n    }\n}\n_c1 = Point;\ninherits(Point, Base.BasePoint);\nShortCurve.prototype.point = function point(x, y, isRed) {\n    return new Point(this, x, y, isRed);\n};\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n    return Point.fromJSON(this, obj, red);\n};\nPoint.prototype._getBeta = function _getBeta() {\n    if (!this.curve.endo) return;\n    var pre = this.precomputed;\n    if (pre && pre.beta) return pre.beta;\n    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n    if (pre) {\n        var curve = this.curve;\n        var endoMul = function(p) {\n            return curve.point(p.x.redMul(curve.endo.beta), p.y);\n        };\n        pre.beta = beta;\n        beta.precomputed = {\n            beta: null,\n            naf: pre.naf && {\n                wnd: pre.naf.wnd,\n                points: pre.naf.points.map(endoMul)\n            },\n            doubles: pre.doubles && {\n                step: pre.doubles.step,\n                points: pre.doubles.points.map(endoMul)\n            }\n        };\n    }\n    return beta;\n};\nPoint.prototype.toJSON = function toJSON() {\n    if (!this.precomputed) return [\n        this.x,\n        this.y\n    ];\n    return [\n        this.x,\n        this.y,\n        this.precomputed && {\n            doubles: this.precomputed.doubles && {\n                step: this.precomputed.doubles.step,\n                points: this.precomputed.doubles.points.slice(1)\n            },\n            naf: this.precomputed.naf && {\n                wnd: this.precomputed.naf.wnd,\n                points: this.precomputed.naf.points.slice(1)\n            }\n        }\n    ];\n};\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n    if (typeof obj === \"string\") obj = JSON.parse(obj);\n    var res = curve.point(obj[0], obj[1], red);\n    if (!obj[2]) return res;\n    function obj2point(obj) {\n        return curve.point(obj[0], obj[1], red);\n    }\n    var pre = obj[2];\n    res.precomputed = {\n        beta: null,\n        doubles: pre.doubles && {\n            step: pre.doubles.step,\n            points: [\n                res\n            ].concat(pre.doubles.points.map(obj2point))\n        },\n        naf: pre.naf && {\n            wnd: pre.naf.wnd,\n            points: [\n                res\n            ].concat(pre.naf.points.map(obj2point))\n        }\n    };\n    return res;\n};\nPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC Point Infinity>\";\n    return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";\n};\nPoint.prototype.isInfinity = function isInfinity() {\n    return this.inf;\n};\nPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.inf) return p;\n    // P + O = P\n    if (p.inf) return this;\n    // P + P = 2P\n    if (this.eq(p)) return this.dbl();\n    // P + (-P) = O\n    if (this.neg().eq(p)) return this.curve.point(null, null);\n    // P + Q = O\n    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);\n    var c = this.y.redSub(p.y);\n    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());\n    var nx = c.redSqr().redISub(this.x).redISub(p.x);\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n};\nPoint.prototype.dbl = function dbl() {\n    if (this.inf) return this;\n    // 2P = O\n    var ys1 = this.y.redAdd(this.y);\n    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);\n    var a = this.curve.a;\n    var x2 = this.x.redSqr();\n    var dyinv = ys1.redInvm();\n    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n    var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n};\nPoint.prototype.getX = function getX() {\n    return this.x.fromRed();\n};\nPoint.prototype.getY = function getY() {\n    return this.y.fromRed();\n};\nPoint.prototype.mul = function mul(k) {\n    k = new BN(k, 16);\n    if (this.isInfinity()) return this;\n    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);\n    else if (this.curve.endo) return this.curve._endoWnafMulAdd([\n        this\n    ], [\n        k\n    ]);\n    else return this.curve._wnafMul(this, k);\n};\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n    var points = [\n        this,\n        p2\n    ];\n    var coeffs = [\n        k1,\n        k2\n    ];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);\n    else return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n    var points = [\n        this,\n        p2\n    ];\n    var coeffs = [\n        k1,\n        k2\n    ];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);\n    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\nPoint.prototype.eq = function eq(p) {\n    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\nPoint.prototype.neg = function neg(_precompute) {\n    if (this.inf) return this;\n    var res = this.curve.point(this.x, this.y.redNeg());\n    if (_precompute && this.precomputed) {\n        var pre = this.precomputed;\n        var negate = function(p) {\n            return p.neg();\n        };\n        res.precomputed = {\n            naf: pre.naf && {\n                wnd: pre.naf.wnd,\n                points: pre.naf.points.map(negate)\n            },\n            doubles: pre.doubles && {\n                step: pre.doubles.step,\n                points: pre.doubles.points.map(negate)\n            }\n        };\n    }\n    return res;\n};\nPoint.prototype.toJ = function toJ() {\n    if (this.inf) return this.curve.jpoint(null, null, null);\n    var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n    return res;\n};\nfunction JPoint(curve, x, y, z) {\n    Base.BasePoint.call(this, curve, \"jacobian\");\n    if (x === null && y === null && z === null) {\n        this.x = this.curve.one;\n        this.y = this.curve.one;\n        this.z = new BN(0);\n    } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        this.z = new BN(z, 16);\n    }\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n}\n_c2 = JPoint;\ninherits(JPoint, Base.BasePoint);\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n    return new JPoint(this, x, y, z);\n};\nJPoint.prototype.toP = function toP() {\n    if (this.isInfinity()) return this.curve.point(null, null);\n    var zinv = this.z.redInvm();\n    var zinv2 = zinv.redSqr();\n    var ax = this.x.redMul(zinv2);\n    var ay = this.y.redMul(zinv2).redMul(zinv);\n    return this.curve.point(ax, ay);\n};\nJPoint.prototype.neg = function neg() {\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\nJPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.isInfinity()) return p;\n    // P + O = P\n    if (p.isInfinity()) return this;\n    // 12M + 4S + 7A\n    var pz2 = p.z.redSqr();\n    var z2 = this.z.redSqr();\n    var u1 = this.x.redMul(pz2);\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y.redMul(pz2.redMul(p.z));\n    var s2 = p.y.redMul(z2.redMul(this.z));\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n    if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);\n        else return this.dbl();\n    }\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(p.z).redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n    // O + P = P\n    if (this.isInfinity()) return p.toJ();\n    // P + O = P\n    if (p.isInfinity()) return this;\n    // 8M + 3S + 7A\n    var z2 = this.z.redSqr();\n    var u1 = this.x;\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y;\n    var s2 = p.y.redMul(z2).redMul(this.z);\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n    if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);\n        else return this.dbl();\n    }\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.dblp = function dblp(pow) {\n    if (pow === 0) return this;\n    if (this.isInfinity()) return this;\n    if (!pow) return this.dbl();\n    var i;\n    if (this.curve.zeroA || this.curve.threeA) {\n        var r = this;\n        for(i = 0; i < pow; i++)r = r.dbl();\n        return r;\n    }\n    // 1M + 2S + 1A + N * (4S + 5M + 8A)\n    // N = 1 => 6M + 6S + 9A\n    var a = this.curve.a;\n    var tinv = this.curve.tinv;\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    // Reuse results\n    var jyd = jy.redAdd(jy);\n    for(i = 0; i < pow; i++){\n        var jx2 = jx.redSqr();\n        var jyd2 = jyd.redSqr();\n        var jyd4 = jyd2.redSqr();\n        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n        var t1 = jx.redMul(jyd2);\n        var nx = c.redSqr().redISub(t1.redAdd(t1));\n        var t2 = t1.redISub(nx);\n        var dny = c.redMul(t2);\n        dny = dny.redIAdd(dny).redISub(jyd4);\n        var nz = jyd.redMul(jz);\n        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);\n        jx = nx;\n        jz = nz;\n        jyd = dny;\n    }\n    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\nJPoint.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this;\n    if (this.curve.zeroA) return this._zeroDbl();\n    else if (this.curve.threeA) return this._threeDbl();\n    else return this._dbl();\n};\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n    var nx;\n    var ny;\n    var nz;\n    // Z = 1\n    if (this.zOne) {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n        //     #doubling-mdbl-2007-bl\n        // 1M + 5S + 14A\n        // XX = X1^2\n        var xx = this.x.redSqr();\n        // YY = Y1^2\n        var yy = this.y.redSqr();\n        // YYYY = YY^2\n        var yyyy = yy.redSqr();\n        // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        // M = 3 * XX + a; a = 0\n        var m = xx.redAdd(xx).redIAdd(xx);\n        // T = M ^ 2 - 2*S\n        var t = m.redSqr().redISub(s).redISub(s);\n        // 8 * YYYY\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        // X3 = T\n        nx = t;\n        // Y3 = M * (S - T) - 8 * YYYY\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        // Z3 = 2*Y1\n        nz = this.y.redAdd(this.y);\n    } else {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n        //     #doubling-dbl-2009-l\n        // 2M + 5S + 13A\n        // A = X1^2\n        var a = this.x.redSqr();\n        // B = Y1^2\n        var b = this.y.redSqr();\n        // C = B^2\n        var c = b.redSqr();\n        // D = 2 * ((X1 + B)^2 - A - C)\n        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n        d = d.redIAdd(d);\n        // E = 3 * A\n        var e = a.redAdd(a).redIAdd(a);\n        // F = E^2\n        var f = e.redSqr();\n        // 8 * C\n        var c8 = c.redIAdd(c);\n        c8 = c8.redIAdd(c8);\n        c8 = c8.redIAdd(c8);\n        // X3 = F - 2 * D\n        nx = f.redISub(d).redISub(d);\n        // Y3 = E * (D - X3) - 8 * C\n        ny = e.redMul(d.redISub(nx)).redISub(c8);\n        // Z3 = 2 * Y1 * Z1\n        nz = this.y.redMul(this.z);\n        nz = nz.redIAdd(nz);\n    }\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype._threeDbl = function _threeDbl() {\n    var nx;\n    var ny;\n    var nz;\n    // Z = 1\n    if (this.zOne) {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n        //     #doubling-mdbl-2007-bl\n        // 1M + 5S + 15A\n        // XX = X1^2\n        var xx = this.x.redSqr();\n        // YY = Y1^2\n        var yy = this.y.redSqr();\n        // YYYY = YY^2\n        var yyyy = yy.redSqr();\n        // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        // M = 3 * XX + a\n        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n        // T = M^2 - 2 * S\n        var t = m.redSqr().redISub(s).redISub(s);\n        // X3 = T\n        nx = t;\n        // Y3 = M * (S - T) - 8 * YYYY\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        // Z3 = 2 * Y1\n        nz = this.y.redAdd(this.y);\n    } else {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n        // 3M + 5S\n        // delta = Z1^2\n        var delta = this.z.redSqr();\n        // gamma = Y1^2\n        var gamma = this.y.redSqr();\n        // beta = X1 * gamma\n        var beta = this.x.redMul(gamma);\n        // alpha = 3 * (X1 - delta) * (X1 + delta)\n        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n        alpha = alpha.redAdd(alpha).redIAdd(alpha);\n        // X3 = alpha^2 - 8 * beta\n        var beta4 = beta.redIAdd(beta);\n        beta4 = beta4.redIAdd(beta4);\n        var beta8 = beta4.redAdd(beta4);\n        nx = alpha.redSqr().redISub(beta8);\n        // Z3 = (Y1 + Z1)^2 - gamma - delta\n        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n        var ggamma8 = gamma.redSqr();\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n    }\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype._dbl = function _dbl() {\n    var a = this.curve.a;\n    // 4M + 6S + 10A\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    var jx2 = jx.redSqr();\n    var jy2 = jy.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n    var jxd4 = jx.redAdd(jx);\n    jxd4 = jxd4.redIAdd(jxd4);\n    var t1 = jxd4.redMul(jy2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var jyd8 = jy2.redSqr();\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    var ny = c.redMul(t2).redISub(jyd8);\n    var nz = jy.redAdd(jy).redMul(jz);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.trpl = function trpl() {\n    if (!this.curve.zeroA) return this.dbl().add(this);\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n    // 5M + 10S + ...\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // ZZ = Z1^2\n    var zz = this.z.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // M = 3 * XX + a * ZZ2; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // MM = M^2\n    var mm = m.redSqr();\n    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    e = e.redIAdd(e);\n    e = e.redAdd(e).redIAdd(e);\n    e = e.redISub(mm);\n    // EE = E^2\n    var ee = e.redSqr();\n    // T = 16*YYYY\n    var t = yyyy.redIAdd(yyyy);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    // U = (M + E)^2 - MM - EE - T\n    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n    // X3 = 4 * (X1 * EE - 4 * YY * U)\n    var yyu4 = yy.redMul(u);\n    yyu4 = yyu4.redIAdd(yyu4);\n    yyu4 = yyu4.redIAdd(yyu4);\n    var nx = this.x.redMul(ee).redISub(yyu4);\n    nx = nx.redIAdd(nx);\n    nx = nx.redIAdd(nx);\n    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    // Z3 = (Z1 + E)^2 - ZZ - EE\n    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.mul = function mul(k, kbase) {\n    k = new BN(k, kbase);\n    return this.curve._wnafMul(this, k);\n};\nJPoint.prototype.eq = function eq(p) {\n    if (p.type === \"affine\") return this.eq(p.toJ());\n    if (this === p) return true;\n    // x1 * z2^2 == x2 * z1^2\n    var z2 = this.z.redSqr();\n    var pz2 = p.z.redSqr();\n    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;\n    // y1 * z2^3 == y2 * z1^3\n    var z3 = z2.redMul(this.z);\n    var pz3 = pz2.redMul(p.z);\n    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\nJPoint.prototype.eqXToP = function eqXToP(x) {\n    var zs = this.z.redSqr();\n    var rx = x.toRed(this.curve.red).redMul(zs);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(zs);\n    for(;;){\n        xc.iadd(this.curve.n);\n        if (xc.cmp(this.curve.p) >= 0) return false;\n        rx.redIAdd(t);\n        if (this.x.cmp(rx) === 0) return true;\n    }\n};\nJPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC JPoint Infinity>\";\n    return \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";\n};\nJPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n};\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"ShortCurve\");\n$RefreshReg$(_c1, \"Point\");\n$RefreshReg$(_c2, \"JPoint\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/short.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curves.js":
/*!******************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curves.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar curves = exports;\nvar hash = __webpack_require__(/*! hash.js */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash.js\");\nvar curve = __webpack_require__(/*! ./curve */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curve/index.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nfunction PresetCurve(options) {\n    if (options.type === \"short\") this.curve = new curve.short(options);\n    else if (options.type === \"edwards\") this.curve = new curve.edwards(options);\n    else this.curve = new curve.mont(options);\n    this.g = this.curve.g;\n    this.n = this.curve.n;\n    this.hash = options.hash;\n    assert(this.g.validate(), \"Invalid curve\");\n    assert(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");\n}\n_c = PresetCurve;\ncurves.PresetCurve = PresetCurve;\nfunction defineCurve(name, options) {\n    Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        get: function() {\n            var curve = new PresetCurve(options);\n            Object.defineProperty(curves, name, {\n                configurable: true,\n                enumerable: true,\n                value: curve\n            });\n            return curve;\n        }\n    });\n}\ndefineCurve(\"p192\", {\n    type: \"short\",\n    prime: \"p192\",\n    p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",\n    a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",\n    b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",\n    n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",\n    hash: hash.sha256,\n    gRed: false,\n    g: [\n        \"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\n        \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"\n    ]\n});\ndefineCurve(\"p224\", {\n    type: \"short\",\n    prime: \"p224\",\n    p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",\n    a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",\n    b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",\n    n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",\n    hash: hash.sha256,\n    gRed: false,\n    g: [\n        \"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\n        \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"\n    ]\n});\ndefineCurve(\"p256\", {\n    type: \"short\",\n    prime: null,\n    p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",\n    a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",\n    b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",\n    n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",\n    hash: hash.sha256,\n    gRed: false,\n    g: [\n        \"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\n        \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"\n    ]\n});\ndefineCurve(\"p384\", {\n    type: \"short\",\n    prime: null,\n    p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"fffffffe ffffffff 00000000 00000000 ffffffff\",\n    a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"fffffffe ffffffff 00000000 00000000 fffffffc\",\n    b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f \" + \"5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",\n    n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 \" + \"f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",\n    hash: hash.sha384,\n    gRed: false,\n    g: [\n        \"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 \" + \"5502f25d bf55296c 3a545e38 72760ab7\",\n        \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 \" + \"0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"\n    ]\n});\ndefineCurve(\"p521\", {\n    type: \"short\",\n    prime: null,\n    p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff\",\n    a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff fffffffc\",\n    b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b \" + \"99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd \" + \"3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",\n    n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 \" + \"f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",\n    hash: hash.sha512,\n    gRed: false,\n    g: [\n        \"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 \" + \"053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 \" + \"a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\n        \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 \" + \"579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 \" + \"3fad0761 353c7086 a272c240 88be9476 9fd16650\"\n    ]\n});\ndefineCurve(\"curve25519\", {\n    type: \"mont\",\n    prime: \"p25519\",\n    p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n    a: \"76d06\",\n    b: \"1\",\n    n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n    hash: hash.sha256,\n    gRed: false,\n    g: [\n        \"9\"\n    ]\n});\ndefineCurve(\"ed25519\", {\n    type: \"edwards\",\n    prime: \"p25519\",\n    p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n    a: \"-1\",\n    c: \"1\",\n    // -121665 * (121666^(-1)) (mod P)\n    d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",\n    n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n    hash: hash.sha256,\n    gRed: false,\n    g: [\n        \"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\n        // 4/5\n        \"6666666666666666666666666666666666666666666666666666666666666658\"\n    ]\n});\nvar pre;\ntry {\n    pre = __webpack_require__(/*! ./precomputed/secp256k1 */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js\");\n} catch (e) {\n    pre = undefined;\n}\ndefineCurve(\"secp256k1\", {\n    type: \"short\",\n    prime: \"k256\",\n    p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",\n    a: \"0\",\n    b: \"7\",\n    n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\n    h: \"1\",\n    hash: hash.sha256,\n    // Precomputed endomorphism\n    beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",\n    lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",\n    basis: [\n        {\n            a: \"3086d221a7d46bcde86c90e49284eb15\",\n            b: \"-e4437ed6010e88286f547fa90abfe4c3\"\n        },\n        {\n            a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\",\n            b: \"3086d221a7d46bcde86c90e49284eb15\"\n        }\n    ],\n    gRed: false,\n    g: [\n        \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n        \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n        pre\n    ]\n});\nvar _c;\n$RefreshReg$(_c, \"PresetCurve\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curves.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/ec/index.js":
/*!********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/index.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar BN = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/elliptic/node_modules/bn.js/lib/bn.js\");\nvar HmacDRBG = __webpack_require__(/*! hmac-drbg */ \"(app-pages-browser)/./node_modules/hmac-drbg/lib/hmac-drbg.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nvar curves = __webpack_require__(/*! ../curves */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curves.js\");\nvar rand = __webpack_require__(/*! brorand */ \"(app-pages-browser)/./node_modules/brorand/index.js\");\nvar assert = utils.assert;\nvar KeyPair = __webpack_require__(/*! ./key */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/ec/key.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/ec/signature.js\");\nfunction EC(options) {\n    if (!(this instanceof EC)) return new EC(options);\n    // Shortcut `elliptic.ec(curve-name)`\n    if (typeof options === \"string\") {\n        assert(Object.prototype.hasOwnProperty.call(curves, options), \"Unknown curve \" + options);\n        options = curves[options];\n    }\n    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n    if (options instanceof curves.PresetCurve) options = {\n        curve: options\n    };\n    this.curve = options.curve.curve;\n    this.n = this.curve.n;\n    this.nh = this.n.ushrn(1);\n    this.g = this.curve.g;\n    // Point on curve\n    this.g = options.curve.g;\n    this.g.precompute(options.curve.n.bitLength() + 1);\n    // Hash for function for DRBG\n    this.hash = options.hash || options.curve.hash;\n}\n_c = EC;\nmodule.exports = EC;\nEC.prototype.keyPair = function keyPair(options) {\n    return new KeyPair(this, options);\n};\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n    return KeyPair.fromPrivate(this, priv, enc);\n};\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n    return KeyPair.fromPublic(this, pub, enc);\n};\nEC.prototype.genKeyPair = function genKeyPair(options) {\n    if (!options) options = {};\n    // Instantiate Hmac_DRBG\n    var drbg = new HmacDRBG({\n        hash: this.hash,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\",\n        entropy: options.entropy || rand(this.hash.hmacStrength),\n        entropyEnc: options.entropy && options.entropyEnc || \"utf8\",\n        nonce: this.n.toArray()\n    });\n    var bytes = this.n.byteLength();\n    var ns2 = this.n.sub(new BN(2));\n    for(;;){\n        var priv = new BN(drbg.generate(bytes));\n        if (priv.cmp(ns2) > 0) continue;\n        priv.iaddn(1);\n        return this.keyFromPrivate(priv);\n    }\n};\nEC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {\n    var byteLength;\n    if (BN.isBN(msg) || typeof msg === \"number\") {\n        msg = new BN(msg, 16);\n        byteLength = msg.byteLength();\n    } else if (typeof msg === \"object\") {\n        // BN assumes an array-like input and asserts length\n        byteLength = msg.length;\n        msg = new BN(msg, 16);\n    } else {\n        // BN converts the value to string\n        var str = msg.toString();\n        // HEX encoding\n        byteLength = str.length + 1 >>> 1;\n        msg = new BN(str, 16);\n    }\n    // Allow overriding\n    if (typeof bitLength !== \"number\") {\n        bitLength = byteLength * 8;\n    }\n    var delta = bitLength - this.n.bitLength();\n    if (delta > 0) msg = msg.ushrn(delta);\n    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);\n    else return msg;\n};\nEC.prototype.sign = function sign(msg, key, enc, options) {\n    if (typeof enc === \"object\") {\n        options = enc;\n        enc = null;\n    }\n    if (!options) options = {};\n    if (typeof msg !== \"string\" && typeof msg !== \"number\" && !BN.isBN(msg)) {\n        assert(typeof msg === \"object\" && msg && typeof msg.length === \"number\", \"Expected message to be an array-like, a hex string, or a BN instance\");\n        assert(msg.length >>> 0 === msg.length); // non-negative 32-bit integer\n        for(var i = 0; i < msg.length; i++)assert((msg[i] & 255) === msg[i]);\n    }\n    key = this.keyFromPrivate(key, enc);\n    msg = this._truncateToN(msg, false, options.msgBitLength);\n    // Would fail further checks, but let's make the error message clear\n    assert(!msg.isNeg(), \"Can not sign a negative message\");\n    // Zero-extend key to provide enough entropy\n    var bytes = this.n.byteLength();\n    var bkey = key.getPrivate().toArray(\"be\", bytes);\n    // Zero-extend nonce to have the same byte size as N\n    var nonce = msg.toArray(\"be\", bytes);\n    // Recheck nonce to be bijective to msg\n    assert(new BN(nonce).eq(msg), \"Can not sign message\");\n    // Instantiate Hmac_DRBG\n    var drbg = new HmacDRBG({\n        hash: this.hash,\n        entropy: bkey,\n        nonce: nonce,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\"\n    });\n    // Number of bytes to generate\n    var ns1 = this.n.sub(new BN(1));\n    for(var iter = 0;; iter++){\n        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));\n        k = this._truncateToN(k, true);\n        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;\n        var kp = this.g.mul(k);\n        if (kp.isInfinity()) continue;\n        var kpX = kp.getX();\n        var r = kpX.umod(this.n);\n        if (r.cmpn(0) === 0) continue;\n        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n        s = s.umod(this.n);\n        if (s.cmpn(0) === 0) continue;\n        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);\n        // Use complement of `s`, if it is > `n / 2`\n        if (options.canonical && s.cmp(this.nh) > 0) {\n            s = this.n.sub(s);\n            recoveryParam ^= 1;\n        }\n        return new Signature({\n            r: r,\n            s: s,\n            recoveryParam: recoveryParam\n        });\n    }\n};\nEC.prototype.verify = function verify(msg, signature, key, enc, options) {\n    if (!options) options = {};\n    msg = this._truncateToN(msg, false, options.msgBitLength);\n    key = this.keyFromPublic(key, enc);\n    signature = new Signature(signature, \"hex\");\n    // Perform primitive values validation\n    var r = signature.r;\n    var s = signature.s;\n    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;\n    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;\n    // Validate signature\n    var sinv = s.invm(this.n);\n    var u1 = sinv.mul(msg).umod(this.n);\n    var u2 = sinv.mul(r).umod(this.n);\n    var p;\n    if (!this.curve._maxwellTrick) {\n        p = this.g.mulAdd(u1, key.getPublic(), u2);\n        if (p.isInfinity()) return false;\n        return p.getX().umod(this.n).cmp(r) === 0;\n    }\n    // NOTE: Greg Maxwell's trick, inspired by:\n    // https://git.io/vad3K\n    p = this.g.jmulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity()) return false;\n    // Compare `p.x` of Jacobian point with `r`,\n    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n    // inverse of `p.z^2`\n    return p.eqXToP(r);\n};\nEC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n    assert((3 & j) === j, \"The recovery param is more than two bits\");\n    signature = new Signature(signature, enc);\n    var n = this.n;\n    var e = new BN(msg);\n    var r = signature.r;\n    var s = signature.s;\n    // A set LSB signifies that the y-coordinate is odd\n    var isYOdd = j & 1;\n    var isSecondKey = j >> 1;\n    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error(\"Unable to find sencond key candinate\");\n    // 1.1. Let x = r + jn.\n    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n    else r = this.curve.pointFromX(r, isYOdd);\n    var rInv = signature.r.invm(n);\n    var s1 = n.sub(e).mul(rInv).umod(n);\n    var s2 = s.mul(rInv).umod(n);\n    // 1.6.1 Compute Q = r^-1 (sR -  eG)\n    //               Q = r^-1 (sR + -eG)\n    return this.g.mulAdd(s1, r, s2);\n};\nEC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n    signature = new Signature(signature, enc);\n    if (signature.recoveryParam !== null) return signature.recoveryParam;\n    for(var i = 0; i < 4; i++){\n        var Qprime;\n        try {\n            Qprime = this.recoverPubKey(e, signature, i);\n        } catch (e) {\n            continue;\n        }\n        if (Qprime.eq(Q)) return i;\n    }\n    throw new Error(\"Unable to find valid recovery factor\");\n};\nvar _c;\n$RefreshReg$(_c, \"EC\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxLQUFLQyxtQkFBT0EsQ0FBQztBQUNqQixJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUN2QixJQUFJRSxRQUFRRixtQkFBT0EsQ0FBQztBQUNwQixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJSSxPQUFPSixtQkFBT0EsQ0FBQztBQUNuQixJQUFJSyxTQUFTSCxNQUFNRyxNQUFNO0FBRXpCLElBQUlDLFVBQVVOLG1CQUFPQSxDQUFDO0FBQ3RCLElBQUlPLFlBQVlQLG1CQUFPQSxDQUFDO0FBRXhCLFNBQVNRLEdBQUdDLE9BQU87SUFDakIsSUFBSSxDQUFFLEtBQUksWUFBWUQsRUFBQyxHQUNyQixPQUFPLElBQUlBLEdBQUdDO0lBRWhCLHFDQUFxQztJQUNyQyxJQUFJLE9BQU9BLFlBQVksVUFBVTtRQUMvQkosT0FBT0ssT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1YsUUFBUU0sVUFDbEQsbUJBQW1CQTtRQUVyQkEsVUFBVU4sTUFBTSxDQUFDTSxRQUFRO0lBQzNCO0lBRUEsd0RBQXdEO0lBQ3hELElBQUlBLG1CQUFtQk4sT0FBT1csV0FBVyxFQUN2Q0wsVUFBVTtRQUFFTSxPQUFPTjtJQUFRO0lBRTdCLElBQUksQ0FBQ00sS0FBSyxHQUFHTixRQUFRTSxLQUFLLENBQUNBLEtBQUs7SUFDaEMsSUFBSSxDQUFDQyxDQUFDLEdBQUcsSUFBSSxDQUFDRCxLQUFLLENBQUNDLENBQUM7SUFDckIsSUFBSSxDQUFDQyxFQUFFLEdBQUcsSUFBSSxDQUFDRCxDQUFDLENBQUNFLEtBQUssQ0FBQztJQUN2QixJQUFJLENBQUNDLENBQUMsR0FBRyxJQUFJLENBQUNKLEtBQUssQ0FBQ0ksQ0FBQztJQUVyQixpQkFBaUI7SUFDakIsSUFBSSxDQUFDQSxDQUFDLEdBQUdW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QyxJQUFLLElBQUlwQixJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBSztRQUMxQixJQUFJZ0Q7UUFDSixJQUFJO1lBQ0ZBLFNBQVMsSUFBSSxDQUFDYixhQUFhLENBQUNFLEdBQUdaLFdBQVd6QjtRQUM1QyxFQUFFLE9BQU9xQyxHQUFHO1lBQ1Y7UUFDRjtRQUVBLElBQUlXLE9BQU8zQyxFQUFFLENBQUMwQyxJQUNaLE9BQU8vQztJQUNYO0lBQ0EsTUFBTSxJQUFJd0MsTUFBTTtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2luZGV4LmpzPzYwZmIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIEhtYWNEUkJHID0gcmVxdWlyZSgnaG1hYy1kcmJnJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4uL2N1cnZlcycpO1xudmFyIHJhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG52YXIgS2V5UGFpciA9IHJlcXVpcmUoJy4va2V5Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcblxuZnVuY3Rpb24gRUMob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRUMpKVxuICAgIHJldHVybiBuZXcgRUMob3B0aW9ucyk7XG5cbiAgLy8gU2hvcnRjdXQgYGVsbGlwdGljLmVjKGN1cnZlLW5hbWUpYFxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgYXNzZXJ0KE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjdXJ2ZXMsIG9wdGlvbnMpLFxuICAgICAgJ1Vua25vd24gY3VydmUgJyArIG9wdGlvbnMpO1xuXG4gICAgb3B0aW9ucyA9IGN1cnZlc1tvcHRpb25zXTtcbiAgfVxuXG4gIC8vIFNob3J0Y3V0IGZvciBgZWxsaXB0aWMuZWMoZWxsaXB0aWMuY3VydmVzLmN1cnZlTmFtZSlgXG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgY3VydmVzLlByZXNldEN1cnZlKVxuICAgIG9wdGlvbnMgPSB7IGN1cnZlOiBvcHRpb25zIH07XG5cbiAgdGhpcy5jdXJ2ZSA9IG9wdGlvbnMuY3VydmUuY3VydmU7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5uaCA9IHRoaXMubi51c2hybigxKTtcbiAgdGhpcy5nID0gdGhpcy5jdXJ2ZS5nO1xuXG4gIC8vIFBvaW50IG9uIGN1cnZlXG4gIHRoaXMuZyA9IG9wdGlvbnMuY3VydmUuZztcbiAgdGhpcy5nLnByZWNvbXB1dGUob3B0aW9ucy5jdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgLy8gSGFzaCBmb3IgZnVuY3Rpb24gZm9yIERSQkdcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoIHx8IG9wdGlvbnMuY3VydmUuaGFzaDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRUM7XG5cbkVDLnByb3RvdHlwZS5rZXlQYWlyID0gZnVuY3Rpb24ga2V5UGFpcihvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgS2V5UGFpcih0aGlzLCBvcHRpb25zKTtcbn07XG5cbkVDLnByb3RvdHlwZS5rZXlGcm9tUHJpdmF0ZSA9IGZ1bmN0aW9uIGtleUZyb21Qcml2YXRlKHByaXYsIGVuYykge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHJpdmF0ZSh0aGlzLCBwcml2LCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmtleUZyb21QdWJsaWMgPSBmdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1YiwgZW5jKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViLCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmdlbktleVBhaXIgPSBmdW5jdGlvbiBnZW5LZXlQYWlyKG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICAvLyBJbnN0YW50aWF0ZSBIbWFjX0RSQkdcbiAgdmFyIGRyYmcgPSBuZXcgSG1hY0RSQkcoe1xuICAgIGhhc2g6IHRoaXMuaGFzaCxcbiAgICBwZXJzOiBvcHRpb25zLnBlcnMsXG4gICAgcGVyc0VuYzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4JyxcbiAgICBlbnRyb3B5OiBvcHRpb25zLmVudHJvcHkgfHwgcmFuZCh0aGlzLmhhc2guaG1hY1N0cmVuZ3RoKSxcbiAgICBlbnRyb3B5RW5jOiBvcHRpb25zLmVudHJvcHkgJiYgb3B0aW9ucy5lbnRyb3B5RW5jIHx8ICd1dGY4JyxcbiAgICBub25jZTogdGhpcy5uLnRvQXJyYXkoKSxcbiAgfSk7XG5cbiAgdmFyIGJ5dGVzID0gdGhpcy5uLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIG5zMiA9IHRoaXMubi5zdWIobmV3IEJOKDIpKTtcbiAgZm9yICg7Oykge1xuICAgIHZhciBwcml2ID0gbmV3IEJOKGRyYmcuZ2VuZXJhdGUoYnl0ZXMpKTtcbiAgICBpZiAocHJpdi5jbXAobnMyKSA+IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHByaXYuaWFkZG4oMSk7XG4gICAgcmV0dXJuIHRoaXMua2V5RnJvbVByaXZhdGUocHJpdik7XG4gIH1cbn07XG5cbkVDLnByb3RvdHlwZS5fdHJ1bmNhdGVUb04gPSBmdW5jdGlvbiBfdHJ1bmNhdGVUb04obXNnLCB0cnVuY09ubHksIGJpdExlbmd0aCkge1xuICB2YXIgYnl0ZUxlbmd0aDtcbiAgaWYgKEJOLmlzQk4obXNnKSB8fCB0eXBlb2YgbXNnID09PSAnbnVtYmVyJykge1xuICAgIG1zZyA9IG5ldyBCTihtc2csIDE2KTtcbiAgICBieXRlTGVuZ3RoID0gbXNnLmJ5dGVMZW5ndGgoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbXNnID09PSAnb2JqZWN0Jykge1xuICAgIC8vIEJOIGFzc3VtZXMgYW4gYXJyYXktbGlrZSBpbnB1dCBhbmQgYXNzZXJ0cyBsZW5ndGhcbiAgICBieXRlTGVuZ3RoID0gbXNnLmxlbmd0aDtcbiAgICBtc2cgPSBuZXcgQk4obXNnLCAxNik7XG4gIH0gZWxzZSB7XG4gICAgLy8gQk4gY29udmVydHMgdGhlIHZhbHVlIHRvIHN0cmluZ1xuICAgIHZhciBzdHIgPSBtc2cudG9TdHJpbmcoKTtcbiAgICAvLyBIRVggZW5jb2RpbmdcbiAgICBieXRlTGVuZ3RoID0gKHN0ci5sZW5ndGggKyAxKSA+Pj4gMTtcbiAgICBtc2cgPSBuZXcgQk4oc3RyLCAxNik7XG4gIH1cbiAgLy8gQWxsb3cgb3ZlcnJpZGluZ1xuICBpZiAodHlwZW9mIGJpdExlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICBiaXRMZW5ndGggPSBieXRlTGVuZ3RoICogODtcbiAgfVxuICB2YXIgZGVsdGEgPSBiaXRMZW5ndGggLSB0aGlzLm4uYml0TGVuZ3RoKCk7XG4gIGlmIChkZWx0YSA+IDApXG4gICAgbXNnID0gbXNnLnVzaHJuKGRlbHRhKTtcbiAgaWYgKCF0cnVuY09ubHkgJiYgbXNnLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIG1zZy5zdWIodGhpcy5uKTtcbiAgZWxzZVxuICAgIHJldHVybiBtc2c7XG59O1xuXG5FQy5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBrZXksIGVuYywgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGVuYyA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICBpZiAodHlwZW9mIG1zZyAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIG1zZyAhPT0gJ251bWJlcicgJiYgIUJOLmlzQk4obXNnKSkge1xuICAgIGFzc2VydCh0eXBlb2YgbXNnID09PSAnb2JqZWN0JyAmJiBtc2cgJiYgdHlwZW9mIG1zZy5sZW5ndGggPT09ICdudW1iZXInLFxuICAgICAgJ0V4cGVjdGVkIG1lc3NhZ2UgdG8gYmUgYW4gYXJyYXktbGlrZSwgYSBoZXggc3RyaW5nLCBvciBhIEJOIGluc3RhbmNlJyk7XG4gICAgYXNzZXJ0KChtc2cubGVuZ3RoID4+PiAwKSA9PT0gbXNnLmxlbmd0aCk7IC8vIG5vbi1uZWdhdGl2ZSAzMi1iaXQgaW50ZWdlclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSBhc3NlcnQoKG1zZ1tpXSAmIDI1NSkgPT09IG1zZ1tpXSk7XG4gIH1cblxuICBrZXkgPSB0aGlzLmtleUZyb21Qcml2YXRlKGtleSwgZW5jKTtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obXNnLCBmYWxzZSwgb3B0aW9ucy5tc2dCaXRMZW5ndGgpO1xuXG4gIC8vIFdvdWxkIGZhaWwgZnVydGhlciBjaGVja3MsIGJ1dCBsZXQncyBtYWtlIHRoZSBlcnJvciBtZXNzYWdlIGNsZWFyXG4gIGFzc2VydCghbXNnLmlzTmVnKCksICdDYW4gbm90IHNpZ24gYSBuZWdhdGl2ZSBtZXNzYWdlJyk7XG5cbiAgLy8gWmVyby1leHRlbmQga2V5IHRvIHByb3ZpZGUgZW5vdWdoIGVudHJvcHlcbiAgdmFyIGJ5dGVzID0gdGhpcy5uLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIGJrZXkgPSBrZXkuZ2V0UHJpdmF0ZSgpLnRvQXJyYXkoJ2JlJywgYnl0ZXMpO1xuXG4gIC8vIFplcm8tZXh0ZW5kIG5vbmNlIHRvIGhhdmUgdGhlIHNhbWUgYnl0ZSBzaXplIGFzIE5cbiAgdmFyIG5vbmNlID0gbXNnLnRvQXJyYXkoJ2JlJywgYnl0ZXMpO1xuXG4gIC8vIFJlY2hlY2sgbm9uY2UgdG8gYmUgYmlqZWN0aXZlIHRvIG1zZ1xuICBhc3NlcnQoKG5ldyBCTihub25jZSkpLmVxKG1zZyksICdDYW4gbm90IHNpZ24gbWVzc2FnZScpO1xuXG4gIC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCR1xuICB2YXIgZHJiZyA9IG5ldyBIbWFjRFJCRyh7XG4gICAgaGFzaDogdGhpcy5oYXNoLFxuICAgIGVudHJvcHk6IGJrZXksXG4gICAgbm9uY2U6IG5vbmNlLFxuICAgIHBlcnM6IG9wdGlvbnMucGVycyxcbiAgICBwZXJzRW5jOiBvcHRpb25zLnBlcnNFbmMgfHwgJ3V0ZjgnLFxuICB9KTtcblxuICAvLyBOdW1iZXIgb2YgYnl0ZXMgdG8gZ2VuZXJhdGVcbiAgdmFyIG5zMSA9IHRoaXMubi5zdWIobmV3IEJOKDEpKTtcblxuICBmb3IgKHZhciBpdGVyID0gMDsgOyBpdGVyKyspIHtcbiAgICB2YXIgayA9IG9wdGlvbnMuayA/XG4gICAgICBvcHRpb25zLmsoaXRlcikgOlxuICAgICAgbmV3IEJOKGRyYmcuZ2VuZXJhdGUodGhpcy5uLmJ5dGVMZW5ndGgoKSkpO1xuICAgIGsgPSB0aGlzLl90cnVuY2F0ZVRvTihrLCB0cnVlKTtcbiAgICBpZiAoay5jbXBuKDEpIDw9IDAgfHwgay5jbXAobnMxKSA+PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIga3AgPSB0aGlzLmcubXVsKGspO1xuICAgIGlmIChrcC5pc0luZmluaXR5KCkpXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcFggPSBrcC5nZXRYKCk7XG4gICAgdmFyIHIgPSBrcFgudW1vZCh0aGlzLm4pO1xuICAgIGlmIChyLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBzID0gay5pbnZtKHRoaXMubikubXVsKHIubXVsKGtleS5nZXRQcml2YXRlKCkpLmlhZGQobXNnKSk7XG4gICAgcyA9IHMudW1vZCh0aGlzLm4pO1xuICAgIGlmIChzLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciByZWNvdmVyeVBhcmFtID0gKGtwLmdldFkoKS5pc09kZCgpID8gMSA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChrcFguY21wKHIpICE9PSAwID8gMiA6IDApO1xuXG4gICAgLy8gVXNlIGNvbXBsZW1lbnQgb2YgYHNgLCBpZiBpdCBpcyA+IGBuIC8gMmBcbiAgICBpZiAob3B0aW9ucy5jYW5vbmljYWwgJiYgcy5jbXAodGhpcy5uaCkgPiAwKSB7XG4gICAgICBzID0gdGhpcy5uLnN1YihzKTtcbiAgICAgIHJlY292ZXJ5UGFyYW0gXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNpZ25hdHVyZSh7IHI6IHIsIHM6IHMsIHJlY292ZXJ5UGFyYW06IHJlY292ZXJ5UGFyYW0gfSk7XG4gIH1cbn07XG5cbkVDLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUsIGtleSwgZW5jLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0ge307XG5cbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obXNnLCBmYWxzZSwgb3B0aW9ucy5tc2dCaXRMZW5ndGgpO1xuICBrZXkgPSB0aGlzLmtleUZyb21QdWJsaWMoa2V5LCBlbmMpO1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgJ2hleCcpO1xuXG4gIC8vIFBlcmZvcm0gcHJpbWl0aXZlIHZhbHVlcyB2YWxpZGF0aW9uXG4gIHZhciByID0gc2lnbmF0dXJlLnI7XG4gIHZhciBzID0gc2lnbmF0dXJlLnM7XG4gIGlmIChyLmNtcG4oMSkgPCAwIHx8IHIuY21wKHRoaXMubikgPj0gMClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChzLmNtcG4oMSkgPCAwIHx8IHMuY21wKHRoaXMubikgPj0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gVmFsaWRhdGUgc2lnbmF0dXJlXG4gIHZhciBzaW52ID0gcy5pbnZtKHRoaXMubik7XG4gIHZhciB1MSA9IHNpbnYubXVsKG1zZykudW1vZCh0aGlzLm4pO1xuICB2YXIgdTIgPSBzaW52Lm11bChyKS51bW9kKHRoaXMubik7XG4gIHZhciBwO1xuXG4gIGlmICghdGhpcy5jdXJ2ZS5fbWF4d2VsbFRyaWNrKSB7XG4gICAgcCA9IHRoaXMuZy5tdWxBZGQodTEsIGtleS5nZXRQdWJsaWMoKSwgdTIpO1xuICAgIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBwLmdldFgoKS51bW9kKHRoaXMubikuY21wKHIpID09PSAwO1xuICB9XG5cbiAgLy8gTk9URTogR3JlZyBNYXh3ZWxsJ3MgdHJpY2ssIGluc3BpcmVkIGJ5OlxuICAvLyBodHRwczovL2dpdC5pby92YWQzS1xuXG4gIHAgPSB0aGlzLmcuam11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gQ29tcGFyZSBgcC54YCBvZiBKYWNvYmlhbiBwb2ludCB3aXRoIGByYCxcbiAgLy8gdGhpcyB3aWxsIGRvIGBwLnggPT0gciAqIHAuel4yYCBpbnN0ZWFkIG9mIG11bHRpcGx5aW5nIGBwLnhgIGJ5IHRoZVxuICAvLyBpbnZlcnNlIG9mIGBwLnpeMmBcbiAgcmV0dXJuIHAuZXFYVG9QKHIpO1xufTtcblxuRUMucHJvdG90eXBlLnJlY292ZXJQdWJLZXkgPSBmdW5jdGlvbihtc2csIHNpZ25hdHVyZSwgaiwgZW5jKSB7XG4gIGFzc2VydCgoMyAmIGopID09PSBqLCAnVGhlIHJlY292ZXJ5IHBhcmFtIGlzIG1vcmUgdGhhbiB0d28gYml0cycpO1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgZW5jKTtcblxuICB2YXIgbiA9IHRoaXMubjtcbiAgdmFyIGUgPSBuZXcgQk4obXNnKTtcbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcblxuICAvLyBBIHNldCBMU0Igc2lnbmlmaWVzIHRoYXQgdGhlIHktY29vcmRpbmF0ZSBpcyBvZGRcbiAgdmFyIGlzWU9kZCA9IGogJiAxO1xuICB2YXIgaXNTZWNvbmRLZXkgPSBqID4+IDE7XG4gIGlmIChyLmNtcCh0aGlzLmN1cnZlLnAudW1vZCh0aGlzLmN1cnZlLm4pKSA+PSAwICYmIGlzU2Vjb25kS2V5KVxuICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgc2VuY29uZCBrZXkgY2FuZGluYXRlJyk7XG5cbiAgLy8gMS4xLiBMZXQgeCA9IHIgKyBqbi5cbiAgaWYgKGlzU2Vjb25kS2V5KVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgoci5hZGQodGhpcy5jdXJ2ZS5uKSwgaXNZT2RkKTtcbiAgZWxzZVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgociwgaXNZT2RkKTtcblxuICB2YXIgckludiA9IHNpZ25hdHVyZS5yLmludm0obik7XG4gIHZhciBzMSA9IG4uc3ViKGUpLm11bChySW52KS51bW9kKG4pO1xuICB2YXIgczIgPSBzLm11bChySW52KS51bW9kKG4pO1xuXG4gIC8vIDEuNi4xIENvbXB1dGUgUSA9IHJeLTEgKHNSIC0gIGVHKVxuICAvLyAgICAgICAgICAgICAgIFEgPSByXi0xIChzUiArIC1lRylcbiAgcmV0dXJuIHRoaXMuZy5tdWxBZGQoczEsIHIsIHMyKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZXRLZXlSZWNvdmVyeVBhcmFtID0gZnVuY3Rpb24oZSwgc2lnbmF0dXJlLCBRLCBlbmMpIHtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsIGVuYyk7XG4gIGlmIChzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSAhPT0gbnVsbClcbiAgICByZXR1cm4gc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgUXByaW1lO1xuICAgIHRyeSB7XG4gICAgICBRcHJpbWUgPSB0aGlzLnJlY292ZXJQdWJLZXkoZSwgc2lnbmF0dXJlLCBpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoUXByaW1lLmVxKFEpKVxuICAgICAgcmV0dXJuIGk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCB2YWxpZCByZWNvdmVyeSBmYWN0b3InKTtcbn07XG4iXSwibmFtZXMiOlsiQk4iLCJyZXF1aXJlIiwiSG1hY0RSQkciLCJ1dGlscyIsImN1cnZlcyIsInJhbmQiLCJhc3NlcnQiLCJLZXlQYWlyIiwiU2lnbmF0dXJlIiwiRUMiLCJvcHRpb25zIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiUHJlc2V0Q3VydmUiLCJjdXJ2ZSIsIm4iLCJuaCIsInVzaHJuIiwiZyIsInByZWNvbXB1dGUiLCJiaXRMZW5ndGgiLCJoYXNoIiwibW9kdWxlIiwiZXhwb3J0cyIsImtleVBhaXIiLCJrZXlGcm9tUHJpdmF0ZSIsInByaXYiLCJlbmMiLCJmcm9tUHJpdmF0ZSIsImtleUZyb21QdWJsaWMiLCJwdWIiLCJmcm9tUHVibGljIiwiZ2VuS2V5UGFpciIsImRyYmciLCJwZXJzIiwicGVyc0VuYyIsImVudHJvcHkiLCJobWFjU3RyZW5ndGgiLCJlbnRyb3B5RW5jIiwibm9uY2UiLCJ0b0FycmF5IiwiYnl0ZXMiLCJieXRlTGVuZ3RoIiwibnMyIiwic3ViIiwiZ2VuZXJhdGUiLCJjbXAiLCJpYWRkbiIsIl90cnVuY2F0ZVRvTiIsIm1zZyIsInRydW5jT25seSIsImlzQk4iLCJsZW5ndGgiLCJzdHIiLCJ0b1N0cmluZyIsImRlbHRhIiwic2lnbiIsImtleSIsImkiLCJtc2dCaXRMZW5ndGgiLCJpc05lZyIsImJrZXkiLCJnZXRQcml2YXRlIiwiZXEiLCJuczEiLCJpdGVyIiwiayIsImNtcG4iLCJrcCIsIm11bCIsImlzSW5maW5pdHkiLCJrcFgiLCJnZXRYIiwiciIsInVtb2QiLCJzIiwiaW52bSIsImlhZGQiLCJyZWNvdmVyeVBhcmFtIiwiZ2V0WSIsImlzT2RkIiwiY2Fub25pY2FsIiwidmVyaWZ5Iiwic2lnbmF0dXJlIiwic2ludiIsInUxIiwidTIiLCJwIiwiX21heHdlbGxUcmljayIsIm11bEFkZCIsImdldFB1YmxpYyIsImptdWxBZGQiLCJlcVhUb1AiLCJyZWNvdmVyUHViS2V5IiwiaiIsImUiLCJpc1lPZGQiLCJpc1NlY29uZEtleSIsIkVycm9yIiwicG9pbnRGcm9tWCIsImFkZCIsInJJbnYiLCJzMSIsInMyIiwiZ2V0S2V5UmVjb3ZlcnlQYXJhbSIsIlEiLCJRcHJpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/ec/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/ec/key.js":
/*!******************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/key.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar BN = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/elliptic/node_modules/bn.js/lib/bn.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nfunction KeyPair(ec, options) {\n    this.ec = ec;\n    this.priv = null;\n    this.pub = null;\n    // KeyPair(ec, { priv: ..., pub: ... })\n    if (options.priv) this._importPrivate(options.priv, options.privEnc);\n    if (options.pub) this._importPublic(options.pub, options.pubEnc);\n}\n_c = KeyPair;\nmodule.exports = KeyPair;\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n    if (pub instanceof KeyPair) return pub;\n    return new KeyPair(ec, {\n        pub: pub,\n        pubEnc: enc\n    });\n};\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n    if (priv instanceof KeyPair) return priv;\n    return new KeyPair(ec, {\n        priv: priv,\n        privEnc: enc\n    });\n};\nKeyPair.prototype.validate = function validate() {\n    var pub = this.getPublic();\n    if (pub.isInfinity()) return {\n        result: false,\n        reason: \"Invalid public key\"\n    };\n    if (!pub.validate()) return {\n        result: false,\n        reason: \"Public key is not a point\"\n    };\n    if (!pub.mul(this.ec.curve.n).isInfinity()) return {\n        result: false,\n        reason: \"Public key * N != O\"\n    };\n    return {\n        result: true,\n        reason: null\n    };\n};\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n    // compact is optional argument\n    if (typeof compact === \"string\") {\n        enc = compact;\n        compact = null;\n    }\n    if (!this.pub) this.pub = this.ec.g.mul(this.priv);\n    if (!enc) return this.pub;\n    return this.pub.encode(enc, compact);\n};\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n    if (enc === \"hex\") return this.priv.toString(16, 2);\n    else return this.priv;\n};\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n    this.priv = new BN(key, enc || 16);\n    // Ensure that the priv won't be bigger than n, otherwise we may fail\n    // in fixed multiplication method\n    this.priv = this.priv.umod(this.ec.curve.n);\n};\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n    if (key.x || key.y) {\n        // Montgomery points only have an `x` coordinate.\n        // Weierstrass/Edwards points on the other hand have both `x` and\n        // `y` coordinates.\n        if (this.ec.curve.type === \"mont\") {\n            assert(key.x, \"Need x coordinate\");\n        } else if (this.ec.curve.type === \"short\" || this.ec.curve.type === \"edwards\") {\n            assert(key.x && key.y, \"Need both x and y coordinate\");\n        }\n        this.pub = this.ec.curve.point(key.x, key.y);\n        return;\n    }\n    this.pub = this.ec.curve.decodePoint(key, enc);\n};\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n    if (!pub.validate()) {\n        assert(pub.validate(), \"public point not validated\");\n    }\n    return pub.mul(this.priv).getX();\n};\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n    return this.ec.sign(msg, this, enc, options);\n};\nKeyPair.prototype.verify = function verify(msg, signature, options) {\n    return this.ec.verify(msg, signature, this, undefined, options);\n};\nKeyPair.prototype.inspect = function inspect() {\n    return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";\n};\nvar _c;\n$RefreshReg$(_c, \"KeyPair\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/ec/key.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/ec/signature.js":
/*!************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/signature.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar BN = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/elliptic/node_modules/bn.js/lib/bn.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nfunction Signature(options, enc) {\n    if (options instanceof Signature) return options;\n    if (this._importDER(options, enc)) return;\n    assert(options.r && options.s, \"Signature without r or s\");\n    this.r = new BN(options.r, 16);\n    this.s = new BN(options.s, 16);\n    if (options.recoveryParam === undefined) this.recoveryParam = null;\n    else this.recoveryParam = options.recoveryParam;\n}\n_c = Signature;\nmodule.exports = Signature;\nfunction Position() {\n    this.place = 0;\n}\n_c1 = Position;\nfunction getLength(buf, p) {\n    var initial = buf[p.place++];\n    if (!(initial & 0x80)) {\n        return initial;\n    }\n    var octetLen = initial & 0xf;\n    // Indefinite length or overflow\n    if (octetLen === 0 || octetLen > 4) {\n        return false;\n    }\n    if (buf[p.place] === 0x00) {\n        return false;\n    }\n    var val = 0;\n    for(var i = 0, off = p.place; i < octetLen; i++, off++){\n        val <<= 8;\n        val |= buf[off];\n        val >>>= 0;\n    }\n    // Leading zeroes\n    if (val <= 0x7f) {\n        return false;\n    }\n    p.place = off;\n    return val;\n}\nfunction rmPadding(buf) {\n    var i = 0;\n    var len = buf.length - 1;\n    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len){\n        i++;\n    }\n    if (i === 0) {\n        return buf;\n    }\n    return buf.slice(i);\n}\nSignature.prototype._importDER = function _importDER(data, enc) {\n    data = utils.toArray(data, enc);\n    var p = new Position();\n    if (data[p.place++] !== 0x30) {\n        return false;\n    }\n    var len = getLength(data, p);\n    if (len === false) {\n        return false;\n    }\n    if (len + p.place !== data.length) {\n        return false;\n    }\n    if (data[p.place++] !== 0x02) {\n        return false;\n    }\n    var rlen = getLength(data, p);\n    if (rlen === false) {\n        return false;\n    }\n    if ((data[p.place] & 128) !== 0) {\n        return false;\n    }\n    var r = data.slice(p.place, rlen + p.place);\n    p.place += rlen;\n    if (data[p.place++] !== 0x02) {\n        return false;\n    }\n    var slen = getLength(data, p);\n    if (slen === false) {\n        return false;\n    }\n    if (data.length !== slen + p.place) {\n        return false;\n    }\n    if ((data[p.place] & 128) !== 0) {\n        return false;\n    }\n    var s = data.slice(p.place, slen + p.place);\n    if (r[0] === 0) {\n        if (r[1] & 0x80) {\n            r = r.slice(1);\n        } else {\n            // Leading zeroes\n            return false;\n        }\n    }\n    if (s[0] === 0) {\n        if (s[1] & 0x80) {\n            s = s.slice(1);\n        } else {\n            // Leading zeroes\n            return false;\n        }\n    }\n    this.r = new BN(r);\n    this.s = new BN(s);\n    this.recoveryParam = null;\n    return true;\n};\nfunction constructLength(arr, len) {\n    if (len < 0x80) {\n        arr.push(len);\n        return;\n    }\n    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n    arr.push(octets | 0x80);\n    while(--octets){\n        arr.push(len >>> (octets << 3) & 0xff);\n    }\n    arr.push(len);\n}\nSignature.prototype.toDER = function toDER(enc) {\n    var r = this.r.toArray();\n    var s = this.s.toArray();\n    // Pad values\n    if (r[0] & 0x80) r = [\n        0\n    ].concat(r);\n    // Pad values\n    if (s[0] & 0x80) s = [\n        0\n    ].concat(s);\n    r = rmPadding(r);\n    s = rmPadding(s);\n    while(!s[0] && !(s[1] & 0x80)){\n        s = s.slice(1);\n    }\n    var arr = [\n        0x02\n    ];\n    constructLength(arr, r.length);\n    arr = arr.concat(r);\n    arr.push(0x02);\n    constructLength(arr, s.length);\n    var backHalf = arr.concat(s);\n    var res = [\n        0x30\n    ];\n    constructLength(res, backHalf.length);\n    res = res.concat(backHalf);\n    return utils.encode(res, enc);\n};\nvar _c, _c1;\n$RefreshReg$(_c, \"Signature\");\n$RefreshReg$(_c1, \"Position\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/ec/signature.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/eddsa/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/index.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar hash = __webpack_require__(/*! hash.js */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash.js\");\nvar curves = __webpack_require__(/*! ../curves */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/curves.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = __webpack_require__(/*! ./key */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/eddsa/key.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/eddsa/signature.js\");\nfunction EDDSA(curve) {\n    assert(curve === \"ed25519\", \"only tested with ed25519 so far\");\n    if (!(this instanceof EDDSA)) return new EDDSA(curve);\n    curve = curves[curve].curve;\n    this.curve = curve;\n    this.g = curve.g;\n    this.g.precompute(curve.n.bitLength() + 1);\n    this.pointClass = curve.point().constructor;\n    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n    this.hash = hash.sha512;\n}\n_c = EDDSA;\nmodule.exports = EDDSA;\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/ EDDSA.prototype.sign = function sign(message, secret) {\n    message = parseBytes(message);\n    var key = this.keyFromSecret(secret);\n    var r = this.hashInt(key.messagePrefix(), message);\n    var R = this.g.mul(r);\n    var Rencoded = this.encodePoint(R);\n    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());\n    var S = r.add(s_).umod(this.curve.n);\n    return this.makeSignature({\n        R: R,\n        S: S,\n        Rencoded: Rencoded\n    });\n};\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/ EDDSA.prototype.verify = function verify(message, sig, pub) {\n    message = parseBytes(message);\n    sig = this.makeSignature(sig);\n    if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {\n        return false;\n    }\n    var key = this.keyFromPublic(pub);\n    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n    var SG = this.g.mul(sig.S());\n    var RplusAh = sig.R().add(key.pub().mul(h));\n    return RplusAh.eq(SG);\n};\nEDDSA.prototype.hashInt = function hashInt() {\n    var hash = this.hash();\n    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);\n    return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n    return KeyPair.fromPublic(this, pub);\n};\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n    return KeyPair.fromSecret(this, secret);\n};\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n    if (sig instanceof Signature) return sig;\n    return new Signature(this, sig);\n};\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/ EDDSA.prototype.encodePoint = function encodePoint(point) {\n    var enc = point.getY().toArray(\"le\", this.encodingLength);\n    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n    return enc;\n};\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n    bytes = utils.parseBytes(bytes);\n    var lastIx = bytes.length - 1;\n    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n    var y = utils.intFromLE(normed);\n    return this.curve.pointFromY(y, xIsOdd);\n};\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n    return num.toArray(\"le\", this.encodingLength);\n};\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n    return utils.intFromLE(bytes);\n};\nEDDSA.prototype.isPoint = function isPoint(val) {\n    return val instanceof this.pointClass;\n};\nvar _c;\n$RefreshReg$(_c, \"EDDSA\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/eddsa/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/eddsa/key.js":
/*!*********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/key.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/ function KeyPair(eddsa, params) {\n    this.eddsa = eddsa;\n    this._secret = parseBytes(params.secret);\n    if (eddsa.isPoint(params.pub)) this._pub = params.pub;\n    else this._pubBytes = parseBytes(params.pub);\n}\n_c = KeyPair;\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n    if (pub instanceof KeyPair) return pub;\n    return new KeyPair(eddsa, {\n        pub: pub\n    });\n};\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n    if (secret instanceof KeyPair) return secret;\n    return new KeyPair(eddsa, {\n        secret: secret\n    });\n};\nKeyPair.prototype.secret = function secret() {\n    return this._secret;\n};\ncachedProperty(KeyPair, \"pubBytes\", function pubBytes() {\n    return this.eddsa.encodePoint(this.pub());\n});\ncachedProperty(KeyPair, \"pub\", function pub() {\n    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);\n    return this.eddsa.g.mul(this.priv());\n});\ncachedProperty(KeyPair, \"privBytes\", function privBytes() {\n    var eddsa = this.eddsa;\n    var hash = this.hash();\n    var lastIx = eddsa.encodingLength - 1;\n    var a = hash.slice(0, eddsa.encodingLength);\n    a[0] &= 248;\n    a[lastIx] &= 127;\n    a[lastIx] |= 64;\n    return a;\n});\ncachedProperty(KeyPair, \"priv\", function priv() {\n    return this.eddsa.decodeInt(this.privBytes());\n});\ncachedProperty(KeyPair, \"hash\", function hash() {\n    return this.eddsa.hash().update(this.secret()).digest();\n});\ncachedProperty(KeyPair, \"messagePrefix\", function messagePrefix() {\n    return this.hash().slice(this.eddsa.encodingLength);\n});\nKeyPair.prototype.sign = function sign(message) {\n    assert(this._secret, \"KeyPair can only verify\");\n    return this.eddsa.sign(message, this);\n};\nKeyPair.prototype.verify = function verify(message, sig) {\n    return this.eddsa.verify(message, sig, this);\n};\nKeyPair.prototype.getSecret = function getSecret(enc) {\n    assert(this._secret, \"KeyPair is public only\");\n    return utils.encode(this.secret(), enc);\n};\nKeyPair.prototype.getPublic = function getPublic(enc) {\n    return utils.encode(this.pubBytes(), enc);\n};\nmodule.exports = KeyPair;\nvar _c;\n$RefreshReg$(_c, \"KeyPair\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2Eva2V5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUMsU0FBU0YsTUFBTUUsTUFBTTtBQUN6QixJQUFJQyxhQUFhSCxNQUFNRyxVQUFVO0FBQ2pDLElBQUlDLGlCQUFpQkosTUFBTUksY0FBYztBQUV6Qzs7Ozs7Ozs7QUFRQSxHQUNBLFNBQVNDLFFBQVFDLEtBQUssRUFBRUMsTUFBTTtJQUM1QixJQUFJLENBQUNELEtBQUssR0FBR0E7SUFDYixJQUFJLENBQUNFLE9BQU8sR0FBR0wsV0FBV0ksT0FBT0UsTUFBTTtJQUN2QyxJQUFJSCxNQUFNSSxPQUFPLENBQUNILE9BQU9JLEdBQUcsR0FDMUIsSUFBSSxDQUFDQyxJQUFJLEdBQUdMLE9BQU9JLEdBQUc7U0FFdEIsSUFBSSxDQUFDRSxTQUFTLEdBQUdWLFdBQVdJLE9BQU9JLEdBQUc7QUFDMUM7S0FQU047QUFTVEEsUUFBUVMsVUFBVSxHQUFHLFNBQVNBLFdBQVdSLEtBQUssRUFBRUssR0FBRztJQUNqRCxJQUFJQSxlQUFlTixTQUNqQixPQUFPTTtJQUNULE9BQU8sSUFBSU4sUUFBUUMsT0FBTztRQUFFSyxLQUFLQTtJQUFJO0FBQ3ZDO0FBRUFOLFFBQVFVLFVBQVUsR0FBRyxTQUFTQSxXQUFXVCxLQUFLLEVBQUVHLE1BQU07SUFDcEQsSUFBSUEsa0JBQWtCSixTQUNwQixPQUFPSTtJQUNULE9BQU8sSUFBSUosUUFBUUMsT0FBTztRQUFFRyxRQUFRQTtJQUFPO0FBQzdDO0FBRUFKLFFBQVFXLFNBQVMsQ0FBQ1AsTUFBTSxHQUFHLFNBQVNBO0lBQ2xDLE9BQU8sSUFBSSxDQUFDRCxPQUFPO0FBQ3JCO0FBRUFKLGVBQWVDLFNBQVMsWUFBWSxTQUFTWTtJQUMzQyxPQUFPLElBQUksQ0FBQ1gsS0FBSyxDQUFDWSxXQUFXLENBQUMsSUFBSSxDQUFDUCxHQUFHO0FBQ3hDO0FBRUFQLGVBQWVDLFNBQVMsT0FBTyxTQUFTTTtJQUN0QyxJQUFJLElBQUksQ0FBQ0UsU0FBUyxFQUNoQixPQUFPLElBQUksQ0FBQ1AsS0FBSyxDQUFDYSxXQUFXLENBQUMsSUFBSSxDQUFDTixTQUFTO0lBQzlDLE9BQU8sSUFBSSxDQUFDUCxLQUFLLENBQUNjLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQ0MsSUFBSTtBQUNuQztBQUVBbEIsZUFBZUMsU0FBUyxhQUFhLFNBQVNrQjtJQUM1QyxJQUFJakIsUUFBUSxJQUFJLENBQUNBLEtBQUs7SUFDdEIsSUFBSWtCLE9BQU8sSUFBSSxDQUFDQSxJQUFJO0lBQ3BCLElBQUlDLFNBQVNuQixNQUFNb0IsY0FBYyxHQUFHO0lBRXBDLElBQUlDLElBQUlILEtBQUtJLEtBQUssQ0FBQyxHQUFHdEIsTUFBTW9CLGNBQWM7SUFDMUNDLENBQUMsQ0FBQyxFQUFFLElBQUk7SUFDUkEsQ0FBQyxDQUFDRixPQUFPLElBQUk7SUFDYkUsQ0FBQyxDQUFDRixPQUFPLElBQUk7SUFFYixPQUFPRTtBQUNUO0FBRUF2QixlQUFlQyxTQUFTLFFBQVEsU0FBU2lCO0lBQ3ZDLE9BQU8sSUFBSSxDQUFDaEIsS0FBSyxDQUFDdUIsU0FBUyxDQUFDLElBQUksQ0FBQ04sU0FBUztBQUM1QztBQUVBbkIsZUFBZUMsU0FBUyxRQUFRLFNBQVNtQjtJQUN2QyxPQUFPLElBQUksQ0FBQ2xCLEtBQUssQ0FBQ2tCLElBQUksR0FBR00sTUFBTSxDQUFDLElBQUksQ0FBQ3JCLE1BQU0sSUFBSXNCLE1BQU07QUFDdkQ7QUFFQTNCLGVBQWVDLFNBQVMsaUJBQWlCLFNBQVMyQjtJQUNoRCxPQUFPLElBQUksQ0FBQ1IsSUFBSSxHQUFHSSxLQUFLLENBQUMsSUFBSSxDQUFDdEIsS0FBSyxDQUFDb0IsY0FBYztBQUNwRDtBQUVBckIsUUFBUVcsU0FBUyxDQUFDaUIsSUFBSSxHQUFHLFNBQVNBLEtBQUtDLE9BQU87SUFDNUNoQyxPQUFPLElBQUksQ0FBQ00sT0FBTyxFQUFFO0lBQ3JCLE9BQU8sSUFBSSxDQUFDRixLQUFLLENBQUMyQixJQUFJLENBQUNDLFNBQVMsSUFBSTtBQUN0QztBQUVBN0IsUUFBUVcsU0FBUyxDQUFDbUIsTUFBTSxHQUFHLFNBQVNBLE9BQU9ELE9BQU8sRUFBRUUsR0FBRztJQUNyRCxPQUFPLElBQUksQ0FBQzlCLEtBQUssQ0FBQzZCLE1BQU0sQ0FBQ0QsU0FBU0UsS0FBSyxJQUFJO0FBQzdDO0FBRUEvQixRQUFRVyxTQUFTLENBQUNxQixTQUFTLEdBQUcsU0FBU0EsVUFBVUMsR0FBRztJQUNsRHBDLE9BQU8sSUFBSSxDQUFDTSxPQUFPLEVBQUU7SUFDckIsT0FBT1IsTUFBTXVDLE1BQU0sQ0FBQyxJQUFJLENBQUM5QixNQUFNLElBQUk2QjtBQUNyQztBQUVBakMsUUFBUVcsU0FBUyxDQUFDd0IsU0FBUyxHQUFHLFNBQVNBLFVBQVVGLEdBQUc7SUFDbEQsT0FBT3RDLE1BQU11QyxNQUFNLENBQUMsSUFBSSxDQUFDdEIsUUFBUSxJQUFJcUI7QUFDdkM7QUFFQUcsT0FBT0MsT0FBTyxHQUFHckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9rZXkuanM/YTg1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIGNhY2hlZFByb3BlcnR5ID0gdXRpbHMuY2FjaGVkUHJvcGVydHk7XG5cbi8qKlxuKiBAcGFyYW0ge0VERFNBfSBlZGRzYSAtIGluc3RhbmNlXG4qIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFyYW1ldGVyc1xuKlxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnNlY3JldF0gLSBzZWNyZXQgc2VlZCBieXRlc1xuKiBAcGFyYW0ge1BvaW50fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IChha2EgYEFgIGluIGVkZHNhIHRlcm1zKVxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IGVuY29kZWQgYXMgYnl0ZXNcbipcbiovXG5mdW5jdGlvbiBLZXlQYWlyKGVkZHNhLCBwYXJhbXMpIHtcbiAgdGhpcy5lZGRzYSA9IGVkZHNhO1xuICB0aGlzLl9zZWNyZXQgPSBwYXJzZUJ5dGVzKHBhcmFtcy5zZWNyZXQpO1xuICBpZiAoZWRkc2EuaXNQb2ludChwYXJhbXMucHViKSlcbiAgICB0aGlzLl9wdWIgPSBwYXJhbXMucHViO1xuICBlbHNlXG4gICAgdGhpcy5fcHViQnl0ZXMgPSBwYXJzZUJ5dGVzKHBhcmFtcy5wdWIpO1xufVxuXG5LZXlQYWlyLmZyb21QdWJsaWMgPSBmdW5jdGlvbiBmcm9tUHVibGljKGVkZHNhLCBwdWIpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVkZHNhLCB7IHB1YjogcHViIH0pO1xufTtcblxuS2V5UGFpci5mcm9tU2VjcmV0ID0gZnVuY3Rpb24gZnJvbVNlY3JldChlZGRzYSwgc2VjcmV0KSB7XG4gIGlmIChzZWNyZXQgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBzZWNyZXQ7XG4gIHJldHVybiBuZXcgS2V5UGFpcihlZGRzYSwgeyBzZWNyZXQ6IHNlY3JldCB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnNlY3JldCA9IGZ1bmN0aW9uIHNlY3JldCgpIHtcbiAgcmV0dXJuIHRoaXMuX3NlY3JldDtcbn07XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwdWJCeXRlcycsIGZ1bmN0aW9uIHB1YkJ5dGVzKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLnB1YigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViJywgZnVuY3Rpb24gcHViKCkge1xuICBpZiAodGhpcy5fcHViQnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlUG9pbnQodGhpcy5fcHViQnl0ZXMpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5nLm11bCh0aGlzLnByaXYoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3ByaXZCeXRlcycsIGZ1bmN0aW9uIHByaXZCeXRlcygpIHtcbiAgdmFyIGVkZHNhID0gdGhpcy5lZGRzYTtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgdmFyIGxhc3RJeCA9IGVkZHNhLmVuY29kaW5nTGVuZ3RoIC0gMTtcblxuICB2YXIgYSA9IGhhc2guc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpO1xuICBhWzBdICY9IDI0ODtcbiAgYVtsYXN0SXhdICY9IDEyNztcbiAgYVtsYXN0SXhdIHw9IDY0O1xuXG4gIHJldHVybiBhO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwcml2JywgZnVuY3Rpb24gcHJpdigpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMucHJpdkJ5dGVzKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdoYXNoJywgZnVuY3Rpb24gaGFzaCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuaGFzaCgpLnVwZGF0ZSh0aGlzLnNlY3JldCgpKS5kaWdlc3QoKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAnbWVzc2FnZVByZWZpeCcsIGZ1bmN0aW9uIG1lc3NhZ2VQcmVmaXgoKSB7XG4gIHJldHVybiB0aGlzLmhhc2goKS5zbGljZSh0aGlzLmVkZHNhLmVuY29kaW5nTGVuZ3RoKTtcbn0pO1xuXG5LZXlQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlKSB7XG4gIGFzc2VydCh0aGlzLl9zZWNyZXQsICdLZXlQYWlyIGNhbiBvbmx5IHZlcmlmeScpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5zaWduKG1lc3NhZ2UsIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UsIHNpZykge1xuICByZXR1cm4gdGhpcy5lZGRzYS52ZXJpZnkobWVzc2FnZSwgc2lnLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFNlY3JldCA9IGZ1bmN0aW9uIGdldFNlY3JldChlbmMpIHtcbiAgYXNzZXJ0KHRoaXMuX3NlY3JldCwgJ0tleVBhaXIgaXMgcHVibGljIG9ubHknKTtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnNlY3JldCgpLCBlbmMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGVuYykge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMucHViQnl0ZXMoKSwgZW5jKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJhc3NlcnQiLCJwYXJzZUJ5dGVzIiwiY2FjaGVkUHJvcGVydHkiLCJLZXlQYWlyIiwiZWRkc2EiLCJwYXJhbXMiLCJfc2VjcmV0Iiwic2VjcmV0IiwiaXNQb2ludCIsInB1YiIsIl9wdWIiLCJfcHViQnl0ZXMiLCJmcm9tUHVibGljIiwiZnJvbVNlY3JldCIsInByb3RvdHlwZSIsInB1YkJ5dGVzIiwiZW5jb2RlUG9pbnQiLCJkZWNvZGVQb2ludCIsImciLCJtdWwiLCJwcml2IiwicHJpdkJ5dGVzIiwiaGFzaCIsImxhc3RJeCIsImVuY29kaW5nTGVuZ3RoIiwiYSIsInNsaWNlIiwiZGVjb2RlSW50IiwidXBkYXRlIiwiZGlnZXN0IiwibWVzc2FnZVByZWZpeCIsInNpZ24iLCJtZXNzYWdlIiwidmVyaWZ5Iiwic2lnIiwiZ2V0U2VjcmV0IiwiZW5jIiwiZW5jb2RlIiwiZ2V0UHVibGljIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/eddsa/key.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/eddsa/signature.js":
/*!***************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/signature.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar BN = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/elliptic/node_modules/bn.js/lib/bn.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/ function Signature(eddsa, sig) {\n    this.eddsa = eddsa;\n    if (typeof sig !== \"object\") sig = parseBytes(sig);\n    if (Array.isArray(sig)) {\n        assert(sig.length === eddsa.encodingLength * 2, \"Signature has invalid size\");\n        sig = {\n            R: sig.slice(0, eddsa.encodingLength),\n            S: sig.slice(eddsa.encodingLength)\n        };\n    }\n    assert(sig.R && sig.S, \"Signature without R or S\");\n    if (eddsa.isPoint(sig.R)) this._R = sig.R;\n    if (sig.S instanceof BN) this._S = sig.S;\n    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n_c = Signature;\ncachedProperty(Signature, \"S\", function S() {\n    return this.eddsa.decodeInt(this.Sencoded());\n});\ncachedProperty(Signature, \"R\", function R() {\n    return this.eddsa.decodePoint(this.Rencoded());\n});\ncachedProperty(Signature, \"Rencoded\", function Rencoded() {\n    return this.eddsa.encodePoint(this.R());\n});\ncachedProperty(Signature, \"Sencoded\", function Sencoded() {\n    return this.eddsa.encodeInt(this.S());\n});\nSignature.prototype.toBytes = function toBytes() {\n    return this.Rencoded().concat(this.Sencoded());\n};\nSignature.prototype.toHex = function toHex() {\n    return utils.encode(this.toBytes(), \"hex\").toUpperCase();\n};\nmodule.exports = Signature;\nvar _c;\n$RefreshReg$(_c, \"Signature\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2Evc2lnbmF0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBS0MsbUJBQU9BLENBQUM7QUFDakIsSUFBSUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUUsU0FBU0QsTUFBTUMsTUFBTTtBQUN6QixJQUFJQyxpQkFBaUJGLE1BQU1FLGNBQWM7QUFDekMsSUFBSUMsYUFBYUgsTUFBTUcsVUFBVTtBQUVqQzs7Ozs7OztBQU9BLEdBQ0EsU0FBU0MsVUFBVUMsS0FBSyxFQUFFQyxHQUFHO0lBQzNCLElBQUksQ0FBQ0QsS0FBSyxHQUFHQTtJQUViLElBQUksT0FBT0MsUUFBUSxVQUNqQkEsTUFBTUgsV0FBV0c7SUFFbkIsSUFBSUMsTUFBTUMsT0FBTyxDQUFDRixNQUFNO1FBQ3RCTCxPQUFPSyxJQUFJRyxNQUFNLEtBQUtKLE1BQU1LLGNBQWMsR0FBRyxHQUFHO1FBQ2hESixNQUFNO1lBQ0pLLEdBQUdMLElBQUlNLEtBQUssQ0FBQyxHQUFHUCxNQUFNSyxjQUFjO1lBQ3BDRyxHQUFHUCxJQUFJTSxLQUFLLENBQUNQLE1BQU1LLGNBQWM7UUFDbkM7SUFDRjtJQUVBVCxPQUFPSyxJQUFJSyxDQUFDLElBQUlMLElBQUlPLENBQUMsRUFBRTtJQUV2QixJQUFJUixNQUFNUyxPQUFPLENBQUNSLElBQUlLLENBQUMsR0FDckIsSUFBSSxDQUFDSSxFQUFFLEdBQUdULElBQUlLLENBQUM7SUFDakIsSUFBSUwsSUFBSU8sQ0FBQyxZQUFZZixJQUNuQixJQUFJLENBQUNrQixFQUFFLEdBQUdWLElBQUlPLENBQUM7SUFFakIsSUFBSSxDQUFDSSxTQUFTLEdBQUdWLE1BQU1DLE9BQU8sQ0FBQ0YsSUFBSUssQ0FBQyxJQUFJTCxJQUFJSyxDQUFDLEdBQUdMLElBQUlZLFFBQVE7SUFDNUQsSUFBSSxDQUFDQyxTQUFTLEdBQUdaLE1BQU1DLE9BQU8sQ0FBQ0YsSUFBSU8sQ0FBQyxJQUFJUCxJQUFJTyxDQUFDLEdBQUdQLElBQUljLFFBQVE7QUFDOUQ7S0F2QlNoQjtBQXlCVEYsZUFBZUUsV0FBVyxLQUFLLFNBQVNTO0lBQ3RDLE9BQU8sSUFBSSxDQUFDUixLQUFLLENBQUNnQixTQUFTLENBQUMsSUFBSSxDQUFDRCxRQUFRO0FBQzNDO0FBRUFsQixlQUFlRSxXQUFXLEtBQUssU0FBU087SUFDdEMsT0FBTyxJQUFJLENBQUNOLEtBQUssQ0FBQ2lCLFdBQVcsQ0FBQyxJQUFJLENBQUNKLFFBQVE7QUFDN0M7QUFFQWhCLGVBQWVFLFdBQVcsWUFBWSxTQUFTYztJQUM3QyxPQUFPLElBQUksQ0FBQ2IsS0FBSyxDQUFDa0IsV0FBVyxDQUFDLElBQUksQ0FBQ1osQ0FBQztBQUN0QztBQUVBVCxlQUFlRSxXQUFXLFlBQVksU0FBU2dCO0lBQzdDLE9BQU8sSUFBSSxDQUFDZixLQUFLLENBQUNtQixTQUFTLENBQUMsSUFBSSxDQUFDWCxDQUFDO0FBQ3BDO0FBRUFULFVBQVVxQixTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQTtJQUNyQyxPQUFPLElBQUksQ0FBQ1IsUUFBUSxHQUFHUyxNQUFNLENBQUMsSUFBSSxDQUFDUCxRQUFRO0FBQzdDO0FBRUFoQixVQUFVcUIsU0FBUyxDQUFDRyxLQUFLLEdBQUcsU0FBU0E7SUFDbkMsT0FBTzVCLE1BQU02QixNQUFNLENBQUMsSUFBSSxDQUFDSCxPQUFPLElBQUksT0FBT0ksV0FBVztBQUN4RDtBQUVBQyxPQUFPQyxPQUFPLEdBQUc1QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL3NpZ25hdHVyZS5qcz9jMWUyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIGNhY2hlZFByb3BlcnR5ID0gdXRpbHMuY2FjaGVkUHJvcGVydHk7XG52YXIgcGFyc2VCeXRlcyA9IHV0aWxzLnBhcnNlQnl0ZXM7XG5cbi8qKlxuKiBAcGFyYW0ge0VERFNBfSBlZGRzYSAtIGVkZHNhIGluc3RhbmNlXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fE9iamVjdH0gc2lnIC1cbiogQHBhcmFtIHtBcnJheTxCeXRlcz58UG9pbnR9IFtzaWcuUl0gLSBSIHBvaW50IGFzIFBvaW50IG9yIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fGJufSBbc2lnLlNdIC0gUyBzY2FsYXIgYXMgYm4gb3IgYnl0ZXNcbiogQHBhcmFtIHtBcnJheTxCeXRlcz59IFtzaWcuUmVuY29kZWRdIC0gUiBwb2ludCBlbmNvZGVkXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fSBbc2lnLlNlbmNvZGVkXSAtIFMgc2NhbGFyIGVuY29kZWRcbiovXG5mdW5jdGlvbiBTaWduYXR1cmUoZWRkc2EsIHNpZykge1xuICB0aGlzLmVkZHNhID0gZWRkc2E7XG5cbiAgaWYgKHR5cGVvZiBzaWcgIT09ICdvYmplY3QnKVxuICAgIHNpZyA9IHBhcnNlQnl0ZXMoc2lnKTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShzaWcpKSB7XG4gICAgYXNzZXJ0KHNpZy5sZW5ndGggPT09IGVkZHNhLmVuY29kaW5nTGVuZ3RoICogMiwgJ1NpZ25hdHVyZSBoYXMgaW52YWxpZCBzaXplJyk7XG4gICAgc2lnID0ge1xuICAgICAgUjogc2lnLnNsaWNlKDAsIGVkZHNhLmVuY29kaW5nTGVuZ3RoKSxcbiAgICAgIFM6IHNpZy5zbGljZShlZGRzYS5lbmNvZGluZ0xlbmd0aCksXG4gICAgfTtcbiAgfVxuXG4gIGFzc2VydChzaWcuUiAmJiBzaWcuUywgJ1NpZ25hdHVyZSB3aXRob3V0IFIgb3IgUycpO1xuXG4gIGlmIChlZGRzYS5pc1BvaW50KHNpZy5SKSlcbiAgICB0aGlzLl9SID0gc2lnLlI7XG4gIGlmIChzaWcuUyBpbnN0YW5jZW9mIEJOKVxuICAgIHRoaXMuX1MgPSBzaWcuUztcblxuICB0aGlzLl9SZW5jb2RlZCA9IEFycmF5LmlzQXJyYXkoc2lnLlIpID8gc2lnLlIgOiBzaWcuUmVuY29kZWQ7XG4gIHRoaXMuX1NlbmNvZGVkID0gQXJyYXkuaXNBcnJheShzaWcuUykgPyBzaWcuUyA6IHNpZy5TZW5jb2RlZDtcbn1cblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUycsIGZ1bmN0aW9uIFMoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLlNlbmNvZGVkKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1InLCBmdW5jdGlvbiBSKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVQb2ludCh0aGlzLlJlbmNvZGVkKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1JlbmNvZGVkJywgZnVuY3Rpb24gUmVuY29kZWQoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZVBvaW50KHRoaXMuUigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdTZW5jb2RlZCcsIGZ1bmN0aW9uIFNlbmNvZGVkKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVJbnQodGhpcy5TKCkpO1xufSk7XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9CeXRlcyA9IGZ1bmN0aW9uIHRvQnl0ZXMoKSB7XG4gIHJldHVybiB0aGlzLlJlbmNvZGVkKCkuY29uY2F0KHRoaXMuU2VuY29kZWQoKSk7XG59O1xuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvSGV4ID0gZnVuY3Rpb24gdG9IZXgoKSB7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy50b0J5dGVzKCksICdoZXgnKS50b1VwcGVyQ2FzZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaWduYXR1cmU7XG4iXSwibmFtZXMiOlsiQk4iLCJyZXF1aXJlIiwidXRpbHMiLCJhc3NlcnQiLCJjYWNoZWRQcm9wZXJ0eSIsInBhcnNlQnl0ZXMiLCJTaWduYXR1cmUiLCJlZGRzYSIsInNpZyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImVuY29kaW5nTGVuZ3RoIiwiUiIsInNsaWNlIiwiUyIsImlzUG9pbnQiLCJfUiIsIl9TIiwiX1JlbmNvZGVkIiwiUmVuY29kZWQiLCJfU2VuY29kZWQiLCJTZW5jb2RlZCIsImRlY29kZUludCIsImRlY29kZVBvaW50IiwiZW5jb2RlUG9pbnQiLCJlbmNvZGVJbnQiLCJwcm90b3R5cGUiLCJ0b0J5dGVzIiwiY29uY2F0IiwidG9IZXgiLCJlbmNvZGUiLCJ0b1VwcGVyQ2FzZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/eddsa/signature.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":
/*!*********************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js ***!
  \*********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = {\n    doubles: {\n        step: 4,\n        points: [\n            [\n                \"e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a\",\n                \"f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821\"\n            ],\n            [\n                \"8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\",\n                \"11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n            ],\n            [\n                \"175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739\",\n                \"d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695\"\n            ],\n            [\n                \"363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n                \"4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9\"\n            ],\n            [\n                \"8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c\",\n                \"4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36\"\n            ],\n            [\n                \"723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda\",\n                \"96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f\"\n            ],\n            [\n                \"eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa\",\n                \"5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999\"\n            ],\n            [\n                \"100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0\",\n                \"cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09\"\n            ],\n            [\n                \"e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d\",\n                \"9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d\"\n            ],\n            [\n                \"feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d\",\n                \"e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088\"\n            ],\n            [\n                \"da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1\",\n                \"9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d\"\n            ],\n            [\n                \"53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0\",\n                \"5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8\"\n            ],\n            [\n                \"8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047\",\n                \"10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a\"\n            ],\n            [\n                \"385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862\",\n                \"283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453\"\n            ],\n            [\n                \"6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7\",\n                \"7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160\"\n            ],\n            [\n                \"3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd\",\n                \"56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0\"\n            ],\n            [\n                \"85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83\",\n                \"7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6\"\n            ],\n            [\n                \"948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a\",\n                \"53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589\"\n            ],\n            [\n                \"6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8\",\n                \"bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17\"\n            ],\n            [\n                \"e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d\",\n                \"4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda\"\n            ],\n            [\n                \"e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725\",\n                \"7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd\"\n            ],\n            [\n                \"213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754\",\n                \"4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2\"\n            ],\n            [\n                \"4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c\",\n                \"17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6\"\n            ],\n            [\n                \"fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6\",\n                \"6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f\"\n            ],\n            [\n                \"76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39\",\n                \"c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01\"\n            ],\n            [\n                \"c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891\",\n                \"893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3\"\n            ],\n            [\n                \"d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b\",\n                \"febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f\"\n            ],\n            [\n                \"b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03\",\n                \"2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7\"\n            ],\n            [\n                \"e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d\",\n                \"eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78\"\n            ],\n            [\n                \"a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070\",\n                \"7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1\"\n            ],\n            [\n                \"90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4\",\n                \"e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150\"\n            ],\n            [\n                \"8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da\",\n                \"662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82\"\n            ],\n            [\n                \"e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11\",\n                \"1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc\"\n            ],\n            [\n                \"8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e\",\n                \"efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b\"\n            ],\n            [\n                \"e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41\",\n                \"2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51\"\n            ],\n            [\n                \"b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef\",\n                \"67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45\"\n            ],\n            [\n                \"d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8\",\n                \"db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120\"\n            ],\n            [\n                \"324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d\",\n                \"648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84\"\n            ],\n            [\n                \"4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96\",\n                \"35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d\"\n            ],\n            [\n                \"9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd\",\n                \"ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d\"\n            ],\n            [\n                \"6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5\",\n                \"9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8\"\n            ],\n            [\n                \"a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266\",\n                \"40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8\"\n            ],\n            [\n                \"7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71\",\n                \"34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac\"\n            ],\n            [\n                \"928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac\",\n                \"c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f\"\n            ],\n            [\n                \"85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751\",\n                \"1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962\"\n            ],\n            [\n                \"ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e\",\n                \"493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907\"\n            ],\n            [\n                \"827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241\",\n                \"c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec\"\n            ],\n            [\n                \"eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3\",\n                \"be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d\"\n            ],\n            [\n                \"e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f\",\n                \"4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414\"\n            ],\n            [\n                \"1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19\",\n                \"aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd\"\n            ],\n            [\n                \"146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be\",\n                \"b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0\"\n            ],\n            [\n                \"fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9\",\n                \"6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811\"\n            ],\n            [\n                \"da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2\",\n                \"8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1\"\n            ],\n            [\n                \"a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13\",\n                \"7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c\"\n            ],\n            [\n                \"174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c\",\n                \"ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73\"\n            ],\n            [\n                \"959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba\",\n                \"2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd\"\n            ],\n            [\n                \"d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151\",\n                \"e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405\"\n            ],\n            [\n                \"64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073\",\n                \"d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589\"\n            ],\n            [\n                \"8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458\",\n                \"38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e\"\n            ],\n            [\n                \"13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b\",\n                \"69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27\"\n            ],\n            [\n                \"bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366\",\n                \"d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1\"\n            ],\n            [\n                \"8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa\",\n                \"40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482\"\n            ],\n            [\n                \"8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0\",\n                \"620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945\"\n            ],\n            [\n                \"dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787\",\n                \"7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573\"\n            ],\n            [\n                \"f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e\",\n                \"ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82\"\n            ]\n        ]\n    },\n    naf: {\n        wnd: 7,\n        points: [\n            [\n                \"f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9\",\n                \"388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672\"\n            ],\n            [\n                \"2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4\",\n                \"d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6\"\n            ],\n            [\n                \"5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc\",\n                \"6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da\"\n            ],\n            [\n                \"acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe\",\n                \"cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37\"\n            ],\n            [\n                \"774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb\",\n                \"d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b\"\n            ],\n            [\n                \"f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8\",\n                \"ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81\"\n            ],\n            [\n                \"d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e\",\n                \"581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58\"\n            ],\n            [\n                \"defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34\",\n                \"4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77\"\n            ],\n            [\n                \"2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c\",\n                \"85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a\"\n            ],\n            [\n                \"352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5\",\n                \"321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c\"\n            ],\n            [\n                \"2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f\",\n                \"2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67\"\n            ],\n            [\n                \"9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714\",\n                \"73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402\"\n            ],\n            [\n                \"daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729\",\n                \"a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55\"\n            ],\n            [\n                \"c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db\",\n                \"2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482\"\n            ],\n            [\n                \"6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4\",\n                \"e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82\"\n            ],\n            [\n                \"1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5\",\n                \"b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396\"\n            ],\n            [\n                \"605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479\",\n                \"2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49\"\n            ],\n            [\n                \"62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d\",\n                \"80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf\"\n            ],\n            [\n                \"80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f\",\n                \"1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a\"\n            ],\n            [\n                \"7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb\",\n                \"d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7\"\n            ],\n            [\n                \"d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9\",\n                \"eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933\"\n            ],\n            [\n                \"49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963\",\n                \"758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a\"\n            ],\n            [\n                \"77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74\",\n                \"958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6\"\n            ],\n            [\n                \"f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530\",\n                \"e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37\"\n            ],\n            [\n                \"463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b\",\n                \"5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e\"\n            ],\n            [\n                \"f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247\",\n                \"cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6\"\n            ],\n            [\n                \"caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1\",\n                \"cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476\"\n            ],\n            [\n                \"2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120\",\n                \"4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40\"\n            ],\n            [\n                \"7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435\",\n                \"91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61\"\n            ],\n            [\n                \"754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18\",\n                \"673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683\"\n            ],\n            [\n                \"e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8\",\n                \"59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5\"\n            ],\n            [\n                \"186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb\",\n                \"3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b\"\n            ],\n            [\n                \"df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f\",\n                \"55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417\"\n            ],\n            [\n                \"5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143\",\n                \"efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868\"\n            ],\n            [\n                \"290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba\",\n                \"e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a\"\n            ],\n            [\n                \"af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45\",\n                \"f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6\"\n            ],\n            [\n                \"766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a\",\n                \"744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996\"\n            ],\n            [\n                \"59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e\",\n                \"c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e\"\n            ],\n            [\n                \"f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8\",\n                \"e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d\"\n            ],\n            [\n                \"7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c\",\n                \"30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2\"\n            ],\n            [\n                \"948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519\",\n                \"e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e\"\n            ],\n            [\n                \"7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab\",\n                \"100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437\"\n            ],\n            [\n                \"3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca\",\n                \"ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311\"\n            ],\n            [\n                \"d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf\",\n                \"8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4\"\n            ],\n            [\n                \"1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610\",\n                \"68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575\"\n            ],\n            [\n                \"733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4\",\n                \"f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d\"\n            ],\n            [\n                \"15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c\",\n                \"d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d\"\n            ],\n            [\n                \"a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940\",\n                \"edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629\"\n            ],\n            [\n                \"e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980\",\n                \"a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06\"\n            ],\n            [\n                \"311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3\",\n                \"66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374\"\n            ],\n            [\n                \"34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf\",\n                \"9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee\"\n            ],\n            [\n                \"f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63\",\n                \"4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1\"\n            ],\n            [\n                \"d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448\",\n                \"fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b\"\n            ],\n            [\n                \"32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf\",\n                \"5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661\"\n            ],\n            [\n                \"7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5\",\n                \"8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6\"\n            ],\n            [\n                \"ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6\",\n                \"8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e\"\n            ],\n            [\n                \"16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5\",\n                \"5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d\"\n            ],\n            [\n                \"eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99\",\n                \"f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc\"\n            ],\n            [\n                \"78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51\",\n                \"f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4\"\n            ],\n            [\n                \"494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5\",\n                \"42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c\"\n            ],\n            [\n                \"a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5\",\n                \"204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b\"\n            ],\n            [\n                \"c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997\",\n                \"4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913\"\n            ],\n            [\n                \"841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881\",\n                \"73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154\"\n            ],\n            [\n                \"5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5\",\n                \"39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865\"\n            ],\n            [\n                \"36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66\",\n                \"d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc\"\n            ],\n            [\n                \"336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726\",\n                \"ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224\"\n            ],\n            [\n                \"8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede\",\n                \"6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e\"\n            ],\n            [\n                \"1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94\",\n                \"60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6\"\n            ],\n            [\n                \"85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31\",\n                \"3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511\"\n            ],\n            [\n                \"29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51\",\n                \"b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b\"\n            ],\n            [\n                \"a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252\",\n                \"ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2\"\n            ],\n            [\n                \"4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5\",\n                \"cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c\"\n            ],\n            [\n                \"d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b\",\n                \"6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3\"\n            ],\n            [\n                \"ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4\",\n                \"322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d\"\n            ],\n            [\n                \"af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f\",\n                \"6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700\"\n            ],\n            [\n                \"e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889\",\n                \"2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4\"\n            ],\n            [\n                \"591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246\",\n                \"b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196\"\n            ],\n            [\n                \"11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984\",\n                \"998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4\"\n            ],\n            [\n                \"3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a\",\n                \"b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257\"\n            ],\n            [\n                \"cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030\",\n                \"bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13\"\n            ],\n            [\n                \"c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197\",\n                \"6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096\"\n            ],\n            [\n                \"c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593\",\n                \"c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38\"\n            ],\n            [\n                \"a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef\",\n                \"21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f\"\n            ],\n            [\n                \"347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38\",\n                \"60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448\"\n            ],\n            [\n                \"da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a\",\n                \"49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a\"\n            ],\n            [\n                \"c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111\",\n                \"5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4\"\n            ],\n            [\n                \"4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502\",\n                \"7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437\"\n            ],\n            [\n                \"3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea\",\n                \"be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7\"\n            ],\n            [\n                \"cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26\",\n                \"8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d\"\n            ],\n            [\n                \"b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986\",\n                \"39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a\"\n            ],\n            [\n                \"d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e\",\n                \"62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54\"\n            ],\n            [\n                \"48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4\",\n                \"25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77\"\n            ],\n            [\n                \"dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda\",\n                \"ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517\"\n            ],\n            [\n                \"6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859\",\n                \"cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10\"\n            ],\n            [\n                \"e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f\",\n                \"f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125\"\n            ],\n            [\n                \"eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c\",\n                \"6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e\"\n            ],\n            [\n                \"13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942\",\n                \"fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1\"\n            ],\n            [\n                \"ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a\",\n                \"1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2\"\n            ],\n            [\n                \"b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80\",\n                \"5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423\"\n            ],\n            [\n                \"ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d\",\n                \"438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8\"\n            ],\n            [\n                \"8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1\",\n                \"cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758\"\n            ],\n            [\n                \"52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63\",\n                \"c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375\"\n            ],\n            [\n                \"e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352\",\n                \"6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d\"\n            ],\n            [\n                \"7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193\",\n                \"ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec\"\n            ],\n            [\n                \"5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00\",\n                \"9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0\"\n            ],\n            [\n                \"32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58\",\n                \"ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c\"\n            ],\n            [\n                \"e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7\",\n                \"d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4\"\n            ],\n            [\n                \"8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8\",\n                \"c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f\"\n            ],\n            [\n                \"4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e\",\n                \"67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649\"\n            ],\n            [\n                \"3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d\",\n                \"cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826\"\n            ],\n            [\n                \"674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b\",\n                \"299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5\"\n            ],\n            [\n                \"d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f\",\n                \"f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87\"\n            ],\n            [\n                \"30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6\",\n                \"462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b\"\n            ],\n            [\n                \"be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297\",\n                \"62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc\"\n            ],\n            [\n                \"93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a\",\n                \"7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c\"\n            ],\n            [\n                \"b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c\",\n                \"ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f\"\n            ],\n            [\n                \"d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52\",\n                \"4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a\"\n            ],\n            [\n                \"d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb\",\n                \"bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46\"\n            ],\n            [\n                \"463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065\",\n                \"bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f\"\n            ],\n            [\n                \"7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917\",\n                \"603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03\"\n            ],\n            [\n                \"74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9\",\n                \"cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08\"\n            ],\n            [\n                \"30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3\",\n                \"553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8\"\n            ],\n            [\n                \"9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57\",\n                \"712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373\"\n            ],\n            [\n                \"176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66\",\n                \"ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3\"\n            ],\n            [\n                \"75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8\",\n                \"9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8\"\n            ],\n            [\n                \"809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721\",\n                \"9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1\"\n            ],\n            [\n                \"1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180\",\n                \"4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9\"\n            ]\n        ]\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/utils.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = exports;\nvar BN = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/elliptic/node_modules/bn.js/lib/bn.js\");\nvar minAssert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nvar minUtils = __webpack_require__(/*! minimalistic-crypto-utils */ \"(app-pages-browser)/./node_modules/minimalistic-crypto-utils/lib/utils.js\");\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n    var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n    var i;\n    for(i = 0; i < naf.length; i += 1){\n        naf[i] = 0;\n    }\n    var ws = 1 << w + 1;\n    var k = num.clone();\n    for(i = 0; i < naf.length; i++){\n        var z;\n        var mod = k.andln(ws - 1);\n        if (k.isOdd()) {\n            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;\n            else z = mod;\n            k.isubn(z);\n        } else {\n            z = 0;\n        }\n        naf[i] = z;\n        k.iushrn(1);\n    }\n    return naf;\n}\nutils.getNAF = getNAF;\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n    var jsf = [\n        [],\n        []\n    ];\n    k1 = k1.clone();\n    k2 = k2.clone();\n    var d1 = 0;\n    var d2 = 0;\n    var m8;\n    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){\n        // First phase\n        var m14 = k1.andln(3) + d1 & 3;\n        var m24 = k2.andln(3) + d2 & 3;\n        if (m14 === 3) m14 = -1;\n        if (m24 === 3) m24 = -1;\n        var u1;\n        if ((m14 & 1) === 0) {\n            u1 = 0;\n        } else {\n            m8 = k1.andln(7) + d1 & 7;\n            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;\n            else u1 = m14;\n        }\n        jsf[0].push(u1);\n        var u2;\n        if ((m24 & 1) === 0) {\n            u2 = 0;\n        } else {\n            m8 = k2.andln(7) + d2 & 7;\n            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;\n            else u2 = m24;\n        }\n        jsf[1].push(u2);\n        // Second phase\n        if (2 * d1 === u1 + 1) d1 = 1 - d1;\n        if (2 * d2 === u2 + 1) d2 = 1 - d2;\n        k1.iushrn(1);\n        k2.iushrn(1);\n    }\n    return jsf;\n}\nutils.getJSF = getJSF;\nfunction cachedProperty(obj, name, computer) {\n    var key = \"_\" + name;\n    obj.prototype[name] = function cachedProperty() {\n        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);\n    };\n}\nutils.cachedProperty = cachedProperty;\nfunction parseBytes(bytes) {\n    return typeof bytes === \"string\" ? utils.toArray(bytes, \"hex\") : bytes;\n}\nutils.parseBytes = parseBytes;\nfunction intFromLE(bytes) {\n    return new BN(bytes, \"hex\", \"le\");\n}\nutils.intFromLE = intFromLE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQztBQUNaLElBQUlDLEtBQUtDLG1CQUFPQSxDQUFDO0FBQ2pCLElBQUlDLFlBQVlELG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlFLFdBQVdGLG1CQUFPQSxDQUFDO0FBRXZCSCxNQUFNTSxNQUFNLEdBQUdGO0FBQ2ZKLE1BQU1PLE9BQU8sR0FBR0YsU0FBU0UsT0FBTztBQUNoQ1AsTUFBTVEsS0FBSyxHQUFHSCxTQUFTRyxLQUFLO0FBQzVCUixNQUFNUyxLQUFLLEdBQUdKLFNBQVNJLEtBQUs7QUFDNUJULE1BQU1VLE1BQU0sR0FBR0wsU0FBU0ssTUFBTTtBQUU5QixnQ0FBZ0M7QUFDaEMsU0FBU0MsT0FBT0MsR0FBRyxFQUFFQyxDQUFDLEVBQUVDLElBQUk7SUFDMUIsSUFBSUMsTUFBTSxJQUFJQyxNQUFNQyxLQUFLQyxHQUFHLENBQUNOLElBQUlPLFNBQVMsSUFBSUwsUUFBUTtJQUN0RCxJQUFJTTtJQUNKLElBQUtBLElBQUksR0FBR0EsSUFBSUwsSUFBSU0sTUFBTSxFQUFFRCxLQUFLLEVBQUc7UUFDbENMLEdBQUcsQ0FBQ0ssRUFBRSxHQUFHO0lBQ1g7SUFFQSxJQUFJRSxLQUFLLEtBQU1ULElBQUk7SUFDbkIsSUFBSVUsSUFBSVgsSUFBSVksS0FBSztJQUVqQixJQUFLSixJQUFJLEdBQUdBLElBQUlMLElBQUlNLE1BQU0sRUFBRUQsSUFBSztRQUMvQixJQUFJSztRQUNKLElBQUlDLE1BQU1ILEVBQUVJLEtBQUssQ0FBQ0wsS0FBSztRQUN2QixJQUFJQyxFQUFFSyxLQUFLLElBQUk7WUFDYixJQUFJRixNQUFNLENBQUNKLE1BQU0sS0FBSyxHQUNwQkcsSUFBSSxDQUFDSCxNQUFNLEtBQUtJO2lCQUVoQkQsSUFBSUM7WUFDTkgsRUFBRU0sS0FBSyxDQUFDSjtRQUNWLE9BQU87WUFDTEEsSUFBSTtRQUNOO1FBRUFWLEdBQUcsQ0FBQ0ssRUFBRSxHQUFHSztRQUNURixFQUFFTyxNQUFNLENBQUM7SUFDWDtJQUVBLE9BQU9mO0FBQ1Q7QUFDQWYsTUFBTVcsTUFBTSxHQUFHQTtBQUVmLDBDQUEwQztBQUMxQyxTQUFTb0IsT0FBT0MsRUFBRSxFQUFFQyxFQUFFO0lBQ3BCLElBQUlDLE1BQU07UUFDUixFQUFFO1FBQ0YsRUFBRTtLQUNIO0lBRURGLEtBQUtBLEdBQUdSLEtBQUs7SUFDYlMsS0FBS0EsR0FBR1QsS0FBSztJQUNiLElBQUlXLEtBQUs7SUFDVCxJQUFJQyxLQUFLO0lBQ1QsSUFBSUM7SUFDSixNQUFPTCxHQUFHTSxJQUFJLENBQUMsQ0FBQ0gsTUFBTSxLQUFLRixHQUFHSyxJQUFJLENBQUMsQ0FBQ0YsTUFBTSxFQUFHO1FBQzNDLGNBQWM7UUFDZCxJQUFJRyxNQUFNLEdBQUlaLEtBQUssQ0FBQyxLQUFLUSxLQUFNO1FBQy9CLElBQUlLLE1BQU0sR0FBSWIsS0FBSyxDQUFDLEtBQUtTLEtBQU07UUFDL0IsSUFBSUcsUUFBUSxHQUNWQSxNQUFNLENBQUM7UUFDVCxJQUFJQyxRQUFRLEdBQ1ZBLE1BQU0sQ0FBQztRQUNULElBQUlDO1FBQ0osSUFBSSxDQUFDRixNQUFNLE9BQU8sR0FBRztZQUNuQkUsS0FBSztRQUNQLE9BQU87WUFDTEosS0FBSyxHQUFJVixLQUFLLENBQUMsS0FBS1EsS0FBTTtZQUMxQixJQUFJLENBQUNFLE9BQU8sS0FBS0EsT0FBTyxNQUFNRyxRQUFRLEdBQ3BDQyxLQUFLLENBQUNGO2lCQUVORSxLQUFLRjtRQUNUO1FBQ0FMLEdBQUcsQ0FBQyxFQUFFLENBQUNRLElBQUksQ0FBQ0Q7UUFFWixJQUFJRTtRQUNKLElBQUksQ0FBQ0gsTUFBTSxPQUFPLEdBQUc7WUFDbkJHLEtBQUs7UUFDUCxPQUFPO1lBQ0xOLEtBQUssR0FBSVYsS0FBSyxDQUFDLEtBQUtTLEtBQU07WUFDMUIsSUFBSSxDQUFDQyxPQUFPLEtBQUtBLE9BQU8sTUFBTUUsUUFBUSxHQUNwQ0ksS0FBSyxDQUFDSDtpQkFFTkcsS0FBS0g7UUFDVDtRQUNBTixHQUFHLENBQUMsRUFBRSxDQUFDUSxJQUFJLENBQUNDO1FBRVosZUFBZTtRQUNmLElBQUksSUFBSVIsT0FBT00sS0FBSyxHQUNsQk4sS0FBSyxJQUFJQTtRQUNYLElBQUksSUFBSUMsT0FBT08sS0FBSyxHQUNsQlAsS0FBSyxJQUFJQTtRQUNYSixHQUFHRixNQUFNLENBQUM7UUFDVkcsR0FBR0gsTUFBTSxDQUFDO0lBQ1o7SUFFQSxPQUFPSTtBQUNUO0FBQ0FsQyxNQUFNK0IsTUFBTSxHQUFHQTtBQUVmLFNBQVNhLGVBQWVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ3pDLElBQUlDLE1BQU0sTUFBTUY7SUFDaEJELElBQUlJLFNBQVMsQ0FBQ0gsS0FBSyxHQUFHLFNBQVNGO1FBQzdCLE9BQU8sSUFBSSxDQUFDSSxJQUFJLEtBQUtFLFlBQVksSUFBSSxDQUFDRixJQUFJLEdBQ3hDLElBQUksQ0FBQ0EsSUFBSSxHQUFHRCxTQUFTSSxJQUFJLENBQUMsSUFBSTtJQUNsQztBQUNGO0FBQ0FuRCxNQUFNNEMsY0FBYyxHQUFHQTtBQUV2QixTQUFTUSxXQUFXQyxLQUFLO0lBQ3ZCLE9BQU8sT0FBT0EsVUFBVSxXQUFXckQsTUFBTU8sT0FBTyxDQUFDOEMsT0FBTyxTQUN0REE7QUFDSjtBQUNBckQsTUFBTW9ELFVBQVUsR0FBR0E7QUFFbkIsU0FBU0UsVUFBVUQsS0FBSztJQUN0QixPQUFPLElBQUluRCxHQUFHbUQsT0FBTyxPQUFPO0FBQzlCO0FBQ0FyRCxNQUFNc0QsU0FBUyxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3V0aWxzLmpzPzg3NTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSBleHBvcnRzO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBtaW5Bc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgbWluVXRpbHMgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzJyk7XG5cbnV0aWxzLmFzc2VydCA9IG1pbkFzc2VydDtcbnV0aWxzLnRvQXJyYXkgPSBtaW5VdGlscy50b0FycmF5O1xudXRpbHMuemVybzIgPSBtaW5VdGlscy56ZXJvMjtcbnV0aWxzLnRvSGV4ID0gbWluVXRpbHMudG9IZXg7XG51dGlscy5lbmNvZGUgPSBtaW5VdGlscy5lbmNvZGU7XG5cbi8vIFJlcHJlc2VudCBudW0gaW4gYSB3LU5BRiBmb3JtXG5mdW5jdGlvbiBnZXROQUYobnVtLCB3LCBiaXRzKSB7XG4gIHZhciBuYWYgPSBuZXcgQXJyYXkoTWF0aC5tYXgobnVtLmJpdExlbmd0aCgpLCBiaXRzKSArIDEpO1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IG5hZi5sZW5ndGg7IGkgKz0gMSkge1xuICAgIG5hZltpXSA9IDA7XG4gIH1cblxuICB2YXIgd3MgPSAxIDw8ICh3ICsgMSk7XG4gIHZhciBrID0gbnVtLmNsb25lKCk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hZi5sZW5ndGg7IGkrKykge1xuICAgIHZhciB6O1xuICAgIHZhciBtb2QgPSBrLmFuZGxuKHdzIC0gMSk7XG4gICAgaWYgKGsuaXNPZGQoKSkge1xuICAgICAgaWYgKG1vZCA+ICh3cyA+PiAxKSAtIDEpXG4gICAgICAgIHogPSAod3MgPj4gMSkgLSBtb2Q7XG4gICAgICBlbHNlXG4gICAgICAgIHogPSBtb2Q7XG4gICAgICBrLmlzdWJuKHopO1xuICAgIH0gZWxzZSB7XG4gICAgICB6ID0gMDtcbiAgICB9XG5cbiAgICBuYWZbaV0gPSB6O1xuICAgIGsuaXVzaHJuKDEpO1xuICB9XG5cbiAgcmV0dXJuIG5hZjtcbn1cbnV0aWxzLmdldE5BRiA9IGdldE5BRjtcblxuLy8gUmVwcmVzZW50IGsxLCBrMiBpbiBhIEpvaW50IFNwYXJzZSBGb3JtXG5mdW5jdGlvbiBnZXRKU0YoazEsIGsyKSB7XG4gIHZhciBqc2YgPSBbXG4gICAgW10sXG4gICAgW10sXG4gIF07XG5cbiAgazEgPSBrMS5jbG9uZSgpO1xuICBrMiA9IGsyLmNsb25lKCk7XG4gIHZhciBkMSA9IDA7XG4gIHZhciBkMiA9IDA7XG4gIHZhciBtODtcbiAgd2hpbGUgKGsxLmNtcG4oLWQxKSA+IDAgfHwgazIuY21wbigtZDIpID4gMCkge1xuICAgIC8vIEZpcnN0IHBoYXNlXG4gICAgdmFyIG0xNCA9IChrMS5hbmRsbigzKSArIGQxKSAmIDM7XG4gICAgdmFyIG0yNCA9IChrMi5hbmRsbigzKSArIGQyKSAmIDM7XG4gICAgaWYgKG0xNCA9PT0gMylcbiAgICAgIG0xNCA9IC0xO1xuICAgIGlmIChtMjQgPT09IDMpXG4gICAgICBtMjQgPSAtMTtcbiAgICB2YXIgdTE7XG4gICAgaWYgKChtMTQgJiAxKSA9PT0gMCkge1xuICAgICAgdTEgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBtOCA9IChrMS5hbmRsbig3KSArIGQxKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMjQgPT09IDIpXG4gICAgICAgIHUxID0gLW0xNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTEgPSBtMTQ7XG4gICAgfVxuICAgIGpzZlswXS5wdXNoKHUxKTtcblxuICAgIHZhciB1MjtcbiAgICBpZiAoKG0yNCAmIDEpID09PSAwKSB7XG4gICAgICB1MiA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG04ID0gKGsyLmFuZGxuKDcpICsgZDIpICYgNztcbiAgICAgIGlmICgobTggPT09IDMgfHwgbTggPT09IDUpICYmIG0xNCA9PT0gMilcbiAgICAgICAgdTIgPSAtbTI0O1xuICAgICAgZWxzZVxuICAgICAgICB1MiA9IG0yNDtcbiAgICB9XG4gICAganNmWzFdLnB1c2godTIpO1xuXG4gICAgLy8gU2Vjb25kIHBoYXNlXG4gICAgaWYgKDIgKiBkMSA9PT0gdTEgKyAxKVxuICAgICAgZDEgPSAxIC0gZDE7XG4gICAgaWYgKDIgKiBkMiA9PT0gdTIgKyAxKVxuICAgICAgZDIgPSAxIC0gZDI7XG4gICAgazEuaXVzaHJuKDEpO1xuICAgIGsyLml1c2hybigxKTtcbiAgfVxuXG4gIHJldHVybiBqc2Y7XG59XG51dGlscy5nZXRKU0YgPSBnZXRKU0Y7XG5cbmZ1bmN0aW9uIGNhY2hlZFByb3BlcnR5KG9iaiwgbmFtZSwgY29tcHV0ZXIpIHtcbiAgdmFyIGtleSA9ICdfJyArIG5hbWU7XG4gIG9iai5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eSgpIHtcbiAgICByZXR1cm4gdGhpc1trZXldICE9PSB1bmRlZmluZWQgPyB0aGlzW2tleV0gOlxuICAgICAgdGhpc1trZXldID0gY29tcHV0ZXIuY2FsbCh0aGlzKTtcbiAgfTtcbn1cbnV0aWxzLmNhY2hlZFByb3BlcnR5ID0gY2FjaGVkUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHBhcnNlQnl0ZXMoYnl0ZXMpIHtcbiAgcmV0dXJuIHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycgPyB1dGlscy50b0FycmF5KGJ5dGVzLCAnaGV4JykgOlxuICAgIGJ5dGVzO1xufVxudXRpbHMucGFyc2VCeXRlcyA9IHBhcnNlQnl0ZXM7XG5cbmZ1bmN0aW9uIGludEZyb21MRShieXRlcykge1xuICByZXR1cm4gbmV3IEJOKGJ5dGVzLCAnaGV4JywgJ2xlJyk7XG59XG51dGlscy5pbnRGcm9tTEUgPSBpbnRGcm9tTEU7XG5cbiJdLCJuYW1lcyI6WyJ1dGlscyIsImV4cG9ydHMiLCJCTiIsInJlcXVpcmUiLCJtaW5Bc3NlcnQiLCJtaW5VdGlscyIsImFzc2VydCIsInRvQXJyYXkiLCJ6ZXJvMiIsInRvSGV4IiwiZW5jb2RlIiwiZ2V0TkFGIiwibnVtIiwidyIsImJpdHMiLCJuYWYiLCJBcnJheSIsIk1hdGgiLCJtYXgiLCJiaXRMZW5ndGgiLCJpIiwibGVuZ3RoIiwid3MiLCJrIiwiY2xvbmUiLCJ6IiwibW9kIiwiYW5kbG4iLCJpc09kZCIsImlzdWJuIiwiaXVzaHJuIiwiZ2V0SlNGIiwiazEiLCJrMiIsImpzZiIsImQxIiwiZDIiLCJtOCIsImNtcG4iLCJtMTQiLCJtMjQiLCJ1MSIsInB1c2giLCJ1MiIsImNhY2hlZFByb3BlcnR5Iiwib2JqIiwibmFtZSIsImNvbXB1dGVyIiwia2V5IiwicHJvdG90eXBlIiwidW5kZWZpbmVkIiwiY2FsbCIsInBhcnNlQnl0ZXMiLCJieXRlcyIsImludEZyb21MRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/lib/elliptic/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/node_modules/bn.js/lib/bn.js":
/*!************************************************************!*\
  !*** ./node_modules/elliptic/node_modules/bn.js/lib/bn.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\n(function(module1, exports) {\n    \"use strict\";\n    // Utils\n    function assert(val, msg) {\n        if (!val) throw new Error(msg || \"Assertion failed\");\n    }\n    // Could use `inherits` module, but don't want to move from single file\n    // architecture yet.\n    function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {};\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n    }\n    // BN\n    function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n            return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        // Reduction context\n        this.red = null;\n        if (number !== null) {\n            if (base === \"le\" || base === \"be\") {\n                endian = base;\n                base = 10;\n            }\n            this._init(number || 0, base || 10, endian || \"be\");\n        }\n    }\n    if (typeof module1 === \"object\") {\n        module1.exports = BN;\n    } else {\n        exports.BN = BN;\n    }\n    BN.BN = BN;\n    BN.wordSize = 26;\n    var Buffer;\n    try {\n        if ( true && typeof window.Buffer !== \"undefined\") {\n            Buffer = window.Buffer;\n        } else {\n            Buffer = (__webpack_require__(/*! buffer */ \"?1fc4\").Buffer);\n        }\n    } catch (e) {}\n    BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n            return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n    };\n    BN.max = function max(left, right) {\n        if (left.cmp(right) > 0) return left;\n        return right;\n    };\n    BN.min = function min(left, right) {\n        if (left.cmp(right) < 0) return left;\n        return right;\n    };\n    BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n            return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n            return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n            base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n            start++;\n            this.negative = 1;\n        }\n        if (start < number.length) {\n            if (base === 16) {\n                this._parseHex(number, start, endian);\n            } else {\n                this._parseBase(number, base, start);\n                if (endian === \"le\") {\n                    this._initArray(this.toArray(), base, endian);\n                }\n            }\n        }\n    };\n    BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n            this.negative = 1;\n            number = -number;\n        }\n        if (number < 0x4000000) {\n            this.words = [\n                number & 0x3ffffff\n            ];\n            this.length = 1;\n        } else if (number < 0x10000000000000) {\n            this.words = [\n                number & 0x3ffffff,\n                number / 0x4000000 & 0x3ffffff\n            ];\n            this.length = 2;\n        } else {\n            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n            this.words = [\n                number & 0x3ffffff,\n                number / 0x4000000 & 0x3ffffff,\n                1\n            ];\n            this.length = 3;\n        }\n        if (endian !== \"le\") return;\n        // Reverse the bytes\n        this._initArray(this.toArray(), base, endian);\n    };\n    BN.prototype._initArray = function _initArray(number, base, endian) {\n        // Perhaps a Uint8Array\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n            this.words = [\n                0\n            ];\n            this.length = 1;\n            return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n            for(i = number.length - 1, j = 0; i >= 0; i -= 3){\n                w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n                this.words[j] |= w << off & 0x3ffffff;\n                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n                off += 24;\n                if (off >= 26) {\n                    off -= 26;\n                    j++;\n                }\n            }\n        } else if (endian === \"le\") {\n            for(i = 0, j = 0; i < number.length; i += 3){\n                w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n                this.words[j] |= w << off & 0x3ffffff;\n                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n                off += 24;\n                if (off >= 26) {\n                    off -= 26;\n                    j++;\n                }\n            }\n        }\n        return this.strip();\n    };\n    function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        // 'A' - 'F'\n        if (c >= 65 && c <= 70) {\n            return c - 55;\n        // 'a' - 'f'\n        } else if (c >= 97 && c <= 102) {\n            return c - 87;\n        // '0' - '9'\n        } else {\n            return c - 48 & 0xf;\n        }\n    }\n    function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n            r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n    }\n    BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        // Create possibly bigger array to ensure that it fits the number\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            this.words[i] = 0;\n        }\n        // 24-bits chunks\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n            for(i = number.length - 1; i >= start; i -= 2){\n                w = parseHexByte(number, start, i) << off;\n                this.words[j] |= w & 0x3ffffff;\n                if (off >= 18) {\n                    off -= 18;\n                    j += 1;\n                    this.words[j] |= w >>> 26;\n                } else {\n                    off += 8;\n                }\n            }\n        } else {\n            var parseLength = number.length - start;\n            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){\n                w = parseHexByte(number, start, i) << off;\n                this.words[j] |= w & 0x3ffffff;\n                if (off >= 18) {\n                    off -= 18;\n                    j += 1;\n                    this.words[j] |= w >>> 26;\n                } else {\n                    off += 8;\n                }\n            }\n        }\n        this.strip();\n    };\n    function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for(var i = start; i < len; i++){\n            var c = str.charCodeAt(i) - 48;\n            r *= mul;\n            // 'a'\n            if (c >= 49) {\n                r += c - 49 + 0xa;\n            // 'A'\n            } else if (c >= 17) {\n                r += c - 17 + 0xa;\n            // '0' - '9'\n            } else {\n                r += c;\n            }\n        }\n        return r;\n    }\n    BN.prototype._parseBase = function _parseBase(number, base, start) {\n        // Initialize as zero\n        this.words = [\n            0\n        ];\n        this.length = 1;\n        // Find length of limb in base\n        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base){\n            limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for(var i = start; i < end; i += limbLen){\n            word = parseBase(number, i, i + limbLen, base);\n            this.imuln(limbPow);\n            if (this.words[0] + word < 0x4000000) {\n                this.words[0] += word;\n            } else {\n                this._iaddn(word);\n            }\n        }\n        if (mod !== 0) {\n            var pow = 1;\n            word = parseBase(number, i, number.length, base);\n            for(i = 0; i < mod; i++){\n                pow *= base;\n            }\n            this.imuln(pow);\n            if (this.words[0] + word < 0x4000000) {\n                this.words[0] += word;\n            } else {\n                this._iaddn(word);\n            }\n        }\n        this.strip();\n    };\n    BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n    };\n    BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n    };\n    BN.prototype._expand = function _expand(size) {\n        while(this.length < size){\n            this.words[this.length++] = 0;\n        }\n        return this;\n    };\n    // Remove leading `0` from `this`\n    BN.prototype.strip = function strip() {\n        while(this.length > 1 && this.words[this.length - 1] === 0){\n            this.length--;\n        }\n        return this._normSign();\n    };\n    BN.prototype._normSign = function _normSign() {\n        // -0 = 0\n        if (this.length === 1 && this.words[0] === 0) {\n            this.negative = 0;\n        }\n        return this;\n    };\n    BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n    };\n    /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */ var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n    ];\n    var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n    ];\n    var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        10000000,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64000000,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        24300000,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n    ];\n    BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n            out = \"\";\n            var off = 0;\n            var carry = 0;\n            for(var i = 0; i < this.length; i++){\n                var w = this.words[i];\n                var word = ((w << off | carry) & 0xffffff).toString(16);\n                carry = w >>> 24 - off & 0xffffff;\n                off += 2;\n                if (off >= 26) {\n                    off -= 26;\n                    i--;\n                }\n                if (carry !== 0 || i !== this.length - 1) {\n                    out = zeros[6 - word.length] + word + out;\n                } else {\n                    out = word + out;\n                }\n            }\n            if (carry !== 0) {\n                out = carry.toString(16) + out;\n            }\n            while(out.length % padding !== 0){\n                out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n                out = \"-\" + out;\n            }\n            return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n            var groupSize = groupSizes[base];\n            // var groupBase = Math.pow(base, groupSize);\n            var groupBase = groupBases[base];\n            out = \"\";\n            var c = this.clone();\n            c.negative = 0;\n            while(!c.isZero()){\n                var r = c.modn(groupBase).toString(base);\n                c = c.idivn(groupBase);\n                if (!c.isZero()) {\n                    out = zeros[groupSize - r.length] + r + out;\n                } else {\n                    out = r + out;\n                }\n            }\n            if (this.isZero()) {\n                out = \"0\" + out;\n            }\n            while(out.length % padding !== 0){\n                out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n                out = \"-\" + out;\n            }\n            return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n    };\n    BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n            ret += this.words[1] * 0x4000000;\n        } else if (this.length === 3 && this.words[2] === 0x01) {\n            // NOTE: at this stage it is known that the top bit is set\n            ret += 0x10000000000000 + this.words[1] * 0x4000000;\n        } else if (this.length > 2) {\n            assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n    };\n    BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n    };\n    BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer !== \"undefined\");\n        return this.toArrayLike(Buffer, endian, length);\n    };\n    BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n    };\n    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n            // Assume big-endian\n            for(i = 0; i < reqLength - byteLength; i++){\n                res[i] = 0;\n            }\n            for(i = 0; !q.isZero(); i++){\n                b = q.andln(0xff);\n                q.iushrn(8);\n                res[reqLength - i - 1] = b;\n            }\n        } else {\n            for(i = 0; !q.isZero(); i++){\n                b = q.andln(0xff);\n                q.iushrn(8);\n                res[i] = b;\n            }\n            for(; i < reqLength; i++){\n                res[i] = 0;\n            }\n        }\n        return res;\n    };\n    if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n            return 32 - Math.clz32(w);\n        };\n    } else {\n        BN.prototype._countBits = function _countBits(w) {\n            var t = w;\n            var r = 0;\n            if (t >= 0x1000) {\n                r += 13;\n                t >>>= 13;\n            }\n            if (t >= 0x40) {\n                r += 7;\n                t >>>= 7;\n            }\n            if (t >= 0x8) {\n                r += 4;\n                t >>>= 4;\n            }\n            if (t >= 0x02) {\n                r += 2;\n                t >>>= 2;\n            }\n            return r + t;\n        };\n    }\n    BN.prototype._zeroBits = function _zeroBits(w) {\n        // Short-cut\n        if (w === 0) return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 0x1fff) === 0) {\n            r += 13;\n            t >>>= 13;\n        }\n        if ((t & 0x7f) === 0) {\n            r += 7;\n            t >>>= 7;\n        }\n        if ((t & 0xf) === 0) {\n            r += 4;\n            t >>>= 4;\n        }\n        if ((t & 0x3) === 0) {\n            r += 2;\n            t >>>= 2;\n        }\n        if ((t & 0x1) === 0) {\n            r++;\n        }\n        return r;\n    };\n    // Return number of used bits in a BN\n    BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n    };\n    function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for(var bit = 0; bit < w.length; bit++){\n            var off = bit / 26 | 0;\n            var wbit = bit % 26;\n            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n    }\n    // Number of trailing zero bits\n    BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero()) return 0;\n        var r = 0;\n        for(var i = 0; i < this.length; i++){\n            var b = this._zeroBits(this.words[i]);\n            r += b;\n            if (b !== 26) break;\n        }\n        return r;\n    };\n    BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n    };\n    BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n            return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n    };\n    BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n            return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n    };\n    BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n    };\n    // Return negative clone of `this`\n    BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n    };\n    BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n            this.negative ^= 1;\n        }\n        return this;\n    };\n    // Or `num` with `this` in-place\n    BN.prototype.iuor = function iuor(num) {\n        while(this.length < num.length){\n            this.words[this.length++] = 0;\n        }\n        for(var i = 0; i < num.length; i++){\n            this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n    };\n    BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n    };\n    // Or `num` with `this`\n    BN.prototype.or = function or(num) {\n        if (this.length > num.length) return this.clone().ior(num);\n        return num.clone().ior(this);\n    };\n    BN.prototype.uor = function uor(num) {\n        if (this.length > num.length) return this.clone().iuor(num);\n        return num.clone().iuor(this);\n    };\n    // And `num` with `this` in-place\n    BN.prototype.iuand = function iuand(num) {\n        // b = min-length(num, this)\n        var b;\n        if (this.length > num.length) {\n            b = num;\n        } else {\n            b = this;\n        }\n        for(var i = 0; i < b.length; i++){\n            this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n    };\n    BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n    };\n    // And `num` with `this`\n    BN.prototype.and = function and(num) {\n        if (this.length > num.length) return this.clone().iand(num);\n        return num.clone().iand(this);\n    };\n    BN.prototype.uand = function uand(num) {\n        if (this.length > num.length) return this.clone().iuand(num);\n        return num.clone().iuand(this);\n    };\n    // Xor `num` with `this` in-place\n    BN.prototype.iuxor = function iuxor(num) {\n        // a.length > b.length\n        var a;\n        var b;\n        if (this.length > num.length) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        for(var i = 0; i < b.length; i++){\n            this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        this.length = a.length;\n        return this.strip();\n    };\n    BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n    };\n    // Xor `num` with `this`\n    BN.prototype.xor = function xor(num) {\n        if (this.length > num.length) return this.clone().ixor(num);\n        return num.clone().ixor(this);\n    };\n    BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length) return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n    };\n    // Not ``this`` with ``width`` bitwidth\n    BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        // Extend the buffer with leading zeroes\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n            bytesNeeded--;\n        }\n        // Handle complete words\n        for(var i = 0; i < bytesNeeded; i++){\n            this.words[i] = ~this.words[i] & 0x3ffffff;\n        }\n        // Handle the residue\n        if (bitsLeft > 0) {\n            this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;\n        }\n        // And remove leading zeroes\n        return this.strip();\n    };\n    BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n    };\n    // Set `bit` of `this`\n    BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n            this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n            this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n    };\n    // Add `num` to `this` in-place\n    BN.prototype.iadd = function iadd(num) {\n        var r;\n        // negative + positive\n        if (this.negative !== 0 && num.negative === 0) {\n            this.negative = 0;\n            r = this.isub(num);\n            this.negative ^= 1;\n            return this._normSign();\n        // positive + negative\n        } else if (this.negative === 0 && num.negative !== 0) {\n            num.negative = 0;\n            r = this.isub(num);\n            num.negative = 1;\n            return r._normSign();\n        }\n        // a.length > b.length\n        var a, b;\n        if (this.length > num.length) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        var carry = 0;\n        for(var i = 0; i < b.length; i++){\n            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n        }\n        for(; carry !== 0 && i < a.length; i++){\n            r = (a.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n            this.words[this.length] = carry;\n            this.length++;\n        // Copy the rest of the words\n        } else if (a !== this) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        return this;\n    };\n    // Add `num` to `this`\n    BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n            num.negative = 0;\n            res = this.sub(num);\n            num.negative ^= 1;\n            return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n            this.negative = 0;\n            res = num.sub(this);\n            this.negative = 1;\n            return res;\n        }\n        if (this.length > num.length) return this.clone().iadd(num);\n        return num.clone().iadd(this);\n    };\n    // Subtract `num` from `this` in-place\n    BN.prototype.isub = function isub(num) {\n        // this - (-num) = this + num\n        if (num.negative !== 0) {\n            num.negative = 0;\n            var r = this.iadd(num);\n            num.negative = 1;\n            return r._normSign();\n        // -this - num = -(this + num)\n        } else if (this.negative !== 0) {\n            this.negative = 0;\n            this.iadd(num);\n            this.negative = 1;\n            return this._normSign();\n        }\n        // At this point both numbers are positive\n        var cmp = this.cmp(num);\n        // Optimization - zeroify\n        if (cmp === 0) {\n            this.negative = 0;\n            this.length = 1;\n            this.words[0] = 0;\n            return this;\n        }\n        // a > b\n        var a, b;\n        if (cmp > 0) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        var carry = 0;\n        for(var i = 0; i < b.length; i++){\n            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n        }\n        for(; carry !== 0 && i < a.length; i++){\n            r = (a.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n        }\n        // Copy rest of the words\n        if (carry === 0 && i < a.length && a !== this) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n            this.negative = 1;\n        }\n        return this.strip();\n    };\n    // Subtract `num` from `this`\n    BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n    };\n    function smallMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        var len = self.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        // Peel one iteration (compiler can't do it, because of code complexity)\n        var a = self.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        var carry = r / 0x4000000 | 0;\n        out.words[0] = lo;\n        for(var k = 1; k < len; k++){\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = carry >>> 26;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){\n                var i = k - j | 0;\n                a = self.words[i] | 0;\n                b = num.words[j] | 0;\n                r = a * b + rword;\n                ncarry += r / 0x4000000 | 0;\n                rword = r & 0x3ffffff;\n            }\n            out.words[k] = rword | 0;\n            carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n            out.words[k] = carry | 0;\n        } else {\n            out.length--;\n        }\n        return out.strip();\n    }\n    // TODO(indutny): it may be reasonable to omit it for users who don't need\n    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n    // multiplication (like elliptic secp256k1).\n    var comb10MulTo = function comb10MulTo(self, num, out) {\n        var a = self.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 0x1fff;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 0x1fff;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 0x1fff;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 0x1fff;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 0x1fff;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 0x1fff;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 0x1fff;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 0x1fff;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 0x1fff;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 0x1fff;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 0x1fff;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 0x1fff;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 0x1fff;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 0x1fff;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 0x1fff;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 0x1fff;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 0x1fff;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 0x1fff;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 0x1fff;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 0x1fff;\n        var bh9 = b9 >>> 13;\n        out.negative = self.negative ^ num.negative;\n        out.length = 19;\n        /* k = 0 */ lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 0x3ffffff;\n        /* k = 1 */ lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 0x3ffffff;\n        /* k = 2 */ lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 0x3ffffff;\n        /* k = 3 */ lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 0x3ffffff;\n        /* k = 4 */ lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 0x3ffffff;\n        /* k = 5 */ lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 0x3ffffff;\n        /* k = 6 */ lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 0x3ffffff;\n        /* k = 7 */ lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 0x3ffffff;\n        /* k = 8 */ lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 0x3ffffff;\n        /* k = 9 */ lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 0x3ffffff;\n        /* k = 10 */ lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 0x3ffffff;\n        /* k = 11 */ lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 0x3ffffff;\n        /* k = 12 */ lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 0x3ffffff;\n        /* k = 13 */ lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 0x3ffffff;\n        /* k = 14 */ lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 0x3ffffff;\n        /* k = 15 */ lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 0x3ffffff;\n        /* k = 16 */ lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 0x3ffffff;\n        /* k = 17 */ lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 0x3ffffff;\n        /* k = 18 */ lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 0x3ffffff;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n            o[19] = c;\n            out.length++;\n        }\n        return out;\n    };\n    // Polyfill comb\n    if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n    }\n    function bigMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        out.length = self.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for(var k = 0; k < out.length - 1; k++){\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = hncarry;\n            hncarry = 0;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){\n                var i = k - j;\n                var a = self.words[i] | 0;\n                var b = num.words[j] | 0;\n                var r = a * b;\n                var lo = r & 0x3ffffff;\n                ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n                lo = lo + rword | 0;\n                rword = lo & 0x3ffffff;\n                ncarry = ncarry + (lo >>> 26) | 0;\n                hncarry += ncarry >>> 26;\n                ncarry &= 0x3ffffff;\n            }\n            out.words[k] = rword;\n            carry = ncarry;\n            ncarry = hncarry;\n        }\n        if (carry !== 0) {\n            out.words[k] = carry;\n        } else {\n            out.length--;\n        }\n        return out.strip();\n    }\n    function jumboMulTo(self, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self, num, out);\n    }\n    BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n            res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n            res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n            res = bigMulTo(this, num, out);\n        } else {\n            res = jumboMulTo(this, num, out);\n        }\n        return res;\n    };\n    // Cooley-Tukey algorithm for FFT\n    // slightly revisited to rely on looping instead of recursion\n    function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for(var i = 0; i < N; i++){\n            t[i] = this.revBin(i, l, N);\n        }\n        return t;\n    };\n    // Returns binary-reversed representation of `x`\n    FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1) return x;\n        var rb = 0;\n        for(var i = 0; i < l; i++){\n            rb |= (x & 1) << l - i - 1;\n            x >>= 1;\n        }\n        return rb;\n    };\n    // Performs \"tweedling\" phase, therefore 'emulating'\n    // behaviour of the recursive algorithm\n    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for(var i = 0; i < N; i++){\n            rtws[i] = rws[rbt[i]];\n            itws[i] = iws[rbt[i]];\n        }\n    };\n    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for(var s = 1; s < N; s <<= 1){\n            var l = s << 1;\n            var rtwdf = Math.cos(2 * Math.PI / l);\n            var itwdf = Math.sin(2 * Math.PI / l);\n            for(var p = 0; p < N; p += l){\n                var rtwdf_ = rtwdf;\n                var itwdf_ = itwdf;\n                for(var j = 0; j < s; j++){\n                    var re = rtws[p + j];\n                    var ie = itws[p + j];\n                    var ro = rtws[p + j + s];\n                    var io = itws[p + j + s];\n                    var rx = rtwdf_ * ro - itwdf_ * io;\n                    io = rtwdf_ * io + itwdf_ * ro;\n                    ro = rx;\n                    rtws[p + j] = re + ro;\n                    itws[p + j] = ie + io;\n                    rtws[p + j + s] = re - ro;\n                    itws[p + j + s] = ie - io;\n                    /* jshint maxdepth : false */ if (j !== l) {\n                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                        rtwdf_ = rx;\n                    }\n                }\n            }\n        }\n    };\n    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for(N = N / 2 | 0; N; N = N >>> 1){\n            i++;\n        }\n        return 1 << i + 1 + odd;\n    };\n    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1) return;\n        for(var i = 0; i < N / 2; i++){\n            var t = rws[i];\n            rws[i] = rws[N - i - 1];\n            rws[N - i - 1] = t;\n            t = iws[i];\n            iws[i] = -iws[N - i - 1];\n            iws[N - i - 1] = -t;\n        }\n    };\n    FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for(var i = 0; i < N / 2; i++){\n            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;\n            ws[i] = w & 0x3ffffff;\n            if (w < 0x4000000) {\n                carry = 0;\n            } else {\n                carry = w / 0x4000000 | 0;\n            }\n        }\n        return ws;\n    };\n    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for(var i = 0; i < len; i++){\n            carry = carry + (ws[i] | 0);\n            rws[2 * i] = carry & 0x1fff;\n            carry = carry >>> 13;\n            rws[2 * i + 1] = carry & 0x1fff;\n            carry = carry >>> 13;\n        }\n        // Pad with zeroes\n        for(i = 2 * len; i < N; ++i){\n            rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~0x1fff) === 0);\n    };\n    FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for(var i = 0; i < N; i++){\n            ph[i] = 0;\n        }\n        return ph;\n    };\n    FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for(var i = 0; i < N; i++){\n            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n            rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n    };\n    // Multiply `this` by `num`\n    BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n    };\n    // Multiply employing FFT\n    BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n    };\n    // In-place Multiplication\n    BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n    };\n    BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        // Carry\n        var carry = 0;\n        for(var i = 0; i < this.length; i++){\n            var w = (this.words[i] | 0) * num;\n            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n            carry >>= 26;\n            carry += w / 0x4000000 | 0;\n            // NOTE: lo is 27bit maximum\n            carry += lo >>> 26;\n            this.words[i] = lo & 0x3ffffff;\n        }\n        if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n        }\n        return this;\n    };\n    BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n    };\n    // `this` * `this`\n    BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n    };\n    // `this` * `this` in-place\n    BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n    };\n    // Math.pow(`this`, `num`)\n    BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0) return new BN(1);\n        // Skip leading zeroes\n        var res = this;\n        for(var i = 0; i < w.length; i++, res = res.sqr()){\n            if (w[i] !== 0) break;\n        }\n        if (++i < w.length) {\n            for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){\n                if (w[i] === 0) continue;\n                res = res.mul(q);\n            }\n        }\n        return res;\n    };\n    // Shift-left in-place\n    BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n            var carry = 0;\n            for(i = 0; i < this.length; i++){\n                var newCarry = this.words[i] & carryMask;\n                var c = (this.words[i] | 0) - newCarry << r;\n                this.words[i] = c | carry;\n                carry = newCarry >>> 26 - r;\n            }\n            if (carry) {\n                this.words[i] = carry;\n                this.length++;\n            }\n        }\n        if (s !== 0) {\n            for(i = this.length - 1; i >= 0; i--){\n                this.words[i + s] = this.words[i];\n            }\n            for(i = 0; i < s; i++){\n                this.words[i] = 0;\n            }\n            this.length += s;\n        }\n        return this.strip();\n    };\n    BN.prototype.ishln = function ishln(bits) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushln(bits);\n    };\n    // Shift-right in-place\n    // NOTE: `hint` is a lowest bit before trailing zeroes\n    // NOTE: if `extended` is present - it will be filled with destroyed bits\n    BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n            h = (hint - hint % 26) / 26;\n        } else {\n            h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        // Extended mode, copy masked part\n        if (maskedWords) {\n            for(var i = 0; i < s; i++){\n                maskedWords.words[i] = this.words[i];\n            }\n            maskedWords.length = s;\n        }\n        if (s === 0) {\n        // No-op, we should not move anything at all\n        } else if (this.length > s) {\n            this.length -= s;\n            for(i = 0; i < this.length; i++){\n                this.words[i] = this.words[i + s];\n            }\n        } else {\n            this.words[0] = 0;\n            this.length = 1;\n        }\n        var carry = 0;\n        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){\n            var word = this.words[i] | 0;\n            this.words[i] = carry << 26 - r | word >>> r;\n            carry = word & mask;\n        }\n        // Push carried bits as a mask\n        if (maskedWords && carry !== 0) {\n            maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n            this.words[0] = 0;\n            this.length = 1;\n        }\n        return this.strip();\n    };\n    BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n    };\n    // Shift-left\n    BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n    };\n    BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n    };\n    // Shift-right\n    BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n    };\n    BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n    };\n    // Test if n bit is set\n    BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        // Fast case: bit is much higher than all existing words\n        if (this.length <= s) return false;\n        // Check bit and return\n        var w = this.words[s];\n        return !!(w & q);\n    };\n    // Return only lowers bits of number (in-place)\n    BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n            return this;\n        }\n        if (r !== 0) {\n            s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n            this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n    };\n    // Return only lowers bits of number\n    BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n    };\n    // Add plain number `num` to `this`\n    BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        if (num < 0) return this.isubn(-num);\n        // Possible sign change\n        if (this.negative !== 0) {\n            if (this.length === 1 && (this.words[0] | 0) < num) {\n                this.words[0] = num - (this.words[0] | 0);\n                this.negative = 0;\n                return this;\n            }\n            this.negative = 0;\n            this.isubn(num);\n            this.negative = 1;\n            return this;\n        }\n        // Add without checks\n        return this._iaddn(num);\n    };\n    BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        // Carry\n        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){\n            this.words[i] -= 0x4000000;\n            if (i === this.length - 1) {\n                this.words[i + 1] = 1;\n            } else {\n                this.words[i + 1]++;\n            }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n    };\n    // Subtract plain number `num` from `this`\n    BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        if (num < 0) return this.iaddn(-num);\n        if (this.negative !== 0) {\n            this.negative = 0;\n            this.iaddn(num);\n            this.negative = 1;\n            return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n            this.words[0] = -this.words[0];\n            this.negative = 1;\n        } else {\n            // Carry\n            for(var i = 0; i < this.length && this.words[i] < 0; i++){\n                this.words[i] += 0x4000000;\n                this.words[i + 1] -= 1;\n            }\n        }\n        return this.strip();\n    };\n    BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n    };\n    BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n    };\n    BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n    };\n    BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n    };\n    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for(i = 0; i < num.length; i++){\n            w = (this.words[i + shift] | 0) + carry;\n            var right = (num.words[i] | 0) * mul;\n            w -= right & 0x3ffffff;\n            carry = (w >> 26) - (right / 0x4000000 | 0);\n            this.words[i + shift] = w & 0x3ffffff;\n        }\n        for(; i < this.length - shift; i++){\n            w = (this.words[i + shift] | 0) + carry;\n            carry = w >> 26;\n            this.words[i + shift] = w & 0x3ffffff;\n        }\n        if (carry === 0) return this.strip();\n        // Subtraction overflow\n        assert(carry === -1);\n        carry = 0;\n        for(i = 0; i < this.length; i++){\n            w = -(this.words[i] | 0) + carry;\n            carry = w >> 26;\n            this.words[i] = w & 0x3ffffff;\n        }\n        this.negative = 1;\n        return this.strip();\n    };\n    BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        // Normalize\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n            b = b.ushln(shift);\n            a.iushln(shift);\n            bhi = b.words[b.length - 1] | 0;\n        }\n        // Initialize quotient\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n            q = new BN(null);\n            q.length = m + 1;\n            q.words = new Array(q.length);\n            for(var i = 0; i < q.length; i++){\n                q.words[i] = 0;\n            }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n            a = diff;\n            if (q) {\n                q.words[m] = 1;\n            }\n        }\n        for(var j = m - 1; j >= 0; j--){\n            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);\n            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n            // (0x7ffffff)\n            qj = Math.min(qj / bhi | 0, 0x3ffffff);\n            a._ishlnsubmul(b, qj, j);\n            while(a.negative !== 0){\n                qj--;\n                a.negative = 0;\n                a._ishlnsubmul(b, 1, j);\n                if (!a.isZero()) {\n                    a.negative ^= 1;\n                }\n            }\n            if (q) {\n                q.words[j] = qj;\n            }\n        }\n        if (q) {\n            q.strip();\n        }\n        a.strip();\n        // Denormalize\n        if (mode !== \"div\" && shift !== 0) {\n            a.iushrn(shift);\n        }\n        return {\n            div: q || null,\n            mod: a\n        };\n    };\n    // NOTE: 1) `mode` can be set to `mod` to request mod only,\n    //       to `div` to request div only, or be absent to\n    //       request both div & mod\n    //       2) `positive` is true if unsigned mod is requested\n    BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n            return {\n                div: new BN(0),\n                mod: new BN(0)\n            };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n            res = this.neg().divmod(num, mode);\n            if (mode !== \"mod\") {\n                div = res.div.neg();\n            }\n            if (mode !== \"div\") {\n                mod = res.mod.neg();\n                if (positive && mod.negative !== 0) {\n                    mod.iadd(num);\n                }\n            }\n            return {\n                div: div,\n                mod: mod\n            };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n            res = this.divmod(num.neg(), mode);\n            if (mode !== \"mod\") {\n                div = res.div.neg();\n            }\n            return {\n                div: div,\n                mod: res.mod\n            };\n        }\n        if ((this.negative & num.negative) !== 0) {\n            res = this.neg().divmod(num.neg(), mode);\n            if (mode !== \"div\") {\n                mod = res.mod.neg();\n                if (positive && mod.negative !== 0) {\n                    mod.isub(num);\n                }\n            }\n            return {\n                div: res.div,\n                mod: mod\n            };\n        }\n        // Both numbers are positive at this point\n        // Strip both numbers to approximate shift value\n        if (num.length > this.length || this.cmp(num) < 0) {\n            return {\n                div: new BN(0),\n                mod: this\n            };\n        }\n        // Very short reduction\n        if (num.length === 1) {\n            if (mode === \"div\") {\n                return {\n                    div: this.divn(num.words[0]),\n                    mod: null\n                };\n            }\n            if (mode === \"mod\") {\n                return {\n                    div: null,\n                    mod: new BN(this.modn(num.words[0]))\n                };\n            }\n            return {\n                div: this.divn(num.words[0]),\n                mod: new BN(this.modn(num.words[0]))\n            };\n        }\n        return this._wordDiv(num, mode);\n    };\n    // Find `this` / `num`\n    BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n    };\n    // Find `this` % `num`\n    BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n    };\n    BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n    };\n    // Find Round(`this` / `num`)\n    BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        // Fast case - exact division\n        if (dm.mod.isZero()) return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        // Round down\n        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n        // Round up\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n    };\n    BN.prototype.modn = function modn(num) {\n        assert(num <= 0x3ffffff);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n    };\n    // In-place division by number\n    BN.prototype.idivn = function idivn(num) {\n        assert(num <= 0x3ffffff);\n        var carry = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            var w = (this.words[i] | 0) + carry * 0x4000000;\n            this.words[i] = w / num | 0;\n            carry = w % num;\n        }\n        return this.strip();\n    };\n    BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n    };\n    BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n            x = x.umod(p);\n        } else {\n            x = x.clone();\n        }\n        // A * x + B * y = x\n        var A = new BN(1);\n        var B = new BN(0);\n        // C * x + D * y = y\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while(x.isEven() && y.isEven()){\n            x.iushrn(1);\n            y.iushrn(1);\n            ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while(!x.isZero()){\n            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n            if (i > 0) {\n                x.iushrn(i);\n                while(i-- > 0){\n                    if (A.isOdd() || B.isOdd()) {\n                        A.iadd(yp);\n                        B.isub(xp);\n                    }\n                    A.iushrn(1);\n                    B.iushrn(1);\n                }\n            }\n            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n            if (j > 0) {\n                y.iushrn(j);\n                while(j-- > 0){\n                    if (C.isOdd() || D.isOdd()) {\n                        C.iadd(yp);\n                        D.isub(xp);\n                    }\n                    C.iushrn(1);\n                    D.iushrn(1);\n                }\n            }\n            if (x.cmp(y) >= 0) {\n                x.isub(y);\n                A.isub(C);\n                B.isub(D);\n            } else {\n                y.isub(x);\n                C.isub(A);\n                D.isub(B);\n            }\n        }\n        return {\n            a: C,\n            b: D,\n            gcd: y.iushln(g)\n        };\n    };\n    // This is reduced incarnation of the binary EEA\n    // above, designated to invert members of the\n    // _prime_ fields F(p) at a maximal speed\n    BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n            a = a.umod(p);\n        } else {\n            a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){\n            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n            if (i > 0) {\n                a.iushrn(i);\n                while(i-- > 0){\n                    if (x1.isOdd()) {\n                        x1.iadd(delta);\n                    }\n                    x1.iushrn(1);\n                }\n            }\n            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n            if (j > 0) {\n                b.iushrn(j);\n                while(j-- > 0){\n                    if (x2.isOdd()) {\n                        x2.iadd(delta);\n                    }\n                    x2.iushrn(1);\n                }\n            }\n            if (a.cmp(b) >= 0) {\n                a.isub(b);\n                x1.isub(x2);\n            } else {\n                b.isub(a);\n                x2.isub(x1);\n            }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n            res = x1;\n        } else {\n            res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n            res.iadd(p);\n        }\n        return res;\n    };\n    BN.prototype.gcd = function gcd(num) {\n        if (this.isZero()) return num.abs();\n        if (num.isZero()) return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        // Remove common factor of two\n        for(var shift = 0; a.isEven() && b.isEven(); shift++){\n            a.iushrn(1);\n            b.iushrn(1);\n        }\n        do {\n            while(a.isEven()){\n                a.iushrn(1);\n            }\n            while(b.isEven()){\n                b.iushrn(1);\n            }\n            var r = a.cmp(b);\n            if (r < 0) {\n                // Swap `a` and `b` to make `a` always bigger than `b`\n                var t = a;\n                a = b;\n                b = t;\n            } else if (r === 0 || b.cmpn(1) === 0) {\n                break;\n            }\n            a.isub(b);\n        }while (true);\n        return b.iushln(shift);\n    };\n    // Invert number in the field F(num)\n    BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n    };\n    BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n    };\n    BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n    };\n    // And first word and num\n    BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n    };\n    // Increment at the bit position in-line\n    BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        // Fast case: bit is much higher than all existing words\n        if (this.length <= s) {\n            this._expand(s + 1);\n            this.words[s] |= q;\n            return this;\n        }\n        // Add bit and propagate, if needed\n        var carry = q;\n        for(var i = s; carry !== 0 && i < this.length; i++){\n            var w = this.words[i] | 0;\n            w += carry;\n            carry = w >>> 26;\n            w &= 0x3ffffff;\n            this.words[i] = w;\n        }\n        if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n        }\n        return this;\n    };\n    BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n    };\n    BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative) return -1;\n        if (this.negative === 0 && negative) return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n            res = 1;\n        } else {\n            if (negative) {\n                num = -num;\n            }\n            assert(num <= 0x3ffffff, \"Number is too big\");\n            var w = this.words[0] | 0;\n            res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0) return -res | 0;\n        return res;\n    };\n    // Compare two numbers and return:\n    // 1 - if `this` > `num`\n    // 0 - if `this` == `num`\n    // -1 - if `this` < `num`\n    BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0) return -1;\n        if (this.negative === 0 && num.negative !== 0) return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0) return -res | 0;\n        return res;\n    };\n    // Unsigned comparison\n    BN.prototype.ucmp = function ucmp(num) {\n        // At this point both numbers have the same sign\n        if (this.length > num.length) return 1;\n        if (this.length < num.length) return -1;\n        var res = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            var a = this.words[i] | 0;\n            var b = num.words[i] | 0;\n            if (a === b) continue;\n            if (a < b) {\n                res = -1;\n            } else if (a > b) {\n                res = 1;\n            }\n            break;\n        }\n        return res;\n    };\n    BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n    };\n    BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n    };\n    BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n    };\n    BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n    };\n    BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n    };\n    BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n    };\n    BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n    };\n    BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n    };\n    BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n    };\n    BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n    };\n    //\n    // A reduce context, could be using montgomery or something better, depending\n    // on the `m` itself.\n    //\n    BN.red = function red(num) {\n        return new Red(num);\n    };\n    BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n    };\n    BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n    };\n    BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n    };\n    BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n    };\n    BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n    };\n    BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n    };\n    BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n    };\n    BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n    };\n    BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n    };\n    BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n    };\n    BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n    };\n    BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n    };\n    BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n    };\n    // Square root over p\n    BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n    };\n    BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n    };\n    // Return negative clone of `this` % `red modulo`\n    BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n    };\n    BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n    };\n    // Prime numbers with efficient reduction\n    var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n    };\n    // Pseudo-Mersenne prime\n    function MPrime(name, p) {\n        // P = 2 ^ N - K\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n    }\n    MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n    };\n    MPrime.prototype.ireduce = function ireduce(num) {\n        // Assumes that `num` is less than `P^2`\n        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n        var r = num;\n        var rlen;\n        do {\n            this.split(r, this.tmp);\n            r = this.imulK(r);\n            r = r.iadd(this.tmp);\n            rlen = r.bitLength();\n        }while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n            r.words[0] = 0;\n            r.length = 1;\n        } else if (cmp > 0) {\n            r.isub(this.p);\n        } else {\n            if (r.strip !== undefined) {\n                // r is BN v4 instance\n                r.strip();\n            } else {\n                // r is BN v5 instance\n                r._strip();\n            }\n        }\n        return r;\n    };\n    MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n    };\n    MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n    };\n    function K256() {\n        MPrime.call(this, \"k256\", \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\");\n    }\n    inherits(K256, MPrime);\n    K256.prototype.split = function split(input, output) {\n        // 256 = 9 * 26 + 22\n        var mask = 0x3fffff;\n        var outLen = Math.min(input.length, 9);\n        for(var i = 0; i < outLen; i++){\n            output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n            input.words[0] = 0;\n            input.length = 1;\n            return;\n        }\n        // Shift by 9 limbs\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for(i = 10; i < input.length; i++){\n            var next = input.words[i] | 0;\n            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n            prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n            input.length -= 10;\n        } else {\n            input.length -= 9;\n        }\n    };\n    K256.prototype.imulK = function imulK(num) {\n        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n        var lo = 0;\n        for(var i = 0; i < num.length; i++){\n            var w = num.words[i] | 0;\n            lo += w * 0x3d1;\n            num.words[i] = lo & 0x3ffffff;\n            lo = w * 0x40 + (lo / 0x4000000 | 0);\n        }\n        // Fast length reduction\n        if (num.words[num.length - 1] === 0) {\n            num.length--;\n            if (num.words[num.length - 1] === 0) {\n                num.length--;\n            }\n        }\n        return num;\n    };\n    function P224() {\n        MPrime.call(this, \"p224\", \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\");\n    }\n    inherits(P224, MPrime);\n    function P192() {\n        MPrime.call(this, \"p192\", \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\");\n    }\n    inherits(P192, MPrime);\n    function P25519() {\n        // 2 ^ 255 - 19\n        MPrime.call(this, \"25519\", \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\");\n    }\n    inherits(P25519, MPrime);\n    P25519.prototype.imulK = function imulK(num) {\n        // K = 0x13\n        var carry = 0;\n        for(var i = 0; i < num.length; i++){\n            var hi = (num.words[i] | 0) * 0x13 + carry;\n            var lo = hi & 0x3ffffff;\n            hi >>>= 26;\n            num.words[i] = lo;\n            carry = hi;\n        }\n        if (carry !== 0) {\n            num.words[num.length++] = carry;\n        }\n        return num;\n    };\n    // Exported mostly for testing purposes, use plain name instead\n    BN._prime = function prime(name) {\n        // Cached version of prime\n        if (primes[name]) return primes[name];\n        var prime;\n        if (name === \"k256\") {\n            prime = new K256();\n        } else if (name === \"p224\") {\n            prime = new P224();\n        } else if (name === \"p192\") {\n            prime = new P192();\n        } else if (name === \"p25519\") {\n            prime = new P25519();\n        } else {\n            throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime;\n        return prime;\n    };\n    //\n    // Base reduction engine\n    //\n    function Red(m) {\n        if (typeof m === \"string\") {\n            var prime = BN._prime(m);\n            this.m = prime.p;\n            this.prime = prime;\n        } else {\n            assert(m.gtn(1), \"modulus must be greater than 1\");\n            this.m = m;\n            this.prime = null;\n        }\n    }\n    Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n    };\n    Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(a.red && a.red === b.red, \"red works only with red numbers\");\n    };\n    Red.prototype.imod = function imod(a) {\n        if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n    };\n    Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n            return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n    };\n    Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res;\n    };\n    Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res;\n    };\n    Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n    };\n    Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n    };\n    Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n    };\n    Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n    };\n    Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n    };\n    Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero()) return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        // Fast case\n        if (mod3 === 3) {\n            var pow = this.m.add(new BN(1)).iushrn(2);\n            return this.pow(a, pow);\n        }\n        // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n        //\n        // Find Q and S, that Q * 2 ^ S = (P - 1)\n        var q = this.m.subn(1);\n        var s = 0;\n        while(!q.isZero() && q.andln(1) === 0){\n            s++;\n            q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        // Find quadratic non-residue\n        // NOTE: Max is such because of generalized Riemann hypothesis.\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while(this.pow(z, lpow).cmp(nOne) !== 0){\n            z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while(t.cmp(one) !== 0){\n            var tmp = t;\n            for(var i = 0; tmp.cmp(one) !== 0; i++){\n                tmp = tmp.redSqr();\n            }\n            assert(i < m);\n            var b = this.pow(c, new BN(1).iushln(m - i - 1));\n            r = r.redMul(b);\n            c = b.redSqr();\n            t = t.redMul(c);\n            m = i;\n        }\n        return r;\n    };\n    Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n            inv.negative = 0;\n            return this.imod(inv).redNeg();\n        } else {\n            return this.imod(inv);\n        }\n    };\n    Red.prototype.pow = function pow(a, num) {\n        if (num.isZero()) return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0) return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for(var i = 2; i < wnd.length; i++){\n            wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n            start = 26;\n        }\n        for(i = num.length - 1; i >= 0; i--){\n            var word = num.words[i];\n            for(var j = start - 1; j >= 0; j--){\n                var bit = word >> j & 1;\n                if (res !== wnd[0]) {\n                    res = this.sqr(res);\n                }\n                if (bit === 0 && current === 0) {\n                    currentLen = 0;\n                    continue;\n                }\n                current <<= 1;\n                current |= bit;\n                currentLen++;\n                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n                res = this.mul(res, wnd[current]);\n                currentLen = 0;\n                current = 0;\n            }\n            start = 26;\n        }\n        return res;\n    };\n    Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n    };\n    Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n    };\n    //\n    // Montgomery method engine\n    //\n    BN.mont = function mont(num) {\n        return new Mont(num);\n    };\n    function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n            this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n    }\n    inherits(Mont, Red);\n    Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n    };\n    Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n    };\n    Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n            a.words[0] = 0;\n            a.length = 1;\n            return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Mont.prototype.invm = function invm(a) {\n        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n    };\n})( false || module, this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/elliptic/node_modules/bn.js/lib/bn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar R = typeof Reflect === \"object\" ? Reflect : null;\nvar ReflectApply = R && typeof R.apply === \"function\" ? R.apply : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n};\nvar ReflectOwnKeys;\nif (R && typeof R.ownKeys === \"function\") {\n    ReflectOwnKeys = R.ownKeys;\n} else if (Object.getOwnPropertySymbols) {\n    ReflectOwnKeys = function ReflectOwnKeys(target) {\n        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n    };\n} else {\n    ReflectOwnKeys = function ReflectOwnKeys(target) {\n        return Object.getOwnPropertyNames(target);\n    };\n}\nfunction ProcessEmitWarning(warning) {\n    if (console && console.warn) console.warn(warning);\n}\n_c = ProcessEmitWarning;\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n    return value !== value;\n};\nfunction EventEmitter() {\n    EventEmitter.init.call(this);\n}\n_c1 = EventEmitter;\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\nfunction checkListener(listener) {\n    if (typeof listener !== \"function\") {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n    }\n}\nObject.defineProperty(EventEmitter, \"defaultMaxListeners\", {\n    enumerable: true,\n    get: function() {\n        return defaultMaxListeners;\n    },\n    set: function(arg) {\n        if (typeof arg !== \"number\" || arg < 0 || NumberIsNaN(arg)) {\n            throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + \".\");\n        }\n        defaultMaxListeners = arg;\n    }\n});\nEventEmitter.init = function() {\n    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n    }\n    this._maxListeners = this._maxListeners || undefined;\n};\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n    if (typeof n !== \"number\" || n < 0 || NumberIsNaN(n)) {\n        throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + \".\");\n    }\n    this._maxListeners = n;\n    return this;\n};\nfunction _getMaxListeners(that) {\n    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;\n    return that._maxListeners;\n}\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n    return _getMaxListeners(this);\n};\nEventEmitter.prototype.emit = function emit(type) {\n    var args = [];\n    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);\n    var doError = type === \"error\";\n    var events = this._events;\n    if (events !== undefined) doError = doError && events.error === undefined;\n    else if (!doError) return false;\n    // If there is no 'error' event listener then throw.\n    if (doError) {\n        var er;\n        if (args.length > 0) er = args[0];\n        if (er instanceof Error) {\n            // Note: The comments on the `throw` lines are intentional, they show\n            // up in Node's output if this results in an unhandled exception.\n            throw er; // Unhandled 'error' event\n        }\n        // At least give some kind of context to the user\n        var err = new Error(\"Unhandled error.\" + (er ? \" (\" + er.message + \")\" : \"\"));\n        err.context = er;\n        throw err; // Unhandled 'error' event\n    }\n    var handler = events[type];\n    if (handler === undefined) return false;\n    if (typeof handler === \"function\") {\n        ReflectApply(handler, this, args);\n    } else {\n        var len = handler.length;\n        var listeners = arrayClone(handler, len);\n        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);\n    }\n    return true;\n};\nfunction _addListener(target, type, listener, prepend) {\n    var m;\n    var events;\n    var existing;\n    checkListener(listener);\n    events = target._events;\n    if (events === undefined) {\n        events = target._events = Object.create(null);\n        target._eventsCount = 0;\n    } else {\n        // To avoid recursion in the case that type === \"newListener\"! Before\n        // adding it to the listeners, first emit \"newListener\".\n        if (events.newListener !== undefined) {\n            target.emit(\"newListener\", type, listener.listener ? listener.listener : listener);\n            // Re-assign `events` because a newListener handler could have caused the\n            // this._events to be assigned to a new object\n            events = target._events;\n        }\n        existing = events[type];\n    }\n    if (existing === undefined) {\n        // Optimize the case of one listener. Don't need the extra array object.\n        existing = events[type] = listener;\n        ++target._eventsCount;\n    } else {\n        if (typeof existing === \"function\") {\n            // Adding the second element, need to change to array.\n            existing = events[type] = prepend ? [\n                listener,\n                existing\n            ] : [\n                existing,\n                listener\n            ];\n        // If we've already got an array, just append.\n        } else if (prepend) {\n            existing.unshift(listener);\n        } else {\n            existing.push(listener);\n        }\n        // Check for listener leak\n        m = _getMaxListeners(target);\n        if (m > 0 && existing.length > m && !existing.warned) {\n            existing.warned = true;\n            // No error code for this since it is a Warning\n            // eslint-disable-next-line no-restricted-syntax\n            var w = new Error(\"Possible EventEmitter memory leak detected. \" + existing.length + \" \" + String(type) + \" listeners \" + \"added. Use emitter.setMaxListeners() to \" + \"increase limit\");\n            w.name = \"MaxListenersExceededWarning\";\n            w.emitter = target;\n            w.type = type;\n            w.count = existing.length;\n            ProcessEmitWarning(w);\n        }\n    }\n    return target;\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n    return _addListener(this, type, listener, false);\n};\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\nEventEmitter.prototype.prependListener = function prependListener(type, listener) {\n    return _addListener(this, type, listener, true);\n};\nfunction onceWrapper() {\n    if (!this.fired) {\n        this.target.removeListener(this.type, this.wrapFn);\n        this.fired = true;\n        if (arguments.length === 0) return this.listener.call(this.target);\n        return this.listener.apply(this.target, arguments);\n    }\n}\nfunction _onceWrap(target, type, listener) {\n    var state = {\n        fired: false,\n        wrapFn: undefined,\n        target: target,\n        type: type,\n        listener: listener\n    };\n    var wrapped = onceWrapper.bind(state);\n    wrapped.listener = listener;\n    state.wrapFn = wrapped;\n    return wrapped;\n}\nEventEmitter.prototype.once = function once(type, listener) {\n    checkListener(listener);\n    this.on(type, _onceWrap(this, type, listener));\n    return this;\n};\nEventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n    checkListener(listener);\n    this.prependListener(type, _onceWrap(this, type, listener));\n    return this;\n};\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener = function removeListener(type, listener) {\n    var list, events, position, i, originalListener;\n    checkListener(listener);\n    events = this._events;\n    if (events === undefined) return this;\n    list = events[type];\n    if (list === undefined) return this;\n    if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0) this._events = Object.create(null);\n        else {\n            delete events[type];\n            if (events.removeListener) this.emit(\"removeListener\", type, list.listener || listener);\n        }\n    } else if (typeof list !== \"function\") {\n        position = -1;\n        for(i = list.length - 1; i >= 0; i--){\n            if (list[i] === listener || list[i].listener === listener) {\n                originalListener = list[i].listener;\n                position = i;\n                break;\n            }\n        }\n        if (position < 0) return this;\n        if (position === 0) list.shift();\n        else {\n            spliceOne(list, position);\n        }\n        if (list.length === 1) events[type] = list[0];\n        if (events.removeListener !== undefined) this.emit(\"removeListener\", type, originalListener || listener);\n    }\n    return this;\n};\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n    var listeners, events, i;\n    events = this._events;\n    if (events === undefined) return this;\n    // not listening for removeListener, no need to emit\n    if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n            this._events = Object.create(null);\n            this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n            if (--this._eventsCount === 0) this._events = Object.create(null);\n            else delete events[type];\n        }\n        return this;\n    }\n    // emit removeListener for all listeners on all events\n    if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for(i = 0; i < keys.length; ++i){\n            key = keys[i];\n            if (key === \"removeListener\") continue;\n            this.removeAllListeners(key);\n        }\n        this.removeAllListeners(\"removeListener\");\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n    }\n    listeners = events[type];\n    if (typeof listeners === \"function\") {\n        this.removeListener(type, listeners);\n    } else if (listeners !== undefined) {\n        // LIFO order\n        for(i = listeners.length - 1; i >= 0; i--){\n            this.removeListener(type, listeners[i]);\n        }\n    }\n    return this;\n};\nfunction _listeners(target, type, unwrap) {\n    var events = target._events;\n    if (events === undefined) return [];\n    var evlistener = events[type];\n    if (evlistener === undefined) return [];\n    if (typeof evlistener === \"function\") return unwrap ? [\n        evlistener.listener || evlistener\n    ] : [\n        evlistener\n    ];\n    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\nEventEmitter.prototype.listeners = function listeners(type) {\n    return _listeners(this, type, true);\n};\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n    return _listeners(this, type, false);\n};\nEventEmitter.listenerCount = function(emitter, type) {\n    if (typeof emitter.listenerCount === \"function\") {\n        return emitter.listenerCount(type);\n    } else {\n        return listenerCount.call(emitter, type);\n    }\n};\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n    var events = this._events;\n    if (events !== undefined) {\n        var evlistener = events[type];\n        if (typeof evlistener === \"function\") {\n            return 1;\n        } else if (evlistener !== undefined) {\n            return evlistener.length;\n        }\n    }\n    return 0;\n}\nEventEmitter.prototype.eventNames = function eventNames() {\n    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\nfunction arrayClone(arr, n) {\n    var copy = new Array(n);\n    for(var i = 0; i < n; ++i)copy[i] = arr[i];\n    return copy;\n}\nfunction spliceOne(list, index) {\n    for(; index + 1 < list.length; index++)list[index] = list[index + 1];\n    list.pop();\n}\nfunction unwrapListeners(arr) {\n    var ret = new Array(arr.length);\n    for(var i = 0; i < ret.length; ++i){\n        ret[i] = arr[i].listener || arr[i];\n    }\n    return ret;\n}\nfunction once(emitter, name) {\n    return new Promise(function(resolve, reject) {\n        function errorListener(err) {\n            emitter.removeListener(name, resolver);\n            reject(err);\n        }\n        function resolver() {\n            if (typeof emitter.removeListener === \"function\") {\n                emitter.removeListener(\"error\", errorListener);\n            }\n            resolve([].slice.call(arguments));\n        }\n        ;\n        eventTargetAgnosticAddListener(emitter, name, resolver, {\n            once: true\n        });\n        if (name !== \"error\") {\n            addErrorHandlerIfEventEmitter(emitter, errorListener, {\n                once: true\n            });\n        }\n    });\n}\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n    if (typeof emitter.on === \"function\") {\n        eventTargetAgnosticAddListener(emitter, \"error\", handler, flags);\n    }\n}\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n    if (typeof emitter.on === \"function\") {\n        if (flags.once) {\n            emitter.once(name, listener);\n        } else {\n            emitter.on(name, listener);\n        }\n    } else if (typeof emitter.addEventListener === \"function\") {\n        // EventTarget does not have `error` event semantics like Node\n        // EventEmitters, we do not listen for `error` events here.\n        emitter.addEventListener(name, function wrapListener(arg) {\n            // IE does not have builtin `{ once: true }` support so we\n            // have to do it manually.\n            if (flags.once) {\n                emitter.removeEventListener(name, wrapListener);\n            }\n            listener(arg);\n        });\n    } else {\n        throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n    }\n}\nvar _c, _c1;\n$RefreshReg$(_c, \"ProcessEmitWarning\");\n$RefreshReg$(_c1, \"EventEmitter\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/events/events.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash.js":
/*!******************************************!*\
  !*** ./node_modules/hash.js/lib/hash.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var hash = exports;\nhash.utils = __webpack_require__(/*! ./hash/utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nhash.common = __webpack_require__(/*! ./hash/common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nhash.sha = __webpack_require__(/*! ./hash/sha */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha.js\");\nhash.ripemd = __webpack_require__(/*! ./hash/ripemd */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/ripemd.js\");\nhash.hmac = __webpack_require__(/*! ./hash/hmac */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/hmac.js\");\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU9DO0FBRVhELEtBQUtFLEtBQUssR0FBR0MsbUJBQU9BLENBQUM7QUFDckJILEtBQUtJLE1BQU0sR0FBR0QsbUJBQU9BLENBQUM7QUFDdEJILEtBQUtLLEdBQUcsR0FBR0YsbUJBQU9BLENBQUM7QUFDbkJILEtBQUtNLE1BQU0sR0FBR0gsbUJBQU9BLENBQUM7QUFDdEJILEtBQUtPLElBQUksR0FBR0osbUJBQU9BLENBQUM7QUFFcEIsMENBQTBDO0FBQzFDSCxLQUFLUSxJQUFJLEdBQUdSLEtBQUtLLEdBQUcsQ0FBQ0csSUFBSTtBQUN6QlIsS0FBS1MsTUFBTSxHQUFHVCxLQUFLSyxHQUFHLENBQUNJLE1BQU07QUFDN0JULEtBQUtVLE1BQU0sR0FBR1YsS0FBS0ssR0FBRyxDQUFDSyxNQUFNO0FBQzdCVixLQUFLVyxNQUFNLEdBQUdYLEtBQUtLLEdBQUcsQ0FBQ00sTUFBTTtBQUM3QlgsS0FBS1ksTUFBTSxHQUFHWixLQUFLSyxHQUFHLENBQUNPLE1BQU07QUFDN0JaLEtBQUthLFNBQVMsR0FBR2IsS0FBS00sTUFBTSxDQUFDTyxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzPzE2YTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGhhc2ggPSBleHBvcnRzO1xuXG5oYXNoLnV0aWxzID0gcmVxdWlyZSgnLi9oYXNoL3V0aWxzJyk7XG5oYXNoLmNvbW1vbiA9IHJlcXVpcmUoJy4vaGFzaC9jb21tb24nKTtcbmhhc2guc2hhID0gcmVxdWlyZSgnLi9oYXNoL3NoYScpO1xuaGFzaC5yaXBlbWQgPSByZXF1aXJlKCcuL2hhc2gvcmlwZW1kJyk7XG5oYXNoLmhtYWMgPSByZXF1aXJlKCcuL2hhc2gvaG1hYycpO1xuXG4vLyBQcm94eSBoYXNoIGZ1bmN0aW9ucyB0byB0aGUgbWFpbiBvYmplY3Rcbmhhc2guc2hhMSA9IGhhc2guc2hhLnNoYTE7XG5oYXNoLnNoYTI1NiA9IGhhc2guc2hhLnNoYTI1Njtcbmhhc2guc2hhMjI0ID0gaGFzaC5zaGEuc2hhMjI0O1xuaGFzaC5zaGEzODQgPSBoYXNoLnNoYS5zaGEzODQ7XG5oYXNoLnNoYTUxMiA9IGhhc2guc2hhLnNoYTUxMjtcbmhhc2gucmlwZW1kMTYwID0gaGFzaC5yaXBlbWQucmlwZW1kMTYwO1xuIl0sIm5hbWVzIjpbImhhc2giLCJleHBvcnRzIiwidXRpbHMiLCJyZXF1aXJlIiwiY29tbW9uIiwic2hhIiwicmlwZW1kIiwiaG1hYyIsInNoYTEiLCJzaGEyNTYiLCJzaGEyMjQiLCJzaGEzODQiLCJzaGE1MTIiLCJyaXBlbWQxNjAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/common.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nfunction BlockHash() {\n    this.pending = null;\n    this.pendingTotal = 0;\n    this.blockSize = this.constructor.blockSize;\n    this.outSize = this.constructor.outSize;\n    this.hmacStrength = this.constructor.hmacStrength;\n    this.padLength = this.constructor.padLength / 8;\n    this.endian = \"big\";\n    this._delta8 = this.blockSize / 8;\n    this._delta32 = this.blockSize / 32;\n}\n_c = BlockHash;\nexports.BlockHash = BlockHash;\nBlockHash.prototype.update = function update(msg, enc) {\n    // Convert message to array, pad it, and join into 32bit blocks\n    msg = utils.toArray(msg, enc);\n    if (!this.pending) this.pending = msg;\n    else this.pending = this.pending.concat(msg);\n    this.pendingTotal += msg.length;\n    // Enough data, try updating\n    if (this.pending.length >= this._delta8) {\n        msg = this.pending;\n        // Process pending data in blocks\n        var r = msg.length % this._delta8;\n        this.pending = msg.slice(msg.length - r, msg.length);\n        if (this.pending.length === 0) this.pending = null;\n        msg = utils.join32(msg, 0, msg.length - r, this.endian);\n        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);\n    }\n    return this;\n};\nBlockHash.prototype.digest = function digest(enc) {\n    this.update(this._pad());\n    assert(this.pending === null);\n    return this._digest(enc);\n};\nBlockHash.prototype._pad = function pad() {\n    var len = this.pendingTotal;\n    var bytes = this._delta8;\n    var k = bytes - (len + this.padLength) % bytes;\n    var res = new Array(k + this.padLength);\n    res[0] = 0x80;\n    for(var i = 1; i < k; i++)res[i] = 0;\n    // Append length\n    len <<= 3;\n    if (this.endian === \"big\") {\n        for(var t = 8; t < this.padLength; t++)res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = len >>> 24 & 0xff;\n        res[i++] = len >>> 16 & 0xff;\n        res[i++] = len >>> 8 & 0xff;\n        res[i++] = len & 0xff;\n    } else {\n        res[i++] = len & 0xff;\n        res[i++] = len >>> 8 & 0xff;\n        res[i++] = len >>> 16 & 0xff;\n        res[i++] = len >>> 24 & 0xff;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        for(t = 8; t < this.padLength; t++)res[i++] = 0;\n    }\n    return res;\n};\nvar _c;\n$RefreshReg$(_c, \"BlockHash\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDO0FBRXJCLFNBQVNFO0lBQ1AsSUFBSSxDQUFDQyxPQUFPLEdBQUc7SUFDZixJQUFJLENBQUNDLFlBQVksR0FBRztJQUNwQixJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUNDLFdBQVcsQ0FBQ0QsU0FBUztJQUMzQyxJQUFJLENBQUNFLE9BQU8sR0FBRyxJQUFJLENBQUNELFdBQVcsQ0FBQ0MsT0FBTztJQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJLENBQUNGLFdBQVcsQ0FBQ0UsWUFBWTtJQUNqRCxJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUNILFdBQVcsQ0FBQ0csU0FBUyxHQUFHO0lBQzlDLElBQUksQ0FBQ0MsTUFBTSxHQUFHO0lBRWQsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSSxDQUFDTixTQUFTLEdBQUc7SUFDaEMsSUFBSSxDQUFDTyxRQUFRLEdBQUcsSUFBSSxDQUFDUCxTQUFTLEdBQUc7QUFDbkM7S0FYU0g7QUFZVFcsaUJBQWlCLEdBQUdYO0FBRXBCQSxVQUFVWSxTQUFTLENBQUNDLE1BQU0sR0FBRyxTQUFTQSxPQUFPQyxHQUFHLEVBQUVDLEdBQUc7SUFDbkQsK0RBQStEO0lBQy9ERCxNQUFNakIsTUFBTW1CLE9BQU8sQ0FBQ0YsS0FBS0M7SUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQ2QsT0FBTyxFQUNmLElBQUksQ0FBQ0EsT0FBTyxHQUFHYTtTQUVmLElBQUksQ0FBQ2IsT0FBTyxHQUFHLElBQUksQ0FBQ0EsT0FBTyxDQUFDZ0IsTUFBTSxDQUFDSDtJQUNyQyxJQUFJLENBQUNaLFlBQVksSUFBSVksSUFBSUksTUFBTTtJQUUvQiw0QkFBNEI7SUFDNUIsSUFBSSxJQUFJLENB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azovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanM/ZDM2MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEJsb2NrSGFzaCgpIHtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nVG90YWwgPSAwO1xuICB0aGlzLmJsb2NrU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuYmxvY2tTaXplO1xuICB0aGlzLm91dFNpemUgPSB0aGlzLmNvbnN0cnVjdG9yLm91dFNpemU7XG4gIHRoaXMuaG1hY1N0cmVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGg7XG4gIHRoaXMucGFkTGVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5wYWRMZW5ndGggLyA4O1xuICB0aGlzLmVuZGlhbiA9ICdiaWcnO1xuXG4gIHRoaXMuX2RlbHRhOCA9IHRoaXMuYmxvY2tTaXplIC8gODtcbiAgdGhpcy5fZGVsdGEzMiA9IHRoaXMuYmxvY2tTaXplIC8gMzI7XG59XG5leHBvcnRzLkJsb2NrSGFzaCA9IEJsb2NrSGFzaDtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgLy8gQ29udmVydCBtZXNzYWdlIHRvIGFycmF5LCBwYWQgaXQsIGFuZCBqb2luIGludG8gMzJiaXQgYmxvY2tzXG4gIG1zZyA9IHV0aWxzLnRvQXJyYXkobXNnLCBlbmMpO1xuICBpZiAoIXRoaXMucGVuZGluZylcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2c7XG4gIGVsc2VcbiAgICB0aGlzLnBlbmRpbmcgPSB0aGlzLnBlbmRpbmcuY29uY2F0KG1zZyk7XG4gIHRoaXMucGVuZGluZ1RvdGFsICs9IG1zZy5sZW5ndGg7XG5cbiAgLy8gRW5vdWdoIGRhdGEsIHRyeSB1cGRhdGluZ1xuICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA+PSB0aGlzLl9kZWx0YTgpIHtcbiAgICBtc2cgPSB0aGlzLnBlbmRpbmc7XG5cbiAgICAvLyBQcm9jZXNzIHBlbmRpbmcgZGF0YSBpbiBibG9ja3NcbiAgICB2YXIgciA9IG1zZy5sZW5ndGggJSB0aGlzLl9kZWx0YTg7XG4gICAgdGhpcy5wZW5kaW5nID0gbXNnLnNsaWNlKG1zZy5sZW5ndGggLSByLCBtc2cubGVuZ3RoKTtcbiAgICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMucGVuZGluZyA9IG51bGw7XG5cbiAgICBtc2cgPSB1dGlscy5qb2luMzIobXNnLCAwLCBtc2cubGVuZ3RoIC0gciwgdGhpcy5lbmRpYW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSB0aGlzLl9kZWx0YTMyKVxuICAgICAgdGhpcy5fdXBkYXRlKG1zZywgaSwgaSArIHRoaXMuX2RlbHRhMzIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy51cGRhdGUodGhpcy5fcGFkKCkpO1xuICBhc3NlcnQodGhpcy5wZW5kaW5nID09PSBudWxsKTtcblxuICByZXR1cm4gdGhpcy5fZGlnZXN0KGVuYyk7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlvbiBwYWQoKSB7XG4gIHZhciBsZW4gPSB0aGlzLnBlbmRpbmdUb3RhbDtcbiAgdmFyIGJ5dGVzID0gdGhpcy5fZGVsdGE4O1xuICB2YXIgayA9IGJ5dGVzIC0gKChsZW4gKyB0aGlzLnBhZExlbmd0aCkgJSBieXRlcyk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkoayArIHRoaXMucGFkTGVuZ3RoKTtcbiAgcmVzWzBdID0gMHg4MDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBrOyBpKyspXG4gICAgcmVzW2ldID0gMDtcblxuICAvLyBBcHBlbmQgbGVuZ3RoXG4gIGxlbiA8PD0gMztcbiAgaWYgKHRoaXMuZW5kaWFuID09PSAnYmlnJykge1xuICAgIGZvciAodmFyIHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcblxuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDI0KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gOCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgfSBlbHNlIHtcbiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG5cbiAgICBmb3IgKHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImFzc2VydCIsIkJsb2NrSGFzaCIsInBlbmRpbmciLCJwZW5kaW5nVG90YWwiLCJibG9ja1NpemUiLCJjb25zdHJ1Y3RvciIsIm91dFNpemUiLCJobWFjU3RyZW5ndGgiLCJwYWRMZW5ndGgiLCJlbmRpYW4iLCJfZGVsdGE4IiwiX2RlbHRhMzIiLCJleHBvcnRzIiwicHJvdG90eXBlIiwidXBkYXRlIiwibXNnIiwiZW5jIiwidG9BcnJheSIsImNvbmNhdCIsImxlbmd0aCIsInIiLCJzbGljZSIsImpvaW4zMiIsImkiLCJfdXBkYXRlIiwiZGlnZXN0IiwiX3BhZCIsIl9kaWdlc3QiLCJwYWQiLCJsZW4iLCJieXRlcyIsImsiLCJyZXMiLCJBcnJheSIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/hmac.js":
/*!***********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/hmac.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nfunction Hmac(hash, key, enc) {\n    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n    this.Hash = hash;\n    this.blockSize = hash.blockSize / 8;\n    this.outSize = hash.outSize / 8;\n    this.inner = null;\n    this.outer = null;\n    this._init(utils.toArray(key, enc));\n}\n_c = Hmac;\nmodule.exports = Hmac;\nHmac.prototype._init = function init(key) {\n    // Shorten key, if needed\n    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n    assert(key.length <= this.blockSize);\n    // Add padding to key\n    for(var i = key.length; i < this.blockSize; i++)key.push(0);\n    for(i = 0; i < key.length; i++)key[i] ^= 0x36;\n    this.inner = new this.Hash().update(key);\n    // 0x36 ^ 0x5c = 0x6a\n    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;\n    this.outer = new this.Hash().update(key);\n};\nHmac.prototype.update = function update(msg, enc) {\n    this.inner.update(msg, enc);\n    return this;\n};\nHmac.prototype.digest = function digest(enc) {\n    this.outer.update(this.inner.digest());\n    return this.outer.digest(enc);\n};\nvar _c;\n$RefreshReg$(_c, \"Hmac\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2htYWMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUVyQixTQUFTRSxLQUFLQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsR0FBRztJQUMxQixJQUFJLENBQUUsS0FBSSxZQUFZSCxJQUFHLEdBQ3ZCLE9BQU8sSUFBSUEsS0FBS0MsTUFBTUMsS0FBS0M7SUFDN0IsSUFBSSxDQUFDQyxJQUFJLEdBQUdIO0lBQ1osSUFBSSxDQUFDSSxTQUFTLEdBQUdKLEtBQUtJLFNBQVMsR0FBRztJQUNsQyxJQUFJLENBQUNDLE9BQU8sR0FBR0wsS0FBS0ssT0FBTyxHQUFHO0lBQzlCLElBQUksQ0FBQ0MsS0FBSyxHQUFHO0lBQ2IsSUFBSSxDQUFDQyxLQUFLLEdBQUc7SUFFYixJQUFJLENBQUNDLEtBQUssQ0FBQ1osTUFBTWEsT0FBTyxDQUFDUixLQUFLQztBQUNoQztLQVZTSDtBQVdUVyxPQUFPQyxPQUFPLEdBQUdaO0FBRWpCQSxLQUFLYSxTQUFTLENBQUNKLEtBQUssR0FBRyxTQUFTSyxLQUFLWixHQUFHO0lBQ3RDLHlCQUF5QjtJQUN6QixJQUFJQSxJQUFJYSxNQUFNLEdBQUcsSUFBSSxDQUFDVixTQUFTLEVBQzdCSCxNQUFNLElBQUksSUFBSSxDQUFDRSxJQUFJLEdBQUdZLE1BQU0sQ0FBQ2QsS0FBS2UsTUFBTTtJQUMxQ2xCLE9BQU9HLElBQUlhLE1BQU0sSUFBSSxJQUFJLENBQUNWLFNBQVM7SUFFbkMscUJBQXFCO0lBQ3JCLElBQUssSUFBSWEsSUFBSWhCLElBQUlhLE1BQU0sRUFBRUcsSUFBSSxJQUFJLENBQUNiLFNBQVMsRUFBRWEsSUFDM0NoQixJQUFJaUIsSUFBSSxDQUFDO0lBRVgsSUFBS0QsSUFBSSxHQUFHQSxJQUFJaEIsSUFBSWEsTUFBTSxFQUFFRyxJQUMxQmhCLEdBQUcsQ0FBQ2dCLEVBQUUsSUFBSTtJQUNaLElBQUksQ0FBQ1gsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDSCxJQUFJLEdBQUdZLE1BQU0sQ0FBQ2Q7SUFFcEMscUJBQXFCO0lBQ3JCLElBQUtnQixJQUFJLEdBQUdBLElBQUloQixJQUFJYSxNQUFNLEVBQUVHLElBQzFCaEIsR0FBRyxDQUFDZ0IsRUFBRSxJQUFJO0lBQ1osSUFBSSxDQUFDVixLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUNKLElBQUksR0FBR1ksTUFBTSxDQUFDZDtBQUN0QztBQUVBRixLQUFLYSxTQUFTLENBQUNHLE1BQU0sR0FBRyxTQUFTQSxPQUFPSSxHQUFHLEVBQUVqQixHQUFHO0lBQzlDLElBQUksQ0FBQ0ksS0FBSyxDQUFDUyxNQUFNLENBQUNJLEtBQUtqQjtJQUN2QixPQUFPLElBQUk7QUFDYjtBQUVBSCxLQUFLYSxTQUFTLENBQUNJLE1BQU0sR0FBRyxTQUFTQSxPQUFPZCxHQUFHO0lBQ3pDLElBQUksQ0FBQ0ssS0FBSyxDQUFDUSxNQUFNLENBQUMsSUFBSSxDQUFDVCxLQUFLLENBQUNVLE1BQU07SUFDbkMsT0FBTyxJQUFJLENBQUNULEtBQUssQ0FBQ1MsTUFBTSxDQUFDZDtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9obWFjLmpzPzg5ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBIbWFjKGhhc2gsIGtleSwgZW5jKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBIbWFjKSlcbiAgICByZXR1cm4gbmV3IEhtYWMoaGFzaCwga2V5LCBlbmMpO1xuICB0aGlzLkhhc2ggPSBoYXNoO1xuICB0aGlzLmJsb2NrU2l6ZSA9IGhhc2guYmxvY2tTaXplIC8gODtcbiAgdGhpcy5vdXRTaXplID0gaGFzaC5vdXRTaXplIC8gODtcbiAgdGhpcy5pbm5lciA9IG51bGw7XG4gIHRoaXMub3V0ZXIgPSBudWxsO1xuXG4gIHRoaXMuX2luaXQodXRpbHMudG9BcnJheShrZXksIGVuYykpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjO1xuXG5IbWFjLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoa2V5KSB7XG4gIC8vIFNob3J0ZW4ga2V5LCBpZiBuZWVkZWRcbiAgaWYgKGtleS5sZW5ndGggPiB0aGlzLmJsb2NrU2l6ZSlcbiAgICBrZXkgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSkuZGlnZXN0KCk7XG4gIGFzc2VydChrZXkubGVuZ3RoIDw9IHRoaXMuYmxvY2tTaXplKTtcblxuICAvLyBBZGQgcGFkZGluZyB0byBrZXlcbiAgZm9yICh2YXIgaSA9IGtleS5sZW5ndGg7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgIGtleS5wdXNoKDApO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4MzY7XG4gIHRoaXMuaW5uZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG5cbiAgLy8gMHgzNiBeIDB4NWMgPSAweDZhXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4NmE7XG4gIHRoaXMub3V0ZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG59O1xuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgdGhpcy5pbm5lci51cGRhdGUobXNnLCBlbmMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5pbm5lci5kaWdlc3QoKSk7XG4gIHJldHVybiB0aGlzLm91dGVyLmRpZ2VzdChlbmMpO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJhc3NlcnQiLCJIbWFjIiwiaGFzaCIsImtleSIsImVuYyIsIkhhc2giLCJibG9ja1NpemUiLCJvdXRTaXplIiwiaW5uZXIiLCJvdXRlciIsIl9pbml0IiwidG9BcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJpbml0IiwibGVuZ3RoIiwidXBkYXRlIiwiZGlnZXN0IiwiaSIsInB1c2giLCJtc2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/hmac.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/ripemd.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/ripemd.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ./common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\nfunction RIPEMD160() {\n    if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n    BlockHash.call(this);\n    this.h = [\n        0x67452301,\n        0xefcdab89,\n        0x98badcfe,\n        0x10325476,\n        0xc3d2e1f0\n    ];\n    this.endian = \"little\";\n}\n_c = RIPEMD160;\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\nRIPEMD160.prototype._update = function update(msg, start) {\n    var A = this.h[0];\n    var B = this.h[1];\n    var C = this.h[2];\n    var D = this.h[3];\n    var E = this.h[4];\n    var Ah = A;\n    var Bh = B;\n    var Ch = C;\n    var Dh = D;\n    var Eh = E;\n    for(var j = 0; j < 80; j++){\n        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n        A = E;\n        E = D;\n        D = rotl32(C, 10);\n        C = B;\n        B = T;\n        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n        Ah = Eh;\n        Eh = Dh;\n        Dh = rotl32(Ch, 10);\n        Ch = Bh;\n        Bh = T;\n    }\n    T = sum32_3(this.h[1], C, Dh);\n    this.h[1] = sum32_3(this.h[2], D, Eh);\n    this.h[2] = sum32_3(this.h[3], E, Ah);\n    this.h[3] = sum32_3(this.h[4], A, Bh);\n    this.h[4] = sum32_3(this.h[0], B, Ch);\n    this.h[0] = T;\n};\nRIPEMD160.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"little\");\n    else return utils.split32(this.h, \"little\");\n};\nfunction f(j, x, y, z) {\n    if (j <= 15) return x ^ y ^ z;\n    else if (j <= 31) return x & y | ~x & z;\n    else if (j <= 47) return (x | ~y) ^ z;\n    else if (j <= 63) return x & z | y & ~z;\n    else return x ^ (y | ~z);\n}\nfunction K(j) {\n    if (j <= 15) return 0x00000000;\n    else if (j <= 31) return 0x5a827999;\n    else if (j <= 47) return 0x6ed9eba1;\n    else if (j <= 63) return 0x8f1bbcdc;\n    else return 0xa953fd4e;\n}\n_c1 = K;\nfunction Kh(j) {\n    if (j <= 15) return 0x50a28be6;\n    else if (j <= 31) return 0x5c4dd124;\n    else if (j <= 47) return 0x6d703ef3;\n    else if (j <= 63) return 0x7a6d76e9;\n    else return 0x00000000;\n}\n_c2 = Kh;\nvar r = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    7,\n    4,\n    13,\n    1,\n    10,\n    6,\n    15,\n    3,\n    12,\n    0,\n    9,\n    5,\n    2,\n    14,\n    11,\n    8,\n    3,\n    10,\n    14,\n    4,\n    9,\n    15,\n    8,\n    1,\n    2,\n    7,\n    0,\n    6,\n    13,\n    11,\n    5,\n    12,\n    1,\n    9,\n    11,\n    10,\n    0,\n    8,\n    12,\n    4,\n    13,\n    3,\n    7,\n    15,\n    14,\n    5,\n    6,\n    2,\n    4,\n    0,\n    5,\n    9,\n    7,\n    12,\n    2,\n    10,\n    14,\n    1,\n    3,\n    8,\n    11,\n    6,\n    15,\n    13\n];\nvar rh = [\n    5,\n    14,\n    7,\n    0,\n    9,\n    2,\n    11,\n    4,\n    13,\n    6,\n    15,\n    8,\n    1,\n    10,\n    3,\n    12,\n    6,\n    11,\n    3,\n    7,\n    0,\n    13,\n    5,\n    10,\n    14,\n    15,\n    8,\n    12,\n    4,\n    9,\n    1,\n    2,\n    15,\n    5,\n    1,\n    3,\n    7,\n    14,\n    6,\n    9,\n    11,\n    8,\n    12,\n    2,\n    10,\n    0,\n    4,\n    13,\n    8,\n    6,\n    4,\n    1,\n    3,\n    11,\n    15,\n    0,\n    5,\n    12,\n    2,\n    13,\n    9,\n    7,\n    10,\n    14,\n    12,\n    15,\n    10,\n    4,\n    1,\n    5,\n    8,\n    7,\n    6,\n    2,\n    13,\n    14,\n    0,\n    3,\n    9,\n    11\n];\nvar s = [\n    11,\n    14,\n    15,\n    12,\n    5,\n    8,\n    7,\n    9,\n    11,\n    13,\n    14,\n    15,\n    6,\n    7,\n    9,\n    8,\n    7,\n    6,\n    8,\n    13,\n    11,\n    9,\n    7,\n    15,\n    7,\n    12,\n    15,\n    9,\n    11,\n    7,\n    13,\n    12,\n    11,\n    13,\n    6,\n    7,\n    14,\n    9,\n    13,\n    15,\n    14,\n    8,\n    13,\n    6,\n    5,\n    12,\n    7,\n    5,\n    11,\n    12,\n    14,\n    15,\n    14,\n    15,\n    9,\n    8,\n    9,\n    14,\n    5,\n    6,\n    8,\n    6,\n    5,\n    12,\n    9,\n    15,\n    5,\n    11,\n    6,\n    8,\n    13,\n    12,\n    5,\n    12,\n    13,\n    14,\n    11,\n    8,\n    5,\n    6\n];\nvar sh = [\n    8,\n    9,\n    9,\n    11,\n    13,\n    15,\n    15,\n    5,\n    7,\n    7,\n    8,\n    11,\n    14,\n    14,\n    12,\n    6,\n    9,\n    13,\n    15,\n    7,\n    12,\n    8,\n    9,\n    11,\n    7,\n    7,\n    12,\n    7,\n    6,\n    15,\n    13,\n    11,\n    9,\n    7,\n    15,\n    11,\n    8,\n    6,\n    6,\n    14,\n    12,\n    13,\n    5,\n    14,\n    13,\n    13,\n    7,\n    5,\n    15,\n    5,\n    8,\n    11,\n    14,\n    14,\n    6,\n    14,\n    6,\n    9,\n    12,\n    9,\n    12,\n    5,\n    15,\n    8,\n    8,\n    5,\n    12,\n    9,\n    12,\n    5,\n    14,\n    6,\n    8,\n    13,\n    6,\n    5,\n    15,\n    13,\n    11,\n    11\n];\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"RIPEMD160\");\n$RefreshReg$(_c1, \"K\");\n$RefreshReg$(_c2, \"Kh\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/ripemd.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha.js":
/*!**********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nexports.sha1 = __webpack_require__(/*! ./sha/1 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/1.js\");\nexports.sha224 = __webpack_require__(/*! ./sha/224 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/224.js\");\nexports.sha256 = __webpack_require__(/*! ./sha/256 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js\");\nexports.sha384 = __webpack_require__(/*! ./sha/384 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/384.js\");\nexports.sha512 = __webpack_require__(/*! ./sha/512 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxpSEFBdUI7QUFDdkJBLHVIQUF5QjtBQUN6QkEsdUhBQXlCO0FBQ3pCQSx1SEFBeUI7QUFDekJBLHVIQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEuanM/MWZjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhLzEnKTtcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEvMjI0Jyk7XG5leHBvcnRzLnNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhLzI1NicpO1xuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYS8zODQnKTtcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGEvNTEyJyk7XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInNoYTEiLCJyZXF1aXJlIiwic2hhMjI0Iiwic2hhMjU2Iiwic2hhMzg0Iiwic2hhNTEyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/1.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/1.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar shaCommon = __webpack_require__(/*! ./common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js\");\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\nvar sha1_K = [\n    0x5A827999,\n    0x6ED9EBA1,\n    0x8F1BBCDC,\n    0xCA62C1D6\n];\nfunction SHA1() {\n    if (!(this instanceof SHA1)) return new SHA1();\n    BlockHash.call(this);\n    this.h = [\n        0x67452301,\n        0xefcdab89,\n        0x98badcfe,\n        0x10325476,\n        0xc3d2e1f0\n    ];\n    this.W = new Array(80);\n}\n_c = SHA1;\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\nSHA1.prototype._update = function _update(msg, start) {\n    var W = this.W;\n    for(var i = 0; i < 16; i++)W[i] = msg[start + i];\n    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n    var a = this.h[0];\n    var b = this.h[1];\n    var c = this.h[2];\n    var d = this.h[3];\n    var e = this.h[4];\n    for(i = 0; i < W.length; i++){\n        var s = ~~(i / 20);\n        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n        e = d;\n        d = c;\n        c = rotl32(b, 30);\n        b = a;\n        a = t;\n    }\n    this.h[0] = sum32(this.h[0], a);\n    this.h[1] = sum32(this.h[1], b);\n    this.h[2] = sum32(this.h[2], c);\n    this.h[3] = sum32(this.h[3], d);\n    this.h[4] = sum32(this.h[4], e);\n};\nSHA1.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"big\");\n    else return utils.split32(this.h, \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA1\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8xLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsWUFBWUYsbUJBQU9BLENBQUM7QUFFeEIsSUFBSUcsU0FBU0osTUFBTUksTUFBTTtBQUN6QixJQUFJQyxRQUFRTCxNQUFNSyxLQUFLO0FBQ3ZCLElBQUlDLFVBQVVOLE1BQU1NLE9BQU87QUFDM0IsSUFBSUMsT0FBT0osVUFBVUksSUFBSTtBQUN6QixJQUFJQyxZQUFZTixPQUFPTSxTQUFTO0FBRWhDLElBQUlDLFNBQVM7SUFDWDtJQUFZO0lBQ1o7SUFBWTtDQUNiO0FBRUQsU0FBU0M7SUFDUCxJQUFJLENBQUUsS0FBSSxZQUFZQSxJQUFHLEdBQ3ZCLE9BQU8sSUFBSUE7SUFFYkYsVUFBVUcsSUFBSSxDQUFDLElBQUk7SUFDbkIsSUFBSSxDQUFDQyxDQUFDLEdBQUc7UUFDUDtRQUFZO1FBQVk7UUFDeEI7UUFBWTtLQUFZO0lBQzFCLElBQUksQ0FBQ0MsQ0FBQyxHQUFHLElBQUlDLE1BQU07QUFDckI7S0FUU0o7QUFXVFYsTUFBTWUsUUFBUSxDQUFDTCxNQUFNRjtBQUNyQlEsT0FBT0MsT0FBTyxHQUFHUDtBQUVqQkEsS0FBS1EsU0FBUyxHQUFHO0FBQ2pCUixLQUFLUyxPQUFPLEdBQUc7QUFDZlQsS0FBS1UsWUFBWSxHQUFHO0FBQ3BCVixLQUFLVyxTQUFTLEdBQUc7QUFFakJYLEtBQUtZLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHLFNBQVNBLFFBQVFDLEdBQUcsRUFBRUMsS0FBSztJQUNsRCxJQUFJWixJQUFJLElBQUksQ0FBQ0EsQ0FBQztJQUVkLElBQUssSUFBSWEsSUFBSSxHQUFHQSxJQUFJLElBQUlBLElBQ3RCYixDQUFDLENBQUNhLEVBQUUsR0FBR0YsR0FBRyxDQUFDQyxRQUFRQyxFQUFFO0lBRXZCLE1BQU1BLElBQUliLEVBQUVjLE1BQU0sRUFBRUQsSUFDbEJiLENBQUMsQ0FBQ2EsRUFBRSxHQUFHdEIsT0FBT1MsQ0FBQyxDQUFDYSxJQUFJLEVBQUUsR0FBR2IsQ0FBQyxDQUFDYSxJQUFJLEVBQUUsR0FBR2IsQ0FBQyxDQUFDYSxJQUFJLEdBQUcsR0FBR2IsQ0FBQyxDQUFDYSxJQUFJLEdBQUcsRUFBRTtJQUU3RCxJQUFJRSxJQUFJLElBQUksQ0FBQ2hCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlpQixJQUFJLElBQUksQ0FBQ2pCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlrQixJQUFJLElBQUksQ0FBQ2xCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUltQixJQUFJLElBQUksQ0FBQ25CLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlvQixJQUFJLElBQUksQ0FBQ3BCLENBQUMsQ0FBQyxFQUFFO0lBRWpCLElBQUtjLElBQUksR0FBR0EsSUFBSWIsRUFBRWMsTUFBTSxFQUFFRCxJQUFLO1FBQzdCLElBQUlPLElBQUksQ0FBQyxDQUFFUCxDQUFBQSxJQUFJLEVBQUM7UUFDaEIsSUFBSVEsSUFBSTVCLFFBQVFGLE9BQU93QixHQUFHLElBQUlyQixLQUFLMEIsR0FBR0osR0FBR0MsR0FBR0MsSUFBSUMsR0FBR25CLENBQUMsQ0FBQ2EsRUFBRSxFQUFFakIsTUFBTSxDQUFDd0IsRUFBRTtRQUNsRUQsSUFBSUQ7UUFDSkEsSUFBSUQ7UUFDSkEsSUFBSTFCLE9BQU95QixHQUFHO1FBQ2RBLElBQUlEO1FBQ0pBLElBQUlNO0lBQ047SUFFQSxJQUFJLENBQUN0QixDQUFDLENBQUMsRUFBRSxHQUFHUCxNQUFNLElBQUksQ0FBQ08sQ0FBQyxDQUFDLEVBQUUsRUFBRWdCO0lBQzdCLElBQUksQ0FBQ2hCLENBQUMsQ0FBQyxFQUFFLEdBQUdQLE1BQU0sSUFBSSxDQUFDTyxDQUFDLENBQUMsRUFBRSxFQUFFaUI7SUFDN0IsSUFBSSxDQUFDakIsQ0FBQyxDQUFDLEVBQUUsR0FBR1AsTUFBTSxJQUFJLENBQUNPLENBQUMsQ0FBQyxFQUFFLEVBQUVrQjtJQUM3QixJQUFJLENBQUNsQixDQUFDLENBQUMsRUFBRSxHQUFHUCxNQUFNLElBQUksQ0FBQ08sQ0FBQyxDQUFDLEVBQUUsRUFBRW1CO0lBQzdCLElBQUksQ0FBQ25CLENBQUMsQ0FBQyxFQUFFLEdBQUdQLE1BQU0sSUFBSSxDQUFDTyxDQUFDLENBQUMsRUFBRSxFQUFFb0I7QUFDL0I7QUFFQXRCLEtBQUtZLFNBQVMsQ0FBQ2EsT0FBTyxHQUFHLFNBQVNDLE9BQU9DLEdBQUc7SUFDMUMsSUFBSUEsUUFBUSxPQUNWLE9BQU9yQyxNQUFNc0MsT0FBTyxDQUFDLElBQUksQ0FBQzFCLENBQUMsRUFBRTtTQUU3QixPQUFPWixNQUFNdUMsT0FBTyxDQUFDLElBQUksQ0FBQzNCLENBQUMsRUFBRTtBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMS5qcz8zOTRlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG52YXIgcm90bDMyID0gdXRpbHMucm90bDMyO1xudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgZnRfMSA9IHNoYUNvbW1vbi5mdF8xO1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGExX0sgPSBbXG4gIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsXG4gIDB4OEYxQkJDREMsIDB4Q0E2MkMxRDZcbl07XG5cbmZ1bmN0aW9uIFNIQTEoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEExKSlcbiAgICByZXR1cm4gbmV3IFNIQTEoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsXG4gICAgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoODApO1xufVxuXG51dGlscy5pbmhlcml0cyhTSEExLCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEExO1xuXG5TSEExLmJsb2NrU2l6ZSA9IDUxMjtcblNIQTEub3V0U2l6ZSA9IDE2MDtcblNIQTEuaG1hY1N0cmVuZ3RoID0gODA7XG5TSEExLnBhZExlbmd0aCA9IDY0O1xuXG5TSEExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG5cbiAgZm9yKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHJvdGwzMihXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdLCAxKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG5cbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcyA9IH5+KGkgLyAyMCk7XG4gICAgdmFyIHQgPSBzdW0zMl81KHJvdGwzMihhLCA1KSwgZnRfMShzLCBiLCBjLCBkKSwgZSwgV1tpXSwgc2hhMV9LW3NdKTtcbiAgICBlID0gZDtcbiAgICBkID0gYztcbiAgICBjID0gcm90bDMyKGIsIDMwKTtcbiAgICBiID0gYTtcbiAgICBhID0gdDtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG59O1xuXG5TSEExLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJjb21tb24iLCJzaGFDb21tb24iLCJyb3RsMzIiLCJzdW0zMiIsInN1bTMyXzUiLCJmdF8xIiwiQmxvY2tIYXNoIiwic2hhMV9LIiwiU0hBMSIsImNhbGwiLCJoIiwiVyIsIkFycmF5IiwiaW5oZXJpdHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYmxvY2tTaXplIiwib3V0U2l6ZSIsImhtYWNTdHJlbmd0aCIsInBhZExlbmd0aCIsInByb3RvdHlwZSIsIl91cGRhdGUiLCJtc2ciLCJzdGFydCIsImkiLCJsZW5ndGgiLCJhIiwiYiIsImMiLCJkIiwiZSIsInMiLCJ0IiwiX2RpZ2VzdCIsImRpZ2VzdCIsImVuYyIsInRvSGV4MzIiLCJzcGxpdDMyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/1.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/224.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/224.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar SHA256 = __webpack_require__(/*! ./256 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js\");\nfunction SHA224() {\n    if (!(this instanceof SHA224)) return new SHA224();\n    SHA256.call(this);\n    this.h = [\n        0xc1059ed8,\n        0x367cd507,\n        0x3070dd17,\n        0xf70e5939,\n        0xffc00b31,\n        0x68581511,\n        0x64f98fa7,\n        0xbefa4fa4\n    ];\n}\n_c = SHA224;\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\nSHA224.prototype._digest = function digest(enc) {\n    // Just truncate output\n    if (enc === \"hex\") return utils.toHex32(this.h.slice(0, 7), \"big\");\n    else return utils.split32(this.h.slice(0, 7), \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA224\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8yMjQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUVyQixTQUFTRTtJQUNQLElBQUksQ0FBRSxLQUFJLFlBQVlBLE1BQUssR0FDekIsT0FBTyxJQUFJQTtJQUViRCxPQUFPRSxJQUFJLENBQUMsSUFBSTtJQUNoQixJQUFJLENBQUNDLENBQUMsR0FBRztRQUNQO1FBQVk7UUFBWTtRQUFZO1FBQ3BDO1FBQVk7UUFBWTtRQUFZO0tBQVk7QUFDcEQ7S0FSU0Y7QUFTVEgsTUFBTU0sUUFBUSxDQUFDSCxRQUFRRDtBQUN2QkssT0FBT0MsT0FBTyxHQUFHTDtBQUVqQkEsT0FBT00sU0FBUyxHQUFHO0FBQ25CTixPQUFPTyxPQUFPLEdBQUc7QUFDakJQLE9BQU9RLFlBQVksR0FBRztBQUN0QlIsT0FBT1MsU0FBUyxHQUFHO0FBRW5CVCxPQUFPVSxTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxPQUFPQyxHQUFHO0lBQzVDLHVCQUF1QjtJQUN2QixJQUFJQSxRQUFRLE9BQ1YsT0FBT2hCLE1BQU1pQixPQUFPLENBQUMsSUFBSSxDQUFDWixDQUFDLENBQUNhLEtBQUssQ0FBQyxHQUFHLElBQUk7U0FFekMsT0FBT2xCLE1BQU1tQixPQUFPLENBQUMsSUFBSSxDQUFDZCxDQUFDLENBQUNhLEtBQUssQ0FBQyxHQUFHLElBQUk7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzIyNC5qcz8wNjA4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBTSEEyNTYgPSByZXF1aXJlKCcuLzI1NicpO1xuXG5mdW5jdGlvbiBTSEEyMjQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyMjQpKVxuICAgIHJldHVybiBuZXcgU0hBMjI0KCk7XG5cbiAgU0hBMjU2LmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGMxMDU5ZWQ4LCAweDM2N2NkNTA3LCAweDMwNzBkZDE3LCAweGY3MGU1OTM5LFxuICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTIyNCwgU0hBMjU2KTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjI0O1xuXG5TSEEyMjQuYmxvY2tTaXplID0gNTEyO1xuU0hBMjI0Lm91dFNpemUgPSAyMjQ7XG5TSEEyMjQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjI0LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyMjQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIC8vIEp1c3QgdHJ1bmNhdGUgb3V0cHV0XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG59O1xuXG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiU0hBMjU2IiwiU0hBMjI0IiwiY2FsbCIsImgiLCJpbmhlcml0cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJibG9ja1NpemUiLCJvdXRTaXplIiwiaG1hY1N0cmVuZ3RoIiwicGFkTGVuZ3RoIiwicHJvdG90eXBlIiwiX2RpZ2VzdCIsImRpZ2VzdCIsImVuYyIsInRvSGV4MzIiLCJzbGljZSIsInNwbGl0MzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/224.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/256.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar shaCommon = __webpack_require__(/*! ./common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash = common.BlockHash;\nvar sha256_K = [\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n];\nfunction SHA256() {\n    if (!(this instanceof SHA256)) return new SHA256();\n    BlockHash.call(this);\n    this.h = [\n        0x6a09e667,\n        0xbb67ae85,\n        0x3c6ef372,\n        0xa54ff53a,\n        0x510e527f,\n        0x9b05688c,\n        0x1f83d9ab,\n        0x5be0cd19\n    ];\n    this.k = sha256_K;\n    this.W = new Array(64);\n}\n_c = SHA256;\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\nSHA256.prototype._update = function _update(msg, start) {\n    var W = this.W;\n    for(var i = 0; i < 16; i++)W[i] = msg[start + i];\n    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n    var a = this.h[0];\n    var b = this.h[1];\n    var c = this.h[2];\n    var d = this.h[3];\n    var e = this.h[4];\n    var f = this.h[5];\n    var g = this.h[6];\n    var h = this.h[7];\n    assert(this.k.length === W.length);\n    for(i = 0; i < W.length; i++){\n        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n        var T2 = sum32(s0_256(a), maj32(a, b, c));\n        h = g;\n        g = f;\n        f = e;\n        e = sum32(d, T1);\n        d = c;\n        c = b;\n        b = a;\n        a = sum32(T1, T2);\n    }\n    this.h[0] = sum32(this.h[0], a);\n    this.h[1] = sum32(this.h[1], b);\n    this.h[2] = sum32(this.h[2], c);\n    this.h[3] = sum32(this.h[3], d);\n    this.h[4] = sum32(this.h[4], e);\n    this.h[5] = sum32(this.h[5], f);\n    this.h[6] = sum32(this.h[6], g);\n    this.h[7] = sum32(this.h[7], h);\n};\nSHA256.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"big\");\n    else return utils.split32(this.h, \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA256\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/384.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/384.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar SHA512 = __webpack_require__(/*! ./512 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js\");\nfunction SHA384() {\n    if (!(this instanceof SHA384)) return new SHA384();\n    SHA512.call(this);\n    this.h = [\n        0xcbbb9d5d,\n        0xc1059ed8,\n        0x629a292a,\n        0x367cd507,\n        0x9159015a,\n        0x3070dd17,\n        0x152fecd8,\n        0xf70e5939,\n        0x67332667,\n        0xffc00b31,\n        0x8eb44a87,\n        0x68581511,\n        0xdb0c2e0d,\n        0x64f98fa7,\n        0x47b5481d,\n        0xbefa4fa4\n    ];\n}\n_c = SHA384;\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\nSHA384.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h.slice(0, 12), \"big\");\n    else return utils.split32(this.h.slice(0, 12), \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA384\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8zODQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUVyQixTQUFTRTtJQUNQLElBQUksQ0FBRSxLQUFJLFlBQVlBLE1BQUssR0FDekIsT0FBTyxJQUFJQTtJQUViRCxPQUFPRSxJQUFJLENBQUMsSUFBSTtJQUNoQixJQUFJLENBQUNDLENBQUMsR0FBRztRQUNQO1FBQVk7UUFDWjtRQUFZO1FBQ1o7UUFBWTtRQUNaO1FBQVk7UUFDWjtRQUFZO1FBQ1o7UUFBWTtRQUNaO1FBQVk7UUFDWjtRQUFZO0tBQVk7QUFDNUI7S0FkU0Y7QUFlVEgsTUFBTU0sUUFBUSxDQUFDSCxRQUFRRDtBQUN2QkssT0FBT0MsT0FBTyxHQUFHTDtBQUVqQkEsT0FBT00sU0FBUyxHQUFHO0FBQ25CTixPQUFPTyxPQUFPLEdBQUc7QUFDakJQLE9BQU9RLFlBQVksR0FBRztBQUN0QlIsT0FBT1MsU0FBUyxHQUFHO0FBRW5CVCxPQUFPVSxTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxPQUFPQyxHQUFHO0lBQzVDLElBQUlBLFFBQVEsT0FDVixPQUFPaEIsTUFBTWlCLE9BQU8sQ0FBQyxJQUFJLENBQUNaLENBQUMsQ0FBQ2EsS0FBSyxDQUFDLEdBQUcsS0FBSztTQUUxQyxPQUFPbEIsTUFBTW1CLE9BQU8sQ0FBQyxJQUFJLENBQUNkLENBQUMsQ0FBQ2EsS0FBSyxDQUFDLEdBQUcsS0FBSztBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMzg0LmpzPzMwZDkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi81MTInKTtcblxuZnVuY3Rpb24gU0hBMzg0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMzg0KSlcbiAgICByZXR1cm4gbmV3IFNIQTM4NCgpO1xuXG4gIFNIQTUxMi5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCxcbiAgICAweDYyOWEyOTJhLCAweDM2N2NkNTA3LFxuICAgIDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcsXG4gICAgMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSxcbiAgICAweDY3MzMyNjY3LCAweGZmYzAwYjMxLFxuICAgIDB4OGViNDRhODcsIDB4Njg1ODE1MTEsXG4gICAgMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyxcbiAgICAweDQ3YjU0ODFkLCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTM4NDtcblxuU0hBMzg0LmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEEzODQub3V0U2l6ZSA9IDM4NDtcblNIQTM4NC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEzODQucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEEzODQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbn07XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiU0hBNTEyIiwiU0hBMzg0IiwiY2FsbCIsImgiLCJpbmhlcml0cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJibG9ja1NpemUiLCJvdXRTaXplIiwiaG1hY1N0cmVuZ3RoIiwicGFkTGVuZ3RoIiwicHJvdG90eXBlIiwiX2RpZ2VzdCIsImRpZ2VzdCIsImVuYyIsInRvSGV4MzIiLCJzbGljZSIsInNwbGl0MzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/384.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/512.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\nvar BlockHash = common.BlockHash;\nvar sha512_K = [\n    0x428a2f98,\n    0xd728ae22,\n    0x71374491,\n    0x23ef65cd,\n    0xb5c0fbcf,\n    0xec4d3b2f,\n    0xe9b5dba5,\n    0x8189dbbc,\n    0x3956c25b,\n    0xf348b538,\n    0x59f111f1,\n    0xb605d019,\n    0x923f82a4,\n    0xaf194f9b,\n    0xab1c5ed5,\n    0xda6d8118,\n    0xd807aa98,\n    0xa3030242,\n    0x12835b01,\n    0x45706fbe,\n    0x243185be,\n    0x4ee4b28c,\n    0x550c7dc3,\n    0xd5ffb4e2,\n    0x72be5d74,\n    0xf27b896f,\n    0x80deb1fe,\n    0x3b1696b1,\n    0x9bdc06a7,\n    0x25c71235,\n    0xc19bf174,\n    0xcf692694,\n    0xe49b69c1,\n    0x9ef14ad2,\n    0xefbe4786,\n    0x384f25e3,\n    0x0fc19dc6,\n    0x8b8cd5b5,\n    0x240ca1cc,\n    0x77ac9c65,\n    0x2de92c6f,\n    0x592b0275,\n    0x4a7484aa,\n    0x6ea6e483,\n    0x5cb0a9dc,\n    0xbd41fbd4,\n    0x76f988da,\n    0x831153b5,\n    0x983e5152,\n    0xee66dfab,\n    0xa831c66d,\n    0x2db43210,\n    0xb00327c8,\n    0x98fb213f,\n    0xbf597fc7,\n    0xbeef0ee4,\n    0xc6e00bf3,\n    0x3da88fc2,\n    0xd5a79147,\n    0x930aa725,\n    0x06ca6351,\n    0xe003826f,\n    0x14292967,\n    0x0a0e6e70,\n    0x27b70a85,\n    0x46d22ffc,\n    0x2e1b2138,\n    0x5c26c926,\n    0x4d2c6dfc,\n    0x5ac42aed,\n    0x53380d13,\n    0x9d95b3df,\n    0x650a7354,\n    0x8baf63de,\n    0x766a0abb,\n    0x3c77b2a8,\n    0x81c2c92e,\n    0x47edaee6,\n    0x92722c85,\n    0x1482353b,\n    0xa2bfe8a1,\n    0x4cf10364,\n    0xa81a664b,\n    0xbc423001,\n    0xc24b8b70,\n    0xd0f89791,\n    0xc76c51a3,\n    0x0654be30,\n    0xd192e819,\n    0xd6ef5218,\n    0xd6990624,\n    0x5565a910,\n    0xf40e3585,\n    0x5771202a,\n    0x106aa070,\n    0x32bbd1b8,\n    0x19a4c116,\n    0xb8d2d0c8,\n    0x1e376c08,\n    0x5141ab53,\n    0x2748774c,\n    0xdf8eeb99,\n    0x34b0bcb5,\n    0xe19b48a8,\n    0x391c0cb3,\n    0xc5c95a63,\n    0x4ed8aa4a,\n    0xe3418acb,\n    0x5b9cca4f,\n    0x7763e373,\n    0x682e6ff3,\n    0xd6b2b8a3,\n    0x748f82ee,\n    0x5defb2fc,\n    0x78a5636f,\n    0x43172f60,\n    0x84c87814,\n    0xa1f0ab72,\n    0x8cc70208,\n    0x1a6439ec,\n    0x90befffa,\n    0x23631e28,\n    0xa4506ceb,\n    0xde82bde9,\n    0xbef9a3f7,\n    0xb2c67915,\n    0xc67178f2,\n    0xe372532b,\n    0xca273ece,\n    0xea26619c,\n    0xd186b8c7,\n    0x21c0c207,\n    0xeada7dd6,\n    0xcde0eb1e,\n    0xf57d4f7f,\n    0xee6ed178,\n    0x06f067aa,\n    0x72176fba,\n    0x0a637dc5,\n    0xa2c898a6,\n    0x113f9804,\n    0xbef90dae,\n    0x1b710b35,\n    0x131c471b,\n    0x28db77f5,\n    0x23047d84,\n    0x32caab7b,\n    0x40c72493,\n    0x3c9ebe0a,\n    0x15c9bebc,\n    0x431d67c4,\n    0x9c100d4c,\n    0x4cc5d4be,\n    0xcb3e42b6,\n    0x597f299c,\n    0xfc657e2a,\n    0x5fcb6fab,\n    0x3ad6faec,\n    0x6c44198c,\n    0x4a475817\n];\nfunction SHA512() {\n    if (!(this instanceof SHA512)) return new SHA512();\n    BlockHash.call(this);\n    this.h = [\n        0x6a09e667,\n        0xf3bcc908,\n        0xbb67ae85,\n        0x84caa73b,\n        0x3c6ef372,\n        0xfe94f82b,\n        0xa54ff53a,\n        0x5f1d36f1,\n        0x510e527f,\n        0xade682d1,\n        0x9b05688c,\n        0x2b3e6c1f,\n        0x1f83d9ab,\n        0xfb41bd6b,\n        0x5be0cd19,\n        0x137e2179\n    ];\n    this.k = sha512_K;\n    this.W = new Array(160);\n}\n_c = SHA512;\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n    var W = this.W;\n    // 32 x 32bit words\n    for(var i = 0; i < 32; i++)W[i] = msg[start + i];\n    for(; i < W.length; i += 2){\n        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n        var c1_hi = W[i - 14]; // i - 7\n        var c1_lo = W[i - 13];\n        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n        var c3_hi = W[i - 32]; // i - 16\n        var c3_lo = W[i - 31];\n        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    }\n};\nSHA512.prototype._update = function _update(msg, start) {\n    this._prepareBlock(msg, start);\n    var W = this.W;\n    var ah = this.h[0];\n    var al = this.h[1];\n    var bh = this.h[2];\n    var bl = this.h[3];\n    var ch = this.h[4];\n    var cl = this.h[5];\n    var dh = this.h[6];\n    var dl = this.h[7];\n    var eh = this.h[8];\n    var el = this.h[9];\n    var fh = this.h[10];\n    var fl = this.h[11];\n    var gh = this.h[12];\n    var gl = this.h[13];\n    var hh = this.h[14];\n    var hl = this.h[15];\n    assert(this.k.length === W.length);\n    for(var i = 0; i < W.length; i += 2){\n        var c0_hi = hh;\n        var c0_lo = hl;\n        var c1_hi = s1_512_hi(eh, el);\n        var c1_lo = s1_512_lo(eh, el);\n        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n        var c3_hi = this.k[i];\n        var c3_lo = this.k[i + 1];\n        var c4_hi = W[i];\n        var c4_lo = W[i + 1];\n        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n        c0_hi = s0_512_hi(ah, al);\n        c0_lo = s0_512_lo(ah, al);\n        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n        hh = gh;\n        hl = gl;\n        gh = fh;\n        gl = fl;\n        fh = eh;\n        fl = el;\n        eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n        el = sum64_lo(dl, dl, T1_hi, T1_lo);\n        dh = ch;\n        dl = cl;\n        ch = bh;\n        cl = bl;\n        bh = ah;\n        bl = al;\n        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n    }\n    sum64(this.h, 0, ah, al);\n    sum64(this.h, 2, bh, bl);\n    sum64(this.h, 4, ch, cl);\n    sum64(this.h, 6, dh, dl);\n    sum64(this.h, 8, eh, el);\n    sum64(this.h, 10, fh, fl);\n    sum64(this.h, 12, gh, gl);\n    sum64(this.h, 14, hh, hl);\n};\nSHA512.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"big\");\n    else return utils.split32(this.h, \"big\");\n};\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ ~xh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ ~xl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ xh & zh ^ yh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ xl & zl ^ yl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 28);\n    var c1_hi = rotr64_hi(xl, xh, 2); // 34\n    var c2_hi = rotr64_hi(xl, xh, 7); // 39\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 28);\n    var c1_lo = rotr64_lo(xl, xh, 2); // 34\n    var c2_lo = rotr64_lo(xl, xh, 7); // 39\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 14);\n    var c1_hi = rotr64_hi(xh, xl, 18);\n    var c2_hi = rotr64_hi(xl, xh, 9); // 41\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 14);\n    var c1_lo = rotr64_lo(xh, xl, 18);\n    var c2_lo = rotr64_lo(xl, xh, 9); // 41\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 1);\n    var c1_hi = rotr64_hi(xh, xl, 8);\n    var c2_hi = shr64_hi(xh, xl, 7);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 1);\n    var c1_lo = rotr64_lo(xh, xl, 8);\n    var c2_lo = shr64_lo(xh, xl, 7);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 19);\n    var c1_hi = rotr64_hi(xl, xh, 29); // 61\n    var c2_hi = shr64_hi(xh, xl, 6);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 19);\n    var c1_lo = rotr64_lo(xl, xh, 29); // 61\n    var c2_lo = shr64_lo(xh, xl, 6);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nvar _c;\n$RefreshReg$(_c, \"SHA512\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js":
/*!*****************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/common.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar rotr32 = utils.rotr32;\nfunction ft_1(s, x, y, z) {\n    if (s === 0) return ch32(x, y, z);\n    if (s === 1 || s === 3) return p32(x, y, z);\n    if (s === 2) return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\nfunction ch32(x, y, z) {\n    return x & y ^ ~x & z;\n}\nexports.ch32 = ch32;\nfunction maj32(x, y, z) {\n    return x & y ^ x & z ^ y & z;\n}\nexports.maj32 = maj32;\nfunction p32(x, y, z) {\n    return x ^ y ^ z;\n}\nexports.p32 = p32;\nfunction s0_256(x) {\n    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\nfunction s1_256(x) {\n    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\nfunction g0_256(x) {\n    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\nexports.g0_256 = g0_256;\nfunction g1_256(x) {\n    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\nexports.g1_256 = g1_256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxTQUFTRixNQUFNRSxNQUFNO0FBRXpCLFNBQVNDLEtBQUtDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDdEIsSUFBSUgsTUFBTSxHQUNSLE9BQU9JLEtBQUtILEdBQUdDLEdBQUdDO0lBQ3BCLElBQUlILE1BQU0sS0FBS0EsTUFBTSxHQUNuQixPQUFPSyxJQUFJSixHQUFHQyxHQUFHQztJQUNuQixJQUFJSCxNQUFNLEdBQ1IsT0FBT00sTUFBTUwsR0FBR0MsR0FBR0M7QUFDdkI7QUFDQUksWUFBWSxHQUFHUjtBQUVmLFNBQVNLLEtBQUtILENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDO0lBQ25CLE9BQU8sSUFBS0QsSUFBTSxDQUFFRCxJQUFLRTtBQUMzQjtBQUNBSSxZQUFZLEdBQUdIO0FBRWYsU0FBU0UsTUFBTUwsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDcEIsT0FBTyxJQUFLRCxJQUFNRCxJQUFJRSxJQUFNRCxJQUFJQztBQUNsQztBQUNBSSxhQUFhLEdBQUdEO0FBRWhCLFNBQVNELElBQUlKLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDO0lBQ2xCLE9BQU9GLElBQUlDLElBQUlDO0FBQ2pCO0FBQ0FJLFdBQVcsR0FBR0Y7QUFFZCxTQUFTRyxPQUFPUCxDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxLQUFLSCxPQUFPRyxHQUFHLE1BQU1ILE9BQU9HLEdBQUc7QUFDbEQ7QUFDQU0sY0FBYyxHQUFHQztBQUVqQixTQUFTQyxPQUFPUixDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxLQUFLSCxPQUFPRyxHQUFHLE1BQU1ILE9BQU9HLEdBQUc7QUFDbEQ7QUFDQU0sY0FBYyxHQUFHRTtBQUVqQixTQUFTQyxPQUFPVCxDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxLQUFLSCxPQUFPRyxHQUFHLE1BQU9BLE1BQU07QUFDL0M7QUFDQU0sY0FBYyxHQUFHRztBQUVqQixTQUFTQyxPQUFPVixDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxNQUFNSCxPQUFPRyxHQUFHLE1BQU9BLE1BQU07QUFDaEQ7QUFDQU0sY0FBYyxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvY29tbW9uLmpzP2IyM2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIHJvdHIzMiA9IHV0aWxzLnJvdHIzMjtcblxuZnVuY3Rpb24gZnRfMShzLCB4LCB5LCB6KSB7XG4gIGlmIChzID09PSAwKVxuICAgIHJldHVybiBjaDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMSB8fCBzID09PSAzKVxuICAgIHJldHVybiBwMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAyKVxuICAgIHJldHVybiBtYWozMih4LCB5LCB6KTtcbn1cbmV4cG9ydHMuZnRfMSA9IGZ0XzE7XG5cbmZ1bmN0aW9uIGNoMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICgofngpICYgeik7XG59XG5leHBvcnRzLmNoMzIgPSBjaDMyO1xuXG5mdW5jdGlvbiBtYWozMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKHggJiB6KSBeICh5ICYgeik7XG59XG5leHBvcnRzLm1hajMyID0gbWFqMzI7XG5cbmZ1bmN0aW9uIHAzMih4LCB5LCB6KSB7XG4gIHJldHVybiB4IF4geSBeIHo7XG59XG5leHBvcnRzLnAzMiA9IHAzMjtcblxuZnVuY3Rpb24gczBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAyKSBeIHJvdHIzMih4LCAxMykgXiByb3RyMzIoeCwgMjIpO1xufVxuZXhwb3J0cy5zMF8yNTYgPSBzMF8yNTY7XG5cbmZ1bmN0aW9uIHMxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNikgXiByb3RyMzIoeCwgMTEpIF4gcm90cjMyKHgsIDI1KTtcbn1cbmV4cG9ydHMuczFfMjU2ID0gczFfMjU2O1xuXG5mdW5jdGlvbiBnMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDcpIF4gcm90cjMyKHgsIDE4KSBeICh4ID4+PiAzKTtcbn1cbmV4cG9ydHMuZzBfMjU2ID0gZzBfMjU2O1xuXG5mdW5jdGlvbiBnMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDE3KSBeIHJvdHIzMih4LCAxOSkgXiAoeCA+Pj4gMTApO1xufVxuZXhwb3J0cy5nMV8yNTYgPSBnMV8yNTY7XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwicm90cjMyIiwiZnRfMSIsInMiLCJ4IiwieSIsInoiLCJjaDMyIiwicDMyIiwibWFqMzIiLCJleHBvcnRzIiwiczBfMjU2IiwiczFfMjU2IiwiZzBfMjU2IiwiZzFfMjU2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/utils.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(app-pages-browser)/./node_modules/inherits/inherits_browser.js\");\nexports.inherits = inherits;\nfunction isSurrogatePair(msg, i) {\n    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n        return false;\n    }\n    if (i < 0 || i + 1 >= msg.length) {\n        return false;\n    }\n    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\nfunction toArray(msg, enc) {\n    if (Array.isArray(msg)) return msg.slice();\n    if (!msg) return [];\n    var res = [];\n    if (typeof msg === \"string\") {\n        if (!enc) {\n            // Inspired by stringToUtf8ByteArray() in closure-library by Google\n            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n            // Apache License 2.0\n            // https://github.com/google/closure-library/blob/master/LICENSE\n            var p = 0;\n            for(var i = 0; i < msg.length; i++){\n                var c = msg.charCodeAt(i);\n                if (c < 128) {\n                    res[p++] = c;\n                } else if (c < 2048) {\n                    res[p++] = c >> 6 | 192;\n                    res[p++] = c & 63 | 128;\n                } else if (isSurrogatePair(msg, i)) {\n                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n                    res[p++] = c >> 18 | 240;\n                    res[p++] = c >> 12 & 63 | 128;\n                    res[p++] = c >> 6 & 63 | 128;\n                    res[p++] = c & 63 | 128;\n                } else {\n                    res[p++] = c >> 12 | 224;\n                    res[p++] = c >> 6 & 63 | 128;\n                    res[p++] = c & 63 | 128;\n                }\n            }\n        } else if (enc === \"hex\") {\n            msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n            if (msg.length % 2 !== 0) msg = \"0\" + msg;\n            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));\n        }\n    } else {\n        for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;\n    }\n    return res;\n}\nexports.toArray = toArray;\nfunction toHex(msg) {\n    var res = \"\";\n    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));\n    return res;\n}\nexports.toHex = toHex;\nfunction htonl(w) {\n    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n    return res >>> 0;\n}\nexports.htonl = htonl;\nfunction toHex32(msg, endian) {\n    var res = \"\";\n    for(var i = 0; i < msg.length; i++){\n        var w = msg[i];\n        if (endian === \"little\") w = htonl(w);\n        res += zero8(w.toString(16));\n    }\n    return res;\n}\nexports.toHex32 = toHex32;\nfunction zero2(word) {\n    if (word.length === 1) return \"0\" + word;\n    else return word;\n}\nexports.zero2 = zero2;\nfunction zero8(word) {\n    if (word.length === 7) return \"0\" + word;\n    else if (word.length === 6) return \"00\" + word;\n    else if (word.length === 5) return \"000\" + word;\n    else if (word.length === 4) return \"0000\" + word;\n    else if (word.length === 3) return \"00000\" + word;\n    else if (word.length === 2) return \"000000\" + word;\n    else if (word.length === 1) return \"0000000\" + word;\n    else return word;\n}\nexports.zero8 = zero8;\nfunction join32(msg, start, end, endian) {\n    var len = end - start;\n    assert(len % 4 === 0);\n    var res = new Array(len / 4);\n    for(var i = 0, k = start; i < res.length; i++, k += 4){\n        var w;\n        if (endian === \"big\") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];\n        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n        res[i] = w >>> 0;\n    }\n    return res;\n}\nexports.join32 = join32;\nfunction split32(msg, endian) {\n    var res = new Array(msg.length * 4);\n    for(var i = 0, k = 0; i < msg.length; i++, k += 4){\n        var m = msg[i];\n        if (endian === \"big\") {\n            res[k] = m >>> 24;\n            res[k + 1] = m >>> 16 & 0xff;\n            res[k + 2] = m >>> 8 & 0xff;\n            res[k + 3] = m & 0xff;\n        } else {\n            res[k + 3] = m >>> 24;\n            res[k + 2] = m >>> 16 & 0xff;\n            res[k + 1] = m >>> 8 & 0xff;\n            res[k] = m & 0xff;\n        }\n    }\n    return res;\n}\nexports.split32 = split32;\nfunction rotr32(w, b) {\n    return w >>> b | w << 32 - b;\n}\nexports.rotr32 = rotr32;\nfunction rotl32(w, b) {\n    return w << b | w >>> 32 - b;\n}\nexports.rotl32 = rotl32;\nfunction sum32(a, b) {\n    return a + b >>> 0;\n}\nexports.sum32 = sum32;\nfunction sum32_3(a, b, c) {\n    return a + b + c >>> 0;\n}\nexports.sum32_3 = sum32_3;\nfunction sum32_4(a, b, c, d) {\n    return a + b + c + d >>> 0;\n}\nexports.sum32_4 = sum32_4;\nfunction sum32_5(a, b, c, d, e) {\n    return a + b + c + d + e >>> 0;\n}\nexports.sum32_5 = sum32_5;\nfunction sum64(buf, pos, ah, al) {\n    var bh = buf[pos];\n    var bl = buf[pos + 1];\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    buf[pos] = hi >>> 0;\n    buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\nfunction sum64_hi(ah, al, bh, bl) {\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\nfunction sum64_lo(ah, al, bh, bl) {\n    var lo = al + bl;\n    return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    var hi = ah + bh + ch + dh + carry;\n    return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n    var lo = al + bl + cl + dl;\n    return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    lo = lo + el >>> 0;\n    carry += lo < el ? 1 : 0;\n    var hi = ah + bh + ch + dh + eh + carry;\n    return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var lo = al + bl + cl + dl + el;\n    return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\nfunction rotr64_hi(ah, al, num) {\n    var r = al << 32 - num | ah >>> num;\n    return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\nfunction rotr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\nfunction shr64_hi(ah, al, num) {\n    return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\nfunction shr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hmac-drbg/lib/hmac-drbg.js":
/*!*************************************************!*\
  !*** ./node_modules/hmac-drbg/lib/hmac-drbg.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar hash = __webpack_require__(/*! hash.js */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash.js\");\nvar utils = __webpack_require__(/*! minimalistic-crypto-utils */ \"(app-pages-browser)/./node_modules/minimalistic-crypto-utils/lib/utils.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nfunction HmacDRBG(options) {\n    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);\n    this.hash = options.hash;\n    this.predResist = !!options.predResist;\n    this.outLen = this.hash.outSize;\n    this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n    this._reseed = null;\n    this.reseedInterval = null;\n    this.K = null;\n    this.V = null;\n    var entropy = utils.toArray(options.entropy, options.entropyEnc || \"hex\");\n    var nonce = utils.toArray(options.nonce, options.nonceEnc || \"hex\");\n    var pers = utils.toArray(options.pers, options.persEnc || \"hex\");\n    assert(entropy.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\");\n    this._init(entropy, nonce, pers);\n}\n_c = HmacDRBG;\nmodule.exports = HmacDRBG;\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n    var seed = entropy.concat(nonce).concat(pers);\n    this.K = new Array(this.outLen / 8);\n    this.V = new Array(this.outLen / 8);\n    for(var i = 0; i < this.V.length; i++){\n        this.K[i] = 0x00;\n        this.V[i] = 0x01;\n    }\n    this._update(seed);\n    this._reseed = 1;\n    this.reseedInterval = 0x1000000000000; // 2^48\n};\nHmacDRBG.prototype._hmac = function hmac() {\n    return new hash.hmac(this.hash, this.K);\n};\nHmacDRBG.prototype._update = function update(seed) {\n    var kmac = this._hmac().update(this.V).update([\n        0x00\n    ]);\n    if (seed) kmac = kmac.update(seed);\n    this.K = kmac.digest();\n    this.V = this._hmac().update(this.V).digest();\n    if (!seed) return;\n    this.K = this._hmac().update(this.V).update([\n        0x01\n    ]).update(seed).digest();\n    this.V = this._hmac().update(this.V).digest();\n};\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n    // Optional entropy enc\n    if (typeof entropyEnc !== \"string\") {\n        addEnc = add;\n        add = entropyEnc;\n        entropyEnc = null;\n    }\n    entropy = utils.toArray(entropy, entropyEnc);\n    add = utils.toArray(add, addEnc);\n    assert(entropy.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\");\n    this._update(entropy.concat(add || []));\n    this._reseed = 1;\n};\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n    if (this._reseed > this.reseedInterval) throw new Error(\"Reseed is required\");\n    // Optional encoding\n    if (typeof enc !== \"string\") {\n        addEnc = add;\n        add = enc;\n        enc = null;\n    }\n    // Optional additional data\n    if (add) {\n        add = utils.toArray(add, addEnc || \"hex\");\n        this._update(add);\n    }\n    var temp = [];\n    while(temp.length < len){\n        this.V = this._hmac().update(this.V).digest();\n        temp = temp.concat(this.V);\n    }\n    var res = temp.slice(0, len);\n    this._update(add);\n    this._reseed++;\n    return utils.encode(res, enc);\n};\nvar _c;\n$RefreshReg$(_c, \"HmacDRBG\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hmac-drbg/lib/hmac-drbg.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? nBytes - 1 : 0;\n    var d = isLE ? -1 : 1;\n    var s = buffer[offset + i];\n    i += d;\n    e = s & (1 << -nBits) - 1;\n    s >>= -nBits;\n    nBits += eLen;\n    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8){}\n    m = e & (1 << -nBits) - 1;\n    e >>= -nBits;\n    nBits += mLen;\n    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8){}\n    if (e === 0) {\n        e = 1 - eBias;\n    } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity;\n    } else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\nexports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    var i = isLE ? 0 : nBytes - 1;\n    var d = isLE ? 1 : -1;\n    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n    value = Math.abs(value);\n    if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n    } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n        }\n        if (e + eBias >= 1) {\n            value += rt / c;\n        } else {\n            value += rt * Math.pow(2, 1 - eBias);\n        }\n        if (value * c >= 2) {\n            e++;\n            c /= 2;\n        }\n        if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n        } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n        } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n        }\n    }\n    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8){}\n    e = e << mLen | m;\n    eLen += mLen;\n    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8){}\n    buffer[offset + i - d] |= s * 128;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHVGQUF1RixHQUN2RkEsWUFBWSxHQUFHLFNBQVVFLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsTUFBTTtJQUN6RCxJQUFJQyxHQUFHQztJQUNQLElBQUlDLE9BQU8sU0FBVSxJQUFLSixPQUFPO0lBQ2pDLElBQUlLLE9BQU8sQ0FBQyxLQUFLRCxJQUFHLElBQUs7SUFDekIsSUFBSUUsUUFBUUQsUUFBUTtJQUNwQixJQUFJRSxRQUFRLENBQUM7SUFDYixJQUFJQyxJQUFJVCxPQUFRRSxTQUFTLElBQUs7SUFDOUIsSUFBSVEsSUFBSVYsT0FBTyxDQUFDLElBQUk7SUFDcEIsSUFBSVcsSUFBSWIsTUFBTSxDQUFDQyxTQUFTVSxFQUFFO0lBRTFCQSxLQUFLQztJQUVMUCxJQUFJUSxJQUFLLENBQUMsS0FBTSxDQUFDSCxLQUFLLElBQUs7SUFDM0JHLE1BQU8sQ0FBQ0g7SUFDUkEsU0FBU0g7SUFDVCxNQUFPRyxRQUFRLEdBQUdMLElBQUksSUFBSyxNQUFPTCxNQUFNLENBQUNDLFNBQVNVLEVBQUUsRUFBRUEsS0FBS0MsR0FBR0YsU0FBUyxFQUFHLENBQUM7SUFFM0VKLElBQUlELElBQUssQ0FBQyxLQUFNLENBQUNLLEtBQUssSUFBSztJQUMzQkwsTUFBTyxDQUFDSztJQUNSQSxTQUFTUDtJQUNULE1BQU9PLFFBQVEsR0FBR0osSUFBSSxJQUFLLE1BQU9OLE1BQU0sQ0FBQ0MsU0FBU1UsRUFBRSxFQUFFQSxLQUFLQyxHQUFHRixTQUFTLEVBQUcsQ0FBQztJQUUzRSxJQUFJTCxNQUFNLEdBQUc7UUFDWEEsSUFBSSxJQUFJSTtJQUNWLE9BQU8sSUFBSUosTUFBTUcsTUFBTTtRQUNyQixPQUFPRixJQUFJUSxNQUFPLENBQUNELElBQUksQ0FBQyxJQUFJLEtBQUtFO0lBQ25DLE9BQU87UUFDTFQsSUFBSUEsSUFBSVUsS0FBS0MsR0FBRyxDQUFDLEdBQUdkO1FBQ3BCRSxJQUFJQSxJQUFJSTtJQUNWO0lBQ0EsT0FBTyxDQUFDSSxJQUFJLENBQUMsSUFBSSxLQUFLUCxJQUFJVSxLQUFLQyxHQUFHLENBQUMsR0FBR1osSUFBSUY7QUFDNUM7QUFFQUwsYUFBYSxHQUFHLFNBQVVFLE1BQU0sRUFBRW1CLEtBQUssRUFBRWxCLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07SUFDakUsSUFBSUMsR0FBR0MsR0FBR2M7SUFDVixJQUFJYixPQUFPLFNBQVUsSUFBS0osT0FBTztJQUNqQyxJQUFJSyxPQUFPLENBQUMsS0FBS0QsSUFBRyxJQUFLO0lBQ3pCLElBQUlFLFFBQVFELFFBQVE7SUFDcEIsSUFBSWEsS0FBTWxCLFNBQVMsS0FBS2EsS0FBS0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNRCxLQUFLQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU07SUFDOUQsSUFBSU4sSUFBSVQsT0FBTyxJQUFLRSxTQUFTO0lBQzdCLElBQUlRLElBQUlWLE9BQU8sSUFBSSxDQUFDO0lBQ3BCLElBQUlXLElBQUlNLFFBQVEsS0FBTUEsVUFBVSxLQUFLLElBQUlBLFFBQVEsSUFBSyxJQUFJO0lBRTFEQSxRQUFRSCxLQUFLTSxHQUFHLENBQUNIO0lBRWpCLElBQUlJLE1BQU1KLFVBQVVBLFVBQVVKLFVBQVU7UUFDdENULElBQUlpQixNQUFNSixTQUFTLElBQUk7UUFDdkJkLElBQUlHO0lBQ04sT0FBTztRQUNMSCxJQUFJVyxLQUFLUSxLQUFLLENBQUNSLEtBQUtTLEdBQUcsQ0FBQ04sU0FBU0gsS0FBS1UsR0FBRztRQUN6QyxJQUFJUCxRQUFTQyxDQUFBQSxJQUFJSixLQUFLQyxHQUFHLENBQUMsR0FBRyxDQUFDWixFQUFDLElBQUssR0FBRztZQUNyQ0E7WUFDQWUsS0FBSztRQUNQO1FBQ0EsSUFBSWYsSUFBSUksU0FBUyxHQUFHO1lBQ2xCVSxTQUFTRSxLQUFLRDtRQUNoQixPQUFPO1lBQ0xELFNBQVNFLEtBQUtMLEtBQUtDLEdBQUcsQ0FBQyxHQUFHLElBQUlSO1FBQ2hDO1FBQ0EsSUFBSVUsUUFBUUMsS0FBSyxHQUFHO1lBQ2xCZjtZQUNBZSxLQUFLO1FBQ1A7UUFFQSxJQUFJZixJQUFJSSxTQUFTRCxNQUFNO1lBQ3JCRixJQUFJO1lBQ0pELElBQUlHO1FBQ04sT0FBTyxJQUFJSCxJQUFJSSxTQUFTLEdBQUc7WUFDekJILElBQUksQ0FBQyxRQUFTYyxJQUFLLEtBQUtKLEtBQUtDLEdBQUcsQ0FBQyxHQUFHZDtZQUNwQ0UsSUFBSUEsSUFBSUk7UUFDVixPQUFPO1lBQ0xILElBQUlhLFFBQVFILEtBQUtDLEdBQUcsQ0FBQyxHQUFHUixRQUFRLEtBQUtPLEtBQUtDLEdBQUcsQ0FBQyxHQUFHZDtZQUNqREUsSUFBSTtRQUNOO0lBQ0Y7SUFFQSxNQUFPRixRQUFRLEdBQUdILE1BQU0sQ0FBQ0MsU0FBU1UsRUFBRSxHQUFHTCxJQUFJLE1BQU1LLEtBQUtDLEdBQUdOLEtBQUssS0FBS0gsUUFBUSxFQUFHLENBQUM7SUFFL0VFLElBQUksS0FBTUYsT0FBUUc7SUFDbEJDLFFBQVFKO0lBQ1IsTUFBT0ksT0FBTyxHQUFHUCxNQUFNLENBQUNDLFNBQVNVLEVBQUUsR0FBR04sSUFBSSxNQUFNTSxLQUFLQyxHQUFHUCxLQUFLLEtBQUtFLFFBQVEsRUFBRyxDQUFDO0lBRTlFUCxNQUFNLENBQUNDLFNBQVNVLElBQUlDLEVBQUUsSUFBSUMsSUFBSTtBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcz9lYmMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInJlYWQiLCJidWZmZXIiLCJvZmZzZXQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImUiLCJtIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiaSIsImQiLCJzIiwiTmFOIiwiSW5maW5pdHkiLCJNYXRoIiwicG93Iiwid3JpdGUiLCJ2YWx1ZSIsImMiLCJydCIsImFicyIsImlzTmFOIiwiZmxvb3IiLCJsb2ciLCJMTjIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ieee754/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (typeof Object.create === \"function\") {\n    // implementation from standard node.js 'util' module\n    module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n            ctor.super_ = superCtor;\n            ctor.prototype = Object.create(superCtor.prototype, {\n                constructor: {\n                    value: ctor,\n                    enumerable: false,\n                    writable: true,\n                    configurable: true\n                }\n            });\n        }\n    };\n} else {\n    // old school shim for old browsers\n    module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n            ctor.super_ = superCtor;\n            var TempCtor = function() {};\n            TempCtor.prototype = superCtor.prototype;\n            ctor.prototype = new TempCtor();\n            ctor.prototype.constructor = ctor;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJLE9BQU9BLE9BQU9DLE1BQU0sS0FBSyxZQUFZO0lBQ3ZDLHFEQUFxRDtJQUNyREMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFNBQVNDLElBQUksRUFBRUMsU0FBUztRQUNoRCxJQUFJQSxXQUFXO1lBQ2JELEtBQUtFLE1BQU0sR0FBR0Q7WUFDZEQsS0FBS0csU0FBUyxHQUFHUixPQUFPQyxNQUFNLENBQUNLLFVBQVVFLFNBQVMsRUFBRTtnQkFDbERDLGFBQWE7b0JBQ1hDLE9BQU9MO29CQUNQTSxZQUFZO29CQUNaQyxVQUFVO29CQUNWQyxjQUFjO2dCQUNoQjtZQUNGO1FBQ0Y7SUFDRjtBQUNGLE9BQU87SUFDTCxtQ0FBbUM7SUFDbkNYLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxTQUFTQyxJQUFJLEVBQUVDLFNBQVM7UUFDaEQsSUFBSUEsV0FBVztZQUNiRCxLQUFLRSxNQUFNLEdBQUdEO1lBQ2QsSUFBSVEsV0FBVyxZQUFhO1lBQzVCQSxTQUFTTixTQUFTLEdBQUdGLFVBQVVFLFNBQVM7WUFDeENILEtBQUtHLFNBQVMsR0FBRyxJQUFJTTtZQUNyQlQsS0FBS0csU0FBUyxDQUFDQyxXQUFXLEdBQUdKO1FBQy9CO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz9lM2M2Il0sInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJjcmVhdGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIlRlbXBDdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/inherits/inherits_browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash.isequal/index.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash.isequal/index.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ /** Used as the size to enable large array optimizations. */ \nvar LARGE_ARRAY_SIZE = 200;\n/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;\n/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;\n/** `Object#toString` result references. */ var argsTag = \"[object Arguments]\", arrayTag = \"[object Array]\", asyncTag = \"[object AsyncFunction]\", boolTag = \"[object Boolean]\", dateTag = \"[object Date]\", errorTag = \"[object Error]\", funcTag = \"[object Function]\", genTag = \"[object GeneratorFunction]\", mapTag = \"[object Map]\", numberTag = \"[object Number]\", nullTag = \"[object Null]\", objectTag = \"[object Object]\", promiseTag = \"[object Promise]\", proxyTag = \"[object Proxy]\", regexpTag = \"[object RegExp]\", setTag = \"[object Set]\", stringTag = \"[object String]\", symbolTag = \"[object Symbol]\", undefinedTag = \"[object Undefined]\", weakMapTag = \"[object WeakMap]\";\nvar arrayBufferTag = \"[object ArrayBuffer]\", dataViewTag = \"[object DataView]\", float32Tag = \"[object Float32Array]\", float64Tag = \"[object Float64Array]\", int8Tag = \"[object Int8Array]\", int16Tag = \"[object Int16Array]\", int32Tag = \"[object Int32Array]\", uint8Tag = \"[object Uint8Array]\", uint8ClampedTag = \"[object Uint8ClampedArray]\", uint16Tag = \"[object Uint16Array]\", uint32Tag = \"[object Uint32Array]\";\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */ var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\\d*)$/;\n/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof __webpack_require__.g == \"object\" && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n/** Detect free variable `self`. */ var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function(\"return this\")();\n/** Detect free variable `exports`. */ var freeExports =  true && exports && !exports.nodeType && exports;\n/** Detect free variable `module`. */ var freeModule = freeExports && \"object\" == \"object\" && module && !module.nodeType && module;\n/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;\n/** Used to access faster Node.js helpers. */ var nodeUtil = function() {\n    try {\n        return freeProcess && freeProcess.binding && freeProcess.binding(\"util\");\n    } catch (e) {}\n}();\n/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */ function arrayFilter(array, predicate) {\n    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];\n    while(++index < length){\n        var value = array[index];\n        if (predicate(value, index, array)) {\n            result[resIndex++] = value;\n        }\n    }\n    return result;\n}\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */ function arrayPush(array, values) {\n    var index = -1, length = values.length, offset = array.length;\n    while(++index < length){\n        array[offset + index] = values[index];\n    }\n    return array;\n}\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */ function arraySome(array, predicate) {\n    var index = -1, length = array == null ? 0 : array.length;\n    while(++index < length){\n        if (predicate(array[index], index, array)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */ function baseTimes(n, iteratee) {\n    var index = -1, result = Array(n);\n    while(++index < n){\n        result[index] = iteratee(index);\n    }\n    return result;\n}\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */ function baseUnary(func) {\n    return function(value) {\n        return func(value);\n    };\n}\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function cacheHas(cache, key) {\n    return cache.has(key);\n}\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */ function getValue(object, key) {\n    return object == null ? undefined : object[key];\n}\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */ function mapToArray(map) {\n    var index = -1, result = Array(map.size);\n    map.forEach(function(value, key) {\n        result[++index] = [\n            key,\n            value\n        ];\n    });\n    return result;\n}\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */ function overArg(func, transform) {\n    return function(arg) {\n        return func(transform(arg));\n    };\n}\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */ function setToArray(set) {\n    var index = -1, result = Array(set.size);\n    set.forEach(function(value) {\n        result[++index] = value;\n    });\n    return result;\n}\n/** Used for built-in method references. */ var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;\n/** Used to detect overreaching core-js shims. */ var coreJsData = root[\"__core-js_shared__\"];\n/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || \"\");\n    return uid ? \"Symbol(src)_1.\" + uid : \"\";\n}();\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString = objectProto.toString;\n/** Used to detect if a method is native. */ var reIsNative = RegExp(\"^\" + funcToString.call(hasOwnProperty).replace(reRegExpChar, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\n/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined, Symbol = root.Symbol, Uint8Array = root.Uint8Array, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeKeys = overArg(Object.keys, Object);\n/* Built-in method references that are verified to be native. */ var DataView = getNative(root, \"DataView\"), Map = getNative(root, \"Map\"), Promise = getNative(root, \"Promise\"), Set = getNative(root, \"Set\"), WeakMap = getNative(root, \"WeakMap\"), nativeCreate = getNative(Object, \"create\");\n/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);\n/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Hash(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c = Hash;\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */ function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n}\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n}\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n    }\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */ function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n    return this;\n}\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype[\"delete\"] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function ListCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c1 = ListCache;\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */ function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n}\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function listCacheDelete(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n        data.pop();\n    } else {\n        splice.call(data, index, 1);\n    }\n    --this.size;\n    return true;\n}\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function listCacheGet(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n}\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n}\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */ function listCacheSet(key, value) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        ++this.size;\n        data.push([\n            key,\n            value\n        ]);\n    } else {\n        data[index][1] = value;\n    }\n    return this;\n}\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype[\"delete\"] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function MapCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c2 = MapCache;\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */ function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n        \"hash\": new Hash,\n        \"map\": new (Map || ListCache),\n        \"string\": new Hash\n    };\n}\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function mapCacheDelete(key) {\n    var result = getMapData(this, key)[\"delete\"](key);\n    this.size -= result ? 1 : 0;\n    return result;\n}\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n}\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n}\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */ function mapCacheSet(key, value) {\n    var data = getMapData(this, key), size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n}\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype[\"delete\"] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */ function SetCache(values) {\n    var index = -1, length = values == null ? 0 : values.length;\n    this.__data__ = new MapCache;\n    while(++index < length){\n        this.add(values[index]);\n    }\n}\n_c3 = SetCache;\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */ function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n    return this;\n}\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */ function setCacheHas(value) {\n    return this.__data__.has(value);\n}\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n}\n_c4 = Stack;\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */ function stackClear() {\n    this.__data__ = new ListCache;\n    this.size = 0;\n}\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function stackDelete(key) {\n    var data = this.__data__, result = data[\"delete\"](key);\n    this.size = data.size;\n    return result;\n}\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function stackGet(key) {\n    return this.__data__.get(key);\n}\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function stackHas(key) {\n    return this.__data__.has(key);\n}\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */ function stackSet(key, value) {\n    var data = this.__data__;\n    if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n            pairs.push([\n                key,\n                value\n            ]);\n            this.size = ++data.size;\n            return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n    }\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n}\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype[\"delete\"] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */ function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;\n    for(var key in value){\n        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.\n        (key == \"length\" || // Node.js 0.10 has enumerable non-index properties on buffers.\n        isBuff && (key == \"offset\" || key == \"parent\") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n        isType && (key == \"buffer\" || key == \"byteLength\" || key == \"byteOffset\") || // Skip index properties.\n        isIndex(key, length)))) {\n            result.push(key);\n        }\n    }\n    return result;\n}\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function assocIndexOf(array, key) {\n    var length = array.length;\n    while(length--){\n        if (eq(array[length][0], key)) {\n            return length;\n        }\n    }\n    return -1;\n}\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ function baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */ function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */ function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n        return true;\n    }\n    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n        return value !== value && other !== other;\n    }\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;\n    if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n            return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n    }\n    if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, \"__wrapped__\"), othIsWrapped = othIsObj && hasOwnProperty.call(other, \"__wrapped__\");\n        if (objIsWrapped || othIsWrapped) {\n            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;\n            stack || (stack = new Stack);\n            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n    }\n    if (!isSameTag) {\n        return false;\n    }\n    stack || (stack = new Stack);\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */ function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n        return false;\n    }\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n}\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */ function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function baseKeys(object) {\n    if (!isPrototype(object)) {\n        return nativeKeys(object);\n    }\n    var result = [];\n    for(var key in Object(object)){\n        if (hasOwnProperty.call(object, key) && key != \"constructor\") {\n            result.push(key);\n        }\n    }\n    return result;\n}\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n    }\n    // Assume cyclic values are equal.\n    var stacked = stack.get(array);\n    if (stacked && stack.get(other)) {\n        return stacked == other;\n    }\n    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;\n    stack.set(array, other);\n    stack.set(other, array);\n    // Ignore non-index properties.\n    while(++index < arrLength){\n        var arrValue = array[index], othValue = other[index];\n        if (customizer) {\n            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n            if (compared) {\n                continue;\n            }\n            result = false;\n            break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n            if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                    return seen.push(othIndex);\n                }\n            })) {\n                result = false;\n                break;\n            }\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            result = false;\n            break;\n        }\n    }\n    stack[\"delete\"](array);\n    stack[\"delete\"](other);\n    return result;\n}\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch(tag){\n        case dataViewTag:\n            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n                return false;\n            }\n            object = object.buffer;\n            other = other.buffer;\n        case arrayBufferTag:\n            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n                return false;\n            }\n            return true;\n        case boolTag:\n        case dateTag:\n        case numberTag:\n            // Coerce booleans to `1` or `0` and dates to milliseconds.\n            // Invalid dates are coerced to `NaN`.\n            return eq(+object, +other);\n        case errorTag:\n            return object.name == other.name && object.message == other.message;\n        case regexpTag:\n        case stringTag:\n            // Coerce regexes to strings and treat strings, primitives and objects,\n            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n            // for more details.\n            return object == other + \"\";\n        case mapTag:\n            var convert = mapToArray;\n        case setTag:\n            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n            convert || (convert = setToArray);\n            if (object.size != other.size && !isPartial) {\n                return false;\n            }\n            // Assume cyclic values are equal.\n            var stacked = stack.get(object);\n            if (stacked) {\n                return stacked == other;\n            }\n            bitmask |= COMPARE_UNORDERED_FLAG;\n            // Recursively compare objects (susceptible to call stack limits).\n            stack.set(object, other);\n            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n            stack[\"delete\"](object);\n            return result;\n        case symbolTag:\n            if (symbolValueOf) {\n                return symbolValueOf.call(object) == symbolValueOf.call(other);\n            }\n    }\n    return false;\n}\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;\n    if (objLength != othLength && !isPartial) {\n        return false;\n    }\n    var index = objLength;\n    while(index--){\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n            return false;\n        }\n    }\n    // Assume cyclic values are equal.\n    var stacked = stack.get(object);\n    if (stacked && stack.get(other)) {\n        return stacked == other;\n    }\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n    while(++index < objLength){\n        key = objProps[index];\n        var objValue = object[key], othValue = other[key];\n        if (customizer) {\n            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n            result = false;\n            break;\n        }\n        skipCtor || (skipCtor = key == \"constructor\");\n    }\n    if (result && !skipCtor) {\n        var objCtor = object.constructor, othCtor = other.constructor;\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor && \"constructor\" in object && \"constructor\" in other && !(typeof objCtor == \"function\" && objCtor instanceof objCtor && typeof othCtor == \"function\" && othCtor instanceof othCtor)) {\n            result = false;\n        }\n    }\n    stack[\"delete\"](object);\n    stack[\"delete\"](other);\n    return result;\n}\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */ function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n}\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */ function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == \"string\" ? \"string\" : \"hash\"] : data.map;\n}\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */ function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */ function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n    } catch (e) {}\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        } else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n    if (object == null) {\n        return [];\n    }\n    object = Object(object);\n    return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n    });\n};\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ var getTag = baseGetTag;\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) {\n    getTag = function(value) {\n        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : \"\";\n        if (ctorString) {\n            switch(ctorString){\n                case dataViewCtorString:\n                    return dataViewTag;\n                case mapCtorString:\n                    return mapTag;\n                case promiseCtorString:\n                    return promiseTag;\n                case setCtorString:\n                    return setTag;\n                case weakMapCtorString:\n                    return weakMapTag;\n            }\n        }\n        return result;\n    };\n}\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */ function isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length && (typeof value == \"number\" || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */ function isKeyable(value) {\n    var type = typeof value;\n    return type == \"string\" || type == \"number\" || type == \"symbol\" || type == \"boolean\" ? value !== \"__proto__\" : value === null;\n}\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */ function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n}\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */ function isPrototype(value) {\n    var Ctor = value && value.constructor, proto = typeof Ctor == \"function\" && Ctor.prototype || objectProto;\n    return value === proto;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */ function objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */ function toSource(func) {\n    if (func != null) {\n        try {\n            return funcToString.call(func);\n        } catch (e) {}\n        try {\n            return func + \"\";\n        } catch (e) {}\n    }\n    return \"\";\n}\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */ function eq(value, other) {\n    return value === other || value !== value && other !== other;\n}\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */ var isArguments = baseIsArguments(function() {\n    return arguments;\n}()) ? baseIsArguments : function(value) {\n    return isObjectLike(value) && hasOwnProperty.call(value, \"callee\") && !propertyIsEnumerable.call(value, \"callee\");\n};\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */ var isArray = Array.isArray;\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */ function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n}\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */ var isBuffer = nativeIsBuffer || stubFalse;\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */ function isEqual(value, other) {\n    return baseIsEqual(value, other);\n}\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */ function isFunction(value) {\n    if (!isObject(value)) {\n        return false;\n    }\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */ function isLength(value) {\n    return typeof value == \"number\" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */ function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == \"object\" || type == \"function\");\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */ function isObjectLike(value) {\n    return value != null && typeof value == \"object\";\n}\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */ function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */ function stubArray() {\n    return [];\n}\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */ function stubFalse() {\n    return false;\n}\nmodule.exports = isEqual;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Hash\");\n$RefreshReg$(_c1, \"ListCache\");\n$RefreshReg$(_c2, \"MapCache\");\n$RefreshReg$(_c3, \"SetCache\");\n$RefreshReg$(_c4, \"Stack\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNlcXVhbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Q0FPQyxHQUVELDBEQUEwRDtBQUMxRCxJQUFJQSxtQkFBbUI7QUFFdkIsa0RBQWtELEdBQ2xELElBQUlDLGlCQUFpQjtBQUVyQixvREFBb0QsR0FDcEQsSUFBSUMsdUJBQXVCLEdBQ3ZCQyx5QkFBeUI7QUFFN0IsdURBQXVELEdBQ3ZELElBQUlDLG1CQUFtQjtBQUV2Qix5Q0FBeUMsR0FDekMsSUFBSUMsVUFBVSxzQkFDVkMsV0FBVyxrQkFDWEMsV0FBVywwQkFDWEMsVUFBVSxvQkFDVkMsVUFBVSxpQkFDVkMsV0FBVyxrQkFDWEMsVUFBVSxxQkFDVkMsU0FBUyw4QkFDVEMsU0FBUyxnQkFDVEMsWUFBWSxtQkFDWkMsVUFBVSxpQkFDVkMsWUFBWSxtQkFDWkMsYUFBYSxvQkFDYkMsV0FBVyxrQkFDWEMsWUFBWSxtQkFDWkMsU0FBUyxnQkFDVEMsWUFBWSxtQkFDWkMsWUFBWSxtQkFDWkMsZUFBZSxzQkFDZkMsYUFBYTtBQUVqQixJQUFJQyxpQkFBaUIsd0JBQ2pCQyxjQUFjLHFCQUNkQyxhQUFhLHlCQUNiQyxhQUFhLHlCQUNiQyxVQUFVLHNCQUNWQyxXQUFXLHVCQUNYQyxXQUFXLHVCQUNYQyxXQUFXLHVCQUNYQyxrQkFBa0IsOEJBQ2xCQyxZQUFZLHdCQUNaQyxZQUFZO0FBRWhCOzs7Q0FHQyxHQUNELElBQUlDLGVBQWU7QUFFbkIsK0NBQStDLEdBQy9DLElBQUlDLGVBQWU7QUFFbkIsNENBQTRDLEdBQzVDLElBQUlDLFdBQVc7QUFFZiwyREFBMkQsR0FDM0QsSUFBSUMsaUJBQWlCLENBQUM7QUFDdEJBLGNBQWMsQ0FBQ1osV0FBVyxHQUFHWSxjQUFjLENBQUNYLFdBQVcsR0FDdkRXLGNBQWMsQ0FBQ1YsUUFBUSxHQUFHVSxjQUFjLENBQUNULFNBQVMsR0FDbERTLGNBQWMsQ0FBQ1IsU0FBUyxHQUFHUSxjQUFj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Ozs7O0NBdUJDLEdBQ0QsU0FBU3BFLGFBQWFwSSxLQUFLO0lBQ3pCLE9BQU9BLFNBQVMsUUFBUSxPQUFPQSxTQUFTO0FBQzFDO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FDRCxJQUFJUixlQUFlRCxtQkFBbUJrQixVQUFVbEIsb0JBQW9CMEs7QUFFcEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTJCQyxHQUNELFNBQVMzSCxLQUFLdEIsTUFBTTtJQUNsQixPQUFPMkwsWUFBWTNMLFVBQVVpRyxjQUFjakcsVUFBVW1KLFNBQVNuSjtBQUNoRTtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNELFNBQVNrTDtJQUNQLE9BQU8sRUFBRTtBQUNYO0FBRUE7Ozs7Ozs7Ozs7OztDQVlDLEdBQ0QsU0FBU1U7SUFDUCxPQUFPO0FBQ1Q7QUFFQTVOLE9BQU9ILE9BQU8sR0FBR2dPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNlcXVhbC9pbmRleC5qcz9kYzllIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pzLmZvdW5kYXRpb24vPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIFN5bWJvbCA9IHJvb3QuU3ltYm9sLFxuICAgIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXksXG4gICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3JyksXG4gICAgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKSxcbiAgICBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyksXG4gICAgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKSxcbiAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyksXG4gICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiZcbiAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAqIGVxdWl2YWxlbnQuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIG9iamVjdCA9PT0gb3RoZXI7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0VxdWFsO1xuIl0sIm5hbWVzIjpbIkxBUkdFX0FSUkFZX1NJWkUiLCJIQVNIX1VOREVGSU5FRCIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsIk1BWF9TQUZFX0lOVEVHRVIiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJhc3luY1RhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwibnVsbFRhZyIsIm9iamVjdFRhZyIsInByb21pc2VUYWciLCJwcm94eVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsInVuZGVmaW5lZFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVSZWdFeHBDaGFyIiwicmVJc0hvc3RDdG9yIiwicmVJc1VpbnQiLCJ0eXBlZEFycmF5VGFncyIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJPYmplY3QiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJmcmVlRXhwb3J0cyIsImV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJtb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJiaW5kaW5nIiwiZSIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcnJheUZpbHRlciIsImFycmF5IiwicHJlZGljYXRlIiwiaW5kZXgiLCJsZW5ndGgiLCJyZXNJbmRleCIsInJlc3VsdCIsInZhbHVlIiwiYXJyYXlQdXNoIiwidmFsdWVzIiwib2Zmc2V0IiwiYXJyYXlTb21lIiwiYmFzZVRpbWVzIiwibiIsIml0ZXJhdGVlIiwiQXJyYXkiLCJiYXNlVW5hcnkiLCJmdW5jIiwiY2FjaGVIYXMiLCJjYWNoZSIsImtleSIsImhhcyIsImdldFZhbHVlIiwib2JqZWN0IiwidW5kZWZpbmVkIiwibWFwVG9BcnJheSIsIm1hcCIsInNpemUiLCJmb3JFYWNoIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFyZyIsInNldFRvQXJyYXkiLCJzZXQiLCJhcnJheVByb3RvIiwicHJvdG90eXBlIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwidG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsIm1hc2tTcmNLZXkiLCJ1aWQiLCJleGVjIiwia2V5cyIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJyZUlzTmF0aXZlIiwiUmVnRXhwIiwiY2FsbCIsInJlcGxhY2UiLCJCdWZmZXIiLCJTeW1ib2wiLCJVaW50OEFycmF5IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcGxpY2UiLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVLZXlzIiwiRGF0YVZpZXciLCJnZXROYXRpdmUiLCJNYXAiLCJQcm9taXNlIiwiU2V0IiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsIkhhc2giLCJlbnRyaWVzIiwiY2xlYXIiLCJlbnRyeSIsImhhc2hDbGVhciIsIl9fZGF0YV9fIiwiaGFzaERlbGV0ZSIsImhhc2hHZXQiLCJkYXRhIiwiaGFzaEhhcyIsImhhc2hTZXQiLCJnZXQiLCJMaXN0Q2FjaGUiLCJsaXN0Q2FjaGVDbGVhciIsImxpc3RDYWNoZURlbGV0ZSIsImFzc29jSW5kZXhPZiIsImxhc3RJbmRleCIsInBvcCIsImxpc3RDYWNoZUdldCIsImxpc3RDYWNoZUhhcyIsImxpc3RDYWNoZVNldCIsInB1c2giLCJNYXBDYWNoZSIsIm1hcENhY2hlQ2xlYXIiLCJtYXBDYWNoZURlbGV0ZSIsImdldE1hcERhdGEiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJTZXRDYWNoZSIsImFkZCIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJTdGFjayIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsInBhaXJzIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcnJheSIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsIlN0cmluZyIsImlzSW5kZXgiLCJlcSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VJc0FyZ3VtZW50cyIsImlzT2JqZWN0TGlrZSIsImJhc2VJc0VxdWFsIiwib3RoZXIiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiYmFzZUlzRXF1YWxEZWVwIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsImdldFRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJlcXVhbEFycmF5cyIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNOYXRpdmUiLCJpc09iamVjdCIsImlzTWFza2VkIiwicGF0dGVybiIsImlzRnVuY3Rpb24iLCJ0ZXN0IiwiYmFzZUlzVHlwZWRBcnJheSIsImlzTGVuZ3RoIiwiYmFzZUtleXMiLCJpc1Byb3RvdHlwZSIsImlzUGFydGlhbCIsImFyckxlbmd0aCIsIm90aExlbmd0aCIsInN0YWNrZWQiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJ0YWciLCJieXRlTGVuZ3RoIiwiYnl0ZU9mZnNldCIsImJ1ZmZlciIsIm5hbWUiLCJtZXNzYWdlIiwiY29udmVydCIsIm9ialByb3BzIiwiZ2V0QWxsS2V5cyIsIm9iakxlbmd0aCIsIm90aFByb3BzIiwic2tpcEN0b3IiLCJvYmpWYWx1ZSIsIm9iakN0b3IiLCJjb25zdHJ1Y3RvciIsIm90aEN0b3IiLCJnZXRTeW1ib2xzIiwiaXNLZXlhYmxlIiwiaXNPd24iLCJ1bm1hc2tlZCIsInN0dWJBcnJheSIsInN5bWJvbCIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsIkN0b3IiLCJjdG9yU3RyaW5nIiwidHlwZSIsInByb3RvIiwiYXJndW1lbnRzIiwiaXNBcnJheUxpa2UiLCJzdHViRmFsc2UiLCJpc0VxdWFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash.isequal/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/minimalistic-assert/index.js":
/*!***************************************************!*\
  !*** ./node_modules/minimalistic-assert/index.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = assert;\nfunction assert(val, msg) {\n    if (!val) throw new Error(msg || \"Assertion failed\");\n}\nassert.equal = function assertEqual(l, r, msg) {\n    if (l != r) throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxPQUFPQyxHQUFHLEVBQUVDLEdBQUc7SUFDdEIsSUFBSSxDQUFDRCxLQUNILE1BQU0sSUFBSUUsTUFBTUQsT0FBTztBQUMzQjtBQUVBRixPQUFPSSxLQUFLLEdBQUcsU0FBU0MsWUFBWUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVMLEdBQUc7SUFDM0MsSUFBSUksS0FBS0MsR0FDUCxNQUFNLElBQUlKLE1BQU1ELE9BQVEsdUJBQXVCSSxJQUFJLFNBQVNDO0FBQ2hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzPzQ3YTQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBhc3NlcnQ7XG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGFzc2VydEVxdWFsKGwsIHIsIG1zZykge1xuICBpZiAobCAhPSByKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgKCdBc3NlcnRpb24gZmFpbGVkOiAnICsgbCArICcgIT0gJyArIHIpKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFzc2VydCIsInZhbCIsIm1zZyIsIkVycm9yIiwiZXF1YWwiLCJhc3NlcnRFcXVhbCIsImwiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/minimalistic-assert/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/minimalistic-crypto-utils/lib/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/minimalistic-crypto-utils/lib/utils.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = exports;\nfunction toArray(msg, enc) {\n    if (Array.isArray(msg)) return msg.slice();\n    if (!msg) return [];\n    var res = [];\n    if (typeof msg !== \"string\") {\n        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;\n        return res;\n    }\n    if (enc === \"hex\") {\n        msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n        if (msg.length % 2 !== 0) msg = \"0\" + msg;\n        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));\n    } else {\n        for(var i = 0; i < msg.length; i++){\n            var c = msg.charCodeAt(i);\n            var hi = c >> 8;\n            var lo = c & 0xff;\n            if (hi) res.push(hi, lo);\n            else res.push(lo);\n        }\n    }\n    return res;\n}\nutils.toArray = toArray;\nfunction zero2(word) {\n    if (word.length === 1) return \"0\" + word;\n    else return word;\n}\nutils.zero2 = zero2;\nfunction toHex(msg) {\n    var res = \"\";\n    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));\n    return res;\n}\nutils.toHex = toHex;\nutils.encode = function encode(arr, enc) {\n    if (enc === \"hex\") return toHex(arr);\n    else return arr;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzL2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDO0FBRVosU0FBU0MsUUFBUUMsR0FBRyxFQUFFQyxHQUFHO0lBQ3ZCLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0gsTUFDaEIsT0FBT0EsSUFBSUksS0FBSztJQUNsQixJQUFJLENBQUNKLEtBQ0gsT0FBTyxFQUFFO0lBQ1gsSUFBSUssTUFBTSxFQUFFO0lBQ1osSUFBSSxPQUFPTCxRQUFRLFVBQVU7UUFDM0IsSUFBSyxJQUFJTSxJQUFJLEdBQUdBLElBQUlOLElBQUlPLE1BQU0sRUFBRUQsSUFDOUJELEdBQUcsQ0FBQ0MsRUFBRSxHQUFHTixHQUFHLENBQUNNLEVBQUUsR0FBRztRQUNwQixPQUFPRDtJQUNUO0lBQ0EsSUFBSUosUUFBUSxPQUFPO1FBQ2pCRCxNQUFNQSxJQUFJUSxPQUFPLENBQUMsZ0JBQWdCO1FBQ2xDLElBQUlSLElBQUlPLE1BQU0sR0FBRyxNQUFNLEdBQ3JCUCxNQUFNLE1BQU1BO1FBQ2QsSUFBSyxJQUFJTSxJQUFJLEdBQUdBLElBQUlOLElBQUlPLE1BQU0sRUFBRUQsS0FBSyxFQUNuQ0QsSUFBSUksSUFBSSxDQUFDQyxTQUFTVixHQUFHLENBQUNNLEVBQUUsR0FBR04sR0FBRyxDQUFDTSxJQUFJLEVBQUUsRUFBRTtJQUMzQyxPQUFPO1FBQ0wsSUFBSyxJQUFJQSxJQUFJLEdBQUdBLElBQUlOLElBQUlPLE1BQU0sRUFBRUQsSUFBSztZQUNuQyxJQUFJSyxJQUFJWCxJQUFJWSxVQUFVLENBQUNOO1lBQ3ZCLElBQUlPLEtBQUtGLEtBQUs7WUFDZCxJQUFJRyxLQUFLSCxJQUFJO1lBQ2IsSUFBSUUsSUFDRlIsSUFBSUksSUFBSSxDQUFDSSxJQUFJQztpQkFFYlQsSUFBSUksSUFBSSxDQUFDSztRQUNiO0lBQ0Y7SUFDQSxPQUFPVDtBQUNUO0FBQ0FSLE1BQU1FLE9BQU8sR0FBR0E7QUFFaEIsU0FBU2dCLE1BQU1DLElBQUk7SUFDakIsSUFBSUEsS0FBS1QsTUFBTSxLQUFLLEdBQ2xCLE9BQU8sTUFBTVM7U0FFYixPQUFPQTtBQUNYO0FBQ0FuQixNQUFNa0IsS0FBSyxHQUFHQTtBQUVkLFNBQVNFLE1BQU1qQixHQUFHO0lBQ2hCLElBQUlLLE1BQU07SUFDVixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSU4sSUFBSU8sTUFBTSxFQUFFRCxJQUM5QkQsT0FBT1UsTUFBTWYsR0FBRyxDQUFDTSxFQUFFLENBQUNZLFFBQVEsQ0FBQztJQUMvQixPQUFPYjtBQUNUO0FBQ0FSLE1BQU1vQixLQUFLLEdBQUdBO0FBRWRwQixNQUFNc0IsTUFBTSxHQUFHLFNBQVNBLE9BQU9DLEdBQUcsRUFBRW5CLEdBQUc7SUFDckMsSUFBSUEsUUFBUSxPQUNWLE9BQU9nQixNQUFNRztTQUViLE9BQU9BO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMvbGliL3V0aWxzLmpzPzM4YzMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSBleHBvcnRzO1xuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgIT09ICdzdHJpbmcnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgIGlmIChtc2cubGVuZ3RoICUgMiAhPT0gMClcbiAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gMilcbiAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgICB2YXIgaGkgPSBjID4+IDg7XG4gICAgICB2YXIgbG8gPSBjICYgMHhmZjtcbiAgICAgIGlmIChoaSlcbiAgICAgICAgcmVzLnB1c2goaGksIGxvKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmVzLnB1c2gobG8pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9BcnJheSA9IHRvQXJyYXk7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG51dGlscy56ZXJvMiA9IHplcm8yO1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0hleCA9IHRvSGV4O1xuXG51dGlscy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoYXJyLCBlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHRvSGV4KGFycik7XG4gIGVsc2VcbiAgICByZXR1cm4gYXJyO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsImV4cG9ydHMiLCJ0b0FycmF5IiwibXNnIiwiZW5jIiwiQXJyYXkiLCJpc0FycmF5Iiwic2xpY2UiLCJyZXMiLCJpIiwibGVuZ3RoIiwicmVwbGFjZSIsInB1c2giLCJwYXJzZUludCIsImMiLCJjaGFyQ29kZUF0IiwiaGkiLCJsbyIsInplcm8yIiwid29yZCIsInRvSGV4IiwidG9TdHJpbmciLCJlbmNvZGUiLCJhcnIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/minimalistic-crypto-utils/lib/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quick-format-unescaped/index.js":
/*!******************************************************!*\
  !*** ./node_modules/quick-format-unescaped/index.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nfunction tryStringify(o) {\n    try {\n        return JSON.stringify(o);\n    } catch (e) {\n        return '\"[Circular]\"';\n    }\n}\nmodule.exports = format;\nfunction format(f, args, opts) {\n    var ss = opts && opts.stringify || tryStringify;\n    var offset = 1;\n    if (typeof f === \"object\" && f !== null) {\n        var len = args.length + offset;\n        if (len === 1) return f;\n        var objects = new Array(len);\n        objects[0] = ss(f);\n        for(var index = 1; index < len; index++){\n            objects[index] = ss(args[index]);\n        }\n        return objects.join(\" \");\n    }\n    if (typeof f !== \"string\") {\n        return f;\n    }\n    var argLen = args.length;\n    if (argLen === 0) return f;\n    var str = \"\";\n    var a = 1 - offset;\n    var lastPos = -1;\n    var flen = f && f.length || 0;\n    for(var i = 0; i < flen;){\n        if (f.charCodeAt(i) === 37 && i + 1 < flen) {\n            lastPos = lastPos > -1 ? lastPos : 0;\n            switch(f.charCodeAt(i + 1)){\n                case 100:\n                case 102:\n                    if (a >= argLen) break;\n                    if (args[a] == null) break;\n                    if (lastPos < i) str += f.slice(lastPos, i);\n                    str += Number(args[a]);\n                    lastPos = i + 2;\n                    i++;\n                    break;\n                case 105:\n                    if (a >= argLen) break;\n                    if (args[a] == null) break;\n                    if (lastPos < i) str += f.slice(lastPos, i);\n                    str += Math.floor(Number(args[a]));\n                    lastPos = i + 2;\n                    i++;\n                    break;\n                case 79:\n                case 111:\n                case 106:\n                    if (a >= argLen) break;\n                    if (args[a] === undefined) break;\n                    if (lastPos < i) str += f.slice(lastPos, i);\n                    var type = typeof args[a];\n                    if (type === \"string\") {\n                        str += \"'\" + args[a] + \"'\";\n                        lastPos = i + 2;\n                        i++;\n                        break;\n                    }\n                    if (type === \"function\") {\n                        str += args[a].name || \"<anonymous>\";\n                        lastPos = i + 2;\n                        i++;\n                        break;\n                    }\n                    str += ss(args[a]);\n                    lastPos = i + 2;\n                    i++;\n                    break;\n                case 115:\n                    if (a >= argLen) break;\n                    if (lastPos < i) str += f.slice(lastPos, i);\n                    str += String(args[a]);\n                    lastPos = i + 2;\n                    i++;\n                    break;\n                case 37:\n                    if (lastPos < i) str += f.slice(lastPos, i);\n                    str += \"%\";\n                    lastPos = i + 2;\n                    i++;\n                    a--;\n                    break;\n            }\n            ++a;\n        }\n        ++i;\n    }\n    if (lastPos === -1) return f;\n    else if (lastPos < flen) {\n        str += f.slice(lastPos);\n    }\n    return str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWljay1mb3JtYXQtdW5lc2NhcGVkL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsU0FBU0EsYUFBY0MsQ0FBQztJQUN0QixJQUFJO1FBQUUsT0FBT0MsS0FBS0MsU0FBUyxDQUFDRjtJQUFHLEVBQUUsT0FBTUcsR0FBRztRQUFFLE9BQU87SUFBZTtBQUNwRTtBQUVBQyxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLFNBQVNBLE9BQU9DLENBQUMsRUFBRUMsSUFBSSxFQUFFQyxJQUFJO0lBQzNCLElBQUlDLEtBQUssUUFBU0QsS0FBS1AsU0FBUyxJQUFLSDtJQUNyQyxJQUFJWSxTQUFTO0lBQ2IsSUFBSSxPQUFPSixNQUFNLFlBQVlBLE1BQU0sTUFBTTtRQUN2QyxJQUFJSyxNQUFNSixLQUFLSyxNQUFNLEdBQUdGO1FBQ3hCLElBQUlDLFFBQVEsR0FBRyxPQUFPTDtRQUN0QixJQUFJTyxVQUFVLElBQUlDLE1BQU1IO1FBQ3hCRSxPQUFPLENBQUMsRUFBRSxHQUFHSixHQUFHSDtRQUNoQixJQUFLLElBQUlTLFFBQVEsR0FBR0EsUUFBUUosS0FBS0ksUUFBUztZQUN4Q0YsT0FBTyxDQUFDRSxNQUFNLEdBQUdOLEdBQUdGLElBQUksQ0FBQ1EsTUFBTTtRQUNqQztRQUNBLE9BQU9GLFFBQVFHLElBQUksQ0FBQztJQUN0QjtJQUNBLElBQUksT0FBT1YsTUFBTSxVQUFVO1FBQ3pCLE9BQU9BO0lBQ1Q7SUFDQSxJQUFJVyxTQUFTVixLQUFLSyxNQUFNO0lBQ3hCLElBQUlLLFdBQVcsR0FBRyxPQUFPWDtJQUN6QixJQUFJWSxNQUFNO0lBQ1YsSUFBSUMsSUFBSSxJQUFJVDtJQUNaLElBQUlVLFVBQVUsQ0FBQztJQUNmLElBQUlDLE9BQU8sS0FBTWYsRUFBRU0sTUFBTSxJQUFLO0lBQzlCLElBQUssSUFBSVUsSUFBSSxHQUFHQSxJQUFJRCxNQUFPO1FBQ3pCLElBQUlmLEVBQUVpQixVQUFVLENBQUNELE9BQU8sTUFBTUEsSUFBSSxJQUFJRCxNQUFNO1lBQzFDRCxVQUFVQSxVQUFVLENBQUMsSUFBSUEsVUFBVTtZQUNuQyxPQUFRZCxFQUFFaUIsVUFBVSxDQUFDRCxJQUFJO2dCQUN2QixLQUFLO2dCQUNMLEtBQUs7b0JBQ0gsSUFBSUgsS0FBS0YsUUFDUDtvQkFDRixJQUFJVixJQUFJLENBQUNZLEVBQUUsSUFBSSxNQUFPO29CQUN0QixJQUFJQyxVQUFVRSxHQUNaSixPQUFPWixFQUFFa0IsS0FBSyxDQUFDSixTQUFTRTtvQkFDMUJKLE9BQU9PLE9BQU9sQixJQUFJLENBQUNZLEVBQUU7b0JBQ3JCQyxVQUFVRSxJQUFJO29CQUNkQTtvQkFDQTtnQkFDRixLQUFLO29CQUNILElBQUlILEtBQUtGLFFBQ1A7b0JBQ0YsSUFBSVYsSUFBSSxDQUFDWSxFQUFFLElBQUksTUFBTztvQkFDdEIsSUFBSUMsVUFBVUUsR0FDWkosT0FBT1osRUFBRWtCLEtBQUssQ0FBQ0osU0FBU0U7b0JBQzFCSixPQUFPUSxLQUFLQyxLQUFLLENBQUNGLE9BQU9sQixJQUFJLENBQUNZLEVBQUU7b0JBQ2hDQyxVQUFVRSxJQUFJO29CQUNkQTtvQkFDQTtnQkFDRixLQUFLO2dCQUNMLEtBQUs7Z0JBQ0wsS0FBSztvQkFDSCxJQUFJSCxLQUFLRixRQUNQO29CQUNGLElBQUlWLElBQUksQ0FBQ1ksRUFBRSxLQUFLUyxXQUFXO29CQUMzQixJQUFJUixVQUFVRSxHQUNaSixPQUFPWixFQUFFa0IsS0FBSyxDQUFDSixTQUFTRTtvQkFDMUIsSUFBSU8sT0FBTyxPQUFPdEIsSUFBSSxDQUFDWSxFQUFFO29CQUN6QixJQUFJVSxTQUFTLFVBQVU7d0JBQ3JCWCxPQUFPLE1BQU9YLElBQUksQ0FBQ1ksRUFBRSxHQUFHO3dCQUN4QkMsVUFBVUUsSUFBSTt3QkFDZEE7d0JBQ0E7b0JBQ0Y7b0JBQ0EsSUFBSU8sU0FBUyxZQUFZO3dCQUN2QlgsT0FBT1gsSUFBSSxDQUFDWSxFQUFFLENBQUNXLElBQUksSUFBSTt3QkFDdkJWLFVBQVVFLElBQUk7d0JBQ2RBO3dCQUNBO29CQUNGO29CQUNBSixPQUFPVCxHQUFHRixJQUFJLENBQUNZLEVBQUU7b0JBQ2pCQyxVQUFVRSxJQUFJO29CQUNkQTtvQkFDQTtnQkFDRixLQUFLO29CQUNILElBQUlILEtBQUtGLFFBQ1A7b0JBQ0YsSUFBSUcsVUFBVUUsR0FDWkosT0FBT1osRUFBRWtCLEtBQUssQ0FBQ0osU0FBU0U7b0JBQzFCSixPQUFPYSxPQUFPeEIsSUFBSSxDQUFDWSxFQUFFO29CQUNyQkMsVUFBVUUsSUFBSTtvQkFDZEE7b0JBQ0E7Z0JBQ0YsS0FBSztvQkFDSCxJQUFJRixVQUFVRSxHQUNaSixPQUFPWixFQUFFa0IsS0FBSyxDQUFDSixTQUFTRTtvQkFDMUJKLE9BQU87b0JBQ1BFLFVBQVVFLElBQUk7b0JBQ2RBO29CQUNBSDtvQkFDQTtZQUNKO1lBQ0EsRUFBRUE7UUFDSjtRQUNBLEVBQUVHO0lBQ0o7SUFDQSxJQUFJRixZQUFZLENBQUMsR0FDZixPQUFPZDtTQUNKLElBQUljLFVBQVVDLE1BQU07UUFDdkJILE9BQU9aLEVBQUVrQixLQUFLLENBQUNKO0lBQ2pCO0lBRUEsT0FBT0Y7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcXVpY2stZm9ybWF0LXVuZXNjYXBlZC9pbmRleC5qcz9iZDZhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuZnVuY3Rpb24gdHJ5U3RyaW5naWZ5IChvKSB7XG4gIHRyeSB7IHJldHVybiBKU09OLnN0cmluZ2lmeShvKSB9IGNhdGNoKGUpIHsgcmV0dXJuICdcIltDaXJjdWxhcl1cIicgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdFxuXG5mdW5jdGlvbiBmb3JtYXQoZiwgYXJncywgb3B0cykge1xuICB2YXIgc3MgPSAob3B0cyAmJiBvcHRzLnN0cmluZ2lmeSkgfHwgdHJ5U3RyaW5naWZ5XG4gIHZhciBvZmZzZXQgPSAxXG4gIGlmICh0eXBlb2YgZiA9PT0gJ29iamVjdCcgJiYgZiAhPT0gbnVsbCkge1xuICAgIHZhciBsZW4gPSBhcmdzLmxlbmd0aCArIG9mZnNldFxuICAgIGlmIChsZW4gPT09IDEpIHJldHVybiBmXG4gICAgdmFyIG9iamVjdHMgPSBuZXcgQXJyYXkobGVuKVxuICAgIG9iamVjdHNbMF0gPSBzcyhmKVxuICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBsZW47IGluZGV4KyspIHtcbiAgICAgIG9iamVjdHNbaW5kZXhdID0gc3MoYXJnc1tpbmRleF0pXG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKVxuICB9XG4gIGlmICh0eXBlb2YgZiAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZlxuICB9XG4gIHZhciBhcmdMZW4gPSBhcmdzLmxlbmd0aFxuICBpZiAoYXJnTGVuID09PSAwKSByZXR1cm4gZlxuICB2YXIgc3RyID0gJydcbiAgdmFyIGEgPSAxIC0gb2Zmc2V0XG4gIHZhciBsYXN0UG9zID0gLTFcbiAgdmFyIGZsZW4gPSAoZiAmJiBmLmxlbmd0aCkgfHwgMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZsZW47KSB7XG4gICAgaWYgKGYuY2hhckNvZGVBdChpKSA9PT0gMzcgJiYgaSArIDEgPCBmbGVuKSB7XG4gICAgICBsYXN0UG9zID0gbGFzdFBvcyA+IC0xID8gbGFzdFBvcyA6IDBcbiAgICAgIHN3aXRjaCAoZi5jaGFyQ29kZUF0KGkgKyAxKSkge1xuICAgICAgICBjYXNlIDEwMDogLy8gJ2QnXG4gICAgICAgIGNhc2UgMTAyOiAvLyAnZidcbiAgICAgICAgICBpZiAoYSA+PSBhcmdMZW4pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGlmIChhcmdzW2FdID09IG51bGwpICBicmVha1xuICAgICAgICAgIGlmIChsYXN0UG9zIDwgaSlcbiAgICAgICAgICAgIHN0ciArPSBmLnNsaWNlKGxhc3RQb3MsIGkpXG4gICAgICAgICAgc3RyICs9IE51bWJlcihhcmdzW2FdKVxuICAgICAgICAgIGxhc3RQb3MgPSBpICsgMlxuICAgICAgICAgIGkrK1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTA1OiAvLyAnaSdcbiAgICAgICAgICBpZiAoYSA+PSBhcmdMZW4pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGlmIChhcmdzW2FdID09IG51bGwpICBicmVha1xuICAgICAgICAgIGlmIChsYXN0UG9zIDwgaSlcbiAgICAgICAgICAgIHN0ciArPSBmLnNsaWNlKGxhc3RQb3MsIGkpXG4gICAgICAgICAgc3RyICs9IE1hdGguZmxvb3IoTnVtYmVyKGFyZ3NbYV0pKVxuICAgICAgICAgIGxhc3RQb3MgPSBpICsgMlxuICAgICAgICAgIGkrK1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNzk6IC8vICdPJ1xuICAgICAgICBjYXNlIDExMTogLy8gJ28nXG4gICAgICAgIGNhc2UgMTA2OiAvLyAnaidcbiAgICAgICAgICBpZiAoYSA+PSBhcmdMZW4pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGlmIChhcmdzW2FdID09PSB1bmRlZmluZWQpIGJyZWFrXG4gICAgICAgICAgaWYgKGxhc3RQb3MgPCBpKVxuICAgICAgICAgICAgc3RyICs9IGYuc2xpY2UobGFzdFBvcywgaSlcbiAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBhcmdzW2FdXG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzdHIgKz0gJ1xcJycgKyBhcmdzW2FdICsgJ1xcJydcbiAgICAgICAgICAgIGxhc3RQb3MgPSBpICsgMlxuICAgICAgICAgICAgaSsrXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RyICs9IGFyZ3NbYV0ubmFtZSB8fCAnPGFub255bW91cz4nXG4gICAgICAgICAgICBsYXN0UG9zID0gaSArIDJcbiAgICAgICAgICAgIGkrK1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RyICs9IHNzKGFyZ3NbYV0pXG4gICAgICAgICAgbGFzdFBvcyA9IGkgKyAyXG4gICAgICAgICAgaSsrXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxMTU6IC8vICdzJ1xuICAgICAgICAgIGlmIChhID49IGFyZ0xlbilcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgaWYgKGxhc3RQb3MgPCBpKVxuICAgICAgICAgICAgc3RyICs9IGYuc2xpY2UobGFzdFBvcywgaSlcbiAgICAgICAgICBzdHIgKz0gU3RyaW5nKGFyZ3NbYV0pXG4gICAgICAgICAgbGFzdFBvcyA9IGkgKyAyXG4gICAgICAgICAgaSsrXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzNzogLy8gJyUnXG4gICAgICAgICAgaWYgKGxhc3RQb3MgPCBpKVxuICAgICAgICAgICAgc3RyICs9IGYuc2xpY2UobGFzdFBvcywgaSlcbiAgICAgICAgICBzdHIgKz0gJyUnXG4gICAgICAgICAgbGFzdFBvcyA9IGkgKyAyXG4gICAgICAgICAgaSsrXG4gICAgICAgICAgYS0tXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgICsrYVxuICAgIH1cbiAgICArK2lcbiAgfVxuICBpZiAobGFzdFBvcyA9PT0gLTEpXG4gICAgcmV0dXJuIGZcbiAgZWxzZSBpZiAobGFzdFBvcyA8IGZsZW4pIHtcbiAgICBzdHIgKz0gZi5zbGljZShsYXN0UG9zKVxuICB9XG5cbiAgcmV0dXJuIHN0clxufVxuIl0sIm5hbWVzIjpbInRyeVN0cmluZ2lmeSIsIm8iLCJKU09OIiwic3RyaW5naWZ5IiwiZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJmb3JtYXQiLCJmIiwiYXJncyIsIm9wdHMiLCJzcyIsIm9mZnNldCIsImxlbiIsImxlbmd0aCIsIm9iamVjdHMiLCJBcnJheSIsImluZGV4Iiwiam9pbiIsImFyZ0xlbiIsInN0ciIsImEiLCJsYXN0UG9zIiwiZmxlbiIsImkiLCJjaGFyQ29kZUF0Iiwic2xpY2UiLCJOdW1iZXIiLCJNYXRoIiwiZmxvb3IiLCJ1bmRlZmluZWQiLCJ0eXBlIiwibmFtZSIsIlN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quick-format-unescaped/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/pino/browser.js":
/*!**************************************!*\
  !*** ./node_modules/pino/browser.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst format = __webpack_require__(/*! quick-format-unescaped */ \"(app-pages-browser)/./node_modules/quick-format-unescaped/index.js\");\nmodule.exports = pino;\nconst _console = pfGlobalThisOrFallback().console || {};\nconst stdSerializers = {\n    mapHttpRequest: mock,\n    mapHttpResponse: mock,\n    wrapRequestSerializer: passthrough,\n    wrapResponseSerializer: passthrough,\n    wrapErrorSerializer: passthrough,\n    req: mock,\n    res: mock,\n    err: asErrValue\n};\nfunction shouldSerialize(serialize, serializers) {\n    if (Array.isArray(serialize)) {\n        const hasToFilter = serialize.filter(function(k) {\n            return k !== \"!stdSerializers.err\";\n        });\n        return hasToFilter;\n    } else if (serialize === true) {\n        return Object.keys(serializers);\n    }\n    return false;\n}\nfunction pino(opts) {\n    opts = opts || {};\n    opts.browser = opts.browser || {};\n    const transmit = opts.browser.transmit;\n    if (transmit && typeof transmit.send !== \"function\") {\n        throw Error(\"pino: transmit option must have a send function\");\n    }\n    const proto = opts.browser.write || _console;\n    if (opts.browser.write) opts.browser.asObject = true;\n    const serializers = opts.serializers || {};\n    const serialize = shouldSerialize(opts.browser.serialize, serializers);\n    let stdErrSerialize = opts.browser.serialize;\n    if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf(\"!stdSerializers.err\") > -1) stdErrSerialize = false;\n    const levels = [\n        \"error\",\n        \"fatal\",\n        \"warn\",\n        \"info\",\n        \"debug\",\n        \"trace\"\n    ];\n    if (typeof proto === \"function\") {\n        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;\n    }\n    if (opts.enabled === false) opts.level = \"silent\";\n    const level = opts.level || \"info\";\n    const logger = Object.create(proto);\n    if (!logger.log) logger.log = noop;\n    Object.defineProperty(logger, \"levelVal\", {\n        get: getLevelVal\n    });\n    Object.defineProperty(logger, \"level\", {\n        get: getLevel,\n        set: setLevel\n    });\n    const setOpts = {\n        transmit,\n        serialize,\n        asObject: opts.browser.asObject,\n        levels,\n        timestamp: getTimeFunction(opts)\n    };\n    logger.levels = pino.levels;\n    logger.level = level;\n    logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;\n    logger.serializers = serializers;\n    logger._serialize = serialize;\n    logger._stdErrSerialize = stdErrSerialize;\n    logger.child = child;\n    if (transmit) logger._logEvent = createLogEventShape();\n    function getLevelVal() {\n        return this.level === \"silent\" ? Infinity : this.levels.values[this.level];\n    }\n    function getLevel() {\n        return this._level;\n    }\n    function setLevel(level) {\n        if (level !== \"silent\" && !this.levels.values[level]) {\n            throw Error(\"unknown level \" + level);\n        }\n        this._level = level;\n        set(setOpts, logger, \"error\", \"log\") // <-- must stay first\n        ;\n        set(setOpts, logger, \"fatal\", \"error\");\n        set(setOpts, logger, \"warn\", \"error\");\n        set(setOpts, logger, \"info\", \"log\");\n        set(setOpts, logger, \"debug\", \"log\");\n        set(setOpts, logger, \"trace\", \"log\");\n    }\n    function child(bindings, childOptions) {\n        if (!bindings) {\n            throw new Error(\"missing bindings for child Pino\");\n        }\n        childOptions = childOptions || {};\n        if (serialize && bindings.serializers) {\n            childOptions.serializers = bindings.serializers;\n        }\n        const childOptionsSerializers = childOptions.serializers;\n        if (serialize && childOptionsSerializers) {\n            var childSerializers = Object.assign({}, serializers, childOptionsSerializers);\n            var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;\n            delete bindings.serializers;\n            applySerializers([\n                bindings\n            ], childSerialize, childSerializers, this._stdErrSerialize);\n        }\n        function Child(parent) {\n            this._childLevel = (parent._childLevel | 0) + 1;\n            this.error = bind(parent, bindings, \"error\");\n            this.fatal = bind(parent, bindings, \"fatal\");\n            this.warn = bind(parent, bindings, \"warn\");\n            this.info = bind(parent, bindings, \"info\");\n            this.debug = bind(parent, bindings, \"debug\");\n            this.trace = bind(parent, bindings, \"trace\");\n            if (childSerializers) {\n                this.serializers = childSerializers;\n                this._serialize = childSerialize;\n            }\n            if (transmit) {\n                this._logEvent = createLogEventShape([].concat(parent._logEvent.bindings, bindings));\n            }\n        }\n        Child.prototype = this;\n        return new Child(this);\n    }\n    return logger;\n}\npino.levels = {\n    values: {\n        fatal: 60,\n        error: 50,\n        warn: 40,\n        info: 30,\n        debug: 20,\n        trace: 10\n    },\n    labels: {\n        10: \"trace\",\n        20: \"debug\",\n        30: \"info\",\n        40: \"warn\",\n        50: \"error\",\n        60: \"fatal\"\n    }\n};\npino.stdSerializers = stdSerializers;\npino.stdTimeFunctions = Object.assign({}, {\n    nullTime,\n    epochTime,\n    unixTime,\n    isoTime\n});\nfunction set(opts, logger, level, fallback) {\n    const proto = Object.getPrototypeOf(logger);\n    logger[level] = logger.levelVal > logger.levels.values[level] ? noop : proto[level] ? proto[level] : _console[level] || _console[fallback] || noop;\n    wrap(opts, logger, level);\n}\nfunction wrap(opts, logger, level) {\n    if (!opts.transmit && logger[level] === noop) return;\n    logger[level] = function(write) {\n        return function LOG() {\n            const ts = opts.timestamp();\n            const args = new Array(arguments.length);\n            const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;\n            for(var i = 0; i < args.length; i++)args[i] = arguments[i];\n            if (opts.serialize && !opts.asObject) {\n                applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);\n            }\n            if (opts.asObject) write.call(proto, asObject(this, level, args, ts));\n            else write.apply(proto, args);\n            if (opts.transmit) {\n                const transmitLevel = opts.transmit.level || logger.level;\n                const transmitValue = pino.levels.values[transmitLevel];\n                const methodValue = pino.levels.values[level];\n                if (methodValue < transmitValue) return;\n                transmit(this, {\n                    ts,\n                    methodLevel: level,\n                    methodValue,\n                    transmitLevel,\n                    transmitValue: pino.levels.values[opts.transmit.level || logger.level],\n                    send: opts.transmit.send,\n                    val: logger.levelVal\n                }, args);\n            }\n        };\n    }(logger[level]);\n}\nfunction asObject(logger, level, args, ts) {\n    if (logger._serialize) applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);\n    const argsCloned = args.slice();\n    let msg = argsCloned[0];\n    const o = {};\n    if (ts) {\n        o.time = ts;\n    }\n    o.level = pino.levels.values[level];\n    let lvl = (logger._childLevel | 0) + 1;\n    if (lvl < 1) lvl = 1;\n    // deliberate, catching objects, arrays\n    if (msg !== null && typeof msg === \"object\") {\n        while(lvl-- && typeof argsCloned[0] === \"object\"){\n            Object.assign(o, argsCloned.shift());\n        }\n        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : undefined;\n    } else if (typeof msg === \"string\") msg = format(argsCloned.shift(), argsCloned);\n    if (msg !== undefined) o.msg = msg;\n    return o;\n}\nfunction applySerializers(args, serialize, serializers, stdErrSerialize) {\n    for(const i in args){\n        if (stdErrSerialize && args[i] instanceof Error) {\n            args[i] = pino.stdSerializers.err(args[i]);\n        } else if (typeof args[i] === \"object\" && !Array.isArray(args[i])) {\n            for(const k in args[i]){\n                if (serialize && serialize.indexOf(k) > -1 && k in serializers) {\n                    args[i][k] = serializers[k](args[i][k]);\n                }\n            }\n        }\n    }\n}\nfunction bind(parent, bindings, level) {\n    return function() {\n        const args = new Array(1 + arguments.length);\n        args[0] = bindings;\n        for(var i = 1; i < args.length; i++){\n            args[i] = arguments[i - 1];\n        }\n        return parent[level].apply(this, args);\n    };\n}\nfunction transmit(logger, opts, args) {\n    const send = opts.send;\n    const ts = opts.ts;\n    const methodLevel = opts.methodLevel;\n    const methodValue = opts.methodValue;\n    const val = opts.val;\n    const bindings = logger._logEvent.bindings;\n    applySerializers(args, logger._serialize || Object.keys(logger.serializers), logger.serializers, logger._stdErrSerialize === undefined ? true : logger._stdErrSerialize);\n    logger._logEvent.ts = ts;\n    logger._logEvent.messages = args.filter(function(arg) {\n        // bindings can only be objects, so reference equality check via indexOf is fine\n        return bindings.indexOf(arg) === -1;\n    });\n    logger._logEvent.level.label = methodLevel;\n    logger._logEvent.level.value = methodValue;\n    send(methodLevel, logger._logEvent, val);\n    logger._logEvent = createLogEventShape(bindings);\n}\nfunction createLogEventShape(bindings) {\n    return {\n        ts: 0,\n        messages: [],\n        bindings: bindings || [],\n        level: {\n            label: \"\",\n            value: 0\n        }\n    };\n}\nfunction asErrValue(err) {\n    const obj = {\n        type: err.constructor.name,\n        msg: err.message,\n        stack: err.stack\n    };\n    for(const key in err){\n        if (obj[key] === undefined) {\n            obj[key] = err[key];\n        }\n    }\n    return obj;\n}\nfunction getTimeFunction(opts) {\n    if (typeof opts.timestamp === \"function\") {\n        return opts.timestamp;\n    }\n    if (opts.timestamp === false) {\n        return nullTime;\n    }\n    return epochTime;\n}\nfunction mock() {\n    return {};\n}\nfunction passthrough(a) {\n    return a;\n}\nfunction noop() {}\nfunction nullTime() {\n    return false;\n}\nfunction epochTime() {\n    return Date.now();\n}\nfunction unixTime() {\n    return Math.round(Date.now() / 1000.0);\n}\nfunction isoTime() {\n    return new Date(Date.now()).toISOString();\n} // using Date.now() for testability\n/* eslint-disable */ /* istanbul ignore next */ function pfGlobalThisOrFallback() {\n    function defd(o) {\n        return typeof o !== \"undefined\" && o;\n    }\n    try {\n        if (typeof globalThis !== \"undefined\") return globalThis;\n        Object.defineProperty(Object.prototype, \"globalThis\", {\n            get: function() {\n                delete Object.prototype.globalThis;\n                return this.globalThis = this;\n            },\n            configurable: true\n        });\n        return globalThis;\n    } catch (e) {\n        return defd(self) || defd(window) || defd(this) || {};\n    }\n} /* eslint-enable */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/pino/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs ***!
  \********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   builtinDrivers: function() { return /* binding */ builtinDrivers; },\n/* harmony export */   createStorage: function() { return /* binding */ createStorage; },\n/* harmony export */   defineDriver: function() { return /* binding */ defineDriver; },\n/* harmony export */   filterKeyByBase: function() { return /* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.c; },\n/* harmony export */   filterKeyByDepth: function() { return /* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.f; },\n/* harmony export */   joinKeys: function() { return /* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.j; },\n/* harmony export */   normalizeBaseKey: function() { return /* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n; },\n/* harmony export */   normalizeKey: function() { return /* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a; },\n/* harmony export */   prefixStorage: function() { return /* reexport safe */ _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.p; },\n/* harmony export */   restoreSnapshot: function() { return /* binding */ restoreSnapshot; },\n/* harmony export */   snapshot: function() { return /* binding */ snapshot; }\n/* harmony export */ });\n/* harmony import */ var destr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! destr */ \"(app-pages-browser)/./node_modules/destr/dist/index.mjs\");\n/* harmony import */ var _shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/unstorage.mNKHTF5Y.mjs */ \"(app-pages-browser)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.mNKHTF5Y.mjs\");\n\n\n\nfunction defineDriver(factory) {\n    return factory;\n}\nconst DRIVER_NAME = \"memory\";\nconst memory = defineDriver(()=>{\n    const data = /* @__PURE__ */ new Map();\n    return {\n        name: DRIVER_NAME,\n        getInstance: ()=>data,\n        hasItem (key) {\n            return data.has(key);\n        },\n        getItem (key) {\n            var _data_get;\n            return (_data_get = data.get(key)) !== null && _data_get !== void 0 ? _data_get : null;\n        },\n        getItemRaw (key) {\n            var _data_get;\n            return (_data_get = data.get(key)) !== null && _data_get !== void 0 ? _data_get : null;\n        },\n        setItem (key, value) {\n            data.set(key, value);\n        },\n        setItemRaw (key, value) {\n            data.set(key, value);\n        },\n        removeItem (key) {\n            data.delete(key);\n        },\n        getKeys () {\n            return [\n                ...data.keys()\n            ];\n        },\n        clear () {\n            data.clear();\n        },\n        dispose () {\n            data.clear();\n        }\n    };\n});\nfunction createStorage() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const context = {\n        mounts: {\n            \"\": options.driver || memory()\n        },\n        mountpoints: [\n            \"\"\n        ],\n        watching: false,\n        watchListeners: [],\n        unwatch: {}\n    };\n    const getMount = (key)=>{\n        for (const base of context.mountpoints){\n            if (key.startsWith(base)) {\n                return {\n                    base,\n                    relativeKey: key.slice(base.length),\n                    driver: context.mounts[base]\n                };\n            }\n        }\n        return {\n            base: \"\",\n            relativeKey: key,\n            driver: context.mounts[\"\"]\n        };\n    };\n    const getMounts = (base, includeParent)=>{\n        return context.mountpoints.filter((mountpoint)=>mountpoint.startsWith(base) || includeParent && base.startsWith(mountpoint)).map((mountpoint)=>({\n                relativeBase: base.length > mountpoint.length ? base.slice(mountpoint.length) : void 0,\n                mountpoint,\n                driver: context.mounts[mountpoint]\n            }));\n    };\n    const onChange = (event, key)=>{\n        if (!context.watching) {\n            return;\n        }\n        key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n        for (const listener of context.watchListeners){\n            listener(event, key);\n        }\n    };\n    const startWatch = async ()=>{\n        if (context.watching) {\n            return;\n        }\n        context.watching = true;\n        for(const mountpoint in context.mounts){\n            context.unwatch[mountpoint] = await watch(context.mounts[mountpoint], onChange, mountpoint);\n        }\n    };\n    const stopWatch = async ()=>{\n        if (!context.watching) {\n            return;\n        }\n        for(const mountpoint in context.unwatch){\n            await context.unwatch[mountpoint]();\n        }\n        context.unwatch = {};\n        context.watching = false;\n    };\n    const runBatch = (items, commonOptions, cb)=>{\n        const batches = /* @__PURE__ */ new Map();\n        const getBatch = (mount)=>{\n            let batch = batches.get(mount.base);\n            if (!batch) {\n                batch = {\n                    driver: mount.driver,\n                    base: mount.base,\n                    items: []\n                };\n                batches.set(mount.base, batch);\n            }\n            return batch;\n        };\n        for (const item of items){\n            const isStringItem = typeof item === \"string\";\n            const key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(isStringItem ? item : item.key);\n            const value = isStringItem ? void 0 : item.value;\n            const options2 = isStringItem || !item.options ? commonOptions : {\n                ...commonOptions,\n                ...item.options\n            };\n            const mount = getMount(key);\n            getBatch(mount).items.push({\n                key,\n                value,\n                relativeKey: mount.relativeKey,\n                options: options2\n            });\n        }\n        return Promise.all([\n            ...batches.values()\n        ].map((batch)=>cb(batch))).then((r)=>r.flat());\n    };\n    const storage = {\n        // Item\n        hasItem (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.hasItem, relativeKey, opts);\n        },\n        getItem (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value));\n        },\n        getItems (items) {\n            let commonOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return runBatch(items, commonOptions, (batch)=>{\n                if (batch.driver.getItems) {\n                    return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            options: item.options\n                        })), commonOptions).then((r)=>r.map((item)=>({\n                                key: (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(batch.base, item.key),\n                                value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(item.value)\n                            })));\n                }\n                return Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItem, item.relativeKey, item.options).then((value)=>({\n                            key: item.key,\n                            value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value)\n                        }));\n                }));\n            });\n        },\n        getItemRaw (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.getItemRaw) {\n                return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItemRaw, relativeKey, opts);\n            }\n            return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(value));\n        },\n        async setItem (key, value) {\n            let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            if (value === void 0) {\n                return storage.removeItem(key);\n            }\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.setItem) {\n                return;\n            }\n            await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(value), opts);\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async setItems (items, commonOptions) {\n            await runBatch(items, commonOptions, async (batch)=>{\n                if (batch.driver.setItems) {\n                    return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            value: (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(item.value),\n                            options: item.options\n                        })), commonOptions);\n                }\n                if (!batch.driver.setItem) {\n                    return;\n                }\n                await Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItem, item.relativeKey, (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(item.value), item.options);\n                }));\n            });\n        },\n        async setItemRaw (key, value) {\n            let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            if (value === void 0) {\n                return storage.removeItem(key, opts);\n            }\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.setItemRaw) {\n                await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItemRaw, relativeKey, value, opts);\n            } else if (driver.setItem) {\n                await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(value), opts);\n            } else {\n                return;\n            }\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async removeItem (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    removeMeta: opts\n                };\n            }\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.removeItem) {\n                return;\n            }\n            await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey, opts);\n            if (opts.removeMeta || opts.removeMata) {\n                await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey + \"$\", opts);\n            }\n            if (!driver.watch) {\n                onChange(\"remove\", key);\n            }\n        },\n        // Meta\n        async getMeta (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    nativeOnly: opts\n                };\n            }\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            const meta = /* @__PURE__ */ Object.create(null);\n            if (driver.getMeta) {\n                Object.assign(meta, await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getMeta, relativeKey, opts));\n            }\n            if (!opts.nativeOnly) {\n                const value = await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey + \"$\", opts).then((value_)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value_));\n                if (value && typeof value === \"object\") {\n                    if (typeof value.atime === \"string\") {\n                        value.atime = new Date(value.atime);\n                    }\n                    if (typeof value.mtime === \"string\") {\n                        value.mtime = new Date(value.mtime);\n                    }\n                    Object.assign(meta, value);\n                }\n            }\n            return meta;\n        },\n        setMeta (key, value) {\n            let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            return this.setItem(key + \"$\", value, opts);\n        },\n        removeMeta (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return this.removeItem(key + \"$\", opts);\n        },\n        // Keys\n        async getKeys (base) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            const mounts = getMounts(base, true);\n            let maskedMounts = [];\n            const allKeys = [];\n            let allMountsSupportMaxDepth = true;\n            for (const mount of mounts){\n                var _mount_driver_flags;\n                if (!((_mount_driver_flags = mount.driver.flags) === null || _mount_driver_flags === void 0 ? void 0 : _mount_driver_flags.maxDepth)) {\n                    allMountsSupportMaxDepth = false;\n                }\n                const rawKeys = await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(mount.driver.getKeys, mount.relativeBase, opts);\n                for (const key of rawKeys){\n                    const fullKey = mount.mountpoint + (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n                    if (!maskedMounts.some((p)=>fullKey.startsWith(p))) {\n                        allKeys.push(fullKey);\n                    }\n                }\n                maskedMounts = [\n                    mount.mountpoint,\n                    ...maskedMounts.filter((p)=>!p.startsWith(mount.mountpoint))\n                ];\n            }\n            const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;\n            return allKeys.filter((key)=>(!shouldFilterByDepth || (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(key, opts.maxDepth)) && (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(key, base));\n        },\n        // Utils\n        async clear (base) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            await Promise.all(getMounts(base, false).map(async (m)=>{\n                if (m.driver.clear) {\n                    return (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(m.driver.clear, m.relativeBase, opts);\n                }\n                if (m.driver.removeItem) {\n                    const keys = await m.driver.getKeys(m.relativeBase || \"\", opts);\n                    return Promise.all(keys.map((key)=>m.driver.removeItem(key, opts)));\n                }\n            }));\n        },\n        async dispose () {\n            await Promise.all(Object.values(context.mounts).map((driver)=>dispose(driver)));\n        },\n        async watch (callback) {\n            await startWatch();\n            context.watchListeners.push(callback);\n            return async ()=>{\n                context.watchListeners = context.watchListeners.filter((listener)=>listener !== callback);\n                if (context.watchListeners.length === 0) {\n                    await stopWatch();\n                }\n            };\n        },\n        async unwatch () {\n            context.watchListeners = [];\n            await stopWatch();\n        },\n        // Mount\n        mount (base, driver) {\n            base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (base && context.mounts[base]) {\n                throw new Error(\"already mounted at \".concat(base));\n            }\n            if (base) {\n                context.mountpoints.push(base);\n                context.mountpoints.sort((a, b)=>b.length - a.length);\n            }\n            context.mounts[base] = driver;\n            if (context.watching) {\n                Promise.resolve(watch(driver, onChange, base)).then((unwatcher)=>{\n                    context.unwatch[base] = unwatcher;\n                }).catch(console.error);\n            }\n            return storage;\n        },\n        async unmount (base) {\n            let _dispose = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n            base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (!base || !context.mounts[base]) {\n                return;\n            }\n            if (context.watching && base in context.unwatch) {\n                var _context_unwatch_base, _context_unwatch;\n                (_context_unwatch_base = (_context_unwatch = context.unwatch)[base]) === null || _context_unwatch_base === void 0 ? void 0 : _context_unwatch_base.call(_context_unwatch);\n                delete context.unwatch[base];\n            }\n            if (_dispose) {\n                await dispose(context.mounts[base]);\n            }\n            context.mountpoints = context.mountpoints.filter((key)=>key !== base);\n            delete context.mounts[base];\n        },\n        getMount () {\n            let key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n            key = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key) + \":\";\n            const m = getMount(key);\n            return {\n                driver: m.driver,\n                base: m.base\n            };\n        },\n        getMounts () {\n            let base = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(base);\n            const mounts = getMounts(base, opts.parents);\n            return mounts.map((m)=>({\n                    driver: m.driver,\n                    base: m.mountpoint\n                }));\n        },\n        // Aliases\n        keys: function(base) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return storage.getKeys(base, opts);\n        },\n        get: function(key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return storage.getItem(key, opts);\n        },\n        set: function(key, value) {\n            let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            return storage.setItem(key, value, opts);\n        },\n        has: function(key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return storage.hasItem(key, opts);\n        },\n        del: function(key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return storage.removeItem(key, opts);\n        },\n        remove: function(key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return storage.removeItem(key, opts);\n        }\n    };\n    return storage;\n}\nasync function snapshot(storage, base) {\n    base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    const keys = await storage.getKeys(base);\n    const snapshot2 = {};\n    await Promise.all(keys.map(async (key)=>{\n        snapshot2[key.slice(base.length)] = await storage.getItem(key);\n    }));\n    return snapshot2;\n}\nasync function restoreSnapshot(driver, snapshot2) {\n    let base = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\";\n    base = (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    await Promise.all(Object.entries(snapshot2).map((e)=>driver.setItem(base + e[0], e[1])));\n}\nfunction watch(driver, onChange, base) {\n    return driver.watch ? driver.watch((event, key)=>onChange(event, base + key)) : ()=>{};\n}\nasync function dispose(driver) {\n    if (typeof driver.dispose === \"function\") {\n        await (0,_shared_unstorage_mNKHTF5Y_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.dispose);\n    }\n}\nconst builtinDrivers = {\n    \"azure-app-configuration\": \"unstorage/drivers/azure-app-configuration\",\n    \"azureAppConfiguration\": \"unstorage/drivers/azure-app-configuration\",\n    \"azure-cosmos\": \"unstorage/drivers/azure-cosmos\",\n    \"azureCosmos\": \"unstorage/drivers/azure-cosmos\",\n    \"azure-key-vault\": \"unstorage/drivers/azure-key-vault\",\n    \"azureKeyVault\": \"unstorage/drivers/azure-key-vault\",\n    \"azure-storage-blob\": \"unstorage/drivers/azure-storage-blob\",\n    \"azureStorageBlob\": \"unstorage/drivers/azure-storage-blob\",\n    \"azure-storage-table\": \"unstorage/drivers/azure-storage-table\",\n    \"azureStorageTable\": \"unstorage/drivers/azure-storage-table\",\n    \"capacitor-preferences\": \"unstorage/drivers/capacitor-preferences\",\n    \"capacitorPreferences\": \"unstorage/drivers/capacitor-preferences\",\n    \"cloudflare-kv-binding\": \"unstorage/drivers/cloudflare-kv-binding\",\n    \"cloudflareKVBinding\": \"unstorage/drivers/cloudflare-kv-binding\",\n    \"cloudflare-kv-http\": \"unstorage/drivers/cloudflare-kv-http\",\n    \"cloudflareKVHttp\": \"unstorage/drivers/cloudflare-kv-http\",\n    \"cloudflare-r2-binding\": \"unstorage/drivers/cloudflare-r2-binding\",\n    \"cloudflareR2Binding\": \"unstorage/drivers/cloudflare-r2-binding\",\n    \"db0\": \"unstorage/drivers/db0\",\n    \"deno-kv-node\": \"unstorage/drivers/deno-kv-node\",\n    \"denoKVNode\": \"unstorage/drivers/deno-kv-node\",\n    \"deno-kv\": \"unstorage/drivers/deno-kv\",\n    \"denoKV\": \"unstorage/drivers/deno-kv\",\n    \"fs-lite\": \"unstorage/drivers/fs-lite\",\n    \"fsLite\": \"unstorage/drivers/fs-lite\",\n    \"fs\": \"unstorage/drivers/fs\",\n    \"github\": \"unstorage/drivers/github\",\n    \"http\": \"unstorage/drivers/http\",\n    \"indexedb\": \"unstorage/drivers/indexedb\",\n    \"localstorage\": \"unstorage/drivers/localstorage\",\n    \"lru-cache\": \"unstorage/drivers/lru-cache\",\n    \"lruCache\": \"unstorage/drivers/lru-cache\",\n    \"memory\": \"unstorage/drivers/memory\",\n    \"mongodb\": \"unstorage/drivers/mongodb\",\n    \"netlify-blobs\": \"unstorage/drivers/netlify-blobs\",\n    \"netlifyBlobs\": \"unstorage/drivers/netlify-blobs\",\n    \"null\": \"unstorage/drivers/null\",\n    \"overlay\": \"unstorage/drivers/overlay\",\n    \"planetscale\": \"unstorage/drivers/planetscale\",\n    \"redis\": \"unstorage/drivers/redis\",\n    \"s3\": \"unstorage/drivers/s3\",\n    \"session-storage\": \"unstorage/drivers/session-storage\",\n    \"sessionStorage\": \"unstorage/drivers/session-storage\",\n    \"uploadthing\": \"unstorage/drivers/uploadthing\",\n    \"upstash\": \"unstorage/drivers/upstash\",\n    \"vercel-blob\": \"unstorage/drivers/vercel-blob\",\n    \"vercelBlob\": \"unstorage/drivers/vercel-blob\",\n    \"vercel-kv\": \"unstorage/drivers/vercel-kv\",\n    \"vercelKV\": \"unstorage/drivers/vercel-kv\"\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.mNKHTF5Y.mjs":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.mNKHTF5Y.mjs ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: function() { return /* binding */ normalizeKey; },\n/* harmony export */   b: function() { return /* binding */ asyncCall; },\n/* harmony export */   c: function() { return /* binding */ filterKeyByBase; },\n/* harmony export */   d: function() { return /* binding */ stringify; },\n/* harmony export */   e: function() { return /* binding */ deserializeRaw; },\n/* harmony export */   f: function() { return /* binding */ filterKeyByDepth; },\n/* harmony export */   j: function() { return /* binding */ joinKeys; },\n/* harmony export */   n: function() { return /* binding */ normalizeBaseKey; },\n/* harmony export */   p: function() { return /* binding */ prefixStorage; },\n/* harmony export */   s: function() { return /* binding */ serializeRaw; }\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\nfunction wrapToPromise(value) {\n    if (!value || typeof value.then !== \"function\") {\n        return Promise.resolve(value);\n    }\n    return value;\n}\nfunction asyncCall(function_) {\n    for(var _len = arguments.length, arguments_ = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        arguments_[_key - 1] = arguments[_key];\n    }\n    try {\n        return wrapToPromise(function_(...arguments_));\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\nfunction isPrimitive(value) {\n    const type = typeof value;\n    return value === null || type !== \"object\" && type !== \"function\";\n}\nfunction isPureObject(value) {\n    const proto = Object.getPrototypeOf(value);\n    return !proto || proto.isPrototypeOf(Object);\n}\nfunction stringify(value) {\n    if (isPrimitive(value)) {\n        return String(value);\n    }\n    if (isPureObject(value) || Array.isArray(value)) {\n        return JSON.stringify(value);\n    }\n    if (typeof value.toJSON === \"function\") {\n        return stringify(value.toJSON());\n    }\n    throw new Error(\"[unstorage] Cannot stringify value!\");\n}\nconst BASE64_PREFIX = \"base64:\";\nfunction serializeRaw(value) {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return BASE64_PREFIX + base64Encode(value);\n}\nfunction deserializeRaw(value) {\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    if (!value.startsWith(BASE64_PREFIX)) {\n        return value;\n    }\n    return base64Decode(value.slice(BASE64_PREFIX.length));\n}\nfunction base64Decode(input) {\n    if (globalThis.Buffer) {\n        return Buffer.from(input, \"base64\");\n    }\n    return Uint8Array.from(globalThis.atob(input), (c)=>c.codePointAt(0));\n}\nfunction base64Encode(input) {\n    if (globalThis.Buffer) {\n        return Buffer.from(input).toString(\"base64\");\n    }\n    return globalThis.btoa(String.fromCodePoint(...input));\n}\nconst storageKeyProperties = [\n    \"has\",\n    \"hasItem\",\n    \"get\",\n    \"getItem\",\n    \"getItemRaw\",\n    \"set\",\n    \"setItem\",\n    \"setItemRaw\",\n    \"del\",\n    \"remove\",\n    \"removeItem\",\n    \"getMeta\",\n    \"setMeta\",\n    \"removeMeta\",\n    \"getKeys\",\n    \"clear\",\n    \"mount\",\n    \"unmount\"\n];\nfunction prefixStorage(storage, base) {\n    base = normalizeBaseKey(base);\n    if (!base) {\n        return storage;\n    }\n    const nsStorage = {\n        ...storage\n    };\n    for (const property of storageKeyProperties){\n        nsStorage[property] = function() {\n            let key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                args[_key - 1] = arguments[_key];\n            }\n            return(// @ts-ignore\n            storage[property](base + key, ...args));\n        };\n    }\n    nsStorage.getKeys = function() {\n        let key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n        for(var _len = arguments.length, arguments_ = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            arguments_[_key - 1] = arguments[_key];\n        }\n        return storage.getKeys(base + key, ...arguments_).then((keys)=>keys.map((key2)=>key2.slice(base.length)));\n    };\n    return nsStorage;\n}\nfunction normalizeKey(key) {\n    var _key_split_;\n    if (!key) {\n        return \"\";\n    }\n    return ((_key_split_ = key.split(\"?\")[0]) === null || _key_split_ === void 0 ? void 0 : _key_split_.replace(/[/\\\\]/g, \":\").replace(/:+/g, \":\").replace(/^:|:$/g, \"\")) || \"\";\n}\nfunction joinKeys() {\n    for(var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++){\n        keys[_key] = arguments[_key];\n    }\n    return normalizeKey(keys.join(\":\"));\n}\nfunction normalizeBaseKey(base) {\n    base = normalizeKey(base);\n    return base ? base + \":\" : \"\";\n}\nfunction filterKeyByDepth(key, depth) {\n    if (depth === void 0) {\n        return true;\n    }\n    let substrCount = 0;\n    let index = key.indexOf(\":\");\n    while(index > -1){\n        substrCount++;\n        index = key.indexOf(\":\", index + 1);\n    }\n    return substrCount <= depth;\n}\nfunction filterKeyByBase(key, base) {\n    if (base) {\n        return key.startsWith(base) && key[key.length - 1] !== \"$\";\n    }\n    return key[key.length - 1] !== \"$\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.mNKHTF5Y.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyToAddress: function() { return /* binding */ publicKeyToAddress; }\n/* harmony export */ });\n/* harmony import */ var _utils_address_getAddress_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/address/getAddress.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var _utils_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/hash/keccak256.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js\");\n\n\n/**\n * @description Converts an ECDSA public key to an address.\n *\n * @param publicKey The public key to convert.\n *\n * @returns The address.\n */ function publicKeyToAddress(publicKey) {\n    const address = (0,_utils_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(\"0x\".concat(publicKey.substring(4))).substring(26);\n    return (0,_utils_address_getAddress_js__WEBPACK_IMPORTED_MODULE_1__.checksumAddress)(\"0x\".concat(address));\n} //# sourceMappingURL=publicKeyToAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2FjY291bnRzL3V0aWxzL3B1YmxpY0tleVRvQWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUU7QUFDVjtBQUMzRDs7Ozs7O0NBTUMsR0FDTSxTQUFTRSxtQkFBbUJDLFNBQVM7SUFDeEMsTUFBTUMsVUFBVUgsbUVBQVNBLENBQUMsS0FBNEIsT0FBdkJFLFVBQVVFLFNBQVMsQ0FBQyxLQUFNQSxTQUFTLENBQUM7SUFDbkUsT0FBT0wsNkVBQWVBLENBQUMsS0FBYSxPQUFSSTtBQUNoQyxFQUNBLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9hY2NvdW50cy91dGlscy9wdWJsaWNLZXlUb0FkZHJlc3MuanM/MGEwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGVja3N1bUFkZHJlc3MsIH0gZnJvbSAnLi4vLi4vdXRpbHMvYWRkcmVzcy9nZXRBZGRyZXNzLmpzJztcbmltcG9ydCB7IGtlY2NhazI1NiwgfSBmcm9tICcuLi8uLi91dGlscy9oYXNoL2tlY2NhazI1Ni5qcyc7XG4vKipcbiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyBhbiBFQ0RTQSBwdWJsaWMga2V5IHRvIGFuIGFkZHJlc3MuXG4gKlxuICogQHBhcmFtIHB1YmxpY0tleSBUaGUgcHVibGljIGtleSB0byBjb252ZXJ0LlxuICpcbiAqIEByZXR1cm5zIFRoZSBhZGRyZXNzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHVibGljS2V5VG9BZGRyZXNzKHB1YmxpY0tleSkge1xuICAgIGNvbnN0IGFkZHJlc3MgPSBrZWNjYWsyNTYoYDB4JHtwdWJsaWNLZXkuc3Vic3RyaW5nKDQpfWApLnN1YnN0cmluZygyNik7XG4gICAgcmV0dXJuIGNoZWNrc3VtQWRkcmVzcyhgMHgke2FkZHJlc3N9YCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaWNLZXlUb0FkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbImNoZWNrc3VtQWRkcmVzcyIsImtlY2NhazI1NiIsInB1YmxpY0tleVRvQWRkcmVzcyIsInB1YmxpY0tleSIsImFkZHJlc3MiLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidAddressError: function() { return /* binding */ InvalidAddressError; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n\nclass InvalidAddressError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ address }){\n        super('Address \"'.concat(address, '\" is invalid.'), {\n            metaMessages: [\n                \"- Address must be a hex value of 20 bytes (40 hex characters).\",\n                \"- Address must match its checksum counterpart.\"\n            ],\n            name: \"InvalidAddressError\"\n        });\n    }\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNDO0FBQy9CLE1BQU1DLDRCQUE0QkQsK0NBQVNBO0lBQzlDRSxZQUFZLEVBQUVDLE9BQU8sRUFBRSxDQUFFO1FBQ3JCLEtBQUssQ0FBQyxZQUFvQixPQUFSQSxTQUFRLGtCQUFnQjtZQUN0Q0MsY0FBYztnQkFDVjtnQkFDQTthQUNIO1lBQ0RDLE1BQU07UUFDVjtJQUNKO0FBQ0osRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vZXJyb3JzL2FkZHJlc3MuanM/YTIwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRXJyb3IgfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNsYXNzIEludmFsaWRBZGRyZXNzRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgYWRkcmVzcyB9KSB7XG4gICAgICAgIHN1cGVyKGBBZGRyZXNzIFwiJHthZGRyZXNzfVwiIGlzIGludmFsaWQuYCwge1xuICAgICAgICAgICAgbWV0YU1lc3NhZ2VzOiBbXG4gICAgICAgICAgICAgICAgJy0gQWRkcmVzcyBtdXN0IGJlIGEgaGV4IHZhbHVlIG9mIDIwIGJ5dGVzICg0MCBoZXggY2hhcmFjdGVycykuJyxcbiAgICAgICAgICAgICAgICAnLSBBZGRyZXNzIG11c3QgbWF0Y2ggaXRzIGNoZWNrc3VtIGNvdW50ZXJwYXJ0LicsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbmFtZTogJ0ludmFsaWRBZGRyZXNzRXJyb3InLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6WyJCYXNlRXJyb3IiLCJJbnZhbGlkQWRkcmVzc0Vycm9yIiwiY29uc3RydWN0b3IiLCJhZGRyZXNzIiwibWV0YU1lc3NhZ2VzIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseError: function() { return /* binding */ BaseError; },\n/* harmony export */   setErrorConfig: function() { return /* binding */ setErrorConfig; }\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js\");\n\nlet errorConfig = {\n    getDocsUrl: (param)=>{\n        let { docsBaseUrl, docsPath = \"\", docsSlug } = param;\n        return docsPath ? \"\".concat(docsBaseUrl !== null && docsBaseUrl !== void 0 ? docsBaseUrl : \"https://viem.sh\").concat(docsPath).concat(docsSlug ? \"#\".concat(docsSlug) : \"\") : undefined;\n    },\n    version: \"viem@\".concat(_version_js__WEBPACK_IMPORTED_MODULE_0__.version)\n};\nfunction setErrorConfig(config) {\n    errorConfig = config;\n}\nclass BaseError extends Error {\n    walk(fn) {\n        return walk(this, fn);\n    }\n    constructor(shortMessage, args = {}){\n        var _errorConfig_getDocsUrl;\n        const details = (()=>{\n            var _args_cause;\n            if (args.cause instanceof BaseError) return args.cause.details;\n            if ((_args_cause = args.cause) === null || _args_cause === void 0 ? void 0 : _args_cause.message) return args.cause.message;\n            return args.details;\n        })();\n        const docsPath = (()=>{\n            if (args.cause instanceof BaseError) return args.cause.docsPath || args.docsPath;\n            return args.docsPath;\n        })();\n        const docsUrl = (_errorConfig_getDocsUrl = errorConfig.getDocsUrl) === null || _errorConfig_getDocsUrl === void 0 ? void 0 : _errorConfig_getDocsUrl.call(errorConfig, {\n            ...args,\n            docsPath\n        });\n        const message = [\n            shortMessage || \"An error occurred.\",\n            \"\",\n            ...args.metaMessages ? [\n                ...args.metaMessages,\n                \"\"\n            ] : [],\n            ...docsUrl ? [\n                \"Docs: \".concat(docsUrl)\n            ] : [],\n            ...details ? [\n                \"Details: \".concat(details)\n            ] : [],\n            ...errorConfig.version ? [\n                \"Version: \".concat(errorConfig.version)\n            ] : []\n        ].join(\"\\n\");\n        super(message, args.cause ? {\n            cause: args.cause\n        } : undefined);\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metaMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"shortMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"BaseError\"\n        });\n        this.details = details;\n        this.docsPath = docsPath;\n        this.metaMessages = args.metaMessages;\n        var _args_name;\n        this.name = (_args_name = args.name) !== null && _args_name !== void 0 ? _args_name : this.name;\n        this.shortMessage = shortMessage;\n        this.version = _version_js__WEBPACK_IMPORTED_MODULE_0__.version;\n    }\n}\nfunction walk(err, fn) {\n    if (fn === null || fn === void 0 ? void 0 : fn(err)) return err;\n    if (err && typeof err === \"object\" && \"cause\" in err && err.cause !== undefined) return walk(err.cause, fn);\n    return fn ? null : err;\n} //# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1QztBQUN2QyxJQUFJQyxjQUFjO0lBQ2RDLFlBQVk7WUFBQyxFQUFFQyxXQUFXLEVBQUVDLFdBQVcsRUFBRSxFQUFFQyxRQUFRLEVBQUc7ZUFBS0QsV0FDckQsR0FBc0NBLE9BQW5DRCx3QkFBQUEseUJBQUFBLGNBQWUsbUJBQStCRSxPQUFYRCxVQUEwQyxPQUEvQkMsV0FBVyxJQUFhLE9BQVRBLFlBQWEsTUFDN0VDOztJQUNOTixTQUFTLFFBQWdCLE9BQVJBLGdEQUFPQTtBQUM1QjtBQUNPLFNBQVNPLGVBQWVDLE1BQU07SUFDakNQLGNBQWNPO0FBQ2xCO0FBQ08sTUFBTUMsa0JBQWtCQztJQW1FM0JDLEtBQUtDLEVBQUUsRUFBRTtRQUNMLE9BQU9ELEtBQUssSUFBSSxFQUFFQztJQUN0QjtJQXBFQUMsWUFBWUMsWUFBWSxFQUFFQyxPQUFPLENBQUMsQ0FBQyxDQUFFO1lBYWpCZDtRQVpoQixNQUFNZSxVQUFVLENBQUM7Z0JBR1REO1lBRkosSUFBSUEsS0FBS0UsS0FBSyxZQUFZUixXQUN0QixPQUFPTSxLQUFLRSxLQUFLLENBQUNELE9BQU87WUFDN0IsS0FBSUQsY0FBQUEsS0FBS0UsS0FBSyxjQUFWRixrQ0FBQUEsWUFBWUcsT0FBTyxFQUNuQixPQUFPSCxLQUFLRSxLQUFLLENBQUNDLE9BQU87WUFDN0IsT0FBT0gsS0FBS0MsT0FBTztRQUN2QjtRQUNBLE1BQU1aLFdBQVcsQ0FBQztZQUNkLElBQUlXLEtBQUtFLEtBQUssWUFBWVIsV0FDdEIsT0FBT00sS0FBS0UsS0FBSyxDQUFDYixRQUFRLElBQUlXLEtBQUtYLFFBQVE7WUFDL0MsT0FBT1csS0FBS1gsUUFBUTtRQUN4QjtRQUNBLE1BQU1lLFdBQVVsQiwwQkFBQUEsWUFBWUMsVUFBVSxjQUF0QkQsOENBQUFBLDZCQUFBQSxhQUF5QjtZQUFFLEdBQUdjLElBQUk7WUFBRVg7UUFBUztRQUM3RCxNQUFNYyxVQUFVO1lBQ1pKLGdCQUFnQjtZQUNoQjtlQUNJQyxLQUFLSyxZQUFZLEdBQUc7bUJBQUlMLEtBQUtLLFlBQVk7Z0JBQUU7YUFBRyxHQUFHLEVBQUU7ZUFDbkRELFVBQVU7Z0JBQUUsU0FBZ0IsT0FBUkE7YUFBVSxHQUFHLEVBQUU7ZUFDbkNILFVBQVU7Z0JBQUUsWUFBbUIsT0FBUkE7YUFBVSxHQUFHLEVBQUU7ZUFDdENmLFlBQVlELE9BQU8sR0FBRztnQkFBRSxZQUErQixPQUFwQkMsWUFBWUQsT0FBTzthQUFHLEdBQUcsRUFBRTtTQUNyRSxDQUFDcUIsSUFBSSxDQUFDO1FBQ1AsS0FBSyxDQUFDSCxTQUFTSCxLQUFLRSxLQUFLLEdBQUc7WUFBRUEsT0FBT0YsS0FBS0UsS0FBSztRQUFDLElBQUlYO1FBQ3BEZ0IsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXO1lBQ25DQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO1lBQ3BDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVztZQUNuQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDWCxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDWixRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ2dCLFlBQVksR0FBR0wsS0FBS0ssWUFBWTtZQUN6Qkw7UUFBWixJQUFJLENBQUNhLElBQUksR0FBR2IsQ0FBQUEsYUFBQUEsS0FBS2EsSUFBSSxjQUFUYix3QkFBQUEsYUFBYSxJQUFJLENBQUNhLElBQUk7UUFDbEMsSUFBSSxDQUFDZCxZQUFZLEdBQUdBO1FBQ3BCLElBQUksQ0FBQ2QsT0FBTyxHQUFHQSxnREFBT0E7SUFDMUI7QUFJSjtBQUNBLFNBQVNXLEtBQUtrQixHQUFHLEVBQUVqQixFQUFFO0lBQ2pCLElBQUlBLGVBQUFBLHlCQUFBQSxHQUFLaUIsTUFDTCxPQUFPQTtJQUNYLElBQUlBLE9BQ0EsT0FBT0EsUUFBUSxZQUNmLFdBQVdBLE9BQ1hBLElBQUlaLEtBQUssS0FBS1gsV0FDZCxPQUFPSyxLQUFLa0IsSUFBSVosS0FBSyxFQUFFTDtJQUMzQixPQUFPQSxLQUFLLE9BQU9pQjtBQUN2QixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvYmFzZS5qcz81N2RiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24uanMnO1xubGV0IGVycm9yQ29uZmlnID0ge1xuICAgIGdldERvY3NVcmw6ICh7IGRvY3NCYXNlVXJsLCBkb2NzUGF0aCA9ICcnLCBkb2NzU2x1ZywgfSkgPT4gZG9jc1BhdGhcbiAgICAgICAgPyBgJHtkb2NzQmFzZVVybCA/PyAnaHR0cHM6Ly92aWVtLnNoJ30ke2RvY3NQYXRofSR7ZG9jc1NsdWcgPyBgIyR7ZG9jc1NsdWd9YCA6ICcnfWBcbiAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgdmVyc2lvbjogYHZpZW1AJHt2ZXJzaW9ufWAsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVycm9yQ29uZmlnKGNvbmZpZykge1xuICAgIGVycm9yQ29uZmlnID0gY29uZmlnO1xufVxuZXhwb3J0IGNsYXNzIEJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihzaG9ydE1lc3NhZ2UsIGFyZ3MgPSB7fSkge1xuICAgICAgICBjb25zdCBkZXRhaWxzID0gKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChhcmdzLmNhdXNlIGluc3RhbmNlb2YgQmFzZUVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBhcmdzLmNhdXNlLmRldGFpbHM7XG4gICAgICAgICAgICBpZiAoYXJncy5jYXVzZT8ubWVzc2FnZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJncy5jYXVzZS5tZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3MuZGV0YWlscztcbiAgICAgICAgfSkoKTtcbiAgICAgICAgY29uc3QgZG9jc1BhdGggPSAoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGFyZ3MuY2F1c2UgaW5zdGFuY2VvZiBCYXNlRXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MuY2F1c2UuZG9jc1BhdGggfHwgYXJncy5kb2NzUGF0aDtcbiAgICAgICAgICAgIHJldHVybiBhcmdzLmRvY3NQYXRoO1xuICAgICAgICB9KSgpO1xuICAgICAgICBjb25zdCBkb2NzVXJsID0gZXJyb3JDb25maWcuZ2V0RG9jc1VybD8uKHsgLi4uYXJncywgZG9jc1BhdGggfSk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBbXG4gICAgICAgICAgICBzaG9ydE1lc3NhZ2UgfHwgJ0FuIGVycm9yIG9jY3VycmVkLicsXG4gICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIC4uLihhcmdzLm1ldGFNZXNzYWdlcyA/IFsuLi5hcmdzLm1ldGFNZXNzYWdlcywgJyddIDogW10pLFxuICAgICAgICAgICAgLi4uKGRvY3NVcmwgPyBbYERvY3M6ICR7ZG9jc1VybH1gXSA6IFtdKSxcbiAgICAgICAgICAgIC4uLihkZXRhaWxzID8gW2BEZXRhaWxzOiAke2RldGFpbHN9YF0gOiBbXSksXG4gICAgICAgICAgICAuLi4oZXJyb3JDb25maWcudmVyc2lvbiA/IFtgVmVyc2lvbjogJHtlcnJvckNvbmZpZy52ZXJzaW9ufWBdIDogW10pLFxuICAgICAgICBdLmpvaW4oJ1xcbicpO1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBhcmdzLmNhdXNlID8geyBjYXVzZTogYXJncy5jYXVzZSB9IDogdW5kZWZpbmVkKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGV0YWlsc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkb2NzUGF0aFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZXRhTWVzc2FnZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2hvcnRNZXNzYWdlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInZlcnNpb25cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ0Jhc2VFcnJvcidcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IGRldGFpbHM7XG4gICAgICAgIHRoaXMuZG9jc1BhdGggPSBkb2NzUGF0aDtcbiAgICAgICAgdGhpcy5tZXRhTWVzc2FnZXMgPSBhcmdzLm1ldGFNZXNzYWdlcztcbiAgICAgICAgdGhpcy5uYW1lID0gYXJncy5uYW1lID8/IHRoaXMubmFtZTtcbiAgICAgICAgdGhpcy5zaG9ydE1lc3NhZ2UgPSBzaG9ydE1lc3NhZ2U7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgfVxuICAgIHdhbGsoZm4pIHtcbiAgICAgICAgcmV0dXJuIHdhbGsodGhpcywgZm4pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHdhbGsoZXJyLCBmbikge1xuICAgIGlmIChmbj8uKGVycikpXG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgaWYgKGVyciAmJlxuICAgICAgICB0eXBlb2YgZXJyID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAnY2F1c2UnIGluIGVyciAmJlxuICAgICAgICBlcnIuY2F1c2UgIT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHdhbGsoZXJyLmNhdXNlLCBmbik7XG4gICAgcmV0dXJuIGZuID8gbnVsbCA6IGVycjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwIl0sIm5hbWVzIjpbInZlcnNpb24iLCJlcnJvckNvbmZpZyIsImdldERvY3NVcmwiLCJkb2NzQmFzZVVybCIsImRvY3NQYXRoIiwiZG9jc1NsdWciLCJ1bmRlZmluZWQiLCJzZXRFcnJvckNvbmZpZyIsImNvbmZpZyIsIkJhc2VFcnJvciIsIkVycm9yIiwid2FsayIsImZuIiwiY29uc3RydWN0b3IiLCJzaG9ydE1lc3NhZ2UiLCJhcmdzIiwiZGV0YWlscyIsImNhdXNlIiwibWVzc2FnZSIsImRvY3NVcmwiLCJtZXRhTWVzc2FnZXMiLCJqb2luIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsIm5hbWUiLCJlcnIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidBytesLengthError: function() { return /* binding */ InvalidBytesLengthError; },\n/* harmony export */   SizeExceedsPaddingSizeError: function() { return /* binding */ SizeExceedsPaddingSizeError; },\n/* harmony export */   SliceOffsetOutOfBoundsError: function() { return /* binding */ SliceOffsetOutOfBoundsError; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n\nclass SliceOffsetOutOfBoundsError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ offset, position, size }){\n        super(\"Slice \".concat(position === \"start\" ? \"starting\" : \"ending\", ' at offset \"').concat(offset, '\" is out-of-bounds (size: ').concat(size, \").\"), {\n            name: \"SliceOffsetOutOfBoundsError\"\n        });\n    }\n}\nclass SizeExceedsPaddingSizeError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ size, targetSize, type }){\n        super(\"\".concat(type.charAt(0).toUpperCase()).concat(type.slice(1).toLowerCase(), \" size (\").concat(size, \") exceeds padding size (\").concat(targetSize, \").\"), {\n            name: \"SizeExceedsPaddingSizeError\"\n        });\n    }\n}\nclass InvalidBytesLengthError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ size, targetSize, type }){\n        super(\"\".concat(type.charAt(0).toUpperCase()).concat(type.slice(1).toLowerCase(), \" is expected to be \").concat(targetSize, \" \").concat(type, \" long, but is \").concat(size, \" \").concat(type, \" long.\"), {\n            name: \"InvalidBytesLengthError\"\n        });\n    }\n} //# sourceMappingURL=data.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0M7QUFDL0IsTUFBTUMsb0NBQW9DRCwrQ0FBU0E7SUFDdERFLFlBQVksRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRyxDQUFFO1FBQ3JDLEtBQUssQ0FBQyxTQUFvRUYsT0FBM0RDLGFBQWEsVUFBVSxhQUFhLFVBQVMsZ0JBQWlEQyxPQUFuQ0YsUUFBTyw4QkFBaUMsT0FBTEUsTUFBSyxPQUFLO1lBQUVDLE1BQU07UUFBOEI7SUFDaks7QUFDSjtBQUNPLE1BQU1DLG9DQUFvQ1AsK0NBQVNBO0lBQ3RERSxZQUFZLEVBQUVHLElBQUksRUFBRUcsVUFBVSxFQUFFQyxJQUFJLEVBQUcsQ0FBRTtRQUNyQyxLQUFLLENBQUMsR0FBa0NBLE9BQS9CQSxLQUFLQyxNQUFNLENBQUMsR0FBR0MsV0FBVyxJQUVQTixPQUZZSSxLQUNuQ0csS0FBSyxDQUFDLEdBQ05DLFdBQVcsSUFBRyxXQUF3Q0wsT0FBL0JILE1BQUssNEJBQXFDLE9BQVhHLFlBQVcsT0FBSztZQUFFRixNQUFNO1FBQThCO0lBQ3JIO0FBQ0o7QUFDTyxNQUFNUSxnQ0FBZ0NkLCtDQUFTQTtJQUNsREUsWUFBWSxFQUFFRyxJQUFJLEVBQUVHLFVBQVUsRUFBRUMsSUFBSSxFQUFHLENBQUU7UUFDckMsS0FBSyxDQUFDLEdBQWtDQSxPQUEvQkEsS0FBS0MsTUFBTSxDQUFDLEdBQUdDLFdBQVcsSUFFS0gsT0FGQUMsS0FDbkNHLEtBQUssQ0FBQyxHQUNOQyxXQUFXLElBQUcsdUJBQW1DSixPQUFkRCxZQUFXLEtBQXdCSCxPQUFyQkksTUFBSyxrQkFBd0JBLE9BQVJKLE1BQUssS0FBUSxPQUFMSSxNQUFLLFdBQVM7WUFBRUgsTUFBTTtRQUEwQjtJQUN2STtBQUNKLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9kYXRhLmpzPzgwMzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUVycm9yIH0gZnJvbSAnLi9iYXNlLmpzJztcbmV4cG9ydCBjbGFzcyBTbGljZU9mZnNldE91dE9mQm91bmRzRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgb2Zmc2V0LCBwb3NpdGlvbiwgc2l6ZSwgfSkge1xuICAgICAgICBzdXBlcihgU2xpY2UgJHtwb3NpdGlvbiA9PT0gJ3N0YXJ0JyA/ICdzdGFydGluZycgOiAnZW5kaW5nJ30gYXQgb2Zmc2V0IFwiJHtvZmZzZXR9XCIgaXMgb3V0LW9mLWJvdW5kcyAoc2l6ZTogJHtzaXplfSkuYCwgeyBuYW1lOiAnU2xpY2VPZmZzZXRPdXRPZkJvdW5kc0Vycm9yJyB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHNpemUsIHRhcmdldFNpemUsIHR5cGUsIH0pIHtcbiAgICAgICAgc3VwZXIoYCR7dHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKX0ke3R5cGVcbiAgICAgICAgICAgIC5zbGljZSgxKVxuICAgICAgICAgICAgLnRvTG93ZXJDYXNlKCl9IHNpemUgKCR7c2l6ZX0pIGV4Y2VlZHMgcGFkZGluZyBzaXplICgke3RhcmdldFNpemV9KS5gLCB7IG5hbWU6ICdTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3InIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQnl0ZXNMZW5ndGhFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBzaXplLCB0YXJnZXRTaXplLCB0eXBlLCB9KSB7XG4gICAgICAgIHN1cGVyKGAke3R5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCl9JHt0eXBlXG4gICAgICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpfSBpcyBleHBlY3RlZCB0byBiZSAke3RhcmdldFNpemV9ICR7dHlwZX0gbG9uZywgYnV0IGlzICR7c2l6ZX0gJHt0eXBlfSBsb25nLmAsIHsgbmFtZTogJ0ludmFsaWRCeXRlc0xlbmd0aEVycm9yJyB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhLmpzLm1hcCJdLCJuYW1lcyI6WyJCYXNlRXJyb3IiLCJTbGljZU9mZnNldE91dE9mQm91bmRzRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm9mZnNldCIsInBvc2l0aW9uIiwic2l6ZSIsIm5hbWUiLCJTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3IiLCJ0YXJnZXRTaXplIiwidHlwZSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSIsIkludmFsaWRCeXRlc0xlbmd0aEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntegerOutOfRangeError: function() { return /* binding */ IntegerOutOfRangeError; },\n/* harmony export */   InvalidBytesBooleanError: function() { return /* binding */ InvalidBytesBooleanError; },\n/* harmony export */   InvalidHexBooleanError: function() { return /* binding */ InvalidHexBooleanError; },\n/* harmony export */   InvalidHexValueError: function() { return /* binding */ InvalidHexValueError; },\n/* harmony export */   SizeOverflowError: function() { return /* binding */ SizeOverflowError; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n\nclass IntegerOutOfRangeError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ max, min, signed, size, value }){\n        super('Number \"'.concat(value, '\" is not in safe ').concat(size ? \"\".concat(size * 8, \"-bit \").concat(signed ? \"signed\" : \"unsigned\", \" \") : \"\", \"integer range \").concat(max ? \"(\".concat(min, \" to \").concat(max, \")\") : \"(above \".concat(min, \")\")), {\n            name: \"IntegerOutOfRangeError\"\n        });\n    }\n}\nclass InvalidBytesBooleanError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(bytes){\n        super('Bytes value \"'.concat(bytes, '\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.'), {\n            name: \"InvalidBytesBooleanError\"\n        });\n    }\n}\nclass InvalidHexBooleanError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(hex){\n        super('Hex value \"'.concat(hex, '\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).'), {\n            name: \"InvalidHexBooleanError\"\n        });\n    }\n}\nclass InvalidHexValueError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(value){\n        super('Hex value \"'.concat(value, '\" is an odd length (').concat(value.length, \"). It must be an even length.\"), {\n            name: \"InvalidHexValueError\"\n        });\n    }\n}\nclass SizeOverflowError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ givenSize, maxSize }){\n        super(\"Size cannot exceed \".concat(maxSize, \" bytes. Given size: \").concat(givenSize, \" bytes.\"), {\n            name: \"SizeOverflowError\"\n        });\n    }\n} //# sourceMappingURL=encoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9lbmNvZGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBc0M7QUFDL0IsTUFBTUMsK0JBQStCRCwrQ0FBU0E7SUFDakRFLFlBQVksRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUcsQ0FBRTtRQUM1QyxLQUFLLENBQUMsV0FBb0NELE9BQXpCQyxPQUFNLHFCQUFvR0osT0FBakZHLE9BQU8sR0FBbUJELE9BQWhCQyxPQUFPLEdBQUUsU0FBc0MsT0FBL0JELFNBQVMsV0FBVyxZQUFXLE9BQUssSUFBRyxrQkFBOEQsT0FBOUNGLE1BQU0sSUFBY0EsT0FBVkMsS0FBSSxRQUFVLE9BQUpELEtBQUksT0FBSyxVQUFjLE9BQUpDLEtBQUksT0FBTTtZQUFFSSxNQUFNO1FBQXlCO0lBQ2pOO0FBQ0o7QUFDTyxNQUFNQyxpQ0FBaUNULCtDQUFTQTtJQUNuREUsWUFBWVEsS0FBSyxDQUFFO1FBQ2YsS0FBSyxDQUFDLGdCQUFzQixPQUFOQSxPQUFNLG1HQUFpRztZQUN6SEYsTUFBTTtRQUNWO0lBQ0o7QUFDSjtBQUNPLE1BQU1HLCtCQUErQlgsK0NBQVNBO0lBQ2pERSxZQUFZVSxHQUFHLENBQUU7UUFDYixLQUFLLENBQUMsY0FBa0IsT0FBSkEsS0FBSSxtRkFBaUY7WUFBRUosTUFBTTtRQUF5QjtJQUM5STtBQUNKO0FBQ08sTUFBTUssNkJBQTZCYiwrQ0FBU0E7SUFDL0NFLFlBQVlLLEtBQUssQ0FBRTtRQUNmLEtBQUssQ0FBQyxjQUEwQ0EsT0FBNUJBLE9BQU0sd0JBQW1DLE9BQWJBLE1BQU1PLE1BQU0sRUFBQyxrQ0FBZ0M7WUFBRU4sTUFBTTtRQUF1QjtJQUNoSTtBQUNKO0FBQ08sTUFBTU8sMEJBQTBCZiwrQ0FBU0E7SUFDNUNFLFlBQVksRUFBRWMsU0FBUyxFQUFFQyxPQUFPLEVBQUUsQ0FBRTtRQUNoQyxLQUFLLENBQUMsc0JBQW9ERCxPQUE5QkMsU0FBUSx3QkFBZ0MsT0FBVkQsV0FBVSxZQUFVO1lBQUVSLE1BQU07UUFBb0I7SUFDOUc7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvZW5jb2RpbmcuanM/ZjcyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRXJyb3IgfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNsYXNzIEludGVnZXJPdXRPZlJhbmdlRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgbWF4LCBtaW4sIHNpZ25lZCwgc2l6ZSwgdmFsdWUsIH0pIHtcbiAgICAgICAgc3VwZXIoYE51bWJlciBcIiR7dmFsdWV9XCIgaXMgbm90IGluIHNhZmUgJHtzaXplID8gYCR7c2l6ZSAqIDh9LWJpdCAke3NpZ25lZCA/ICdzaWduZWQnIDogJ3Vuc2lnbmVkJ30gYCA6ICcnfWludGVnZXIgcmFuZ2UgJHttYXggPyBgKCR7bWlufSB0byAke21heH0pYCA6IGAoYWJvdmUgJHttaW59KWB9YCwgeyBuYW1lOiAnSW50ZWdlck91dE9mUmFuZ2VFcnJvcicgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRCeXRlc0Jvb2xlYW5FcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoYnl0ZXMpIHtcbiAgICAgICAgc3VwZXIoYEJ5dGVzIHZhbHVlIFwiJHtieXRlc31cIiBpcyBub3QgYSB2YWxpZCBib29sZWFuLiBUaGUgYnl0ZXMgYXJyYXkgbXVzdCBjb250YWluIGEgc2luZ2xlIGJ5dGUgb2YgZWl0aGVyIGEgMCBvciAxIHZhbHVlLmAsIHtcbiAgICAgICAgICAgIG5hbWU6ICdJbnZhbGlkQnl0ZXNCb29sZWFuRXJyb3InLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZEhleEJvb2xlYW5FcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoaGV4KSB7XG4gICAgICAgIHN1cGVyKGBIZXggdmFsdWUgXCIke2hleH1cIiBpcyBub3QgYSB2YWxpZCBib29sZWFuLiBUaGUgaGV4IHZhbHVlIG11c3QgYmUgXCIweDBcIiAoZmFsc2UpIG9yIFwiMHgxXCIgKHRydWUpLmAsIHsgbmFtZTogJ0ludmFsaWRIZXhCb29sZWFuRXJyb3InIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkSGV4VmFsdWVFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgc3VwZXIoYEhleCB2YWx1ZSBcIiR7dmFsdWV9XCIgaXMgYW4gb2RkIGxlbmd0aCAoJHt2YWx1ZS5sZW5ndGh9KS4gSXQgbXVzdCBiZSBhbiBldmVuIGxlbmd0aC5gLCB7IG5hbWU6ICdJbnZhbGlkSGV4VmFsdWVFcnJvcicgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFNpemVPdmVyZmxvd0Vycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGdpdmVuU2l6ZSwgbWF4U2l6ZSB9KSB7XG4gICAgICAgIHN1cGVyKGBTaXplIGNhbm5vdCBleGNlZWQgJHttYXhTaXplfSBieXRlcy4gR2l2ZW4gc2l6ZTogJHtnaXZlblNpemV9IGJ5dGVzLmAsIHsgbmFtZTogJ1NpemVPdmVyZmxvd0Vycm9yJyB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmNvZGluZy5qcy5tYXAiXSwibmFtZXMiOlsiQmFzZUVycm9yIiwiSW50ZWdlck91dE9mUmFuZ2VFcnJvciIsImNvbnN0cnVjdG9yIiwibWF4IiwibWluIiwic2lnbmVkIiwic2l6ZSIsInZhbHVlIiwibmFtZSIsIkludmFsaWRCeXRlc0Jvb2xlYW5FcnJvciIsImJ5dGVzIiwiSW52YWxpZEhleEJvb2xlYW5FcnJvciIsImhleCIsIkludmFsaWRIZXhWYWx1ZUVycm9yIiwibGVuZ3RoIiwiU2l6ZU92ZXJmbG93RXJyb3IiLCJnaXZlblNpemUiLCJtYXhTaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"2.23.2\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLFNBQVMsQ0FDaEMsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy92ZXJzaW9uLmpzPzFiY2UiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnMi4yMy4yJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checksumAddress: function() { return /* binding */ checksumAddress; },\n/* harmony export */   getAddress: function() { return /* binding */ getAddress; }\n/* harmony export */ });\n/* harmony import */ var _errors_address_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../errors/address.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js\");\n/* harmony import */ var _encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/toBytes.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var _hash_keccak256_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hash/keccak256.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js\");\n/* harmony import */ var _lru_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lru.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js\");\n/* harmony import */ var _isAddress_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isAddress.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js\");\n\n\n\n\n\nconst checksumAddressCache = /*#__PURE__*/ new _lru_js__WEBPACK_IMPORTED_MODULE_0__.LruMap(8192);\nfunction checksumAddress(address_, /**\n * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n * that relies on EIP-55 checksum encoding (checksum without chainId).\n *\n * It is highly recommended to not use this feature unless you\n * know what you are doing.\n *\n * See more: https://github.com/ethereum/EIPs/issues/1121\n */ chainId) {\n    if (checksumAddressCache.has(\"\".concat(address_, \".\").concat(chainId))) return checksumAddressCache.get(\"\".concat(address_, \".\").concat(chainId));\n    const hexAddress = chainId ? \"\".concat(chainId).concat(address_.toLowerCase()) : address_.substring(2).toLowerCase();\n    const hash = (0,_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.stringToBytes)(hexAddress), \"bytes\");\n    const address = (chainId ? hexAddress.substring(\"\".concat(chainId, \"0x\").length) : hexAddress).split(\"\");\n    for(let i = 0; i < 40; i += 2){\n        if (hash[i >> 1] >> 4 >= 8 && address[i]) {\n            address[i] = address[i].toUpperCase();\n        }\n        if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\n            address[i + 1] = address[i + 1].toUpperCase();\n        }\n    }\n    const result = \"0x\".concat(address.join(\"\"));\n    checksumAddressCache.set(\"\".concat(address_, \".\").concat(chainId), result);\n    return result;\n}\nfunction getAddress(address, /**\n * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n * that relies on EIP-55 checksum encoding (checksum without chainId).\n *\n * It is highly recommended to not use this feature unless you\n * know what you are doing.\n *\n * See more: https://github.com/ethereum/EIPs/issues/1121\n */ chainId) {\n    if (!(0,_isAddress_js__WEBPACK_IMPORTED_MODULE_3__.isAddress)(address, {\n        strict: false\n    })) throw new _errors_address_js__WEBPACK_IMPORTED_MODULE_4__.InvalidAddressError({\n        address\n    });\n    return checksumAddress(address, chainId);\n} //# sourceMappingURL=getAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2FkZHJlc3MvZ2V0QWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQThEO0FBQ047QUFDUDtBQUNkO0FBQ1E7QUFDM0MsTUFBTUssdUJBQXVCLFdBQVcsR0FBRyxJQUFJRiwyQ0FBTUEsQ0FBQztBQUMvQyxTQUFTRyxnQkFBZ0JDLFFBQVEsRUFDeEM7Ozs7Ozs7OztDQVNDLEdBQ0RDLE9BQU87SUFDSCxJQUFJSCxxQkFBcUJJLEdBQUcsQ0FBQyxHQUFlRCxPQUFaRCxVQUFTLEtBQVcsT0FBUkMsV0FDeEMsT0FBT0gscUJBQXFCSyxHQUFHLENBQUMsR0FBZUYsT0FBWkQsVUFBUyxLQUFXLE9BQVJDO0lBQ25ELE1BQU1HLGFBQWFILFVBQ2IsR0FBYUQsT0FBVkMsU0FBaUMsT0FBdkJELFNBQVNLLFdBQVcsTUFDakNMLFNBQVNNLFNBQVMsQ0FBQyxHQUFHRCxXQUFXO0lBQ3ZDLE1BQU1FLE9BQU9aLDZEQUFTQSxDQUFDRCxtRUFBYUEsQ0FBQ1UsYUFBYTtJQUNsRCxNQUFNSSxVQUFVLENBQUNQLFVBQVVHLFdBQVdFLFNBQVMsQ0FBQyxHQUFXLE9BQVJMLFNBQVEsTUFBSVEsTUFBTSxJQUFJTCxVQUFTLEVBQUdNLEtBQUssQ0FBQztJQUMzRixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxJQUFJQSxLQUFLLEVBQUc7UUFDNUIsSUFBSUosSUFBSSxDQUFDSSxLQUFLLEVBQUUsSUFBSSxLQUFLLEtBQUtILE9BQU8sQ0FBQ0csRUFBRSxFQUFFO1lBQ3RDSCxPQUFPLENBQUNHLEVBQUUsR0FBR0gsT0FBTyxDQUFDRyxFQUFFLENBQUNDLFdBQVc7UUFDdkM7UUFDQSxJQUFJLENBQUNMLElBQUksQ0FBQ0ksS0FBSyxFQUFFLEdBQUcsSUFBRyxLQUFNLEtBQUtILE9BQU8sQ0FBQ0csSUFBSSxFQUFFLEVBQUU7WUFDOUNILE9BQU8sQ0FBQ0csSUFBSSxFQUFFLEdBQUdILE9BQU8sQ0FBQ0csSUFBSSxFQUFFLENBQUNDLFdBQVc7UUFDL0M7SUFDSjtJQUNBLE1BQU1DLFNBQVMsS0FBc0IsT0FBakJMLFFBQVFNLElBQUksQ0FBQztJQUNqQ2hCLHFCQUFxQmlCLEdBQUcsQ0FBQyxHQUFlZCxPQUFaRCxVQUFTLEtBQVcsT0FBUkMsVUFBV1k7SUFDbkQsT0FBT0E7QUFDWDtBQUNPLFNBQVNHLFdBQVdSLE9BQU8sRUFDbEM7Ozs7Ozs7OztDQVNDLEdBQ0RQLE9BQU87SUFDSCxJQUFJLENBQUNKLHdEQUFTQSxDQUFDVyxTQUFTO1FBQUVTLFFBQVE7SUFBTSxJQUNwQyxNQUFNLElBQUl4QixtRUFBbUJBLENBQUM7UUFBRWU7SUFBUTtJQUM1QyxPQUFPVCxnQkFBZ0JTLFNBQVNQO0FBQ3BDLEVBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2FkZHJlc3MvZ2V0QWRkcmVzcy5qcz84MjRjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEludmFsaWRBZGRyZXNzRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvcnMvYWRkcmVzcy5qcyc7XG5pbXBvcnQgeyBzdHJpbmdUb0J5dGVzLCB9IGZyb20gJy4uL2VuY29kaW5nL3RvQnl0ZXMuanMnO1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSAnLi4vaGFzaC9rZWNjYWsyNTYuanMnO1xuaW1wb3J0IHsgTHJ1TWFwIH0gZnJvbSAnLi4vbHJ1LmpzJztcbmltcG9ydCB7IGlzQWRkcmVzcyB9IGZyb20gJy4vaXNBZGRyZXNzLmpzJztcbmNvbnN0IGNoZWNrc3VtQWRkcmVzc0NhY2hlID0gLyojX19QVVJFX18qLyBuZXcgTHJ1TWFwKDgxOTIpO1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrc3VtQWRkcmVzcyhhZGRyZXNzXywgXG4vKipcbiAqIFdhcm5pbmc6IEVJUC0xMTkxIGNoZWNrc3VtIGFkZHJlc3NlcyBhcmUgZ2VuZXJhbGx5IG5vdCBiYWNrd2FyZHMgY29tcGF0aWJsZSB3aXRoIHRoZVxuICogd2lkZXIgRXRoZXJldW0gZWNvc3lzdGVtLCBtZWFuaW5nIGl0IHdpbGwgYnJlYWsgd2hlbiB2YWxpZGF0ZWQgYWdhaW5zdCBhbiBhcHBsaWNhdGlvbi90b29sXG4gKiB0aGF0IHJlbGllcyBvbiBFSVAtNTUgY2hlY2tzdW0gZW5jb2RpbmcgKGNoZWNrc3VtIHdpdGhvdXQgY2hhaW5JZCkuXG4gKlxuICogSXQgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHRvIG5vdCB1c2UgdGhpcyBmZWF0dXJlIHVubGVzcyB5b3VcbiAqIGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLlxuICpcbiAqIFNlZSBtb3JlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTEyMVxuICovXG5jaGFpbklkKSB7XG4gICAgaWYgKGNoZWNrc3VtQWRkcmVzc0NhY2hlLmhhcyhgJHthZGRyZXNzX30uJHtjaGFpbklkfWApKVxuICAgICAgICByZXR1cm4gY2hlY2tzdW1BZGRyZXNzQ2FjaGUuZ2V0KGAke2FkZHJlc3NffS4ke2NoYWluSWR9YCk7XG4gICAgY29uc3QgaGV4QWRkcmVzcyA9IGNoYWluSWRcbiAgICAgICAgPyBgJHtjaGFpbklkfSR7YWRkcmVzc18udG9Mb3dlckNhc2UoKX1gXG4gICAgICAgIDogYWRkcmVzc18uc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgaGFzaCA9IGtlY2NhazI1NihzdHJpbmdUb0J5dGVzKGhleEFkZHJlc3MpLCAnYnl0ZXMnKTtcbiAgICBjb25zdCBhZGRyZXNzID0gKGNoYWluSWQgPyBoZXhBZGRyZXNzLnN1YnN0cmluZyhgJHtjaGFpbklkfTB4YC5sZW5ndGgpIDogaGV4QWRkcmVzcykuc3BsaXQoJycpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDA7IGkgKz0gMikge1xuICAgICAgICBpZiAoaGFzaFtpID4+IDFdID4+IDQgPj0gOCAmJiBhZGRyZXNzW2ldKSB7XG4gICAgICAgICAgICBhZGRyZXNzW2ldID0gYWRkcmVzc1tpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaGFzaFtpID4+IDFdICYgMHgwZikgPj0gOCAmJiBhZGRyZXNzW2kgKyAxXSkge1xuICAgICAgICAgICAgYWRkcmVzc1tpICsgMV0gPSBhZGRyZXNzW2kgKyAxXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGAweCR7YWRkcmVzcy5qb2luKCcnKX1gO1xuICAgIGNoZWNrc3VtQWRkcmVzc0NhY2hlLnNldChgJHthZGRyZXNzX30uJHtjaGFpbklkfWAsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBZGRyZXNzKGFkZHJlc3MsIFxuLyoqXG4gKiBXYXJuaW5nOiBFSVAtMTE5MSBjaGVja3N1bSBhZGRyZXNzZXMgYXJlIGdlbmVyYWxseSBub3QgYmFja3dhcmRzIGNvbXBhdGlibGUgd2l0aCB0aGVcbiAqIHdpZGVyIEV0aGVyZXVtIGVjb3N5c3RlbSwgbWVhbmluZyBpdCB3aWxsIGJyZWFrIHdoZW4gdmFsaWRhdGVkIGFnYWluc3QgYW4gYXBwbGljYXRpb24vdG9vbFxuICogdGhhdCByZWxpZXMgb24gRUlQLTU1IGNoZWNrc3VtIGVuY29kaW5nIChjaGVja3N1bSB3aXRob3V0IGNoYWluSWQpLlxuICpcbiAqIEl0IGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byBub3QgdXNlIHRoaXMgZmVhdHVyZSB1bmxlc3MgeW91XG4gKiBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cbiAqXG4gKiBTZWUgbW9yZTogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzExMjFcbiAqL1xuY2hhaW5JZCkge1xuICAgIGlmICghaXNBZGRyZXNzKGFkZHJlc3MsIHsgc3RyaWN0OiBmYWxzZSB9KSlcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBZGRyZXNzRXJyb3IoeyBhZGRyZXNzIH0pO1xuICAgIHJldHVybiBjaGVja3N1bUFkZHJlc3MoYWRkcmVzcywgY2hhaW5JZCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6WyJJbnZhbGlkQWRkcmVzc0Vycm9yIiwic3RyaW5nVG9CeXRlcyIsImtlY2NhazI1NiIsIkxydU1hcCIsImlzQWRkcmVzcyIsImNoZWNrc3VtQWRkcmVzc0NhY2hlIiwiY2hlY2tzdW1BZGRyZXNzIiwiYWRkcmVzc18iLCJjaGFpbklkIiwiaGFzIiwiZ2V0IiwiaGV4QWRkcmVzcyIsInRvTG93ZXJDYXNlIiwic3Vic3RyaW5nIiwiaGFzaCIsImFkZHJlc3MiLCJsZW5ndGgiLCJzcGxpdCIsImkiLCJ0b1VwcGVyQ2FzZSIsInJlc3VsdCIsImpvaW4iLCJzZXQiLCJnZXRBZGRyZXNzIiwic3RyaWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAddress: function() { return /* binding */ isAddress; },\n/* harmony export */   isAddressCache: function() { return /* binding */ isAddressCache; }\n/* harmony export */ });\n/* harmony import */ var _lru_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lru.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js\");\n/* harmony import */ var _getAddress_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getAddress.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js\");\n\n\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/;\n/** @internal */ const isAddressCache = /*#__PURE__*/ new _lru_js__WEBPACK_IMPORTED_MODULE_0__.LruMap(8192);\nfunction isAddress(address, options) {\n    const { strict = true } = options !== null && options !== void 0 ? options : {};\n    const cacheKey = \"\".concat(address, \".\").concat(strict);\n    if (isAddressCache.has(cacheKey)) return isAddressCache.get(cacheKey);\n    const result = (()=>{\n        if (!addressRegex.test(address)) return false;\n        if (address.toLowerCase() === address) return true;\n        if (strict) return (0,_getAddress_js__WEBPACK_IMPORTED_MODULE_1__.checksumAddress)(address) === address;\n        return true;\n    })();\n    isAddressCache.set(cacheKey, result);\n    return result;\n} //# sourceMappingURL=isAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2FkZHJlc3MvaXNBZGRyZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUM7QUFDZTtBQUNsRCxNQUFNRSxlQUFlO0FBQ3JCLGNBQWMsR0FDUCxNQUFNQyxpQkFBaUIsV0FBVyxHQUFHLElBQUlILDJDQUFNQSxDQUFDLE1BQU07QUFDdEQsU0FBU0ksVUFBVUMsT0FBTyxFQUFFQyxPQUFPO0lBQ3RDLE1BQU0sRUFBRUMsU0FBUyxJQUFJLEVBQUUsR0FBR0Qsb0JBQUFBLHFCQUFBQSxVQUFXLENBQUM7SUFDdEMsTUFBTUUsV0FBVyxHQUFjRCxPQUFYRixTQUFRLEtBQVUsT0FBUEU7SUFDL0IsSUFBSUosZUFBZU0sR0FBRyxDQUFDRCxXQUNuQixPQUFPTCxlQUFlTyxHQUFHLENBQUNGO0lBQzlCLE1BQU1HLFNBQVMsQ0FBQztRQUNaLElBQUksQ0FBQ1QsYUFBYVUsSUFBSSxDQUFDUCxVQUNuQixPQUFPO1FBQ1gsSUFBSUEsUUFBUVEsV0FBVyxPQUFPUixTQUMxQixPQUFPO1FBQ1gsSUFBSUUsUUFDQSxPQUFPTiwrREFBZUEsQ0FBQ0ksYUFBYUE7UUFDeEMsT0FBTztJQUNYO0lBQ0FGLGVBQWVXLEdBQUcsQ0FBQ04sVUFBVUc7SUFDN0IsT0FBT0E7QUFDWCxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9hZGRyZXNzL2lzQWRkcmVzcy5qcz8wOTFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExydU1hcCB9IGZyb20gJy4uL2xydS5qcyc7XG5pbXBvcnQgeyBjaGVja3N1bUFkZHJlc3MgfSBmcm9tICcuL2dldEFkZHJlc3MuanMnO1xuY29uc3QgYWRkcmVzc1JlZ2V4ID0gL14weFthLWZBLUYwLTldezQwfSQvO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGlzQWRkcmVzc0NhY2hlID0gLyojX19QVVJFX18qLyBuZXcgTHJ1TWFwKDgxOTIpO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWRkcmVzcyhhZGRyZXNzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBzdHJpY3QgPSB0cnVlIH0gPSBvcHRpb25zID8/IHt9O1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7YWRkcmVzc30uJHtzdHJpY3R9YDtcbiAgICBpZiAoaXNBZGRyZXNzQ2FjaGUuaGFzKGNhY2hlS2V5KSlcbiAgICAgICAgcmV0dXJuIGlzQWRkcmVzc0NhY2hlLmdldChjYWNoZUtleSk7XG4gICAgY29uc3QgcmVzdWx0ID0gKCgpID0+IHtcbiAgICAgICAgaWYgKCFhZGRyZXNzUmVnZXgudGVzdChhZGRyZXNzKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGFkZHJlc3MudG9Mb3dlckNhc2UoKSA9PT0gYWRkcmVzcylcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoc3RyaWN0KVxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKSA9PT0gYWRkcmVzcztcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkoKTtcbiAgICBpc0FkZHJlc3NDYWNoZS5zZXQoY2FjaGVLZXksIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOlsiTHJ1TWFwIiwiY2hlY2tzdW1BZGRyZXNzIiwiYWRkcmVzc1JlZ2V4IiwiaXNBZGRyZXNzQ2FjaGUiLCJpc0FkZHJlc3MiLCJhZGRyZXNzIiwib3B0aW9ucyIsInN0cmljdCIsImNhY2hlS2V5IiwiaGFzIiwiZ2V0IiwicmVzdWx0IiwidGVzdCIsInRvTG93ZXJDYXNlIiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHex: function() { return /* binding */ isHex; }\n/* harmony export */ });\nfunction isHex(value) {\n    let { strict = true } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (!value) return false;\n    if (typeof value !== \"string\") return false;\n    return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith(\"0x\");\n} //# sourceMappingURL=isHex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvaXNIZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLE1BQU1DLEtBQUs7UUFBRSxFQUFFQyxTQUFTLElBQUksRUFBRSxHQUFqQixpRUFBb0IsQ0FBQztJQUM5QyxJQUFJLENBQUNELE9BQ0QsT0FBTztJQUNYLElBQUksT0FBT0EsVUFBVSxVQUNqQixPQUFPO0lBQ1gsT0FBT0MsU0FBUyxtQkFBbUJDLElBQUksQ0FBQ0YsU0FBU0EsTUFBTUcsVUFBVSxDQUFDO0FBQ3RFLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvaXNIZXguanM/ZWI1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNIZXgodmFsdWUsIHsgc3RyaWN0ID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBpZiAoIXZhbHVlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gc3RyaWN0ID8gL14weFswLTlhLWZBLUZdKiQvLnRlc3QodmFsdWUpIDogdmFsdWUuc3RhcnRzV2l0aCgnMHgnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJpc0hleCIsInZhbHVlIiwic3RyaWN0IiwidGVzdCIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pad: function() { return /* binding */ pad; },\n/* harmony export */   padBytes: function() { return /* binding */ padBytes; },\n/* harmony export */   padHex: function() { return /* binding */ padHex; }\n/* harmony export */ });\n/* harmony import */ var _errors_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../errors/data.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js\");\n\nfunction pad(hexOrBytes) {\n    let { dir, size = 32 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (typeof hexOrBytes === \"string\") return padHex(hexOrBytes, {\n        dir,\n        size\n    });\n    return padBytes(hexOrBytes, {\n        dir,\n        size\n    });\n}\nfunction padHex(hex_) {\n    let { dir, size = 32 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (size === null) return hex_;\n    const hex = hex_.replace(\"0x\", \"\");\n    if (hex.length > size * 2) throw new _errors_data_js__WEBPACK_IMPORTED_MODULE_0__.SizeExceedsPaddingSizeError({\n        size: Math.ceil(hex.length / 2),\n        targetSize: size,\n        type: \"hex\"\n    });\n    return \"0x\".concat(hex[dir === \"right\" ? \"padEnd\" : \"padStart\"](size * 2, \"0\"));\n}\nfunction padBytes(bytes) {\n    let { dir, size = 32 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (size === null) return bytes;\n    if (bytes.length > size) throw new _errors_data_js__WEBPACK_IMPORTED_MODULE_0__.SizeExceedsPaddingSizeError({\n        size: bytes.length,\n        targetSize: size,\n        type: \"bytes\"\n    });\n    const paddedBytes = new Uint8Array(size);\n    for(let i = 0; i < size; i++){\n        const padEnd = dir === \"right\";\n        paddedBytes[padEnd ? i : size - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];\n    }\n    return paddedBytes;\n} //# sourceMappingURL=pad.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvcGFkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0U7QUFDN0QsU0FBU0MsSUFBSUMsVUFBVTtRQUFFLEVBQUVDLEdBQUcsRUFBRUMsT0FBTyxFQUFFLEVBQUUsR0FBbEIsaUVBQXFCLENBQUM7SUFDbEQsSUFBSSxPQUFPRixlQUFlLFVBQ3RCLE9BQU9HLE9BQU9ILFlBQVk7UUFBRUM7UUFBS0M7SUFBSztJQUMxQyxPQUFPRSxTQUFTSixZQUFZO1FBQUVDO1FBQUtDO0lBQUs7QUFDNUM7QUFDTyxTQUFTQyxPQUFPRSxJQUFJO1FBQUUsRUFBRUosR0FBRyxFQUFFQyxPQUFPLEVBQUUsRUFBRSxHQUFsQixpRUFBcUIsQ0FBQztJQUMvQyxJQUFJQSxTQUFTLE1BQ1QsT0FBT0c7SUFDWCxNQUFNQyxNQUFNRCxLQUFLRSxPQUFPLENBQUMsTUFBTTtJQUMvQixJQUFJRCxJQUFJRSxNQUFNLEdBQUdOLE9BQU8sR0FDcEIsTUFBTSxJQUFJSix3RUFBMkJBLENBQUM7UUFDbENJLE1BQU1PLEtBQUtDLElBQUksQ0FBQ0osSUFBSUUsTUFBTSxHQUFHO1FBQzdCRyxZQUFZVDtRQUNaVSxNQUFNO0lBQ1Y7SUFDSixPQUFPLEtBQWlFLE9BQTVETixHQUFHLENBQUNMLFFBQVEsVUFBVSxXQUFXLFdBQVcsQ0FBQ0MsT0FBTyxHQUFHO0FBQ3ZFO0FBQ08sU0FBU0UsU0FBU1MsS0FBSztRQUFFLEVBQUVaLEdBQUcsRUFBRUMsT0FBTyxFQUFFLEVBQUUsR0FBbEIsaUVBQXFCLENBQUM7SUFDbEQsSUFBSUEsU0FBUyxNQUNULE9BQU9XO0lBQ1gsSUFBSUEsTUFBTUwsTUFBTSxHQUFHTixNQUNmLE1BQU0sSUFBSUosd0VBQTJCQSxDQUFDO1FBQ2xDSSxNQUFNVyxNQUFNTCxNQUFNO1FBQ2xCRyxZQUFZVDtRQUNaVSxNQUFNO0lBQ1Y7SUFDSixNQUFNRSxjQUFjLElBQUlDLFdBQVdiO0lBQ25DLElBQUssSUFBSWMsSUFBSSxHQUFHQSxJQUFJZCxNQUFNYyxJQUFLO1FBQzNCLE1BQU1DLFNBQVNoQixRQUFRO1FBQ3ZCYSxXQUFXLENBQUNHLFNBQVNELElBQUlkLE9BQU9jLElBQUksRUFBRSxHQUNsQ0gsS0FBSyxDQUFDSSxTQUFTRCxJQUFJSCxNQUFNTCxNQUFNLEdBQUdRLElBQUksRUFBRTtJQUNoRDtJQUNBLE9BQU9GO0FBQ1gsRUFDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvZGF0YS9wYWQuanM/ZWUyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3IsIH0gZnJvbSAnLi4vLi4vZXJyb3JzL2RhdGEuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHBhZChoZXhPckJ5dGVzLCB7IGRpciwgc2l6ZSA9IDMyIH0gPSB7fSkge1xuICAgIGlmICh0eXBlb2YgaGV4T3JCeXRlcyA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBwYWRIZXgoaGV4T3JCeXRlcywgeyBkaXIsIHNpemUgfSk7XG4gICAgcmV0dXJuIHBhZEJ5dGVzKGhleE9yQnl0ZXMsIHsgZGlyLCBzaXplIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhZEhleChoZXhfLCB7IGRpciwgc2l6ZSA9IDMyIH0gPSB7fSkge1xuICAgIGlmIChzaXplID09PSBudWxsKVxuICAgICAgICByZXR1cm4gaGV4XztcbiAgICBjb25zdCBoZXggPSBoZXhfLnJlcGxhY2UoJzB4JywgJycpO1xuICAgIGlmIChoZXgubGVuZ3RoID4gc2l6ZSAqIDIpXG4gICAgICAgIHRocm93IG5ldyBTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3Ioe1xuICAgICAgICAgICAgc2l6ZTogTWF0aC5jZWlsKGhleC5sZW5ndGggLyAyKSxcbiAgICAgICAgICAgIHRhcmdldFNpemU6IHNpemUsXG4gICAgICAgICAgICB0eXBlOiAnaGV4JyxcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIGAweCR7aGV4W2RpciA9PT0gJ3JpZ2h0JyA/ICdwYWRFbmQnIDogJ3BhZFN0YXJ0J10oc2l6ZSAqIDIsICcwJyl9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWRCeXRlcyhieXRlcywgeyBkaXIsIHNpemUgPSAzMiB9ID0ge30pIHtcbiAgICBpZiAoc2l6ZSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIGlmIChieXRlcy5sZW5ndGggPiBzaXplKVxuICAgICAgICB0aHJvdyBuZXcgU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yKHtcbiAgICAgICAgICAgIHNpemU6IGJ5dGVzLmxlbmd0aCxcbiAgICAgICAgICAgIHRhcmdldFNpemU6IHNpemUsXG4gICAgICAgICAgICB0eXBlOiAnYnl0ZXMnLFxuICAgICAgICB9KTtcbiAgICBjb25zdCBwYWRkZWRCeXRlcyA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhZEVuZCA9IGRpciA9PT0gJ3JpZ2h0JztcbiAgICAgICAgcGFkZGVkQnl0ZXNbcGFkRW5kID8gaSA6IHNpemUgLSBpIC0gMV0gPVxuICAgICAgICAgICAgYnl0ZXNbcGFkRW5kID8gaSA6IGJ5dGVzLmxlbmd0aCAtIGkgLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhZGRlZEJ5dGVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFkLmpzLm1hcCJdLCJuYW1lcyI6WyJTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3IiLCJwYWQiLCJoZXhPckJ5dGVzIiwiZGlyIiwic2l6ZSIsInBhZEhleCIsInBhZEJ5dGVzIiwiaGV4XyIsImhleCIsInJlcGxhY2UiLCJsZW5ndGgiLCJNYXRoIiwiY2VpbCIsInRhcmdldFNpemUiLCJ0eXBlIiwiYnl0ZXMiLCJwYWRkZWRCeXRlcyIsIlVpbnQ4QXJyYXkiLCJpIiwicGFkRW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   size: function() { return /* binding */ size; }\n/* harmony export */ });\n/* harmony import */ var _isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isHex.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */ function size(value) {\n    if ((0,_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(value, {\n        strict: false\n    })) return Math.ceil((value.length - 2) / 2);\n    return value.length;\n} //# sourceMappingURL=size.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvc2l6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFtQztBQUNuQzs7Ozs7Q0FLQyxHQUNNLFNBQVNDLEtBQUtDLEtBQUs7SUFDdEIsSUFBSUYsZ0RBQUtBLENBQUNFLE9BQU87UUFBRUMsUUFBUTtJQUFNLElBQzdCLE9BQU9DLEtBQUtDLElBQUksQ0FBQyxDQUFDSCxNQUFNSSxNQUFNLEdBQUcsS0FBSztJQUMxQyxPQUFPSixNQUFNSSxNQUFNO0FBQ3ZCLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvc2l6ZS5qcz9kYTUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSGV4IH0gZnJvbSAnLi9pc0hleC5qcyc7XG4vKipcbiAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIHNpemUgb2YgdGhlIHZhbHVlIChpbiBieXRlcykuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSAoaGV4IG9yIGJ5dGUgYXJyYXkpIHRvIHJldHJpZXZlIHRoZSBzaXplIG9mLlxuICogQHJldHVybnMgVGhlIHNpemUgb2YgdGhlIHZhbHVlIChpbiBieXRlcykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplKHZhbHVlKSB7XG4gICAgaWYgKGlzSGV4KHZhbHVlLCB7IHN0cmljdDogZmFsc2UgfSkpXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoKHZhbHVlLmxlbmd0aCAtIDIpIC8gMik7XG4gICAgcmV0dXJuIHZhbHVlLmxlbmd0aDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpemUuanMubWFwIl0sIm5hbWVzIjpbImlzSGV4Iiwic2l6ZSIsInZhbHVlIiwic3RyaWN0IiwiTWF0aCIsImNlaWwiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trim: function() { return /* binding */ trim; }\n/* harmony export */ });\nfunction trim(hexOrBytes) {\n    let { dir = \"left\" } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let data = typeof hexOrBytes === \"string\" ? hexOrBytes.replace(\"0x\", \"\") : hexOrBytes;\n    let sliceLength = 0;\n    for(let i = 0; i < data.length - 1; i++){\n        if (data[dir === \"left\" ? i : data.length - i - 1].toString() === \"0\") sliceLength++;\n        else break;\n    }\n    data = dir === \"left\" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);\n    if (typeof hexOrBytes === \"string\") {\n        if (data.length === 1 && dir === \"right\") data = \"\".concat(data, \"0\");\n        return \"0x\".concat(data.length % 2 === 1 ? \"0\".concat(data) : data);\n    }\n    return data;\n} //# sourceMappingURL=trim.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvdHJpbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsS0FBS0MsVUFBVTtRQUFFLEVBQUVDLE1BQU0sTUFBTSxFQUFFLEdBQWhCLGlFQUFtQixDQUFDO0lBQ2pELElBQUlDLE9BQU8sT0FBT0YsZUFBZSxXQUFXQSxXQUFXRyxPQUFPLENBQUMsTUFBTSxNQUFNSDtJQUMzRSxJQUFJSSxjQUFjO0lBQ2xCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxLQUFLSSxNQUFNLEdBQUcsR0FBR0QsSUFBSztRQUN0QyxJQUFJSCxJQUFJLENBQUNELFFBQVEsU0FBU0ksSUFBSUgsS0FBS0ksTUFBTSxHQUFHRCxJQUFJLEVBQUUsQ0FBQ0UsUUFBUSxPQUFPLEtBQzlESDthQUVBO0lBQ1I7SUFDQUYsT0FDSUQsUUFBUSxTQUNGQyxLQUFLTSxLQUFLLENBQUNKLGVBQ1hGLEtBQUtNLEtBQUssQ0FBQyxHQUFHTixLQUFLSSxNQUFNLEdBQUdGO0lBQ3RDLElBQUksT0FBT0osZUFBZSxVQUFVO1FBQ2hDLElBQUlFLEtBQUtJLE1BQU0sS0FBSyxLQUFLTCxRQUFRLFNBQzdCQyxPQUFPLEdBQVEsT0FBTEEsTUFBSztRQUNuQixPQUFPLEtBQStDLE9BQTFDQSxLQUFLSSxNQUFNLEdBQUcsTUFBTSxJQUFJLElBQVMsT0FBTEosUUFBU0E7SUFDckQ7SUFDQSxPQUFPQTtBQUNYLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvdHJpbS5qcz80M2YwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiB0cmltKGhleE9yQnl0ZXMsIHsgZGlyID0gJ2xlZnQnIH0gPSB7fSkge1xuICAgIGxldCBkYXRhID0gdHlwZW9mIGhleE9yQnl0ZXMgPT09ICdzdHJpbmcnID8gaGV4T3JCeXRlcy5yZXBsYWNlKCcweCcsICcnKSA6IGhleE9yQnl0ZXM7XG4gICAgbGV0IHNsaWNlTGVuZ3RoID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGlmIChkYXRhW2RpciA9PT0gJ2xlZnQnID8gaSA6IGRhdGEubGVuZ3RoIC0gaSAtIDFdLnRvU3RyaW5nKCkgPT09ICcwJylcbiAgICAgICAgICAgIHNsaWNlTGVuZ3RoKys7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkYXRhID1cbiAgICAgICAgZGlyID09PSAnbGVmdCdcbiAgICAgICAgICAgID8gZGF0YS5zbGljZShzbGljZUxlbmd0aClcbiAgICAgICAgICAgIDogZGF0YS5zbGljZSgwLCBkYXRhLmxlbmd0aCAtIHNsaWNlTGVuZ3RoKTtcbiAgICBpZiAodHlwZW9mIGhleE9yQnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMSAmJiBkaXIgPT09ICdyaWdodCcpXG4gICAgICAgICAgICBkYXRhID0gYCR7ZGF0YX0wYDtcbiAgICAgICAgcmV0dXJuIGAweCR7ZGF0YS5sZW5ndGggJSAyID09PSAxID8gYDAke2RhdGF9YCA6IGRhdGF9YDtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmltLmpzLm1hcCJdLCJuYW1lcyI6WyJ0cmltIiwiaGV4T3JCeXRlcyIsImRpciIsImRhdGEiLCJyZXBsYWNlIiwic2xpY2VMZW5ndGgiLCJpIiwibGVuZ3RoIiwidG9TdHJpbmciLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertSize: function() { return /* binding */ assertSize; },\n/* harmony export */   fromHex: function() { return /* binding */ fromHex; },\n/* harmony export */   hexToBigInt: function() { return /* binding */ hexToBigInt; },\n/* harmony export */   hexToBool: function() { return /* binding */ hexToBool; },\n/* harmony export */   hexToNumber: function() { return /* binding */ hexToNumber; },\n/* harmony export */   hexToString: function() { return /* binding */ hexToString; }\n/* harmony export */ });\n/* harmony import */ var _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../errors/encoding.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js\");\n/* harmony import */ var _data_size_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/size.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js\");\n/* harmony import */ var _data_trim_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/trim.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js\");\n/* harmony import */ var _toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./toBytes.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n\n\n\n\nfunction assertSize(hexOrBytes, param) {\n    let { size } = param;\n    if ((0,_data_size_js__WEBPACK_IMPORTED_MODULE_0__.size)(hexOrBytes) > size) throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__.SizeOverflowError({\n        givenSize: (0,_data_size_js__WEBPACK_IMPORTED_MODULE_0__.size)(hexOrBytes),\n        maxSize: size\n    });\n}\n/**\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex\n * - Example: https://viem.sh/docs/utilities/fromHex#usage\n *\n * @param hex Hex string to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x1a4', 'number')\n * // 420\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\n * // 'Hello world'\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *   size: 32,\n *   to: 'string'\n * })\n * // 'Hello world'\n */ function fromHex(hex, toOrOpts) {\n    const opts = typeof toOrOpts === \"string\" ? {\n        to: toOrOpts\n    } : toOrOpts;\n    const to = opts.to;\n    if (to === \"number\") return hexToNumber(hex, opts);\n    if (to === \"bigint\") return hexToBigInt(hex, opts);\n    if (to === \"string\") return hexToString(hex, opts);\n    if (to === \"boolean\") return hexToBool(hex, opts);\n    return (0,_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(hex, opts);\n}\n/**\n * Decodes a hex value into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x1a4', { signed: true })\n * // 420n\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420n\n */ function hexToBigInt(hex) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const { signed } = opts;\n    if (opts.size) assertSize(hex, {\n        size: opts.size\n    });\n    const value = BigInt(hex);\n    if (!signed) return value;\n    const size = (hex.length - 2) / 2;\n    const max = (1n << BigInt(size) * 8n - 1n) - 1n;\n    if (value <= max) return value;\n    return value - BigInt(\"0x\".concat(\"f\".padStart(size * 2, \"f\"))) - 1n;\n}\n/**\n * Decodes a hex value into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x01')\n * // true\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // true\n */ function hexToBool(hex_) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let hex = hex_;\n    if (opts.size) {\n        assertSize(hex, {\n            size: opts.size\n        });\n        hex = (0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex);\n    }\n    if ((0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex) === \"0x00\") return false;\n    if ((0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex) === \"0x01\") return true;\n    throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__.InvalidHexBooleanError(hex);\n}\n/**\n * Decodes a hex string into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToNumber('0x1a4')\n * // 420\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420\n */ function hexToNumber(hex) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return Number(hexToBigInt(hex, opts));\n}\n/**\n * Decodes a hex value into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c6421')\n * // 'Hello world!'\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // 'Hello world'\n */ function hexToString(hex) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let bytes = (0,_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(hex);\n    if (opts.size) {\n        assertSize(bytes, {\n            size: opts.size\n        });\n        bytes = (0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(bytes, {\n            dir: \"right\"\n        });\n    }\n    return new TextDecoder().decode(bytes);\n} //# sourceMappingURL=fromHex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boolToBytes: function() { return /* binding */ boolToBytes; },\n/* harmony export */   hexToBytes: function() { return /* binding */ hexToBytes; },\n/* harmony export */   numberToBytes: function() { return /* binding */ numberToBytes; },\n/* harmony export */   stringToBytes: function() { return /* binding */ stringToBytes; },\n/* harmony export */   toBytes: function() { return /* binding */ toBytes; }\n/* harmony export */ });\n/* harmony import */ var _errors_base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors/base.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/isHex.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _data_pad_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/pad.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js\");\n/* harmony import */ var _fromHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromHex.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n/* harmony import */ var _toHex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toHex.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\n\n\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes\n * - Example: https://viem.sh/docs/utilities/toBytes#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */ function toBytes(value) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (typeof value === \"number\" || typeof value === \"bigint\") return numberToBytes(value, opts);\n    if (typeof value === \"boolean\") return boolToBytes(value, opts);\n    if ((0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(value)) return hexToBytes(value, opts);\n    return stringToBytes(value, opts);\n}\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */ function boolToBytes(value) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const bytes = new Uint8Array(1);\n    bytes[0] = Number(value);\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(bytes, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(bytes, {\n            size: opts.size\n        });\n    }\n    return bytes;\n}\n// We use very optimized technique to convert hex string to byte array\nconst charCodeMap = {\n    zero: 48,\n    nine: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction charCodeToBase16(char) {\n    if (char >= charCodeMap.zero && char <= charCodeMap.nine) return char - charCodeMap.zero;\n    if (char >= charCodeMap.A && char <= charCodeMap.F) return char - (charCodeMap.A - 10);\n    if (char >= charCodeMap.a && char <= charCodeMap.f) return char - (charCodeMap.a - 10);\n    return undefined;\n}\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */ function hexToBytes(hex_) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let hex = hex_;\n    if (opts.size) {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(hex, {\n            size: opts.size\n        });\n        hex = (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(hex, {\n            dir: \"right\",\n            size: opts.size\n        });\n    }\n    let hexString = hex.slice(2);\n    if (hexString.length % 2) hexString = \"0\".concat(hexString);\n    const length = hexString.length / 2;\n    const bytes = new Uint8Array(length);\n    for(let index = 0, j = 0; index < length; index++){\n        const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));\n        const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));\n        if (nibbleLeft === undefined || nibbleRight === undefined) {\n            throw new _errors_base_js__WEBPACK_IMPORTED_MODULE_3__.BaseError('Invalid byte sequence (\"'.concat(hexString[j - 2]).concat(hexString[j - 1], '\" in \"').concat(hexString, '\").'));\n        }\n        bytes[index] = nibbleLeft * 16 + nibbleRight;\n    }\n    return bytes;\n}\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */ function numberToBytes(value, opts) {\n    const hex = (0,_toHex_js__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(value, opts);\n    return hexToBytes(hex);\n}\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */ function stringToBytes(value) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const bytes = encoder.encode(value);\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(bytes, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(bytes, {\n            dir: \"right\",\n            size: opts.size\n        });\n    }\n    return bytes;\n} //# sourceMappingURL=toBytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boolToHex: function() { return /* binding */ boolToHex; },\n/* harmony export */   bytesToHex: function() { return /* binding */ bytesToHex; },\n/* harmony export */   numberToHex: function() { return /* binding */ numberToHex; },\n/* harmony export */   stringToHex: function() { return /* binding */ stringToHex; },\n/* harmony export */   toHex: function() { return /* binding */ toHex; }\n/* harmony export */ });\n/* harmony import */ var _errors_encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors/encoding.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js\");\n/* harmony import */ var _data_pad_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/pad.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js\");\n/* harmony import */ var _fromHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromHex.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n\n\n\nconst hexes = /*#__PURE__*/ Array.from({\n    length: 256\n}, (_v, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * Encodes a string, number, bigint, or ByteArray into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex\n * - Example: https://viem.sh/docs/utilities/toHex#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world')\n * // '0x48656c6c6f20776f726c6421'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex(420)\n * // '0x1a4'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world', { size: 32 })\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\n */ function toHex(value) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (typeof value === \"number\" || typeof value === \"bigint\") return numberToHex(value, opts);\n    if (typeof value === \"string\") {\n        return stringToHex(value, opts);\n    }\n    if (typeof value === \"boolean\") return boolToHex(value, opts);\n    return bytesToHex(value, opts);\n}\n/**\n * Encodes a boolean into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#booltohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true)\n * // '0x1'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(false)\n * // '0x0'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true, { size: 32 })\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\n */ function boolToHex(value) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const hex = \"0x\".concat(Number(value));\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_0__.assertSize)(hex, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, {\n            size: opts.size\n        });\n    }\n    return hex;\n}\n/**\n * Encodes a bytes array into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */ function bytesToHex(value) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let string = \"\";\n    for(let i = 0; i < value.length; i++){\n        string += hexes[value[i]];\n    }\n    const hex = \"0x\".concat(string);\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_0__.assertSize)(hex, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, {\n            dir: \"right\",\n            size: opts.size\n        });\n    }\n    return hex;\n}\n/**\n * Encodes a number or bigint into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420)\n * // '0x1a4'\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420, { size: 32 })\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\n */ function numberToHex(value_) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const { signed, size } = opts;\n    const value = BigInt(value_);\n    let maxValue;\n    if (size) {\n        if (signed) maxValue = (1n << BigInt(size) * 8n - 1n) - 1n;\n        else maxValue = 2n ** (BigInt(size) * 8n) - 1n;\n    } else if (typeof value_ === \"number\") {\n        maxValue = BigInt(Number.MAX_SAFE_INTEGER);\n    }\n    const minValue = typeof maxValue === \"bigint\" && signed ? -maxValue - 1n : 0;\n    if (maxValue && value > maxValue || value < minValue) {\n        const suffix = typeof value_ === \"bigint\" ? \"n\" : \"\";\n        throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_2__.IntegerOutOfRangeError({\n            max: maxValue ? \"\".concat(maxValue).concat(suffix) : undefined,\n            min: \"\".concat(minValue).concat(suffix),\n            signed,\n            size,\n            value: \"\".concat(value_).concat(suffix)\n        });\n    }\n    const hex = \"0x\".concat((signed && value < 0 ? (1n << BigInt(size * 8)) + BigInt(value) : value).toString(16));\n    if (size) return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, {\n        size\n    });\n    return hex;\n}\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */ function stringToHex(value_) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const value = encoder.encode(value_);\n    return bytesToHex(value, opts);\n} //# sourceMappingURL=toHex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak256: function() { return /* binding */ keccak256; }\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/isHex.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/toBytes.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var _encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encoding/toHex.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\n\nfunction keccak256(value, to_) {\n    const to = to_ || \"hex\";\n    const bytes = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__.keccak_256)((0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_1__.isHex)(value, {\n        strict: false\n    }) ? (0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(value) : value);\n    if (to === \"bytes\") return bytes;\n    return (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__.toHex)(bytes);\n} //# sourceMappingURL=keccak256.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2hhc2gva2VjY2FrMjU2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWdEO0FBQ1A7QUFDUTtBQUNKO0FBQ3RDLFNBQVNJLFVBQVVDLEtBQUssRUFBRUMsR0FBRztJQUNoQyxNQUFNQyxLQUFLRCxPQUFPO0lBQ2xCLE1BQU1FLFFBQVFSLDhEQUFVQSxDQUFDQyxxREFBS0EsQ0FBQ0ksT0FBTztRQUFFSSxRQUFRO0lBQU0sS0FBS1AsNkRBQU9BLENBQUNHLFNBQVNBO0lBQzVFLElBQUlFLE9BQU8sU0FDUCxPQUFPQztJQUNYLE9BQU9MLHlEQUFLQSxDQUFDSztBQUNqQixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9oYXNoL2tlY2NhazI1Ni5qcz9kMDQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGtlY2Nha18yNTYgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3NoYTMnO1xuaW1wb3J0IHsgaXNIZXggfSBmcm9tICcuLi9kYXRhL2lzSGV4LmpzJztcbmltcG9ydCB7IHRvQnl0ZXMgfSBmcm9tICcuLi9lbmNvZGluZy90b0J5dGVzLmpzJztcbmltcG9ydCB7IHRvSGV4IH0gZnJvbSAnLi4vZW5jb2RpbmcvdG9IZXguanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGtlY2NhazI1Nih2YWx1ZSwgdG9fKSB7XG4gICAgY29uc3QgdG8gPSB0b18gfHwgJ2hleCc7XG4gICAgY29uc3QgYnl0ZXMgPSBrZWNjYWtfMjU2KGlzSGV4KHZhbHVlLCB7IHN0cmljdDogZmFsc2UgfSkgPyB0b0J5dGVzKHZhbHVlKSA6IHZhbHVlKTtcbiAgICBpZiAodG8gPT09ICdieXRlcycpXG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICByZXR1cm4gdG9IZXgoYnl0ZXMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VjY2FrMjU2LmpzLm1hcCJdLCJuYW1lcyI6WyJrZWNjYWtfMjU2IiwiaXNIZXgiLCJ0b0J5dGVzIiwidG9IZXgiLCJrZWNjYWsyNTYiLCJ2YWx1ZSIsInRvXyIsInRvIiwiYnl0ZXMiLCJzdHJpY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LruMap: function() { return /* binding */ LruMap; }\n/* harmony export */ });\n/**\n * Map with a LRU (Least recently used) policy.\n *\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */ class LruMap extends Map {\n    get(key) {\n        const value = super.get(key);\n        if (super.has(key) && value !== undefined) {\n            this.delete(key);\n            super.set(key, value);\n        }\n        return value;\n    }\n    set(key, value) {\n        super.set(key, value);\n        if (this.maxSize && this.size > this.maxSize) {\n            const firstKey = this.keys().next().value;\n            if (firstKey) this.delete(firstKey);\n        }\n        return this;\n    }\n    constructor(size){\n        super();\n        Object.defineProperty(this, \"maxSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxSize = size;\n    }\n} //# sourceMappingURL=lru.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2xydS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNNLE1BQU1BLGVBQWVDO0lBV3hCQyxJQUFJQyxHQUFHLEVBQUU7UUFDTCxNQUFNQyxRQUFRLEtBQUssQ0FBQ0YsSUFBSUM7UUFDeEIsSUFBSSxLQUFLLENBQUNFLElBQUlGLFFBQVFDLFVBQVVFLFdBQVc7WUFDdkMsSUFBSSxDQUFDQyxNQUFNLENBQUNKO1lBQ1osS0FBSyxDQUFDSyxJQUFJTCxLQUFLQztRQUNuQjtRQUNBLE9BQU9BO0lBQ1g7SUFDQUksSUFBSUwsR0FBRyxFQUFFQyxLQUFLLEVBQUU7UUFDWixLQUFLLENBQUNJLElBQUlMLEtBQUtDO1FBQ2YsSUFBSSxJQUFJLENBQUNLLE9BQU8sSUFBSSxJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJLENBQUNELE9BQU8sRUFBRTtZQUMxQyxNQUFNRSxXQUFXLElBQUksQ0FBQ0MsSUFBSSxHQUFHQyxJQUFJLEdBQUdULEtBQUs7WUFDekMsSUFBSU8sVUFDQSxJQUFJLENBQUNKLE1BQU0sQ0FBQ0k7UUFDcEI7UUFDQSxPQUFPLElBQUk7SUFDZjtJQTFCQUcsWUFBWUosSUFBSSxDQUFFO1FBQ2QsS0FBSztRQUNMSyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVc7WUFDbkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZmLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0ssT0FBTyxHQUFHQztJQUNuQjtBQWtCSixFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9scnUuanM/NGYxYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1hcCB3aXRoIGEgTFJVIChMZWFzdCByZWNlbnRseSB1c2VkKSBwb2xpY3kuXG4gKlxuICogQGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FjaGVfcmVwbGFjZW1lbnRfcG9saWNpZXMjTFJVXG4gKi9cbmV4cG9ydCBjbGFzcyBMcnVNYXAgZXh0ZW5kcyBNYXAge1xuICAgIGNvbnN0cnVjdG9yKHNpemUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWF4U2l6ZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1heFNpemUgPSBzaXplO1xuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3VwZXIuZ2V0KGtleSk7XG4gICAgICAgIGlmIChzdXBlci5oYXMoa2V5KSAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgc3VwZXIuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgc3VwZXIuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5tYXhTaXplICYmIHRoaXMuc2l6ZSA+IHRoaXMubWF4U2l6ZSkge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RLZXkgPSB0aGlzLmtleXMoKS5uZXh0KCkudmFsdWU7XG4gICAgICAgICAgICBpZiAoZmlyc3RLZXkpXG4gICAgICAgICAgICAgICAgdGhpcy5kZWxldGUoZmlyc3RLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxydS5qcy5tYXAiXSwibmFtZXMiOlsiTHJ1TWFwIiwiTWFwIiwiZ2V0Iiwia2V5IiwidmFsdWUiLCJoYXMiLCJ1bmRlZmluZWQiLCJkZWxldGUiLCJzZXQiLCJtYXhTaXplIiwic2l6ZSIsImZpcnN0S2V5Iiwia2V5cyIsIm5leHQiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recoverAddress: function() { return /* binding */ recoverAddress; }\n/* harmony export */ });\n/* harmony import */ var _accounts_utils_publicKeyToAddress_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../accounts/utils/publicKeyToAddress.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js\");\n/* harmony import */ var _recoverPublicKey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./recoverPublicKey.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js\");\n\n\nasync function recoverAddress(param) {\n    let { hash, signature } = param;\n    return (0,_accounts_utils_publicKeyToAddress_js__WEBPACK_IMPORTED_MODULE_0__.publicKeyToAddress)(await (0,_recoverPublicKey_js__WEBPACK_IMPORTED_MODULE_1__.recoverPublicKey)({\n        hash: hash,\n        signature\n    }));\n} //# sourceMappingURL=recoverAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS9yZWNvdmVyQWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0Y7QUFDdkI7QUFDbEQsZUFBZUUsZUFBZSxLQUFvQjtRQUFwQixFQUFFQyxJQUFJLEVBQUVDLFNBQVMsRUFBRyxHQUFwQjtJQUNqQyxPQUFPSix5RkFBa0JBLENBQUMsTUFBTUMsc0VBQWdCQSxDQUFDO1FBQUVFLE1BQU1BO1FBQU1DO0lBQVU7QUFDN0UsRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvc2lnbmF0dXJlL3JlY292ZXJBZGRyZXNzLmpzPzRhMWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHVibGljS2V5VG9BZGRyZXNzIH0gZnJvbSAnLi4vLi4vYWNjb3VudHMvdXRpbHMvcHVibGljS2V5VG9BZGRyZXNzLmpzJztcbmltcG9ydCB7IHJlY292ZXJQdWJsaWNLZXkgfSBmcm9tICcuL3JlY292ZXJQdWJsaWNLZXkuanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlY292ZXJBZGRyZXNzKHsgaGFzaCwgc2lnbmF0dXJlLCB9KSB7XG4gICAgcmV0dXJuIHB1YmxpY0tleVRvQWRkcmVzcyhhd2FpdCByZWNvdmVyUHVibGljS2V5KHsgaGFzaDogaGFzaCwgc2lnbmF0dXJlIH0pKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlY292ZXJBZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6WyJwdWJsaWNLZXlUb0FkZHJlc3MiLCJyZWNvdmVyUHVibGljS2V5IiwicmVjb3ZlckFkZHJlc3MiLCJoYXNoIiwic2lnbmF0dXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recoverPublicKey: function() { return /* binding */ recoverPublicKey; }\n/* harmony export */ });\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/isHex.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/fromHex.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n/* harmony import */ var _encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoding/toHex.js */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\nasync function recoverPublicKey(param) {\n    let { hash, signature } = param;\n    const hashHex = (0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(hash) ? hash : (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(hash);\n    const { secp256k1 } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @noble/curves/secp256k1 */ \"(app-pages-browser)/./node_modules/@noble/curves/esm/secp256k1.js\"));\n    const signature_ = (()=>{\n        // typeof signature: `Signature`\n        if (typeof signature === \"object\" && \"r\" in signature && \"s\" in signature) {\n            const { r, s, v, yParity } = signature;\n            const yParityOrV = Number(yParity !== null && yParity !== void 0 ? yParity : v);\n            const recoveryBit = toRecoveryBit(yParityOrV);\n            return new secp256k1.Signature((0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(r), (0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(s)).addRecoveryBit(recoveryBit);\n        }\n        // typeof signature: `Hex | ByteArray`\n        const signatureHex = (0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(signature) ? signature : (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(signature);\n        const yParityOrV = (0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToNumber)(\"0x\".concat(signatureHex.slice(130)));\n        const recoveryBit = toRecoveryBit(yParityOrV);\n        return secp256k1.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);\n    })();\n    const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);\n    return \"0x\".concat(publicKey);\n}\nfunction toRecoveryBit(yParityOrV) {\n    if (yParityOrV === 0 || yParityOrV === 1) return yParityOrV;\n    if (yParityOrV === 27) return 0;\n    if (yParityOrV === 28) return 1;\n    throw new Error(\"Invalid yParityOrV value\");\n} //# sourceMappingURL=recoverPublicKey.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS9yZWNvdmVyUHVibGljS2V5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDMEI7QUFDdEI7QUFDdEMsZUFBZUksaUJBQWlCLEtBQW9CO1FBQXBCLEVBQUVDLElBQUksRUFBRUMsU0FBUyxFQUFHLEdBQXBCO0lBQ25DLE1BQU1DLFVBQVVQLHFEQUFLQSxDQUFDSyxRQUFRQSxPQUFPRix5REFBS0EsQ0FBQ0U7SUFDM0MsTUFBTSxFQUFFRyxTQUFTLEVBQUUsR0FBRyxNQUFNLHdMQUFPO0lBQ25DLE1BQU1DLGFBQWEsQ0FBQztRQUNoQixnQ0FBZ0M7UUFDaEMsSUFBSSxPQUFPSCxjQUFjLFlBQVksT0FBT0EsYUFBYSxPQUFPQSxXQUFXO1lBQ3ZFLE1BQU0sRUFBRUksQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsT0FBTyxFQUFFLEdBQUdQO1lBQzdCLE1BQU1RLGFBQWFDLE9BQU9GLG9CQUFBQSxxQkFBQUEsVUFBV0Q7WUFDckMsTUFBTUksY0FBY0MsY0FBY0g7WUFDbEMsT0FBTyxJQUFJTixVQUFVVSxTQUFTLENBQUNqQixpRUFBV0EsQ0FBQ1MsSUFBSVQsaUVBQVdBLENBQUNVLElBQUlRLGNBQWMsQ0FBQ0g7UUFDbEY7UUFDQSxzQ0FBc0M7UUFDdEMsTUFBTUksZUFBZXBCLHFEQUFLQSxDQUFDTSxhQUFhQSxZQUFZSCx5REFBS0EsQ0FBQ0c7UUFDMUQsTUFBTVEsYUFBYVosaUVBQVdBLENBQUMsS0FBNkIsT0FBeEJrQixhQUFhQyxLQUFLLENBQUM7UUFDdkQsTUFBTUwsY0FBY0MsY0FBY0g7UUFDbEMsT0FBT04sVUFBVVUsU0FBUyxDQUFDSSxXQUFXLENBQUNGLGFBQWFHLFNBQVMsQ0FBQyxHQUFHLE1BQU1KLGNBQWMsQ0FBQ0g7SUFDMUY7SUFDQSxNQUFNUSxZQUFZZixXQUNiTCxnQkFBZ0IsQ0FBQ0csUUFBUWdCLFNBQVMsQ0FBQyxJQUNuQ3BCLEtBQUssQ0FBQztJQUNYLE9BQU8sS0FBZSxPQUFWcUI7QUFDaEI7QUFDQSxTQUFTUCxjQUFjSCxVQUFVO0lBQzdCLElBQUlBLGVBQWUsS0FBS0EsZUFBZSxHQUNuQyxPQUFPQTtJQUNYLElBQUlBLGVBQWUsSUFDZixPQUFPO0lBQ1gsSUFBSUEsZUFBZSxJQUNmLE9BQU87SUFDWCxNQUFNLElBQUlXLE1BQU07QUFDcEIsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvc2lnbmF0dXJlL3JlY292ZXJQdWJsaWNLZXkuanM/MTNmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0hleCB9IGZyb20gJy4uL2RhdGEvaXNIZXguanMnO1xuaW1wb3J0IHsgaGV4VG9CaWdJbnQsIGhleFRvTnVtYmVyLCB9IGZyb20gJy4uL2VuY29kaW5nL2Zyb21IZXguanMnO1xuaW1wb3J0IHsgdG9IZXggfSBmcm9tICcuLi9lbmNvZGluZy90b0hleC5qcyc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVjb3ZlclB1YmxpY0tleSh7IGhhc2gsIHNpZ25hdHVyZSwgfSkge1xuICAgIGNvbnN0IGhhc2hIZXggPSBpc0hleChoYXNoKSA/IGhhc2ggOiB0b0hleChoYXNoKTtcbiAgICBjb25zdCB7IHNlY3AyNTZrMSB9ID0gYXdhaXQgaW1wb3J0KCdAbm9ibGUvY3VydmVzL3NlY3AyNTZrMScpO1xuICAgIGNvbnN0IHNpZ25hdHVyZV8gPSAoKCkgPT4ge1xuICAgICAgICAvLyB0eXBlb2Ygc2lnbmF0dXJlOiBgU2lnbmF0dXJlYFxuICAgICAgICBpZiAodHlwZW9mIHNpZ25hdHVyZSA9PT0gJ29iamVjdCcgJiYgJ3InIGluIHNpZ25hdHVyZSAmJiAncycgaW4gc2lnbmF0dXJlKSB7XG4gICAgICAgICAgICBjb25zdCB7IHIsIHMsIHYsIHlQYXJpdHkgfSA9IHNpZ25hdHVyZTtcbiAgICAgICAgICAgIGNvbnN0IHlQYXJpdHlPclYgPSBOdW1iZXIoeVBhcml0eSA/PyB2KTtcbiAgICAgICAgICAgIGNvbnN0IHJlY292ZXJ5Qml0ID0gdG9SZWNvdmVyeUJpdCh5UGFyaXR5T3JWKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgc2VjcDI1NmsxLlNpZ25hdHVyZShoZXhUb0JpZ0ludChyKSwgaGV4VG9CaWdJbnQocykpLmFkZFJlY292ZXJ5Qml0KHJlY292ZXJ5Qml0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0eXBlb2Ygc2lnbmF0dXJlOiBgSGV4IHwgQnl0ZUFycmF5YFxuICAgICAgICBjb25zdCBzaWduYXR1cmVIZXggPSBpc0hleChzaWduYXR1cmUpID8gc2lnbmF0dXJlIDogdG9IZXgoc2lnbmF0dXJlKTtcbiAgICAgICAgY29uc3QgeVBhcml0eU9yViA9IGhleFRvTnVtYmVyKGAweCR7c2lnbmF0dXJlSGV4LnNsaWNlKDEzMCl9YCk7XG4gICAgICAgIGNvbnN0IHJlY292ZXJ5Qml0ID0gdG9SZWNvdmVyeUJpdCh5UGFyaXR5T3JWKTtcbiAgICAgICAgcmV0dXJuIHNlY3AyNTZrMS5TaWduYXR1cmUuZnJvbUNvbXBhY3Qoc2lnbmF0dXJlSGV4LnN1YnN0cmluZygyLCAxMzApKS5hZGRSZWNvdmVyeUJpdChyZWNvdmVyeUJpdCk7XG4gICAgfSkoKTtcbiAgICBjb25zdCBwdWJsaWNLZXkgPSBzaWduYXR1cmVfXG4gICAgICAgIC5yZWNvdmVyUHVibGljS2V5KGhhc2hIZXguc3Vic3RyaW5nKDIpKVxuICAgICAgICAudG9IZXgoZmFsc2UpO1xuICAgIHJldHVybiBgMHgke3B1YmxpY0tleX1gO1xufVxuZnVuY3Rpb24gdG9SZWNvdmVyeUJpdCh5UGFyaXR5T3JWKSB7XG4gICAgaWYgKHlQYXJpdHlPclYgPT09IDAgfHwgeVBhcml0eU9yViA9PT0gMSlcbiAgICAgICAgcmV0dXJuIHlQYXJpdHlPclY7XG4gICAgaWYgKHlQYXJpdHlPclYgPT09IDI3KVxuICAgICAgICByZXR1cm4gMDtcbiAgICBpZiAoeVBhcml0eU9yViA9PT0gMjgpXG4gICAgICAgIHJldHVybiAxO1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB5UGFyaXR5T3JWIHZhbHVlJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWNvdmVyUHVibGljS2V5LmpzLm1hcCJdLCJuYW1lcyI6WyJpc0hleCIsImhleFRvQmlnSW50IiwiaGV4VG9OdW1iZXIiLCJ0b0hleCIsInJlY292ZXJQdWJsaWNLZXkiLCJoYXNoIiwic2lnbmF0dXJlIiwiaGFzaEhleCIsInNlY3AyNTZrMSIsInNpZ25hdHVyZV8iLCJyIiwicyIsInYiLCJ5UGFyaXR5IiwieVBhcml0eU9yViIsIk51bWJlciIsInJlY292ZXJ5Qml0IiwidG9SZWNvdmVyeUJpdCIsIlNpZ25hdHVyZSIsImFkZFJlY292ZXJ5Qml0Iiwic2lnbmF0dXJlSGV4Iiwic2xpY2UiLCJmcm9tQ29tcGFjdCIsInN1YnN0cmluZyIsInB1YmxpY0tleSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/destr/dist/index.mjs":
/*!*******************************************!*\
  !*** ./node_modules/destr/dist/index.mjs ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ destr; },\n/* harmony export */   destr: function() { return /* binding */ destr; },\n/* harmony export */   safeDestr: function() { return /* binding */ safeDestr; }\n/* harmony export */ });\nconst suspectProtoRx = /\"(?:_|\\\\u0{2}5[Ff]){2}(?:p|\\\\u0{2}70)(?:r|\\\\u0{2}72)(?:o|\\\\u0{2}6[Ff])(?:t|\\\\u0{2}74)(?:o|\\\\u0{2}6[Ff])(?:_|\\\\u0{2}5[Ff]){2}\"\\s*:/;\nconst suspectConstructorRx = /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/;\nconst JsonSigRx = /^\\s*[\"[{]|^\\s*-?\\d{1,16}(\\.\\d{1,17})?([Ee][+-]?\\d+)?\\s*$/;\nfunction jsonParseTransform(key, value) {\n    if (key === \"__proto__\" || key === \"constructor\" && value && typeof value === \"object\" && \"prototype\" in value) {\n        warnKeyDropped(key);\n        return;\n    }\n    return value;\n}\nfunction warnKeyDropped(key) {\n    console.warn('[destr] Dropping \"'.concat(key, '\" key to prevent prototype pollution.'));\n}\nfunction destr(value) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    const _value = value.trim();\n    if (// eslint-disable-next-line unicorn/prefer-at\n    value[0] === '\"' && value.endsWith('\"') && !value.includes(\"\\\\\")) {\n        return _value.slice(1, -1);\n    }\n    if (_value.length <= 9) {\n        const _lval = _value.toLowerCase();\n        if (_lval === \"true\") {\n            return true;\n        }\n        if (_lval === \"false\") {\n            return false;\n        }\n        if (_lval === \"undefined\") {\n            return void 0;\n        }\n        if (_lval === \"null\") {\n            return null;\n        }\n        if (_lval === \"nan\") {\n            return Number.NaN;\n        }\n        if (_lval === \"infinity\") {\n            return Number.POSITIVE_INFINITY;\n        }\n        if (_lval === \"-infinity\") {\n            return Number.NEGATIVE_INFINITY;\n        }\n    }\n    if (!JsonSigRx.test(value)) {\n        if (options.strict) {\n            throw new SyntaxError(\"[destr] Invalid JSON\");\n        }\n        return value;\n    }\n    try {\n        if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {\n            if (options.strict) {\n                throw new Error(\"[destr] Possible prototype pollution\");\n            }\n            return JSON.parse(value, jsonParseTransform);\n        }\n        return JSON.parse(value);\n    } catch (error) {\n        if (options.strict) {\n            throw error;\n        }\n        return value;\n    }\n}\nfunction safeDestr(value) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return destr(value, {\n        ...options,\n        strict: true\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kZXN0ci9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxpQkFBaUI7QUFDdkIsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLFlBQVk7QUFDbEIsU0FBU0MsbUJBQW1CQyxHQUFHLEVBQUVDLEtBQUs7SUFDcEMsSUFBSUQsUUFBUSxlQUFlQSxRQUFRLGlCQUFpQkMsU0FBUyxPQUFPQSxVQUFVLFlBQVksZUFBZUEsT0FBTztRQUM5R0MsZUFBZUY7UUFDZjtJQUNGO0lBQ0EsT0FBT0M7QUFDVDtBQUNBLFNBQVNDLGVBQWVGLEdBQUc7SUFDekJHLFFBQVFDLElBQUksQ0FBQyxxQkFBeUIsT0FBSkosS0FBSTtBQUN4QztBQUNBLFNBQVNLLE1BQU1KLEtBQUs7UUFBRUssVUFBQUEsaUVBQVUsQ0FBQztJQUMvQixJQUFJLE9BQU9MLFVBQVUsVUFBVTtRQUM3QixPQUFPQTtJQUNUO0lBQ0EsTUFBTU0sU0FBU04sTUFBTU8sSUFBSTtJQUN6QixJQUNFLDZDQUE2QztJQUM3Q1AsS0FBSyxDQUFDLEVBQUUsS0FBSyxPQUFPQSxNQUFNUSxRQUFRLENBQUMsUUFBUSxDQUFDUixNQUFNUyxRQUFRLENBQUMsT0FDM0Q7UUFDQSxPQUFPSCxPQUFPSSxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzFCO0lBQ0EsSUFBSUosT0FBT0ssTUFBTSxJQUFJLEdBQUc7UUFDdEIsTUFBTUMsUUFBUU4sT0FBT08sV0FBVztRQUNoQyxJQUFJRCxVQUFVLFFBQVE7WUFDcEIsT0FBTztRQUNUO1FBQ0EsSUFBSUEsVUFBVSxTQUFTO1lBQ3JCLE9BQU87UUFDVDtRQUNBLElBQUlBLFVBQVUsYUFBYTtZQUN6QixPQUFPLEtBQUs7UUFDZDtRQUNBLElBQUlBLFVBQVUsUUFBUTtZQUNwQixPQUFPO1FBQ1Q7UUFDQSxJQUFJQSxVQUFVLE9BQU87WUFDbkIsT0FBT0UsT0FBT0MsR0FBRztRQUNuQjtRQUNBLElBQUlILFVBQVUsWUFBWTtZQUN4QixPQUFPRSxPQUFPRSxpQkFBaUI7UUFDakM7UUFDQSxJQUFJSixVQUFVLGFBQWE7WUFDekIsT0FBT0UsT0FBT0csaUJBQWlCO1FBQ2pDO0lBQ0Y7SUFDQSxJQUFJLENBQUNwQixVQUFVcUIsSUFBSSxDQUFDbEIsUUFBUTtRQUMxQixJQUFJSyxRQUFRYyxNQUFNLEVBQUU7WUFDbEIsTUFBTSxJQUFJQyxZQUFZO1FBQ3hCO1FBQ0EsT0FBT3BCO0lBQ1Q7SUFDQSxJQUFJO1FBQ0YsSUFBSUwsZUFBZXVCLElBQUksQ0FBQ2xCLFVBQVVKLHFCQUFxQnNCLElBQUksQ0FBQ2xCLFFBQVE7WUFDbEUsSUFBSUssUUFBUWMsTUFBTSxFQUFFO2dCQUNsQixNQUFNLElBQUlFLE1BQU07WUFDbEI7WUFDQSxPQUFPQyxLQUFLQyxLQUFLLENBQUN2QixPQUFPRjtRQUMzQjtRQUNBLE9BQU93QixLQUFLQyxLQUFLLENBQUN2QjtJQUNwQixFQUFFLE9BQU93QixPQUFPO1FBQ2QsSUFBSW5CLFFBQVFjLE1BQU0sRUFBRTtZQUNsQixNQUFNSztRQUNSO1FBQ0EsT0FBT3hCO0lBQ1Q7QUFDRjtBQUNBLFNBQVN5QixVQUFVekIsS0FBSztRQUFFSyxVQUFBQSxpRUFBVSxDQUFDO0lBQ25DLE9BQU9ELE1BQU1KLE9BQU87UUFBRSxHQUFHSyxPQUFPO1FBQUVjLFFBQVE7SUFBSztBQUNqRDtBQUU4QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGVzdHIvZGlzdC9pbmRleC5tanM/OGM1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzdXNwZWN0UHJvdG9SeCA9IC9cIig/Ol98XFxcXHUwezJ9NVtGZl0pezJ9KD86cHxcXFxcdTB7Mn03MCkoPzpyfFxcXFx1MHsyfTcyKSg/Om98XFxcXHUwezJ9NltGZl0pKD86dHxcXFxcdTB7Mn03NCkoPzpvfFxcXFx1MHsyfTZbRmZdKSg/Ol98XFxcXHUwezJ9NVtGZl0pezJ9XCJcXHMqOi87XG5jb25zdCBzdXNwZWN0Q29uc3RydWN0b3JSeCA9IC9cIig/OmN8XFxcXHUwMDYzKSg/Om98XFxcXHUwMDZbRmZdKSg/Om58XFxcXHUwMDZbRWVdKSg/OnN8XFxcXHUwMDczKSg/OnR8XFxcXHUwMDc0KSg/OnJ8XFxcXHUwMDcyKSg/OnV8XFxcXHUwMDc1KSg/OmN8XFxcXHUwMDYzKSg/OnR8XFxcXHUwMDc0KSg/Om98XFxcXHUwMDZbRmZdKSg/OnJ8XFxcXHUwMDcyKVwiXFxzKjovO1xuY29uc3QgSnNvblNpZ1J4ID0gL15cXHMqW1wiW3tdfF5cXHMqLT9cXGR7MSwxNn0oXFwuXFxkezEsMTd9KT8oW0VlXVsrLV0/XFxkKyk/XFxzKiQvO1xuZnVuY3Rpb24ganNvblBhcnNlVHJhbnNmb3JtKGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PT0gXCJfX3Byb3RvX19cIiB8fCBrZXkgPT09IFwiY29uc3RydWN0b3JcIiAmJiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgXCJwcm90b3R5cGVcIiBpbiB2YWx1ZSkge1xuICAgIHdhcm5LZXlEcm9wcGVkKGtleSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHdhcm5LZXlEcm9wcGVkKGtleSkge1xuICBjb25zb2xlLndhcm4oYFtkZXN0cl0gRHJvcHBpbmcgXCIke2tleX1cIiBrZXkgdG8gcHJldmVudCBwcm90b3R5cGUgcG9sbHV0aW9uLmApO1xufVxuZnVuY3Rpb24gZGVzdHIodmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGNvbnN0IF92YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgaWYgKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3ByZWZlci1hdFxuICAgIHZhbHVlWzBdID09PSAnXCInICYmIHZhbHVlLmVuZHNXaXRoKCdcIicpICYmICF2YWx1ZS5pbmNsdWRlcyhcIlxcXFxcIilcbiAgKSB7XG4gICAgcmV0dXJuIF92YWx1ZS5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKF92YWx1ZS5sZW5ndGggPD0gOSkge1xuICAgIGNvbnN0IF9sdmFsID0gX3ZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKF9sdmFsID09PSBcInRydWVcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChfbHZhbCA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChfbHZhbCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgaWYgKF9sdmFsID09PSBcIm51bGxcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChfbHZhbCA9PT0gXCJuYW5cIikge1xuICAgICAgcmV0dXJuIE51bWJlci5OYU47XG4gICAgfVxuICAgIGlmIChfbHZhbCA9PT0gXCJpbmZpbml0eVwiKSB7XG4gICAgICByZXR1cm4gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIH1cbiAgICBpZiAoX2x2YWwgPT09IFwiLWluZmluaXR5XCIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICB9XG4gIGlmICghSnNvblNpZ1J4LnRlc3QodmFsdWUpKSB7XG4gICAgaWYgKG9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJbZGVzdHJdIEludmFsaWQgSlNPTlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHRyeSB7XG4gICAgaWYgKHN1c3BlY3RQcm90b1J4LnRlc3QodmFsdWUpIHx8IHN1c3BlY3RDb25zdHJ1Y3RvclJ4LnRlc3QodmFsdWUpKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW2Rlc3RyXSBQb3NzaWJsZSBwcm90b3R5cGUgcG9sbHV0aW9uXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUsIGpzb25QYXJzZVRyYW5zZm9ybSk7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAob3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIHNhZmVEZXN0cih2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBkZXN0cih2YWx1ZSwgeyAuLi5vcHRpb25zLCBzdHJpY3Q6IHRydWUgfSk7XG59XG5cbmV4cG9ydCB7IGRlc3RyIGFzIGRlZmF1bHQsIGRlc3RyLCBzYWZlRGVzdHIgfTtcbiJdLCJuYW1lcyI6WyJzdXNwZWN0UHJvdG9SeCIsInN1c3BlY3RDb25zdHJ1Y3RvclJ4IiwiSnNvblNpZ1J4IiwianNvblBhcnNlVHJhbnNmb3JtIiwia2V5IiwidmFsdWUiLCJ3YXJuS2V5RHJvcHBlZCIsImNvbnNvbGUiLCJ3YXJuIiwiZGVzdHIiLCJvcHRpb25zIiwiX3ZhbHVlIiwidHJpbSIsImVuZHNXaXRoIiwiaW5jbHVkZXMiLCJzbGljZSIsImxlbmd0aCIsIl9sdmFsIiwidG9Mb3dlckNhc2UiLCJOdW1iZXIiLCJOYU4iLCJQT1NJVElWRV9JTkZJTklUWSIsIk5FR0FUSVZFX0lORklOSVRZIiwidGVzdCIsInN0cmljdCIsIlN5bnRheEVycm9yIiwiRXJyb3IiLCJKU09OIiwicGFyc2UiLCJlcnJvciIsInNhZmVEZXN0ciIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/destr/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/idb-keyval/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/idb-keyval/dist/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clear: function() { return /* binding */ clear; },\n/* harmony export */   createStore: function() { return /* binding */ createStore; },\n/* harmony export */   del: function() { return /* binding */ del; },\n/* harmony export */   delMany: function() { return /* binding */ delMany; },\n/* harmony export */   entries: function() { return /* binding */ entries; },\n/* harmony export */   get: function() { return /* binding */ get; },\n/* harmony export */   getMany: function() { return /* binding */ getMany; },\n/* harmony export */   keys: function() { return /* binding */ keys; },\n/* harmony export */   promisifyRequest: function() { return /* binding */ promisifyRequest; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   setMany: function() { return /* binding */ setMany; },\n/* harmony export */   update: function() { return /* binding */ update; },\n/* harmony export */   values: function() { return /* binding */ values; }\n/* harmony export */ });\nfunction promisifyRequest(request) {\n    return new Promise((resolve, reject)=>{\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = ()=>resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = ()=>reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = ()=>request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback)=>dbp.then((db)=>callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore(\"keyval-store\", \"keyval\");\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function get(key) {\n    let customStore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultGetStore();\n    return customStore(\"readonly\", (store)=>promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function set(key, value) {\n    let customStore = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>{\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic – if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function setMany(entries) {\n    let customStore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>{\n        entries.forEach((entry)=>store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function getMany(keys) {\n    let customStore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultGetStore();\n    return customStore(\"readonly\", (store)=>Promise.all(keys.map((key)=>promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function update(key, updater) {\n    let customStore = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>// Need to create the promise manually.\n        // If I try to chain promises, the transaction closes in browsers\n        // that use a promise polyfill (IE10/11).\n        new Promise((resolve, reject)=>{\n            store.get(key).onsuccess = function() {\n                try {\n                    store.put(updater(this.result), key);\n                    resolve(promisifyRequest(store.transaction));\n                } catch (err) {\n                    reject(err);\n                }\n            };\n        }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function del(key) {\n    let customStore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>{\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function delMany(keys) {\n    let customStore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>{\n        keys.forEach((key)=>store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function clear() {\n    let customStore = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>{\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function() {\n        if (!this.result) return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function keys() {\n    let customStore = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultGetStore();\n    return customStore(\"readonly\", (store)=>{\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor)=>items.push(cursor.key)).then(()=>items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function values() {\n    let customStore = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultGetStore();\n    return customStore(\"readonly\", (store)=>{\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor)=>items.push(cursor.value)).then(()=>items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function entries() {\n    let customStore = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultGetStore();\n    return customStore(\"readonly\", (store)=>{\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll())\n            ]).then((param)=>{\n                let [keys, values] = param;\n                return keys.map((key, i)=>[\n                        key,\n                        values[i]\n                    ]);\n            });\n        }\n        const items = [];\n        return customStore(\"readonly\", (store)=>eachCursor(store, (cursor)=>items.push([\n                    cursor.key,\n                    cursor.value\n                ])).then(()=>items));\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/idb-keyval/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js":
/*!*********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Codec: function() { return /* binding */ Codec; },\n/* harmony export */   baseX: function() { return /* binding */ baseX; },\n/* harmony export */   from: function() { return /* binding */ from; },\n/* harmony export */   or: function() { return /* binding */ or; },\n/* harmony export */   rfc4648: function() { return /* binding */ rfc4648; }\n/* harmony export */ });\n/* harmony import */ var _vendor_base_x_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../vendor/base-x.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/vendor/base-x.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bytes.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bytes.js\");\n\n\nclass Encoder {\n    encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n            return \"\".concat(this.prefix).concat(this.baseEncode(bytes));\n        } else {\n            throw Error(\"Unknown type, must be binary type\");\n        }\n    }\n    constructor(name, prefix, baseEncode){\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n    }\n}\nclass Decoder {\n    decode(text) {\n        if (typeof text === \"string\") {\n            if (text.codePointAt(0) !== this.prefixCodePoint) {\n                throw Error(\"Unable to decode multibase string \".concat(JSON.stringify(text), \", \").concat(this.name, \" decoder only supports inputs prefixed with \").concat(this.prefix));\n            }\n            return this.baseDecode(text.slice(this.prefix.length));\n        } else {\n            throw Error(\"Can only multibase decode strings\");\n        }\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n    constructor(name, prefix, baseDecode){\n        this.name = name;\n        this.prefix = prefix;\n        if (prefix.codePointAt(0) === undefined) {\n            throw new Error(\"Invalid prefix character\");\n        }\n        this.prefixCodePoint = prefix.codePointAt(0);\n        this.baseDecode = baseDecode;\n    }\n}\nclass ComposedDecoder {\n    or(decoder) {\n        return or(this, decoder);\n    }\n    decode(input) {\n        const prefix = input[0];\n        const decoder = this.decoders[prefix];\n        if (decoder) {\n            return decoder.decode(input);\n        } else {\n            throw RangeError(\"Unable to decode multibase string \".concat(JSON.stringify(input), \", only inputs prefixed with \").concat(Object.keys(this.decoders), \" are supported\"));\n        }\n    }\n    constructor(decoders){\n        this.decoders = decoders;\n    }\n}\nconst or = (left, right)=>new ComposedDecoder({\n        ...left.decoders || {\n            [left.prefix]: left\n        },\n        ...right.decoders || {\n            [right.prefix]: right\n        }\n    });\nclass Codec {\n    encode(input) {\n        return this.encoder.encode(input);\n    }\n    decode(input) {\n        return this.decoder.decode(input);\n    }\n    constructor(name, prefix, baseEncode, baseDecode){\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n        this.baseDecode = baseDecode;\n        this.encoder = new Encoder(name, prefix, baseEncode);\n        this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n}\nconst from = (param)=>{\n    let { name, prefix, encode, decode } = param;\n    return new Codec(name, prefix, encode, decode);\n};\nconst baseX = (param)=>{\n    let { prefix, name, alphabet } = param;\n    const { encode, decode } = (0,_vendor_base_x_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(alphabet, name);\n    return from({\n        prefix,\n        name,\n        encode,\n        decode: (text)=>(0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.coerce)(decode(text))\n    });\n};\nconst decode = (string, alphabet, bitsPerChar, name)=>{\n    const codes = {};\n    for(let i = 0; i < alphabet.length; ++i){\n        codes[alphabet[i]] = i;\n    }\n    let end = string.length;\n    while(string[end - 1] === \"=\"){\n        --end;\n    }\n    const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n    let bits = 0;\n    let buffer = 0;\n    let written = 0;\n    for(let i = 0; i < end; ++i){\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(\"Non-\".concat(name, \" character\"));\n        }\n        buffer = buffer << bitsPerChar | value;\n        bits += bitsPerChar;\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 255 & buffer >> bits;\n        }\n    }\n    if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n        throw new SyntaxError(\"Unexpected end of data\");\n    }\n    return out;\n};\nconst encode = (data, alphabet, bitsPerChar)=>{\n    const pad = alphabet[alphabet.length - 1] === \"=\";\n    const mask = (1 << bitsPerChar) - 1;\n    let out = \"\";\n    let bits = 0;\n    let buffer = 0;\n    for(let i = 0; i < data.length; ++i){\n        buffer = buffer << 8 | data[i];\n        bits += 8;\n        while(bits > bitsPerChar){\n            bits -= bitsPerChar;\n            out += alphabet[mask & buffer >> bits];\n        }\n    }\n    if (bits) {\n        out += alphabet[mask & buffer << bitsPerChar - bits];\n    }\n    if (pad) {\n        while(out.length * bitsPerChar & 7){\n            out += \"=\";\n        }\n    }\n    return out;\n};\nconst rfc4648 = (param)=>{\n    let { name, prefix, bitsPerChar, alphabet } = param;\n    return from({\n        prefix,\n        name,\n        encode (input) {\n            return encode(input, alphabet, bitsPerChar);\n        },\n        decode (input) {\n            return decode(input, alphabet, bitsPerChar, name);\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base10.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base10.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base10: function() { return /* binding */ base10; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base10 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlMTAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFDM0IsTUFBTUMsU0FBU0QsK0NBQUtBLENBQUM7SUFDMUJFLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxVQUFVO0FBQ1osR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTEwLmpzPzdjNTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmFzZVggfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNvbnN0IGJhc2UxMCA9IGJhc2VYKHtcbiAgcHJlZml4OiAnOScsXG4gIG5hbWU6ICdiYXNlMTAnLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODknXG59KTsiXSwibmFtZXMiOlsiYmFzZVgiLCJiYXNlMTAiLCJwcmVmaXgiLCJuYW1lIiwiYWxwaGFiZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base10.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base16.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base16.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base16: function() { return /* binding */ base16; },\n/* harmony export */   base16upper: function() { return /* binding */ base16upper; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base16 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n});\nconst base16upper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlMTYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9DO0FBQzdCLE1BQU1DLFNBQVNELGlEQUFPQSxDQUFDO0lBQzVCRSxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsVUFBVTtJQUNWQyxhQUFhO0FBQ2YsR0FBRztBQUNJLE1BQU1DLGNBQWNOLGlEQUFPQSxDQUFDO0lBQ2pDRSxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsVUFBVTtJQUNWQyxhQUFhO0FBQ2YsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTE2LmpzP2QzMDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmZjNDY0OCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTE2ID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ2YnLFxuICBuYW1lOiAnYmFzZTE2JyxcbiAgYWxwaGFiZXQ6ICcwMTIzNDU2Nzg5YWJjZGVmJyxcbiAgYml0c1BlckNoYXI6IDRcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UxNnVwcGVyID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ0YnLFxuICBuYW1lOiAnYmFzZTE2dXBwZXInLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODlBQkNERUYnLFxuICBiaXRzUGVyQ2hhcjogNFxufSk7Il0sIm5hbWVzIjpbInJmYzQ2NDgiLCJiYXNlMTYiLCJwcmVmaXgiLCJuYW1lIiwiYWxwaGFiZXQiLCJiaXRzUGVyQ2hhciIsImJhc2UxNnVwcGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base16.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base2.js":
/*!**********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base2.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base2: function() { return /* binding */ base2; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base2 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlMi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvQztBQUM3QixNQUFNQyxRQUFRRCxpREFBT0EsQ0FBQztJQUMzQkUsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsYUFBYTtBQUNmLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2Jhc2VzL2Jhc2UyLmpzPzNjM2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmZjNDY0OCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTIgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnMCcsXG4gIG5hbWU6ICdiYXNlMicsXG4gIGFscGhhYmV0OiAnMDEnLFxuICBiaXRzUGVyQ2hhcjogMVxufSk7Il0sIm5hbWVzIjpbInJmYzQ2NDgiLCJiYXNlMiIsInByZWZpeCIsIm5hbWUiLCJhbHBoYWJldCIsImJpdHNQZXJDaGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base256emoji.js":
/*!*****************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base256emoji.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base256emoji: function() { return /* binding */ base256emoji; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst alphabet = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\");\nconst alphabetBytesToChars = alphabet.reduce((p, c, i)=>{\n    p[i] = c;\n    return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i)=>{\n    p[c.codePointAt(0)] = i;\n    return p;\n}, []);\nfunction encode(data) {\n    return data.reduce((p, c)=>{\n        p += alphabetBytesToChars[c];\n        return p;\n    }, \"\");\n}\nfunction decode(str) {\n    const byts = [];\n    for (const char of str){\n        const byt = alphabetCharsToBytes[char.codePointAt(0)];\n        if (byt === undefined) {\n            throw new Error(\"Non-base256emoji character: \".concat(char));\n        }\n        byts.push(byt);\n    }\n    return new Uint8Array(byts);\n}\nconst base256emoji = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode,\n    decode\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlMjU2ZW1vamkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUM7QUFDakMsTUFBTUMsV0FBV0MsTUFBTUYsSUFBSSxDQUFDO0FBQzVCLE1BQU1HLHVCQUF1QkYsU0FBU0csTUFBTSxDQUFDLENBQUNDLEdBQUdDLEdBQUdDO0lBQ2xERixDQUFDLENBQUNFLEVBQUUsR0FBR0Q7SUFDUCxPQUFPRDtBQUNULEdBQUcsRUFBRTtBQUNMLE1BQU1HLHVCQUF1QlAsU0FBU0csTUFBTSxDQUFDLENBQUNDLEdBQUdDLEdBQUdDO0lBQ2xERixDQUFDLENBQUNDLEVBQUVHLFdBQVcsQ0FBQyxHQUFHLEdBQUdGO0lBQ3RCLE9BQU9GO0FBQ1QsR0FBRyxFQUFFO0FBQ0wsU0FBU0ssT0FBT0MsSUFBSTtJQUNsQixPQUFPQSxLQUFLUCxNQUFNLENBQUMsQ0FBQ0MsR0FBR0M7UUFDckJELEtBQUtGLG9CQUFvQixDQUFDRyxFQUFFO1FBQzVCLE9BQU9EO0lBQ1QsR0FBRztBQUNMO0FBQ0EsU0FBU08sT0FBT0MsR0FBRztJQUNqQixNQUFNQyxPQUFPLEVBQUU7SUFDZixLQUFLLE1BQU1DLFFBQVFGLElBQUs7UUFDdEIsTUFBTUcsTUFBTVIsb0JBQW9CLENBQUNPLEtBQUtOLFdBQVcsQ0FBQyxHQUFHO1FBQ3JELElBQUlPLFFBQVFDLFdBQVc7WUFDckIsTUFBTSxJQUFJQyxNQUFNLCtCQUFzQyxPQUFOSDtRQUNsRDtRQUNBRCxLQUFLSyxJQUFJLENBQUNIO0lBQ1o7SUFDQSxPQUFPLElBQUlJLFdBQVdOO0FBQ3hCO0FBQ08sTUFBTU8sZUFBZXJCLDhDQUFJQSxDQUFDO0lBQy9Cc0IsUUFBUTtJQUNSQyxNQUFNO0lBQ05iO0lBQ0FFO0FBQ0YsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTI1NmVtb2ppLmpzPzEyNmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vYmFzZS5qcyc7XG5jb25zdCBhbHBoYWJldCA9IEFycmF5LmZyb20oJ1xcdUQ4M0RcXHVERTgwXFx1RDgzRVxcdURFOTBcXHUyNjA0XFx1RDgzRFxcdURFRjBcXHVEODNDXFx1REYwQ1xcdUQ4M0NcXHVERjExXFx1RDgzQ1xcdURGMTJcXHVEODNDXFx1REYxM1xcdUQ4M0NcXHVERjE0XFx1RDgzQ1xcdURGMTVcXHVEODNDXFx1REYxNlxcdUQ4M0NcXHVERjE3XFx1RDgzQ1xcdURGMThcXHVEODNDXFx1REYwRFxcdUQ4M0NcXHVERjBGXFx1RDgzQ1xcdURGMEVcXHVEODNEXFx1REMwOVxcdTI2MDBcXHVEODNEXFx1RENCQlxcdUQ4M0RcXHVEREE1XFx1RDgzRFxcdURDQkVcXHVEODNEXFx1RENCRlxcdUQ4M0RcXHVERTAyXFx1Mjc2NFxcdUQ4M0RcXHVERTBEXFx1RDgzRVxcdUREMjNcXHVEODNEXFx1REUwQVxcdUQ4M0RcXHVERTRGXFx1RDgzRFxcdURDOTVcXHVEODNEXFx1REUyRFxcdUQ4M0RcXHVERTE4XFx1RDgzRFxcdURDNERcXHVEODNEXFx1REUwNVxcdUQ4M0RcXHVEQzRGXFx1RDgzRFxcdURFMDFcXHVEODNEXFx1REQyNVxcdUQ4M0VcXHVERDcwXFx1RDgzRFxcdURDOTRcXHVEODNEXFx1REM5NlxcdUQ4M0RcXHVEQzk5XFx1RDgzRFxcdURFMjJcXHVEODNFXFx1REQxNFxcdUQ4M0RcXHVERTA2XFx1RDgzRFxcdURFNDRcXHVEODNEXFx1RENBQVxcdUQ4M0RcXHVERTA5XFx1MjYzQVxcdUQ4M0RcXHVEQzRDXFx1RDgzRVxcdUREMTdcXHVEODNEXFx1REM5Q1xcdUQ4M0RcXHVERTE0XFx1RDgzRFxcdURFMEVcXHVEODNEXFx1REUwN1xcdUQ4M0NcXHVERjM5XFx1RDgzRVxcdUREMjZcXHVEODNDXFx1REY4OVxcdUQ4M0RcXHVEQzlFXFx1MjcwQ1xcdTI3MjhcXHVEODNFXFx1REQzN1xcdUQ4M0RcXHVERTMxXFx1RDgzRFxcdURFMENcXHVEODNDXFx1REYzOFxcdUQ4M0RcXHVERTRDXFx1RDgzRFxcdURFMEJcXHVEODNEXFx1REM5N1xcdUQ4M0RcXHVEQzlBXFx1RDgzRFxcdURFMEZcXHVEODNEXFx1REM5QlxcdUQ4M0RcXHVERTQyXFx1RDgzRFxcdURDOTNcXHVEODNFXFx1REQyOVxcdUQ4M0RcXHVERTA0XFx1RDgzRFxcdURFMDBcXHVEODNEXFx1RERBNFxcdUQ4M0RcXHVERTAzXFx1RDgzRFxcdURDQUZcXHVEODNEXFx1REU0OFxcdUQ4M0RcXHVEQzQ3XFx1RDgzQ1xcdURGQjZcXHVEODNEXFx1REUxMlxcdUQ4M0VcXHVERDJEXFx1Mjc2M1xcdUQ4M0RcXHVERTFDXFx1RDgzRFxcdURDOEJcXHVEODNEXFx1REM0MFxcdUQ4M0RcXHVERTJBXFx1RDgzRFxcdURFMTFcXHVEODNEXFx1RENBNVxcdUQ4M0RcXHVERTRCXFx1RDgzRFxcdURFMUVcXHVEODNEXFx1REUyOVxcdUQ4M0RcXHVERTIxXFx1RDgzRVxcdUREMkFcXHVEODNEXFx1REM0QVxcdUQ4M0VcXHVERDczXFx1RDgzRFxcdURFMjVcXHVEODNFXFx1REQyNFxcdUQ4M0RcXHVEQzQ5XFx1RDgzRFxcdURDODNcXHVEODNEXFx1REUzM1xcdTI3MEJcXHVEODNEXFx1REUxQVxcdUQ4M0RcXHVERTFEXFx1RDgzRFxcdURFMzRcXHVEODNDXFx1REYxRlxcdUQ4M0RcXHVERTJDXFx1RDgzRFxcdURFNDNcXHVEODNDXFx1REY0MFxcdUQ4M0NcXHVERjM3XFx1RDgzRFxcdURFM0JcXHVEODNEXFx1REUxM1xcdTJCNTBcXHUyNzA1XFx1RDgzRVxcdUREN0FcXHVEODNDXFx1REYwOFxcdUQ4M0RcXHVERTA4XFx1RDgzRVxcdUREMThcXHVEODNEXFx1RENBNlxcdTI3MTRcXHVEODNEXFx1REUyM1xcdUQ4M0NcXHVERkMzXFx1RDgzRFxcdURDOTBcXHUyNjM5XFx1RDgzQ1xcdURGOEFcXHVEODNEXFx1REM5OFxcdUQ4M0RcXHVERTIwXFx1MjYxRFxcdUQ4M0RcXHVERTE1XFx1RDgzQ1xcdURGM0FcXHVEODNDXFx1REY4MlxcdUQ4M0NcXHVERjNCXFx1RDgzRFxcdURFMTBcXHVEODNEXFx1REQ5NVxcdUQ4M0RcXHVEQzlEXFx1RDgzRFxcdURFNEFcXHVEODNEXFx1REUzOVxcdUQ4M0RcXHVEREUzXFx1RDgzRFxcdURDQUJcXHVEODNEXFx1REM4MFxcdUQ4M0RcXHVEQzUxXFx1RDgzQ1xcdURGQjVcXHVEODNFXFx1REQxRVxcdUQ4M0RcXHVERTFCXFx1RDgzRFxcdUREMzRcXHVEODNEXFx1REUyNFxcdUQ4M0NcXHVERjNDXFx1RDgzRFxcdURFMkJcXHUyNkJEXFx1RDgzRVxcdUREMTlcXHUyNjE1XFx1RDgzQ1xcdURGQzZcXHVEODNFXFx1REQyQlxcdUQ4M0RcXHVEQzQ4XFx1RDgzRFxcdURFMkVcXHVEODNEXFx1REU0NlxcdUQ4M0NcXHVERjdCXFx1RDgzQ1xcdURGNDNcXHVEODNEXFx1REMzNlxcdUQ4M0RcXHVEQzgxXFx1RDgzRFxcdURFMzJcXHVEODNDXFx1REYzRlxcdUQ4M0VcXHVEREUxXFx1RDgzQ1xcdURGODFcXHUyNkExXFx1RDgzQ1xcdURGMUVcXHVEODNDXFx1REY4OFxcdTI3NENcXHUyNzBBXFx1RDgzRFxcdURDNEJcXHVEODNEXFx1REUzMFxcdUQ4M0VcXHVERDI4XFx1RDgzRFxcdURFMzZcXHVEODNFXFx1REQxRFxcdUQ4M0RcXHVERUI2XFx1RDgzRFxcdURDQjBcXHVEODNDXFx1REY1M1xcdUQ4M0RcXHVEQ0EyXFx1RDgzRVxcdUREMUZcXHVEODNEXFx1REU0MVxcdUQ4M0RcXHVERUE4XFx1RDgzRFxcdURDQThcXHVEODNFXFx1REQyQ1xcdTI3MDhcXHVEODNDXFx1REY4MFxcdUQ4M0NcXHVERjdBXFx1RDgzRVxcdUREMTNcXHVEODNEXFx1REUxOVxcdUQ4M0RcXHVEQzlGXFx1RDgzQ1xcdURGMzFcXHVEODNEXFx1REUxNlxcdUQ4M0RcXHVEQzc2XFx1RDgzRVxcdURENzRcXHUyNUI2XFx1MjdBMVxcdTI3NTNcXHVEODNEXFx1REM4RVxcdUQ4M0RcXHVEQ0I4XFx1MkIwN1xcdUQ4M0RcXHVERTI4XFx1RDgzQ1xcdURGMUFcXHVEODNFXFx1REQ4QlxcdUQ4M0RcXHVERTM3XFx1RDgzRFxcdUREN0FcXHUyNkEwXFx1RDgzRFxcdURFNDVcXHVEODNEXFx1REUxRlxcdUQ4M0RcXHVERTM1XFx1RDgzRFxcdURDNEVcXHVEODNFXFx1REQzMlxcdUQ4M0VcXHVERDIwXFx1RDgzRVxcdUREMjdcXHVEODNEXFx1RENDQ1xcdUQ4M0RcXHVERDM1XFx1RDgzRFxcdURDODVcXHVEODNFXFx1REREMFxcdUQ4M0RcXHVEQzNFXFx1RDgzQ1xcdURGNTJcXHVEODNEXFx1REUxN1xcdUQ4M0VcXHVERDExXFx1RDgzQ1xcdURGMEFcXHVEODNFXFx1REQyRlxcdUQ4M0RcXHVEQzM3XFx1MjYwRVxcdUQ4M0RcXHVEQ0E3XFx1RDgzRFxcdURFMkZcXHVEODNEXFx1REM4NlxcdUQ4M0RcXHVEQzQ2XFx1RDgzQ1xcdURGQTRcXHVEODNEXFx1REU0N1xcdUQ4M0NcXHVERjUxXFx1Mjc0NFxcdUQ4M0NcXHVERjM0XFx1RDgzRFxcdURDQTNcXHVEODNEXFx1REMzOFxcdUQ4M0RcXHVEQzhDXFx1RDgzRFxcdURDQ0RcXHVEODNFXFx1REQ0MFxcdUQ4M0VcXHVERDIyXFx1RDgzRFxcdURDNDVcXHVEODNEXFx1RENBMVxcdUQ4M0RcXHVEQ0E5XFx1RDgzRFxcdURDNTBcXHVEODNEXFx1RENGOFxcdUQ4M0RcXHVEQzdCXFx1RDgzRVxcdUREMTBcXHVEODNFXFx1REQyRVxcdUQ4M0NcXHVERkJDXFx1RDgzRVxcdURENzVcXHVEODNEXFx1REVBOVxcdUQ4M0NcXHVERjRFXFx1RDgzQ1xcdURGNEFcXHVEODNEXFx1REM3Q1xcdUQ4M0RcXHVEQzhEXFx1RDgzRFxcdURDRTNcXHVEODNFXFx1REQ0MicpO1xuY29uc3QgYWxwaGFiZXRCeXRlc1RvQ2hhcnMgPSBhbHBoYWJldC5yZWR1Y2UoKHAsIGMsIGkpID0+IHtcbiAgcFtpXSA9IGM7XG4gIHJldHVybiBwO1xufSwgW10pO1xuY29uc3QgYWxwaGFiZXRDaGFyc1RvQnl0ZXMgPSBhbHBoYWJldC5yZWR1Y2UoKHAsIGMsIGkpID0+IHtcbiAgcFtjLmNvZGVQb2ludEF0KDApXSA9IGk7XG4gIHJldHVybiBwO1xufSwgW10pO1xuZnVuY3Rpb24gZW5jb2RlKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEucmVkdWNlKChwLCBjKSA9PiB7XG4gICAgcCArPSBhbHBoYWJldEJ5dGVzVG9DaGFyc1tjXTtcbiAgICByZXR1cm4gcDtcbiAgfSwgJycpO1xufVxuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xuICBjb25zdCBieXRzID0gW107XG4gIGZvciAoY29uc3QgY2hhciBvZiBzdHIpIHtcbiAgICBjb25zdCBieXQgPSBhbHBoYWJldENoYXJzVG9CeXRlc1tjaGFyLmNvZGVQb2ludEF0KDApXTtcbiAgICBpZiAoYnl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm9uLWJhc2UyNTZlbW9qaSBjaGFyYWN0ZXI6ICR7IGNoYXIgfWApO1xuICAgIH1cbiAgICBieXRzLnB1c2goYnl0KTtcbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnl0cyk7XG59XG5leHBvcnQgY29uc3QgYmFzZTI1NmVtb2ppID0gZnJvbSh7XG4gIHByZWZpeDogJ1xcdUQ4M0RcXHVERTgwJyxcbiAgbmFtZTogJ2Jhc2UyNTZlbW9qaScsXG4gIGVuY29kZSxcbiAgZGVjb2RlXG59KTsiXSwibmFtZXMiOlsiZnJvbSIsImFscGhhYmV0IiwiQXJyYXkiLCJhbHBoYWJldEJ5dGVzVG9DaGFycyIsInJlZHVjZSIsInAiLCJjIiwiaSIsImFscGhhYmV0Q2hhcnNUb0J5dGVzIiwiY29kZVBvaW50QXQiLCJlbmNvZGUiLCJkYXRhIiwiZGVjb2RlIiwic3RyIiwiYnl0cyIsImNoYXIiLCJieXQiLCJ1bmRlZmluZWQiLCJFcnJvciIsInB1c2giLCJVaW50OEFycmF5IiwiYmFzZTI1NmVtb2ppIiwicHJlZml4IiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base256emoji.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base32.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base32.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base32: function() { return /* binding */ base32; },\n/* harmony export */   base32hex: function() { return /* binding */ base32hex; },\n/* harmony export */   base32hexpad: function() { return /* binding */ base32hexpad; },\n/* harmony export */   base32hexpadupper: function() { return /* binding */ base32hexpadupper; },\n/* harmony export */   base32hexupper: function() { return /* binding */ base32hexupper; },\n/* harmony export */   base32pad: function() { return /* binding */ base32pad; },\n/* harmony export */   base32padupper: function() { return /* binding */ base32padupper; },\n/* harmony export */   base32upper: function() { return /* binding */ base32upper; },\n/* harmony export */   base32z: function() { return /* binding */ base32z; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base32 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n});\nconst base32upper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n});\nconst base32pad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n});\nconst base32padupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n});\nconst base32hex = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n});\nconst base32hexupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n});\nconst base32hexpad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n});\nconst base32hexpadupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n});\nconst base32z = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlMzIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFvQztBQUM3QixNQUFNQyxTQUFTRCxpREFBT0EsQ0FBQztJQUM1QkUsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsYUFBYTtBQUNmLEdBQUc7QUFDSSxNQUFNQyxjQUFjTixpREFBT0EsQ0FBQztJQUNqQ0UsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsYUFBYTtBQUNmLEdBQUc7QUFDSSxNQUFNRSxZQUFZUCxpREFBT0EsQ0FBQztJQUMvQkUsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsYUFBYTtBQUNmLEdBQUc7QUFDSSxNQUFNRyxpQkFBaUJSLGlEQUFPQSxDQUFDO0lBQ3BDRSxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsVUFBVTtJQUNWQyxhQUFhO0FBQ2YsR0FBRztBQUNJLE1BQU1JLFlBQVlULGlEQUFPQSxDQUFDO0lBQy9CRSxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsVUFBVTtJQUNWQyxhQUFhO0FBQ2YsR0FBRztBQUNJLE1BQU1LLGlCQUFpQlYsaURBQU9BLENBQUM7SUFDcENFLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLGFBQWE7QUFDZixHQUFHO0FBQ0ksTUFBTU0sZUFBZVgsaURBQU9BLENBQUM7SUFDbENFLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLGFBQWE7QUFDZixHQUFHO0FBQ0ksTUFBTU8sb0JBQW9CWixpREFBT0EsQ0FBQztJQUN2Q0UsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsYUFBYTtBQUNmLEdBQUc7QUFDSSxNQUFNUSxVQUFVYixpREFBT0EsQ0FBQztJQUM3QkUsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsYUFBYTtBQUNmLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2Jhc2VzL2Jhc2UzMi5qcz9kNWFmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJmYzQ2NDggfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNvbnN0IGJhc2UzMiA9IHJmYzQ2NDgoe1xuICBwcmVmaXg6ICdiJyxcbiAgbmFtZTogJ2Jhc2UzMicsXG4gIGFscGhhYmV0OiAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoyMzQ1NjcnLFxuICBiaXRzUGVyQ2hhcjogNVxufSk7XG5leHBvcnQgY29uc3QgYmFzZTMydXBwZXIgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnQicsXG4gIG5hbWU6ICdiYXNlMzJ1cHBlcicsXG4gIGFscGhhYmV0OiAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoyMzQ1NjcnLFxuICBiaXRzUGVyQ2hhcjogNVxufSk7XG5leHBvcnQgY29uc3QgYmFzZTMycGFkID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ2MnLFxuICBuYW1lOiAnYmFzZTMycGFkJyxcbiAgYWxwaGFiZXQ6ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejIzNDU2Nz0nLFxuICBiaXRzUGVyQ2hhcjogNVxufSk7XG5leHBvcnQgY29uc3QgYmFzZTMycGFkdXBwZXIgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnQycsXG4gIG5hbWU6ICdiYXNlMzJwYWR1cHBlcicsXG4gIGFscGhhYmV0OiAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoyMzQ1Njc9JyxcbiAgYml0c1BlckNoYXI6IDVcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMmhleCA9IHJmYzQ2NDgoe1xuICBwcmVmaXg6ICd2JyxcbiAgbmFtZTogJ2Jhc2UzMmhleCcsXG4gIGFscGhhYmV0OiAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXYnLFxuICBiaXRzUGVyQ2hhcjogNVxufSk7XG5leHBvcnQgY29uc3QgYmFzZTMyaGV4dXBwZXIgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnVicsXG4gIG5hbWU6ICdiYXNlMzJoZXh1cHBlcicsXG4gIGFscGhhYmV0OiAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVYnLFxuICBiaXRzUGVyQ2hhcjogNVxufSk7XG5leHBvcnQgY29uc3QgYmFzZTMyaGV4cGFkID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ3QnLFxuICBuYW1lOiAnYmFzZTMyaGV4cGFkJyxcbiAgYWxwaGFiZXQ6ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dj0nLFxuICBiaXRzUGVyQ2hhcjogNVxufSk7XG5leHBvcnQgY29uc3QgYmFzZTMyaGV4cGFkdXBwZXIgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnVCcsXG4gIG5hbWU6ICdiYXNlMzJoZXhwYWR1cHBlcicsXG4gIGFscGhhYmV0OiAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVY9JyxcbiAgYml0c1BlckNoYXI6IDVcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMnogPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnaCcsXG4gIG5hbWU6ICdiYXNlMzJ6JyxcbiAgYWxwaGFiZXQ6ICd5Ym5kcmZnOGVqa21jcHF4b3QxdXdpc3phMzQ1aDc2OScsXG4gIGJpdHNQZXJDaGFyOiA1XG59KTsiXSwibmFtZXMiOlsicmZjNDY0OCIsImJhc2UzMiIsInByZWZpeCIsIm5hbWUiLCJhbHBoYWJldCIsImJpdHNQZXJDaGFyIiwiYmFzZTMydXBwZXIiLCJiYXNlMzJwYWQiLCJiYXNlMzJwYWR1cHBlciIsImJhc2UzMmhleCIsImJhc2UzMmhleHVwcGVyIiwiYmFzZTMyaGV4cGFkIiwiYmFzZTMyaGV4cGFkdXBwZXIiLCJiYXNlMzJ6Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base32.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base36.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base36.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base36: function() { return /* binding */ base36; },\n/* harmony export */   base36upper: function() { return /* binding */ base36upper; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base36 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n});\nconst base36upper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlMzYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBQzNCLE1BQU1DLFNBQVNELCtDQUFLQSxDQUFDO0lBQzFCRSxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsVUFBVTtBQUNaLEdBQUc7QUFDSSxNQUFNQyxjQUFjTCwrQ0FBS0EsQ0FBQztJQUMvQkUsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7QUFDWixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlMzYuanM/MWU3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYXNlWCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTM2ID0gYmFzZVgoe1xuICBwcmVmaXg6ICdrJyxcbiAgbmFtZTogJ2Jhc2UzNicsXG4gIGFscGhhYmV0OiAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J1xufSk7XG5leHBvcnQgY29uc3QgYmFzZTM2dXBwZXIgPSBiYXNlWCh7XG4gIHByZWZpeDogJ0snLFxuICBuYW1lOiAnYmFzZTM2dXBwZXInLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWidcbn0pOyJdLCJuYW1lcyI6WyJiYXNlWCIsImJhc2UzNiIsInByZWZpeCIsIm5hbWUiLCJhbHBoYWJldCIsImJhc2UzNnVwcGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base36.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base58.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base58.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base58btc: function() { return /* binding */ base58btc; },\n/* harmony export */   base58flickr: function() { return /* binding */ base58flickr; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base58btc = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n});\nconst base58flickr = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlNTguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBQzNCLE1BQU1DLFlBQVlELCtDQUFLQSxDQUFDO0lBQzdCRSxNQUFNO0lBQ05DLFFBQVE7SUFDUkMsVUFBVTtBQUNaLEdBQUc7QUFDSSxNQUFNQyxlQUFlTCwrQ0FBS0EsQ0FBQztJQUNoQ0UsTUFBTTtJQUNOQyxRQUFRO0lBQ1JDLFVBQVU7QUFDWixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlNTguanM/OGQ0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYXNlWCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTU4YnRjID0gYmFzZVgoe1xuICBuYW1lOiAnYmFzZTU4YnRjJyxcbiAgcHJlZml4OiAneicsXG4gIGFscGhhYmV0OiAnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eidcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2U1OGZsaWNrciA9IGJhc2VYKHtcbiAgbmFtZTogJ2Jhc2U1OGZsaWNrcicsXG4gIHByZWZpeDogJ1onLFxuICBhbHBoYWJldDogJzEyMzQ1Njc4OWFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpBQkNERUZHSEpLTE1OUFFSU1RVVldYWVonXG59KTsiXSwibmFtZXMiOlsiYmFzZVgiLCJiYXNlNThidGMiLCJuYW1lIiwicHJlZml4IiwiYWxwaGFiZXQiLCJiYXNlNThmbGlja3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base58.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base64.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base64.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64: function() { return /* binding */ base64; },\n/* harmony export */   base64pad: function() { return /* binding */ base64pad; },\n/* harmony export */   base64url: function() { return /* binding */ base64url; },\n/* harmony export */   base64urlpad: function() { return /* binding */ base64urlpad; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base64 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n});\nconst base64pad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n});\nconst base64url = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n});\nconst base64urlpad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlNjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBb0M7QUFDN0IsTUFBTUMsU0FBU0QsaURBQU9BLENBQUM7SUFDNUJFLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLGFBQWE7QUFDZixHQUFHO0FBQ0ksTUFBTUMsWUFBWU4saURBQU9BLENBQUM7SUFDL0JFLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLGFBQWE7QUFDZixHQUFHO0FBQ0ksTUFBTUUsWUFBWVAsaURBQU9BLENBQUM7SUFDL0JFLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLGFBQWE7QUFDZixHQUFHO0FBQ0ksTUFBTUcsZUFBZVIsaURBQU9BLENBQUM7SUFDbENFLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLGFBQWE7QUFDZixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlNjQuanM/YzFmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZmM0NjQ4IH0gZnJvbSAnLi9iYXNlLmpzJztcbmV4cG9ydCBjb25zdCBiYXNlNjQgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnbScsXG4gIG5hbWU6ICdiYXNlNjQnLFxuICBhbHBoYWJldDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLFxuICBiaXRzUGVyQ2hhcjogNlxufSk7XG5leHBvcnQgY29uc3QgYmFzZTY0cGFkID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ00nLFxuICBuYW1lOiAnYmFzZTY0cGFkJyxcbiAgYWxwaGFiZXQ6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPScsXG4gIGJpdHNQZXJDaGFyOiA2XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlNjR1cmwgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAndScsXG4gIG5hbWU6ICdiYXNlNjR1cmwnLFxuICBhbHBoYWJldDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV8nLFxuICBiaXRzUGVyQ2hhcjogNlxufSk7XG5leHBvcnQgY29uc3QgYmFzZTY0dXJscGFkID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ1UnLFxuICBuYW1lOiAnYmFzZTY0dXJscGFkJyxcbiAgYWxwaGFiZXQ6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OS1fPScsXG4gIGJpdHNQZXJDaGFyOiA2XG59KTsiXSwibmFtZXMiOlsicmZjNDY0OCIsImJhc2U2NCIsInByZWZpeCIsIm5hbWUiLCJhbHBoYWJldCIsImJpdHNQZXJDaGFyIiwiYmFzZTY0cGFkIiwiYmFzZTY0dXJsIiwiYmFzZTY0dXJscGFkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base64.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base8.js":
/*!**********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base8.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base8: function() { return /* binding */ base8; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base8 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlOC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvQztBQUM3QixNQUFNQyxRQUFRRCxpREFBT0EsQ0FBQztJQUMzQkUsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsYUFBYTtBQUNmLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2Jhc2VzL2Jhc2U4LmpzP2I2MGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmZjNDY0OCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTggPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnNycsXG4gIG5hbWU6ICdiYXNlOCcsXG4gIGFscGhhYmV0OiAnMDEyMzQ1NjcnLFxuICBiaXRzUGVyQ2hhcjogM1xufSk7Il0sIm5hbWVzIjpbInJmYzQ2NDgiLCJiYXNlOCIsInByZWZpeCIsIm5hbWUiLCJhbHBoYWJldCIsImJpdHNQZXJDaGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base8.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bases/identity.js":
/*!*************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/identity.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   identity: function() { return /* binding */ identity; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bytes.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bytes.js\");\n\n\nconst identity = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (buf)=>(0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toString)(buf),\n    decode: (str)=>(0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.fromString)(str)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9pZGVudGl0eS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUM7QUFJWjtBQUNkLE1BQU1HLFdBQVdILDhDQUFJQSxDQUFDO0lBQzNCSSxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsUUFBUUMsQ0FBQUEsTUFBT0wsbURBQVFBLENBQUNLO0lBQ3hCQyxRQUFRQyxDQUFBQSxNQUFPUixxREFBVUEsQ0FBQ1E7QUFDNUIsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvaWRlbnRpdHkuanM/ZmZjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9iYXNlLmpzJztcbmltcG9ydCB7XG4gIGZyb21TdHJpbmcsXG4gIHRvU3RyaW5nXG59IGZyb20gJy4uL2J5dGVzLmpzJztcbmV4cG9ydCBjb25zdCBpZGVudGl0eSA9IGZyb20oe1xuICBwcmVmaXg6ICdcXDAnLFxuICBuYW1lOiAnaWRlbnRpdHknLFxuICBlbmNvZGU6IGJ1ZiA9PiB0b1N0cmluZyhidWYpLFxuICBkZWNvZGU6IHN0ciA9PiBmcm9tU3RyaW5nKHN0cilcbn0pOyJdLCJuYW1lcyI6WyJmcm9tIiwiZnJvbVN0cmluZyIsInRvU3RyaW5nIiwiaWRlbnRpdHkiLCJwcmVmaXgiLCJuYW1lIiwiZW5jb2RlIiwiYnVmIiwiZGVjb2RlIiwic3RyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bases/identity.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/basics.js":
/*!*****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/basics.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CID: function() { return /* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.CID; },\n/* harmony export */   bases: function() { return /* binding */ bases; },\n/* harmony export */   bytes: function() { return /* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.bytes; },\n/* harmony export */   codecs: function() { return /* binding */ codecs; },\n/* harmony export */   digest: function() { return /* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.digest; },\n/* harmony export */   hasher: function() { return /* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.hasher; },\n/* harmony export */   hashes: function() { return /* binding */ hashes; },\n/* harmony export */   varint: function() { return /* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.varint; }\n/* harmony export */ });\n/* harmony import */ var _bases_identity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bases/identity.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/identity.js\");\n/* harmony import */ var _bases_base2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bases/base2.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base2.js\");\n/* harmony import */ var _bases_base8_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bases/base8.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base8.js\");\n/* harmony import */ var _bases_base10_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bases/base10.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base10.js\");\n/* harmony import */ var _bases_base16_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bases/base16.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base16.js\");\n/* harmony import */ var _bases_base32_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bases/base32.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base32.js\");\n/* harmony import */ var _bases_base36_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bases/base36.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base36.js\");\n/* harmony import */ var _bases_base58_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bases/base58.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base58.js\");\n/* harmony import */ var _bases_base64_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bases/base64.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base64.js\");\n/* harmony import */ var _bases_base256emoji_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bases/base256emoji.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base256emoji.js\");\n/* harmony import */ var _hashes_sha2_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hashes/sha2.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/sha2-browser.js\");\n/* harmony import */ var _hashes_identity_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hashes/identity.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/identity.js\");\n/* harmony import */ var _codecs_raw_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./codecs/raw.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/codecs/raw.js\");\n/* harmony import */ var _codecs_json_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./codecs/json.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/codecs/json.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./index.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst bases = {\n    ..._bases_identity_js__WEBPACK_IMPORTED_MODULE_0__,\n    ..._bases_base2_js__WEBPACK_IMPORTED_MODULE_1__,\n    ..._bases_base8_js__WEBPACK_IMPORTED_MODULE_2__,\n    ..._bases_base10_js__WEBPACK_IMPORTED_MODULE_3__,\n    ..._bases_base16_js__WEBPACK_IMPORTED_MODULE_4__,\n    ..._bases_base32_js__WEBPACK_IMPORTED_MODULE_5__,\n    ..._bases_base36_js__WEBPACK_IMPORTED_MODULE_6__,\n    ..._bases_base58_js__WEBPACK_IMPORTED_MODULE_7__,\n    ..._bases_base64_js__WEBPACK_IMPORTED_MODULE_8__,\n    ..._bases_base256emoji_js__WEBPACK_IMPORTED_MODULE_9__\n};\nconst hashes = {\n    ..._hashes_sha2_js__WEBPACK_IMPORTED_MODULE_10__,\n    ..._hashes_identity_js__WEBPACK_IMPORTED_MODULE_11__\n};\nconst codecs = {\n    raw: _codecs_raw_js__WEBPACK_IMPORTED_MODULE_12__,\n    json: _codecs_json_js__WEBPACK_IMPORTED_MODULE_13__\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNpY3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBb0Q7QUFDVjtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDZjtBQUNRO0FBQ1Y7QUFDRTtBQU9yQjtBQUNwQixNQUFNbUIsUUFBUTtJQUNaLEdBQUduQiwrQ0FBWTtJQUNmLEdBQUdDLDRDQUFLO0lBQ1IsR0FBR0MsNENBQUs7SUFDUixHQUFHQyw2Q0FBTTtJQUNULEdBQUdDLDZDQUFNO0lBQ1QsR0FBR0MsNkNBQU07SUFDVCxHQUFHQyw2Q0FBTTtJQUNULEdBQUdDLDZDQUFNO0lBQ1QsR0FBR0MsNkNBQU07SUFDVCxHQUFHQyxtREFBWTtBQUNqQjtBQUNBLE1BQU1XLFNBQVM7SUFDYixHQUFHViw2Q0FBSTtJQUNQLEdBQUdDLGlEQUFRO0FBQ2I7QUFDQSxNQUFNVSxTQUFTO0lBQ2JULEdBQUdBLDhDQUFBQTtJQUNIQyxJQUFJQSwrQ0FBQUE7QUFDTjtBQVVFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNpY3MuanM/ODFhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBpZGVudGl0eUJhc2UgZnJvbSAnLi9iYXNlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgKiBhcyBiYXNlMiBmcm9tICcuL2Jhc2VzL2Jhc2UyLmpzJztcbmltcG9ydCAqIGFzIGJhc2U4IGZyb20gJy4vYmFzZXMvYmFzZTguanMnO1xuaW1wb3J0ICogYXMgYmFzZTEwIGZyb20gJy4vYmFzZXMvYmFzZTEwLmpzJztcbmltcG9ydCAqIGFzIGJhc2UxNiBmcm9tICcuL2Jhc2VzL2Jhc2UxNi5qcyc7XG5pbXBvcnQgKiBhcyBiYXNlMzIgZnJvbSAnLi9iYXNlcy9iYXNlMzIuanMnO1xuaW1wb3J0ICogYXMgYmFzZTM2IGZyb20gJy4vYmFzZXMvYmFzZTM2LmpzJztcbmltcG9ydCAqIGFzIGJhc2U1OCBmcm9tICcuL2Jhc2VzL2Jhc2U1OC5qcyc7XG5pbXBvcnQgKiBhcyBiYXNlNjQgZnJvbSAnLi9iYXNlcy9iYXNlNjQuanMnO1xuaW1wb3J0ICogYXMgYmFzZTI1NmVtb2ppIGZyb20gJy4vYmFzZXMvYmFzZTI1NmVtb2ppLmpzJztcbmltcG9ydCAqIGFzIHNoYTIgZnJvbSAnLi9oYXNoZXMvc2hhMi5qcyc7XG5pbXBvcnQgKiBhcyBpZGVudGl0eSBmcm9tICcuL2hhc2hlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgKiBhcyByYXcgZnJvbSAnLi9jb2RlY3MvcmF3LmpzJztcbmltcG9ydCAqIGFzIGpzb24gZnJvbSAnLi9jb2RlY3MvanNvbi5qcyc7XG5pbXBvcnQge1xuICBDSUQsXG4gIGhhc2hlcixcbiAgZGlnZXN0LFxuICB2YXJpbnQsXG4gIGJ5dGVzXG59IGZyb20gJy4vaW5kZXguanMnO1xuY29uc3QgYmFzZXMgPSB7XG4gIC4uLmlkZW50aXR5QmFzZSxcbiAgLi4uYmFzZTIsXG4gIC4uLmJhc2U4LFxuICAuLi5iYXNlMTAsXG4gIC4uLmJhc2UxNixcbiAgLi4uYmFzZTMyLFxuICAuLi5iYXNlMzYsXG4gIC4uLmJhc2U1OCxcbiAgLi4uYmFzZTY0LFxuICAuLi5iYXNlMjU2ZW1vamlcbn07XG5jb25zdCBoYXNoZXMgPSB7XG4gIC4uLnNoYTIsXG4gIC4uLmlkZW50aXR5XG59O1xuY29uc3QgY29kZWNzID0ge1xuICByYXcsXG4gIGpzb25cbn07XG5leHBvcnQge1xuICBDSUQsXG4gIGhhc2hlcixcbiAgZGlnZXN0LFxuICB2YXJpbnQsXG4gIGJ5dGVzLFxuICBoYXNoZXMsXG4gIGJhc2VzLFxuICBjb2RlY3Ncbn07Il0sIm5hbWVzIjpbImlkZW50aXR5QmFzZSIsImJhc2UyIiwiYmFzZTgiLCJiYXNlMTAiLCJiYXNlMTYiLCJiYXNlMzIiLCJiYXNlMzYiLCJiYXNlNTgiLCJiYXNlNjQiLCJiYXNlMjU2ZW1vamkiLCJzaGEyIiwiaWRlbnRpdHkiLCJyYXciLCJqc29uIiwiQ0lEIiwiaGFzaGVyIiwiZGlnZXN0IiwidmFyaW50IiwiYnl0ZXMiLCJiYXNlcyIsImhhc2hlcyIsImNvZGVjcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/basics.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/bytes.js":
/*!****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bytes.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerce: function() { return /* binding */ coerce; },\n/* harmony export */   empty: function() { return /* binding */ empty; },\n/* harmony export */   equals: function() { return /* binding */ equals; },\n/* harmony export */   fromHex: function() { return /* binding */ fromHex; },\n/* harmony export */   fromString: function() { return /* binding */ fromString; },\n/* harmony export */   isBinary: function() { return /* binding */ isBinary; },\n/* harmony export */   toHex: function() { return /* binding */ toHex; },\n/* harmony export */   toString: function() { return /* binding */ toString; }\n/* harmony export */ });\nconst empty = new Uint8Array(0);\nconst toHex = (d)=>d.reduce((hex, byte)=>hex + byte.toString(16).padStart(2, \"0\"), \"\");\nconst fromHex = (hex)=>{\n    const hexes = hex.match(/../g);\n    return hexes ? new Uint8Array(hexes.map((b)=>parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb)=>{\n    if (aa === bb) return true;\n    if (aa.byteLength !== bb.byteLength) {\n        return false;\n    }\n    for(let ii = 0; ii < aa.byteLength; ii++){\n        if (aa[ii] !== bb[ii]) {\n            return false;\n        }\n    }\n    return true;\n};\nconst coerce = (o)=>{\n    if (o instanceof Uint8Array && o.constructor.name === \"Uint8Array\") return o;\n    if (o instanceof ArrayBuffer) return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) {\n        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error(\"Unknown type, must be binary type\");\n};\nconst isBinary = (o)=>o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = (str)=>new TextEncoder().encode(str);\nconst toString = (b)=>new TextDecoder().decode(b);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9ieXRlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU1BLFFBQVEsSUFBSUMsV0FBVztBQUM3QixNQUFNQyxRQUFRQyxDQUFBQSxJQUFLQSxFQUFFQyxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsT0FBU0QsTUFBTUMsS0FBS0MsUUFBUSxDQUFDLElBQUlDLFFBQVEsQ0FBQyxHQUFHLE1BQU07QUFDckYsTUFBTUMsVUFBVUosQ0FBQUE7SUFDZCxNQUFNSyxRQUFRTCxJQUFJTSxLQUFLLENBQUM7SUFDeEIsT0FBT0QsUUFBUSxJQUFJVCxXQUFXUyxNQUFNRSxHQUFHLENBQUNDLENBQUFBLElBQUtDLFNBQVNELEdBQUcsUUFBUWI7QUFDbkU7QUFDQSxNQUFNZSxTQUFTLENBQUNDLElBQUlDO0lBQ2xCLElBQUlELE9BQU9DLElBQ1QsT0FBTztJQUNULElBQUlELEdBQUdFLFVBQVUsS0FBS0QsR0FBR0MsVUFBVSxFQUFFO1FBQ25DLE9BQU87SUFDVDtJQUNBLElBQUssSUFBSUMsS0FBSyxHQUFHQSxLQUFLSCxHQUFHRSxVQUFVLEVBQUVDLEtBQU07UUFDekMsSUFBSUgsRUFBRSxDQUFDRyxHQUFHLEtBQUtGLEVBQUUsQ0FBQ0UsR0FBRyxFQUFFO1lBQ3JCLE9BQU87UUFDVDtJQUNGO0lBQ0EsT0FBTztBQUNUO0FBQ0EsTUFBTUMsU0FBU0MsQ0FBQUE7SUFDYixJQUFJQSxhQUFhcEIsY0FBY29CLEVBQUVDLFdBQVcsQ0FBQ0MsSUFBSSxLQUFLLGNBQ3BELE9BQU9GO0lBQ1QsSUFBSUEsYUFBYUcsYUFDZixPQUFPLElBQUl2QixXQUFXb0I7SUFDeEIsSUFBSUcsWUFBWUMsTUFBTSxDQUFDSixJQUFJO1FBQ3pCLE9BQU8sSUFBSXBCLFdBQVdvQixFQUFFSyxNQUFNLEVBQUVMLEVBQUVNLFVBQVUsRUFBRU4sRUFBRUgsVUFBVTtJQUM1RDtJQUNBLE1BQU0sSUFBSVUsTUFBTTtBQUNsQjtBQUNBLE1BQU1DLFdBQVdSLENBQUFBLElBQUtBLGFBQWFHLGVBQWVBLFlBQVlDLE1BQU0sQ0FBQ0o7QUFDckUsTUFBTVMsYUFBYUMsQ0FBQUEsTUFBTyxJQUFJQyxjQUFjQyxNQUFNLENBQUNGO0FBQ25ELE1BQU14QixXQUFXTSxDQUFBQSxJQUFLLElBQUlxQixjQUFjQyxNQUFNLENBQUN0QjtBQVU3QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYnl0ZXMuanM/YWRjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlbXB0eSA9IG5ldyBVaW50OEFycmF5KDApO1xuY29uc3QgdG9IZXggPSBkID0+IGQucmVkdWNlKChoZXgsIGJ5dGUpID0+IGhleCArIGJ5dGUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJyksICcnKTtcbmNvbnN0IGZyb21IZXggPSBoZXggPT4ge1xuICBjb25zdCBoZXhlcyA9IGhleC5tYXRjaCgvLi4vZyk7XG4gIHJldHVybiBoZXhlcyA/IG5ldyBVaW50OEFycmF5KGhleGVzLm1hcChiID0+IHBhcnNlSW50KGIsIDE2KSkpIDogZW1wdHk7XG59O1xuY29uc3QgZXF1YWxzID0gKGFhLCBiYikgPT4ge1xuICBpZiAoYWEgPT09IGJiKVxuICAgIHJldHVybiB0cnVlO1xuICBpZiAoYWEuYnl0ZUxlbmd0aCAhPT0gYmIuYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgYWEuYnl0ZUxlbmd0aDsgaWkrKykge1xuICAgIGlmIChhYVtpaV0gIT09IGJiW2lpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5jb25zdCBjb2VyY2UgPSBvID0+IHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIG8uY29uc3RydWN0b3IubmFtZSA9PT0gJ1VpbnQ4QXJyYXknKVxuICAgIHJldHVybiBvO1xuICBpZiAobyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKVxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShvKTtcbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhvKSkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShvLmJ1ZmZlciwgby5ieXRlT2Zmc2V0LCBvLmJ5dGVMZW5ndGgpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlLCBtdXN0IGJlIGJpbmFyeSB0eXBlJyk7XG59O1xuY29uc3QgaXNCaW5hcnkgPSBvID0+IG8gaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcobyk7XG5jb25zdCBmcm9tU3RyaW5nID0gc3RyID0+IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHIpO1xuY29uc3QgdG9TdHJpbmcgPSBiID0+IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShiKTtcbmV4cG9ydCB7XG4gIGVxdWFscyxcbiAgY29lcmNlLFxuICBpc0JpbmFyeSxcbiAgZnJvbUhleCxcbiAgdG9IZXgsXG4gIGZyb21TdHJpbmcsXG4gIHRvU3RyaW5nLFxuICBlbXB0eVxufTsiXSwibmFtZXMiOlsiZW1wdHkiLCJVaW50OEFycmF5IiwidG9IZXgiLCJkIiwicmVkdWNlIiwiaGV4IiwiYnl0ZSIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJmcm9tSGV4IiwiaGV4ZXMiLCJtYXRjaCIsIm1hcCIsImIiLCJwYXJzZUludCIsImVxdWFscyIsImFhIiwiYmIiLCJieXRlTGVuZ3RoIiwiaWkiLCJjb2VyY2UiLCJvIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiRXJyb3IiLCJpc0JpbmFyeSIsImZyb21TdHJpbmciLCJzdHIiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsIlRleHREZWNvZGVyIiwiZGVjb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/bytes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/cid.js":
/*!**************************************************!*\
  !*** ./node_modules/multiformats/esm/src/cid.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CID: function() { return /* binding */ CID; }\n/* harmony export */ });\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./varint.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/varint.js\");\n/* harmony import */ var _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hashes/digest.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/digest.js\");\n/* harmony import */ var _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bases/base58.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base58.js\");\n/* harmony import */ var _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bases/base32.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bases/base32.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bytes.js\");\n\n\n\n\n\nclass CID {\n    toV0() {\n        switch(this.version){\n            case 0:\n                {\n                    return this;\n                }\n            default:\n                {\n                    const { code, multihash } = this;\n                    if (code !== DAG_PB_CODE) {\n                        throw new Error(\"Cannot convert a non dag-pb CID to CIDv0\");\n                    }\n                    if (multihash.code !== SHA_256_CODE) {\n                        throw new Error(\"Cannot convert non sha2-256 multihash CID to CIDv0\");\n                    }\n                    return CID.createV0(multihash);\n                }\n        }\n    }\n    toV1() {\n        switch(this.version){\n            case 0:\n                {\n                    const { code, digest } = this.multihash;\n                    const multihash = _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.create(code, digest);\n                    return CID.createV1(this.code, multihash);\n                }\n            case 1:\n                {\n                    return this;\n                }\n            default:\n                {\n                    throw Error(\"Can not convert CID version \".concat(this.version, \" to version 0. This is a bug please report\"));\n                }\n        }\n    }\n    equals(other) {\n        return other && this.code === other.code && this.version === other.version && _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.equals(this.multihash, other.multihash);\n    }\n    toString(base) {\n        const { bytes, version, _baseCache } = this;\n        switch(version){\n            case 0:\n                return toStringV0(bytes, _baseCache, base || _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.encoder);\n            default:\n                return toStringV1(bytes, _baseCache, base || _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32.encoder);\n        }\n    }\n    toJSON() {\n        return {\n            code: this.code,\n            version: this.version,\n            hash: this.multihash.bytes\n        };\n    }\n    get [Symbol.toStringTag]() {\n        return \"CID\";\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return \"CID(\" + this.toString() + \")\";\n    }\n    static isCID(value) {\n        deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n        return !!(value && (value[cidSymbol] || value.asCID === value));\n    }\n    get toBaseEncodedString() {\n        throw new Error(\"Deprecated, use .toString()\");\n    }\n    get codec() {\n        throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n    }\n    get buffer() {\n        throw new Error(\"Deprecated .buffer property, use .bytes to get Uint8Array instead\");\n    }\n    get multibaseName() {\n        throw new Error('\"multibaseName\" property is deprecated');\n    }\n    get prefix() {\n        throw new Error('\"prefix\" property is deprecated');\n    }\n    static asCID(value) {\n        if (value instanceof CID) {\n            return value;\n        } else if (value != null && value.asCID === value) {\n            const { version, code, multihash, bytes } = value;\n            return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n        } else if (value != null && value[cidSymbol] === true) {\n            const { version, multihash, code } = value;\n            const digest = _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.decode(multihash);\n            return CID.create(version, code, digest);\n        } else {\n            return null;\n        }\n    }\n    static create(version, code, digest) {\n        if (typeof code !== \"number\") {\n            throw new Error(\"String codecs are no longer supported\");\n        }\n        switch(version){\n            case 0:\n                {\n                    if (code !== DAG_PB_CODE) {\n                        throw new Error(\"Version 0 CID must use dag-pb (code: \".concat(DAG_PB_CODE, \") block encoding\"));\n                    } else {\n                        return new CID(version, code, digest, digest.bytes);\n                    }\n                }\n            case 1:\n                {\n                    const bytes = encodeCID(version, code, digest.bytes);\n                    return new CID(version, code, digest, bytes);\n                }\n            default:\n                {\n                    throw new Error(\"Invalid version\");\n                }\n        }\n    }\n    static createV0(digest) {\n        return CID.create(0, DAG_PB_CODE, digest);\n    }\n    static createV1(code, digest) {\n        return CID.create(1, code, digest);\n    }\n    static decode(bytes) {\n        const [cid, remainder] = CID.decodeFirst(bytes);\n        if (remainder.length) {\n            throw new Error(\"Incorrect length\");\n        }\n        return cid;\n    }\n    static decodeFirst(bytes) {\n        const specs = CID.inspectBytes(bytes);\n        const prefixSize = specs.size - specs.multihashSize;\n        const multihashBytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_4__.coerce)(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n        if (multihashBytes.byteLength !== specs.multihashSize) {\n            throw new Error(\"Incorrect length\");\n        }\n        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n        const digest = new _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n        const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n        return [\n            cid,\n            bytes.subarray(specs.size)\n        ];\n    }\n    static inspectBytes(initialBytes) {\n        let offset = 0;\n        const next = ()=>{\n            const [i, length] = _varint_js__WEBPACK_IMPORTED_MODULE_0__.decode(initialBytes.subarray(offset));\n            offset += length;\n            return i;\n        };\n        let version = next();\n        let codec = DAG_PB_CODE;\n        if (version === 18) {\n            version = 0;\n            offset = 0;\n        } else if (version === 1) {\n            codec = next();\n        }\n        if (version !== 0 && version !== 1) {\n            throw new RangeError(\"Invalid CID version \".concat(version));\n        }\n        const prefixSize = offset;\n        const multihashCode = next();\n        const digestSize = next();\n        const size = offset + digestSize;\n        const multihashSize = size - prefixSize;\n        return {\n            version,\n            codec,\n            multihashCode,\n            digestSize,\n            multihashSize,\n            size\n        };\n    }\n    static parse(source, base) {\n        const [prefix, bytes] = parseCIDtoBytes(source, base);\n        const cid = CID.decode(bytes);\n        cid._baseCache.set(prefix, source);\n        return cid;\n    }\n    constructor(version, code, multihash, bytes){\n        this.code = code;\n        this.version = version;\n        this.multihash = multihash;\n        this.bytes = bytes;\n        this.byteOffset = bytes.byteOffset;\n        this.byteLength = bytes.byteLength;\n        this.asCID = this;\n        this._baseCache = new Map();\n        Object.defineProperties(this, {\n            byteOffset: hidden,\n            byteLength: hidden,\n            code: readonly,\n            version: readonly,\n            multihash: readonly,\n            bytes: readonly,\n            _baseCache: hidden,\n            asCID: hidden\n        });\n    }\n}\nconst parseCIDtoBytes = (source, base)=>{\n    switch(source[0]){\n        case \"Q\":\n            {\n                const decoder = base || _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc;\n                return [\n                    _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix,\n                    decoder.decode(\"\".concat(_bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix).concat(source))\n                ];\n            }\n        case _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix:\n            {\n                const decoder = base || _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc;\n                return [\n                    _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix,\n                    decoder.decode(source)\n                ];\n            }\n        case _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32.prefix:\n            {\n                const decoder = base || _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32;\n                return [\n                    _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32.prefix,\n                    decoder.decode(source)\n                ];\n            }\n        default:\n            {\n                if (base == null) {\n                    throw Error(\"To parse non base32 or base58btc encoded CID multibase decoder must be provided\");\n                }\n                return [\n                    source[0],\n                    base.decode(source)\n                ];\n            }\n    }\n};\nconst toStringV0 = (bytes, cache, base)=>{\n    const { prefix } = base;\n    if (prefix !== _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix) {\n        throw Error(\"Cannot string encode V0 in \".concat(base.name, \" encoding\"));\n    }\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes).slice(1);\n        cache.set(prefix, cid);\n        return cid;\n    } else {\n        return cid;\n    }\n};\nconst toStringV1 = (bytes, cache, base)=>{\n    const { prefix } = base;\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes);\n        cache.set(prefix, cid);\n        return cid;\n    } else {\n        return cid;\n    }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash)=>{\n    const codeOffset = _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodingLength(version);\n    const hashOffset = codeOffset + _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodingLength(code);\n    const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n    _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodeTo(version, bytes, 0);\n    _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodeTo(code, bytes, codeOffset);\n    bytes.set(multihash, hashOffset);\n    return bytes;\n};\nconst cidSymbol = Symbol.for(\"@ipld/js-cid/CID\");\nconst readonly = {\n    writable: false,\n    configurable: false,\n    enumerable: true\n};\nconst hidden = {\n    writable: false,\n    enumerable: false,\n    configurable: false\n};\nconst version = \"0.0.0-dev\";\nconst deprecate = (range, message)=>{\n    if (range.test(version)) {\n        console.warn(message);\n    } else {\n        throw new Error(message);\n    }\n};\nconst IS_CID_DEPRECATION = \"CID.isCID(v) is deprecated and will be removed in the next major release.\\nFollowing code pattern:\\n\\nif (CID.isCID(value)) {\\n  doSomethingWithCID(value)\\n}\\n\\nIs replaced with:\\n\\nconst cid = CID.asCID(value)\\nif (cid) {\\n  // Make sure to use cid instead of value\\n  doSomethingWithCID(cid)\\n}\\n\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/cid.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/codecs/json.js":
/*!**********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/codecs/json.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   code: function() { return /* binding */ code; },\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; },\n/* harmony export */   name: function() { return /* binding */ name; }\n/* harmony export */ });\nconst textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nconst name = \"json\";\nconst code = 512;\nconst encode = (node)=>textEncoder.encode(JSON.stringify(node));\nconst decode = (data)=>JSON.parse(textDecoder.decode(data));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9jb2RlY3MvanNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTUEsY0FBYyxJQUFJQztBQUN4QixNQUFNQyxjQUFjLElBQUlDO0FBQ2pCLE1BQU1DLE9BQU8sT0FBTztBQUNwQixNQUFNQyxPQUFPLElBQUk7QUFDakIsTUFBTUMsU0FBU0MsQ0FBQUEsT0FBUVAsWUFBWU0sTUFBTSxDQUFDRSxLQUFLQyxTQUFTLENBQUNGLE9BQU87QUFDaEUsTUFBTUcsU0FBU0MsQ0FBQUEsT0FBUUgsS0FBS0ksS0FBSyxDQUFDVixZQUFZUSxNQUFNLENBQUNDLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2NvZGVjcy9qc29uLmpzPzM2NWQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbmNvbnN0IHRleHREZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5leHBvcnQgY29uc3QgbmFtZSA9ICdqc29uJztcbmV4cG9ydCBjb25zdCBjb2RlID0gNTEyO1xuZXhwb3J0IGNvbnN0IGVuY29kZSA9IG5vZGUgPT4gdGV4dEVuY29kZXIuZW5jb2RlKEpTT04uc3RyaW5naWZ5KG5vZGUpKTtcbmV4cG9ydCBjb25zdCBkZWNvZGUgPSBkYXRhID0+IEpTT04ucGFyc2UodGV4dERlY29kZXIuZGVjb2RlKGRhdGEpKTsiXSwibmFtZXMiOlsidGV4dEVuY29kZXIiLCJUZXh0RW5jb2RlciIsInRleHREZWNvZGVyIiwiVGV4dERlY29kZXIiLCJuYW1lIiwiY29kZSIsImVuY29kZSIsIm5vZGUiLCJKU09OIiwic3RyaW5naWZ5IiwiZGVjb2RlIiwiZGF0YSIsInBhcnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/codecs/json.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/codecs/raw.js":
/*!*********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/codecs/raw.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   code: function() { return /* binding */ code; },\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; },\n/* harmony export */   name: function() { return /* binding */ name; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bytes.js\");\n\nconst name = \"raw\";\nconst code = 85;\nconst encode = (node)=>(0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(node);\nconst decode = (data)=>(0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(data);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9jb2RlY3MvcmF3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFDO0FBQzlCLE1BQU1DLE9BQU8sTUFBTTtBQUNuQixNQUFNQyxPQUFPLEdBQUc7QUFDaEIsTUFBTUMsU0FBU0MsQ0FBQUEsT0FBUUosaURBQU1BLENBQUNJLE1BQU07QUFDcEMsTUFBTUMsU0FBU0MsQ0FBQUEsT0FBUU4saURBQU1BLENBQUNNLE1BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2NvZGVjcy9yYXcuanM/NGE5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2VyY2UgfSBmcm9tICcuLi9ieXRlcy5qcyc7XG5leHBvcnQgY29uc3QgbmFtZSA9ICdyYXcnO1xuZXhwb3J0IGNvbnN0IGNvZGUgPSA4NTtcbmV4cG9ydCBjb25zdCBlbmNvZGUgPSBub2RlID0+IGNvZXJjZShub2RlKTtcbmV4cG9ydCBjb25zdCBkZWNvZGUgPSBkYXRhID0+IGNvZXJjZShkYXRhKTsiXSwibmFtZXMiOlsiY29lcmNlIiwibmFtZSIsImNvZGUiLCJlbmNvZGUiLCJub2RlIiwiZGVjb2RlIiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/codecs/raw.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/digest.js":
/*!************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/digest.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Digest: function() { return /* binding */ Digest; },\n/* harmony export */   create: function() { return /* binding */ create; },\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   equals: function() { return /* binding */ equals; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bytes.js\");\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../varint.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/varint.js\");\n\n\nconst create = (code, digest)=>{\n    const size = digest.byteLength;\n    const sizeOffset = _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodingLength(code);\n    const digestOffset = sizeOffset + _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodingLength(size);\n    const bytes = new Uint8Array(digestOffset + size);\n    _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodeTo(code, bytes, 0);\n    _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodeTo(size, bytes, sizeOffset);\n    bytes.set(digest, digestOffset);\n    return new Digest(code, size, digest, bytes);\n};\nconst decode = (multihash)=>{\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(multihash);\n    const [code, sizeOffset] = _varint_js__WEBPACK_IMPORTED_MODULE_1__.decode(bytes);\n    const [size, digestOffset] = _varint_js__WEBPACK_IMPORTED_MODULE_1__.decode(bytes.subarray(sizeOffset));\n    const digest = bytes.subarray(sizeOffset + digestOffset);\n    if (digest.byteLength !== size) {\n        throw new Error(\"Incorrect length\");\n    }\n    return new Digest(code, size, digest, bytes);\n};\nconst equals = (a, b)=>{\n    if (a === b) {\n        return true;\n    } else {\n        return a.code === b.code && a.size === b.size && (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.equals)(a.bytes, b.bytes);\n    }\n};\nclass Digest {\n    constructor(code, size, digest, bytes){\n        this.code = code;\n        this.size = size;\n        this.digest = digest;\n        this.bytes = bytes;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9oYXNoZXMvZGlnZXN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUdxQjtBQUNrQjtBQUNoQyxNQUFNSSxTQUFTLENBQUNDLE1BQU1DO0lBQzNCLE1BQU1DLE9BQU9ELE9BQU9FLFVBQVU7SUFDOUIsTUFBTUMsYUFBYU4sc0RBQXFCLENBQUNFO0lBQ3pDLE1BQU1NLGVBQWVGLGFBQWFOLHNEQUFxQixDQUFDSTtJQUN4RCxNQUFNSyxRQUFRLElBQUlDLFdBQVdGLGVBQWVKO0lBQzVDSixnREFBZSxDQUFDRSxNQUFNTyxPQUFPO0lBQzdCVCxnREFBZSxDQUFDSSxNQUFNSyxPQUFPSDtJQUM3QkcsTUFBTUcsR0FBRyxDQUFDVCxRQUFRSztJQUNsQixPQUFPLElBQUlLLE9BQU9YLE1BQU1FLE1BQU1ELFFBQVFNO0FBQ3hDLEVBQUU7QUFDSyxNQUFNSyxTQUFTQyxDQUFBQTtJQUNwQixNQUFNTixRQUFRWixpREFBTUEsQ0FBQ2tCO0lBQ3JCLE1BQU0sQ0FBQ2IsTUFBTUksV0FBVyxHQUFHTiw4Q0FBYSxDQUFDUztJQUN6QyxNQUFNLENBQUNMLE1BQU1JLGFBQWEsR0FBR1IsOENBQWEsQ0FBQ1MsTUFBTU8sUUFBUSxDQUFDVjtJQUMxRCxNQUFNSCxTQUFTTSxNQUFNTyxRQUFRLENBQUNWLGFBQWFFO0lBQzNDLElBQUlMLE9BQU9FLFVBQVUsS0FBS0QsTUFBTTtRQUM5QixNQUFNLElBQUlhLE1BQU07SUFDbEI7SUFDQSxPQUFPLElBQUlKLE9BQU9YLE1BQU1FLE1BQU1ELFFBQVFNO0FBQ3hDLEVBQUU7QUFDSyxNQUFNWCxTQUFTLENBQUNvQixHQUFHQztJQUN4QixJQUFJRCxNQUFNQyxHQUFHO1FBQ1gsT0FBTztJQUNULE9BQU87UUFDTCxPQUFPRCxFQUFFaEIsSUFBSSxLQUFLaUIsRUFBRWpCLElBQUksSUFBSWdCLEVBQUVkLElBQUksS0FBS2UsRUFBRWYsSUFBSSxJQUFJTCxpREFBVUEsQ0FBQ21CLEVBQUVULEtBQUssRUFBRVUsRUFBRVYsS0FBSztJQUM5RTtBQUNGLEVBQUU7QUFDSyxNQUFNSTtJQUNYTyxZQUFZbEIsSUFBSSxFQUFFRSxJQUFJLEVBQUVELE1BQU0sRUFBRU0sS0FBSyxDQUFFO1FBQ3JDLElBQUksQ0FBQ1AsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0UsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0QsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ00sS0FBSyxHQUFHQTtJQUNmO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2hhc2hlcy9kaWdlc3QuanM/ODQ0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjb2VyY2UsXG4gIGVxdWFscyBhcyBlcXVhbEJ5dGVzXG59IGZyb20gJy4uL2J5dGVzLmpzJztcbmltcG9ydCAqIGFzIHZhcmludCBmcm9tICcuLi92YXJpbnQuanMnO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9IChjb2RlLCBkaWdlc3QpID0+IHtcbiAgY29uc3Qgc2l6ZSA9IGRpZ2VzdC5ieXRlTGVuZ3RoO1xuICBjb25zdCBzaXplT2Zmc2V0ID0gdmFyaW50LmVuY29kaW5nTGVuZ3RoKGNvZGUpO1xuICBjb25zdCBkaWdlc3RPZmZzZXQgPSBzaXplT2Zmc2V0ICsgdmFyaW50LmVuY29kaW5nTGVuZ3RoKHNpemUpO1xuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGRpZ2VzdE9mZnNldCArIHNpemUpO1xuICB2YXJpbnQuZW5jb2RlVG8oY29kZSwgYnl0ZXMsIDApO1xuICB2YXJpbnQuZW5jb2RlVG8oc2l6ZSwgYnl0ZXMsIHNpemVPZmZzZXQpO1xuICBieXRlcy5zZXQoZGlnZXN0LCBkaWdlc3RPZmZzZXQpO1xuICByZXR1cm4gbmV3IERpZ2VzdChjb2RlLCBzaXplLCBkaWdlc3QsIGJ5dGVzKTtcbn07XG5leHBvcnQgY29uc3QgZGVjb2RlID0gbXVsdGloYXNoID0+IHtcbiAgY29uc3QgYnl0ZXMgPSBjb2VyY2UobXVsdGloYXNoKTtcbiAgY29uc3QgW2NvZGUsIHNpemVPZmZzZXRdID0gdmFyaW50LmRlY29kZShieXRlcyk7XG4gIGNvbnN0IFtzaXplLCBkaWdlc3RPZmZzZXRdID0gdmFyaW50LmRlY29kZShieXRlcy5zdWJhcnJheShzaXplT2Zmc2V0KSk7XG4gIGNvbnN0IGRpZ2VzdCA9IGJ5dGVzLnN1YmFycmF5KHNpemVPZmZzZXQgKyBkaWdlc3RPZmZzZXQpO1xuICBpZiAoZGlnZXN0LmJ5dGVMZW5ndGggIT09IHNpemUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29ycmVjdCBsZW5ndGgnKTtcbiAgfVxuICByZXR1cm4gbmV3IERpZ2VzdChjb2RlLCBzaXplLCBkaWdlc3QsIGJ5dGVzKTtcbn07XG5leHBvcnQgY29uc3QgZXF1YWxzID0gKGEsIGIpID0+IHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYS5jb2RlID09PSBiLmNvZGUgJiYgYS5zaXplID09PSBiLnNpemUgJiYgZXF1YWxCeXRlcyhhLmJ5dGVzLCBiLmJ5dGVzKTtcbiAgfVxufTtcbmV4cG9ydCBjbGFzcyBEaWdlc3Qge1xuICBjb25zdHJ1Y3Rvcihjb2RlLCBzaXplLCBkaWdlc3QsIGJ5dGVzKSB7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIHRoaXMuZGlnZXN0ID0gZGlnZXN0O1xuICAgIHRoaXMuYnl0ZXMgPSBieXRlcztcbiAgfVxufSJdLCJuYW1lcyI6WyJjb2VyY2UiLCJlcXVhbHMiLCJlcXVhbEJ5dGVzIiwidmFyaW50IiwiY3JlYXRlIiwiY29kZSIsImRpZ2VzdCIsInNpemUiLCJieXRlTGVuZ3RoIiwic2l6ZU9mZnNldCIsImVuY29kaW5nTGVuZ3RoIiwiZGlnZXN0T2Zmc2V0IiwiYnl0ZXMiLCJVaW50OEFycmF5IiwiZW5jb2RlVG8iLCJzZXQiLCJEaWdlc3QiLCJkZWNvZGUiLCJtdWx0aWhhc2giLCJzdWJhcnJheSIsIkVycm9yIiwiYSIsImIiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/digest.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/hasher.js":
/*!************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/hasher.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hasher: function() { return /* binding */ Hasher; },\n/* harmony export */   from: function() { return /* binding */ from; }\n/* harmony export */ });\n/* harmony import */ var _digest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./digest.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/digest.js\");\n\nconst from = (param)=>{\n    let { name, code, encode } = param;\n    return new Hasher(name, code, encode);\n};\nclass Hasher {\n    digest(input) {\n        if (input instanceof Uint8Array) {\n            const result = this.encode(input);\n            return result instanceof Uint8Array ? _digest_js__WEBPACK_IMPORTED_MODULE_0__.create(this.code, result) : result.then((digest)=>_digest_js__WEBPACK_IMPORTED_MODULE_0__.create(this.code, digest));\n        } else {\n            throw Error(\"Unknown type, must be binary type\");\n        }\n    }\n    constructor(name, code, encode){\n        this.name = name;\n        this.code = code;\n        this.encode = encode;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9oYXNoZXMvaGFzaGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzQztBQUMvQixNQUFNQyxPQUFPO1FBQUMsRUFBQ0MsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBQztXQUFLLElBQUlDLE9BQU9ILE1BQU1DLE1BQU1DO0VBQVE7QUFDdEUsTUFBTUM7SUFNWEMsT0FBT0MsS0FBSyxFQUFFO1FBQ1osSUFBSUEsaUJBQWlCQyxZQUFZO1lBQy9CLE1BQU1DLFNBQVMsSUFBSSxDQUFDTCxNQUFNLENBQUNHO1lBQzNCLE9BQU9FLGtCQUFrQkQsYUFBYVIsOENBQWEsQ0FBQyxJQUFJLENBQUNHLElBQUksRUFBRU0sVUFBVUEsT0FBT0UsSUFBSSxDQUFDTCxDQUFBQSxTQUFVTiw4Q0FBYSxDQUFDLElBQUksQ0FBQ0csSUFBSSxFQUFFRztRQUMxSCxPQUFPO1lBQ0wsTUFBTU0sTUFBTTtRQUNkO0lBQ0Y7SUFaQUMsWUFBWVgsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sQ0FBRTtRQUM5QixJQUFJLENBQUNGLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLE1BQU0sR0FBR0E7SUFDaEI7QUFTRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvaGFzaGVzL2hhc2hlci5qcz9lMTYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIERpZ2VzdCBmcm9tICcuL2RpZ2VzdC5qcyc7XG5leHBvcnQgY29uc3QgZnJvbSA9ICh7bmFtZSwgY29kZSwgZW5jb2RlfSkgPT4gbmV3IEhhc2hlcihuYW1lLCBjb2RlLCBlbmNvZGUpO1xuZXhwb3J0IGNsYXNzIEhhc2hlciB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGNvZGUsIGVuY29kZSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLmVuY29kZSA9IGVuY29kZTtcbiAgfVxuICBkaWdlc3QoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmVuY29kZShpbnB1dCk7XG4gICAgICByZXR1cm4gcmVzdWx0IGluc3RhbmNlb2YgVWludDhBcnJheSA/IERpZ2VzdC5jcmVhdGUodGhpcy5jb2RlLCByZXN1bHQpIDogcmVzdWx0LnRoZW4oZGlnZXN0ID0+IERpZ2VzdC5jcmVhdGUodGhpcy5jb2RlLCBkaWdlc3QpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gdHlwZSwgbXVzdCBiZSBiaW5hcnkgdHlwZScpO1xuICAgIH1cbiAgfVxufSJdLCJuYW1lcyI6WyJEaWdlc3QiLCJmcm9tIiwibmFtZSIsImNvZGUiLCJlbmNvZGUiLCJIYXNoZXIiLCJkaWdlc3QiLCJpbnB1dCIsIlVpbnQ4QXJyYXkiLCJyZXN1bHQiLCJjcmVhdGUiLCJ0aGVuIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/hasher.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/identity.js":
/*!**************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/identity.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   identity: function() { return /* binding */ identity; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bytes.js\");\n/* harmony import */ var _digest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./digest.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/digest.js\");\n\n\nconst code = 0;\nconst name = \"identity\";\nconst encode = _bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce;\nconst digest = (input)=>_digest_js__WEBPACK_IMPORTED_MODULE_1__.create(code, encode(input));\nconst identity = {\n    code,\n    name,\n    encode,\n    digest\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9oYXNoZXMvaWRlbnRpdHkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDO0FBQ0M7QUFDdEMsTUFBTUUsT0FBTztBQUNiLE1BQU1DLE9BQU87QUFDYixNQUFNQyxTQUFTSiw2Q0FBTUE7QUFDckIsTUFBTUssU0FBU0MsQ0FBQUEsUUFBU0wsOENBQWEsQ0FBQ0MsTUFBTUUsT0FBT0U7QUFDNUMsTUFBTUUsV0FBVztJQUN0Qk47SUFDQUM7SUFDQUM7SUFDQUM7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9oYXNoZXMvaWRlbnRpdHkuanM/NjI3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2VyY2UgfSBmcm9tICcuLi9ieXRlcy5qcyc7XG5pbXBvcnQgKiBhcyBEaWdlc3QgZnJvbSAnLi9kaWdlc3QuanMnO1xuY29uc3QgY29kZSA9IDA7XG5jb25zdCBuYW1lID0gJ2lkZW50aXR5JztcbmNvbnN0IGVuY29kZSA9IGNvZXJjZTtcbmNvbnN0IGRpZ2VzdCA9IGlucHV0ID0+IERpZ2VzdC5jcmVhdGUoY29kZSwgZW5jb2RlKGlucHV0KSk7XG5leHBvcnQgY29uc3QgaWRlbnRpdHkgPSB7XG4gIGNvZGUsXG4gIG5hbWUsXG4gIGVuY29kZSxcbiAgZGlnZXN0XG59OyJdLCJuYW1lcyI6WyJjb2VyY2UiLCJEaWdlc3QiLCJjb2RlIiwibmFtZSIsImVuY29kZSIsImRpZ2VzdCIsImlucHV0IiwiY3JlYXRlIiwiaWRlbnRpdHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/identity.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/sha2-browser.js":
/*!******************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/sha2-browser.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha256: function() { return /* binding */ sha256; },\n/* harmony export */   sha512: function() { return /* binding */ sha512; }\n/* harmony export */ });\n/* harmony import */ var _hasher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hasher.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/hasher.js\");\n\nconst sha = (name)=>async (data)=>new Uint8Array(await crypto.subtle.digest(name, data));\nconst sha256 = (0,_hasher_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n    name: \"sha2-256\",\n    code: 18,\n    encode: sha(\"SHA-256\")\n});\nconst sha512 = (0,_hasher_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n    name: \"sha2-512\",\n    code: 19,\n    encode: sha(\"SHA-512\")\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9oYXNoZXMvc2hhMi1icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtQztBQUNuQyxNQUFNQyxNQUFNQyxDQUFBQSxPQUFRLE9BQU1DLE9BQVEsSUFBSUMsV0FBVyxNQUFNQyxPQUFPQyxNQUFNLENBQUNDLE1BQU0sQ0FBQ0wsTUFBTUM7QUFDM0UsTUFBTUssU0FBU1IsZ0RBQUlBLENBQUM7SUFDekJFLE1BQU07SUFDTk8sTUFBTTtJQUNOQyxRQUFRVCxJQUFJO0FBQ2QsR0FBRztBQUNJLE1BQU1VLFNBQVNYLGdEQUFJQSxDQUFDO0lBQ3pCRSxNQUFNO0lBQ05PLE1BQU07SUFDTkMsUUFBUVQsSUFBSTtBQUNkLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2hhc2hlcy9zaGEyLWJyb3dzZXIuanM/YTc1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9oYXNoZXIuanMnO1xuY29uc3Qgc2hhID0gbmFtZSA9PiBhc3luYyBkYXRhID0+IG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KG5hbWUsIGRhdGEpKTtcbmV4cG9ydCBjb25zdCBzaGEyNTYgPSBmcm9tKHtcbiAgbmFtZTogJ3NoYTItMjU2JyxcbiAgY29kZTogMTgsXG4gIGVuY29kZTogc2hhKCdTSEEtMjU2Jylcbn0pO1xuZXhwb3J0IGNvbnN0IHNoYTUxMiA9IGZyb20oe1xuICBuYW1lOiAnc2hhMi01MTInLFxuICBjb2RlOiAxOSxcbiAgZW5jb2RlOiBzaGEoJ1NIQS01MTInKVxufSk7Il0sIm5hbWVzIjpbImZyb20iLCJzaGEiLCJuYW1lIiwiZGF0YSIsIlVpbnQ4QXJyYXkiLCJjcnlwdG8iLCJzdWJ0bGUiLCJkaWdlc3QiLCJzaGEyNTYiLCJjb2RlIiwiZW5jb2RlIiwic2hhNTEyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/sha2-browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CID: function() { return /* reexport safe */ _cid_js__WEBPACK_IMPORTED_MODULE_0__.CID; },\n/* harmony export */   bytes: function() { return /* reexport module object */ _bytes_js__WEBPACK_IMPORTED_MODULE_2__; },\n/* harmony export */   digest: function() { return /* reexport module object */ _hashes_digest_js__WEBPACK_IMPORTED_MODULE_4__; },\n/* harmony export */   hasher: function() { return /* reexport module object */ _hashes_hasher_js__WEBPACK_IMPORTED_MODULE_3__; },\n/* harmony export */   varint: function() { return /* reexport module object */ _varint_js__WEBPACK_IMPORTED_MODULE_1__; }\n/* harmony export */ });\n/* harmony import */ var _cid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cid.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/cid.js\");\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./varint.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/varint.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/bytes.js\");\n/* harmony import */ var _hashes_hasher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hashes/hasher.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/hasher.js\");\n/* harmony import */ var _hashes_digest_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hashes/digest.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/hashes/digest.js\");\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQStCO0FBQ087QUFDRjtBQUNTO0FBQ0E7QUFPM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2luZGV4LmpzP2QxZDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ0lEIH0gZnJvbSAnLi9jaWQuanMnO1xuaW1wb3J0ICogYXMgdmFyaW50IGZyb20gJy4vdmFyaW50LmpzJztcbmltcG9ydCAqIGFzIGJ5dGVzIGZyb20gJy4vYnl0ZXMuanMnO1xuaW1wb3J0ICogYXMgaGFzaGVyIGZyb20gJy4vaGFzaGVzL2hhc2hlci5qcyc7XG5pbXBvcnQgKiBhcyBkaWdlc3QgZnJvbSAnLi9oYXNoZXMvZGlnZXN0LmpzJztcbmV4cG9ydCB7XG4gIENJRCxcbiAgaGFzaGVyLFxuICBkaWdlc3QsXG4gIHZhcmludCxcbiAgYnl0ZXNcbn07Il0sIm5hbWVzIjpbIkNJRCIsInZhcmludCIsImJ5dGVzIiwiaGFzaGVyIiwiZGlnZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/src/varint.js":
/*!*****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/varint.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encodeTo: function() { return /* binding */ encodeTo; },\n/* harmony export */   encodingLength: function() { return /* binding */ encodingLength; }\n/* harmony export */ });\n/* harmony import */ var _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/varint.js */ \"(app-pages-browser)/./node_modules/multiformats/esm/vendor/varint.js\");\n\nconst decode = function(data) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    const code = _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].decode(data, offset);\n    return [\n        code,\n        _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].decode.bytes\n    ];\n};\nconst encodeTo = function(int, target) {\n    let offset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encode(int, target, offset);\n    return target;\n};\nconst encodingLength = (int)=>{\n    return _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodingLength(int);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy92YXJpbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5QztBQUNsQyxNQUFNQyxTQUFTLFNBQUNDO1FBQU1DLDBFQUFTO0lBQ3BDLE1BQU1DLE9BQU9KLHlEQUFNQSxDQUFDQyxNQUFNLENBQUNDLE1BQU1DO0lBQ2pDLE9BQU87UUFDTEM7UUFDQUoseURBQU1BLENBQUNDLE1BQU0sQ0FBQ0ksS0FBSztLQUNwQjtBQUNILEVBQUU7QUFDSyxNQUFNQyxXQUFXLFNBQUNDLEtBQUtDO1FBQVFMLDBFQUFTO0lBQzdDSCx5REFBTUEsQ0FBQ1MsTUFBTSxDQUFDRixLQUFLQyxRQUFRTDtJQUMzQixPQUFPSztBQUNULEVBQUU7QUFDSyxNQUFNRSxpQkFBaUJILENBQUFBO0lBQzVCLE9BQU9QLHlEQUFNQSxDQUFDVSxjQUFjLENBQUNIO0FBQy9CLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL3ZhcmludC5qcz85ZTNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YXJpbnQgZnJvbSAnLi4vdmVuZG9yL3ZhcmludC5qcyc7XG5leHBvcnQgY29uc3QgZGVjb2RlID0gKGRhdGEsIG9mZnNldCA9IDApID0+IHtcbiAgY29uc3QgY29kZSA9IHZhcmludC5kZWNvZGUoZGF0YSwgb2Zmc2V0KTtcbiAgcmV0dXJuIFtcbiAgICBjb2RlLFxuICAgIHZhcmludC5kZWNvZGUuYnl0ZXNcbiAgXTtcbn07XG5leHBvcnQgY29uc3QgZW5jb2RlVG8gPSAoaW50LCB0YXJnZXQsIG9mZnNldCA9IDApID0+IHtcbiAgdmFyaW50LmVuY29kZShpbnQsIHRhcmdldCwgb2Zmc2V0KTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG5leHBvcnQgY29uc3QgZW5jb2RpbmdMZW5ndGggPSBpbnQgPT4ge1xuICByZXR1cm4gdmFyaW50LmVuY29kaW5nTGVuZ3RoKGludCk7XG59OyJdLCJuYW1lcyI6WyJ2YXJpbnQiLCJkZWNvZGUiLCJkYXRhIiwib2Zmc2V0IiwiY29kZSIsImJ5dGVzIiwiZW5jb2RlVG8iLCJpbnQiLCJ0YXJnZXQiLCJlbmNvZGUiLCJlbmNvZGluZ0xlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/src/varint.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/vendor/base-x.js":
/*!********************************************************!*\
  !*** ./node_modules/multiformats/esm/vendor/base-x.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nfunction base(ALPHABET, name) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError(\"Alphabet too long\");\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for(var j = 0; j < BASE_MAP.length; j++){\n        BASE_MAP[j] = 255;\n    }\n    for(var i = 0; i < ALPHABET.length; i++){\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + \" is ambiguous\");\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256);\n    var iFACTOR = Math.log(256) / Math.log(BASE);\n    function encode(source) {\n        if (source instanceof Uint8Array) ;\n        else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        } else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError(\"Expected Uint8Array\");\n        }\n        if (source.length === 0) {\n            return \"\";\n        }\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while(pbegin !== pend && source[pbegin] === 0){\n            pbegin++;\n            zeroes++;\n        }\n        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n        var b58 = new Uint8Array(size);\n        while(pbegin !== pend){\n            var carry = source[pbegin];\n            var i = 0;\n            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){\n                carry += 256 * b58[it1] >>> 0;\n                b58[it1] = carry % BASE >>> 0;\n                carry = carry / BASE >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error(\"Non-zero carry\");\n            }\n            length = i;\n            pbegin++;\n        }\n        var it2 = size - length;\n        while(it2 !== size && b58[it2] === 0){\n            it2++;\n        }\n        var str = LEADER.repeat(zeroes);\n        for(; it2 < size; ++it2){\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    function decodeUnsafe(source) {\n        if (typeof source !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        if (source[psz] === \" \") {\n            return;\n        }\n        var zeroes = 0;\n        var length = 0;\n        while(source[psz] === LEADER){\n            zeroes++;\n            psz++;\n        }\n        var size = (source.length - psz) * FACTOR + 1 >>> 0;\n        var b256 = new Uint8Array(size);\n        while(source[psz]){\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){\n                carry += BASE * b256[it3] >>> 0;\n                b256[it3] = carry % 256 >>> 0;\n                carry = carry / 256 >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error(\"Non-zero carry\");\n            }\n            length = i;\n            psz++;\n        }\n        if (source[psz] === \" \") {\n            return;\n        }\n        var it4 = size - length;\n        while(it4 !== size && b256[it4] === 0){\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while(it4 !== size){\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(\"Non-\".concat(name, \" character\"));\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\n/* harmony default export */ __webpack_exports__[\"default\"] = (_brrp__multiformats_scope_baseX);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/vendor/base-x.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/multiformats/esm/vendor/varint.js":
/*!********************************************************!*\
  !*** ./node_modules/multiformats/esm/vendor/varint.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nvar encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n    out = out || [];\n    offset = offset || 0;\n    var oldOffset = offset;\n    while(num >= INT){\n        out[offset++] = num & 255 | MSB;\n        num /= 128;\n    }\n    while(num & MSBALL){\n        out[offset++] = num & 255 | MSB;\n        num >>>= 7;\n    }\n    out[offset] = num | 0;\n    encode.bytes = offset - oldOffset + 1;\n    return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n    do {\n        if (counter >= l) {\n            read.bytes = 0;\n            throw new RangeError(\"Could not decode varint\");\n        }\n        b = buf[counter++];\n        res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n        shift += 7;\n    }while (b >= MSB$1);\n    read.bytes = counter - offset;\n    return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function(value) {\n    return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n    encode: encode_1,\n    decode: decode,\n    encodingLength: length\n};\nvar _brrp_varint = varint;\n/* harmony default export */ __webpack_exports__[\"default\"] = (_brrp_varint);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3ZlbmRvci92YXJpbnQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFdBQVdDO0FBQ2YsSUFBSUMsTUFBTSxLQUFLQyxPQUFPLEtBQUtDLFNBQVMsQ0FBQ0QsTUFBTUUsTUFBTUMsS0FBS0MsR0FBRyxDQUFDLEdBQUc7QUFDN0QsU0FBU04sT0FBT08sR0FBRyxFQUFFQyxHQUFHLEVBQUVDLE1BQU07SUFDOUJELE1BQU1BLE9BQU8sRUFBRTtJQUNmQyxTQUFTQSxVQUFVO0lBQ25CLElBQUlDLFlBQVlEO0lBQ2hCLE1BQU9GLE9BQU9ILElBQUs7UUFDakJJLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHRixNQUFNLE1BQU1OO1FBQzVCTSxPQUFPO0lBQ1Q7SUFDQSxNQUFPQSxNQUFNSixPQUFRO1FBQ25CSyxHQUFHLENBQUNDLFNBQVMsR0FBR0YsTUFBTSxNQUFNTjtRQUM1Qk0sU0FBUztJQUNYO0lBQ0FDLEdBQUcsQ0FBQ0MsT0FBTyxHQUFHRixNQUFNO0lBQ3BCUCxPQUFPVyxLQUFLLEdBQUdGLFNBQVNDLFlBQVk7SUFDcEMsT0FBT0Y7QUFDVDtBQUNBLElBQUlJLFNBQVNDO0FBQ2IsSUFBSUMsUUFBUSxLQUFLQyxTQUFTO0FBQzFCLFNBQVNGLEtBQUtHLEdBQUcsRUFBRVAsTUFBTTtJQUN2QixJQUFJUSxNQUFNLEdBQUdSLFNBQVNBLFVBQVUsR0FBR1MsUUFBUSxHQUFHQyxVQUFVVixRQUFRVyxHQUFHQyxJQUFJTCxJQUFJTSxNQUFNO0lBQ2pGLEdBQUc7UUFDRCxJQUFJSCxXQUFXRSxHQUFHO1lBQ2hCUixLQUFLRixLQUFLLEdBQUc7WUFDYixNQUFNLElBQUlZLFdBQVc7UUFDdkI7UUFDQUgsSUFBSUosR0FBRyxDQUFDRyxVQUFVO1FBQ2xCRixPQUFPQyxRQUFRLEtBQUssQ0FBQ0UsSUFBSUwsTUFBSyxLQUFNRyxRQUFRLENBQUNFLElBQUlMLE1BQUssSUFBS1YsS0FBS0MsR0FBRyxDQUFDLEdBQUdZO1FBQ3ZFQSxTQUFTO0lBQ1gsUUFBU0UsS0FBS04sT0FBTztJQUNyQkQsS0FBS0YsS0FBSyxHQUFHUSxVQUFVVjtJQUN2QixPQUFPUTtBQUNUO0FBQ0EsSUFBSU8sS0FBS25CLEtBQUtDLEdBQUcsQ0FBQyxHQUFHO0FBQ3JCLElBQUltQixLQUFLcEIsS0FBS0MsR0FBRyxDQUFDLEdBQUc7QUFDckIsSUFBSW9CLEtBQUtyQixLQUFLQyxHQUFHLENBQUMsR0FBRztBQUNyQixJQUFJcUIsS0FBS3RCLEtBQUtDLEdBQUcsQ0FBQyxHQUFHO0FBQ3JCLElBQUlzQixLQUFLdkIsS0FBS0MsR0FBRyxDQUFDLEdBQUc7QUFDckIsSUFBSXVCLEtBQUt4QixLQUFLQyxHQUFHLENBQUMsR0FBRztBQUNyQixJQUFJd0IsS0FBS3pCLEtBQUtDLEdBQUcsQ0FBQyxHQUFHO0FBQ3JCLElBQUl5QixLQUFLMUIsS0FBS0MsR0FBRyxDQUFDLEdBQUc7QUFDckIsSUFBSTBCLEtBQUszQixLQUFLQyxHQUFHLENBQUMsR0FBRztBQUNyQixJQUFJZ0IsU0FBUyxTQUFVVyxLQUFLO0lBQzFCLE9BQU9BLFFBQVFULEtBQUssSUFBSVMsUUFBUVIsS0FBSyxJQUFJUSxRQUFRUCxLQUFLLElBQUlPLFFBQVFOLEtBQUssSUFBSU0sUUFBUUwsS0FBSyxJQUFJSyxRQUFRSixLQUFLLElBQUlJLFFBQVFILEtBQUssSUFBSUcsUUFBUUYsS0FBSyxJQUFJRSxRQUFRRCxLQUFLLElBQUk7QUFDbEs7QUFDQSxJQUFJRSxTQUFTO0lBQ1hsQyxRQUFRRDtJQUNSYSxRQUFRQTtJQUNSdUIsZ0JBQWdCYjtBQUNsQjtBQUNBLElBQUljLGVBQWVGO0FBQ25CLCtEQUFlRSxZQUFZQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3ZlbmRvci92YXJpbnQuanM/NjM4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZW5jb2RlXzEgPSBlbmNvZGU7XG52YXIgTVNCID0gMTI4LCBSRVNUID0gMTI3LCBNU0JBTEwgPSB+UkVTVCwgSU5UID0gTWF0aC5wb3coMiwgMzEpO1xuZnVuY3Rpb24gZW5jb2RlKG51bSwgb3V0LCBvZmZzZXQpIHtcbiAgb3V0ID0gb3V0IHx8IFtdO1xuICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgdmFyIG9sZE9mZnNldCA9IG9mZnNldDtcbiAgd2hpbGUgKG51bSA+PSBJTlQpIHtcbiAgICBvdXRbb2Zmc2V0KytdID0gbnVtICYgMjU1IHwgTVNCO1xuICAgIG51bSAvPSAxMjg7XG4gIH1cbiAgd2hpbGUgKG51bSAmIE1TQkFMTCkge1xuICAgIG91dFtvZmZzZXQrK10gPSBudW0gJiAyNTUgfCBNU0I7XG4gICAgbnVtID4+Pj0gNztcbiAgfVxuICBvdXRbb2Zmc2V0XSA9IG51bSB8IDA7XG4gIGVuY29kZS5ieXRlcyA9IG9mZnNldCAtIG9sZE9mZnNldCArIDE7XG4gIHJldHVybiBvdXQ7XG59XG52YXIgZGVjb2RlID0gcmVhZDtcbnZhciBNU0IkMSA9IDEyOCwgUkVTVCQxID0gMTI3O1xuZnVuY3Rpb24gcmVhZChidWYsIG9mZnNldCkge1xuICB2YXIgcmVzID0gMCwgb2Zmc2V0ID0gb2Zmc2V0IHx8IDAsIHNoaWZ0ID0gMCwgY291bnRlciA9IG9mZnNldCwgYiwgbCA9IGJ1Zi5sZW5ndGg7XG4gIGRvIHtcbiAgICBpZiAoY291bnRlciA+PSBsKSB7XG4gICAgICByZWFkLmJ5dGVzID0gMDtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdDb3VsZCBub3QgZGVjb2RlIHZhcmludCcpO1xuICAgIH1cbiAgICBiID0gYnVmW2NvdW50ZXIrK107XG4gICAgcmVzICs9IHNoaWZ0IDwgMjggPyAoYiAmIFJFU1QkMSkgPDwgc2hpZnQgOiAoYiAmIFJFU1QkMSkgKiBNYXRoLnBvdygyLCBzaGlmdCk7XG4gICAgc2hpZnQgKz0gNztcbiAgfSB3aGlsZSAoYiA+PSBNU0IkMSk7XG4gIHJlYWQuYnl0ZXMgPSBjb3VudGVyIC0gb2Zmc2V0O1xuICByZXR1cm4gcmVzO1xufVxudmFyIE4xID0gTWF0aC5wb3coMiwgNyk7XG52YXIgTjIgPSBNYXRoLnBvdygyLCAxNCk7XG52YXIgTjMgPSBNYXRoLnBvdygyLCAyMSk7XG52YXIgTjQgPSBNYXRoLnBvdygyLCAyOCk7XG52YXIgTjUgPSBNYXRoLnBvdygyLCAzNSk7XG52YXIgTjYgPSBNYXRoLnBvdygyLCA0Mik7XG52YXIgTjcgPSBNYXRoLnBvdygyLCA0OSk7XG52YXIgTjggPSBNYXRoLnBvdygyLCA1Nik7XG52YXIgTjkgPSBNYXRoLnBvdygyLCA2Myk7XG52YXIgbGVuZ3RoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8IE4xID8gMSA6IHZhbHVlIDwgTjIgPyAyIDogdmFsdWUgPCBOMyA/IDMgOiB2YWx1ZSA8IE40ID8gNCA6IHZhbHVlIDwgTjUgPyA1IDogdmFsdWUgPCBONiA/IDYgOiB2YWx1ZSA8IE43ID8gNyA6IHZhbHVlIDwgTjggPyA4IDogdmFsdWUgPCBOOSA/IDkgOiAxMDtcbn07XG52YXIgdmFyaW50ID0ge1xuICBlbmNvZGU6IGVuY29kZV8xLFxuICBkZWNvZGU6IGRlY29kZSxcbiAgZW5jb2RpbmdMZW5ndGg6IGxlbmd0aFxufTtcbnZhciBfYnJycF92YXJpbnQgPSB2YXJpbnQ7XG5leHBvcnQgZGVmYXVsdCBfYnJycF92YXJpbnQ7Il0sIm5hbWVzIjpbImVuY29kZV8xIiwiZW5jb2RlIiwiTVNCIiwiUkVTVCIsIk1TQkFMTCIsIklOVCIsIk1hdGgiLCJwb3ciLCJudW0iLCJvdXQiLCJvZmZzZXQiLCJvbGRPZmZzZXQiLCJieXRlcyIsImRlY29kZSIsInJlYWQiLCJNU0IkMSIsIlJFU1QkMSIsImJ1ZiIsInJlcyIsInNoaWZ0IiwiY291bnRlciIsImIiLCJsIiwibGVuZ3RoIiwiUmFuZ2VFcnJvciIsIk4xIiwiTjIiLCJOMyIsIk40IiwiTjUiLCJONiIsIk43IiwiTjgiLCJOOSIsInZhbHVlIiwidmFyaW50IiwiZW5jb2RpbmdMZW5ndGgiLCJfYnJycF92YXJpbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/multiformats/esm/vendor/varint.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uint8arrays/esm/src/alloc.js":
/*!***************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/alloc.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alloc: function() { return /* binding */ alloc; },\n/* harmony export */   allocUnsafe: function() { return /* binding */ allocUnsafe; }\n/* harmony export */ });\nfunction alloc() {\n    let size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n    if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n        return globalThis.Buffer.alloc(size);\n    }\n    return new Uint8Array(size);\n}\nfunction allocUnsafe() {\n    let size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n    if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n        return globalThis.Buffer.allocUnsafe(size);\n    }\n    return new Uint8Array(size);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2FsbG9jLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0E7UUFBTUMsT0FBQUEsaUVBQU87SUFDM0IsSUFBSUMsV0FBV0MsTUFBTSxJQUFJLFFBQVFELFdBQVdDLE1BQU0sQ0FBQ0gsS0FBSyxJQUFJLE1BQU07UUFDaEUsT0FBT0UsV0FBV0MsTUFBTSxDQUFDSCxLQUFLLENBQUNDO0lBQ2pDO0lBQ0EsT0FBTyxJQUFJRyxXQUFXSDtBQUN4QjtBQUNPLFNBQVNJO1FBQVlKLE9BQUFBLGlFQUFPO0lBQ2pDLElBQUlDLFdBQVdDLE1BQU0sSUFBSSxRQUFRRCxXQUFXQyxNQUFNLENBQUNFLFdBQVcsSUFBSSxNQUFNO1FBQ3RFLE9BQU9ILFdBQVdDLE1BQU0sQ0FBQ0UsV0FBVyxDQUFDSjtJQUN2QztJQUNBLE9BQU8sSUFBSUcsV0FBV0g7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMvYWxsb2MuanM/ZTdhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYWxsb2Moc2l6ZSA9IDApIHtcbiAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyICE9IG51bGwgJiYgZ2xvYmFsVGhpcy5CdWZmZXIuYWxsb2MgIT0gbnVsbCkge1xuICAgIHJldHVybiBnbG9iYWxUaGlzLkJ1ZmZlci5hbGxvYyhzaXplKTtcbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYWxsb2NVbnNhZmUoc2l6ZSA9IDApIHtcbiAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyICE9IG51bGwgJiYgZ2xvYmFsVGhpcy5CdWZmZXIuYWxsb2NVbnNhZmUgIT0gbnVsbCkge1xuICAgIHJldHVybiBnbG9iYWxUaGlzLkJ1ZmZlci5hbGxvY1Vuc2FmZShzaXplKTtcbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG59Il0sIm5hbWVzIjpbImFsbG9jIiwic2l6ZSIsImdsb2JhbFRoaXMiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uint8arrays/esm/src/alloc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uint8arrays/esm/src/compare.js":
/*!*****************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/compare.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: function() { return /* binding */ compare; }\n/* harmony export */ });\nfunction compare(a, b) {\n    for(let i = 0; i < a.byteLength; i++){\n        if (a[i] < b[i]) {\n            return -1;\n        }\n        if (a[i] > b[i]) {\n            return 1;\n        }\n    }\n    if (a.byteLength > b.byteLength) {\n        return 1;\n    }\n    if (a.byteLength < b.byteLength) {\n        return -1;\n    }\n    return 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2NvbXBhcmUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLFFBQVFDLENBQUMsRUFBRUMsQ0FBQztJQUMxQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsRUFBRUcsVUFBVSxFQUFFRCxJQUFLO1FBQ3JDLElBQUlGLENBQUMsQ0FBQ0UsRUFBRSxHQUFHRCxDQUFDLENBQUNDLEVBQUUsRUFBRTtZQUNmLE9BQU8sQ0FBQztRQUNWO1FBQ0EsSUFBSUYsQ0FBQyxDQUFDRSxFQUFFLEdBQUdELENBQUMsQ0FBQ0MsRUFBRSxFQUFFO1lBQ2YsT0FBTztRQUNUO0lBQ0Y7SUFDQSxJQUFJRixFQUFFRyxVQUFVLEdBQUdGLEVBQUVFLFVBQVUsRUFBRTtRQUMvQixPQUFPO0lBQ1Q7SUFDQSxJQUFJSCxFQUFFRyxVQUFVLEdBQUdGLEVBQUVFLFVBQVUsRUFBRTtRQUMvQixPQUFPLENBQUM7SUFDVjtJQUNBLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9jb21wYXJlLmpzPzBjZDAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGEuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFbaV0gPCBiW2ldKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChhW2ldID4gYltpXSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICB9XG4gIGlmIChhLmJ5dGVMZW5ndGggPiBiLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBpZiAoYS5ieXRlTGVuZ3RoIDwgYi5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHJldHVybiAwO1xufSJdLCJuYW1lcyI6WyJjb21wYXJlIiwiYSIsImIiLCJpIiwiYnl0ZUxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uint8arrays/esm/src/compare.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uint8arrays/esm/src/concat.js":
/*!****************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/concat.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: function() { return /* binding */ concat; }\n/* harmony export */ });\n/* harmony import */ var _alloc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alloc.js */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/alloc.js\");\n\nfunction concat(arrays, length) {\n    if (!length) {\n        length = arrays.reduce((acc, curr)=>acc + curr.length, 0);\n    }\n    const output = (0,_alloc_js__WEBPACK_IMPORTED_MODULE_0__.allocUnsafe)(length);\n    let offset = 0;\n    for (const arr of arrays){\n        output.set(arr, offset);\n        offset += arr.length;\n    }\n    return output;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2NvbmNhdC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUNsQyxTQUFTQyxPQUFPQyxNQUFNLEVBQUVDLE1BQU07SUFDbkMsSUFBSSxDQUFDQSxRQUFRO1FBQ1hBLFNBQVNELE9BQU9FLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQyxPQUFTRCxNQUFNQyxLQUFLSCxNQUFNLEVBQUU7SUFDM0Q7SUFDQSxNQUFNSSxTQUFTUCxzREFBV0EsQ0FBQ0c7SUFDM0IsSUFBSUssU0FBUztJQUNiLEtBQUssTUFBTUMsT0FBT1AsT0FBUTtRQUN4QkssT0FBT0csR0FBRyxDQUFDRCxLQUFLRDtRQUNoQkEsVUFBVUMsSUFBSU4sTUFBTTtJQUN0QjtJQUNBLE9BQU9JO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMvY29uY2F0LmpzP2E0NGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWxsb2NVbnNhZmUgfSBmcm9tICcuL2FsbG9jLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoYXJyYXlzLCBsZW5ndGgpIHtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSBhcnJheXMucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyArIGN1cnIubGVuZ3RoLCAwKTtcbiAgfVxuICBjb25zdCBvdXRwdXQgPSBhbGxvY1Vuc2FmZShsZW5ndGgpO1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgZm9yIChjb25zdCBhcnIgb2YgYXJyYXlzKSB7XG4gICAgb3V0cHV0LnNldChhcnIsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGFyci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn0iXSwibmFtZXMiOlsiYWxsb2NVbnNhZmUiLCJjb25jYXQiLCJhcnJheXMiLCJsZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyIiwib3V0cHV0Iiwib2Zmc2V0IiwiYXJyIiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uint8arrays/esm/src/concat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uint8arrays/esm/src/equals.js":
/*!****************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/equals.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equals: function() { return /* binding */ equals; }\n/* harmony export */ });\nfunction equals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a.byteLength !== b.byteLength) {\n        return false;\n    }\n    for(let i = 0; i < a.byteLength; i++){\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2VxdWFscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsT0FBT0MsQ0FBQyxFQUFFQyxDQUFDO0lBQ3pCLElBQUlELE1BQU1DLEdBQUc7UUFDWCxPQUFPO0lBQ1Q7SUFDQSxJQUFJRCxFQUFFRSxVQUFVLEtBQUtELEVBQUVDLFVBQVUsRUFBRTtRQUNqQyxPQUFPO0lBQ1Q7SUFDQSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsRUFBRUUsVUFBVSxFQUFFQyxJQUFLO1FBQ3JDLElBQUlILENBQUMsQ0FBQ0csRUFBRSxLQUFLRixDQUFDLENBQUNFLEVBQUUsRUFBRTtZQUNqQixPQUFPO1FBQ1Q7SUFDRjtJQUNBLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9lcXVhbHMuanM/NmU5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufSJdLCJuYW1lcyI6WyJlcXVhbHMiLCJhIiwiYiIsImJ5dGVMZW5ndGgiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uint8arrays/esm/src/equals.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uint8arrays/esm/src/from-string.js":
/*!*********************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/from-string.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromString: function() { return /* binding */ fromString; }\n/* harmony export */ });\n/* harmony import */ var _util_bases_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/bases.js */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/util/bases.js\");\n\nfunction fromString(string) {\n    let encoding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n    const base = _util_bases_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][encoding];\n    if (!base) {\n        throw new Error('Unsupported encoding \"'.concat(encoding, '\"'));\n    }\n    if ((encoding === \"utf8\" || encoding === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return globalThis.Buffer.from(string, \"utf8\");\n    }\n    return base.decoder.decode(\"\".concat(base.prefix).concat(string));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2Zyb20tc3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9DO0FBQzdCLFNBQVNDLFdBQVdDLE1BQU07UUFBRUMsV0FBQUEsaUVBQVc7SUFDNUMsTUFBTUMsT0FBT0osc0RBQUssQ0FBQ0csU0FBUztJQUM1QixJQUFJLENBQUNDLE1BQU07UUFDVCxNQUFNLElBQUlDLE1BQU0seUJBQW9DLE9BQVZGLFVBQVU7SUFDdEQ7SUFDQSxJQUFJLENBQUNBLGFBQWEsVUFBVUEsYUFBYSxPQUFNLEtBQU1HLFdBQVdDLE1BQU0sSUFBSSxRQUFRRCxXQUFXQyxNQUFNLENBQUNDLElBQUksSUFBSSxNQUFNO1FBQ2hILE9BQU9GLFdBQVdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTixRQUFRO0lBQ3hDO0lBQ0EsT0FBT0UsS0FBS0ssT0FBTyxDQUFDQyxNQUFNLENBQUMsR0FBb0JSLE9BQWhCRSxLQUFLTyxNQUFNLEVBQWEsT0FBUlQ7QUFDakQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMvZnJvbS1zdHJpbmcuanM/YTEzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmFzZXMgZnJvbSAnLi91dGlsL2Jhc2VzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tU3RyaW5nKHN0cmluZywgZW5jb2RpbmcgPSAndXRmOCcpIHtcbiAgY29uc3QgYmFzZSA9IGJhc2VzW2VuY29kaW5nXTtcbiAgaWYgKCFiYXNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBlbmNvZGluZyBcIiR7IGVuY29kaW5nIH1cImApO1xuICB9XG4gIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi04JykgJiYgZ2xvYmFsVGhpcy5CdWZmZXIgIT0gbnVsbCAmJiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tICE9IG51bGwpIHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShzdHJpbmcsICd1dGY4Jyk7XG4gIH1cbiAgcmV0dXJuIGJhc2UuZGVjb2Rlci5kZWNvZGUoYCR7IGJhc2UucHJlZml4IH0keyBzdHJpbmcgfWApO1xufSJdLCJuYW1lcyI6WyJiYXNlcyIsImZyb21TdHJpbmciLCJzdHJpbmciLCJlbmNvZGluZyIsImJhc2UiLCJFcnJvciIsImdsb2JhbFRoaXMiLCJCdWZmZXIiLCJmcm9tIiwiZGVjb2RlciIsImRlY29kZSIsInByZWZpeCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uint8arrays/esm/src/from-string.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uint8arrays/esm/src/index.js":
/*!***************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: function() { return /* reexport safe */ _compare_js__WEBPACK_IMPORTED_MODULE_0__.compare; },\n/* harmony export */   concat: function() { return /* reexport safe */ _concat_js__WEBPACK_IMPORTED_MODULE_1__.concat; },\n/* harmony export */   equals: function() { return /* reexport safe */ _equals_js__WEBPACK_IMPORTED_MODULE_2__.equals; },\n/* harmony export */   fromString: function() { return /* reexport safe */ _from_string_js__WEBPACK_IMPORTED_MODULE_3__.fromString; },\n/* harmony export */   toString: function() { return /* reexport safe */ _to_string_js__WEBPACK_IMPORTED_MODULE_4__.toString; },\n/* harmony export */   xor: function() { return /* reexport safe */ _xor_js__WEBPACK_IMPORTED_MODULE_5__.xor; }\n/* harmony export */ });\n/* harmony import */ var _compare_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compare.js */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/compare.js\");\n/* harmony import */ var _concat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./concat.js */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/concat.js\");\n/* harmony import */ var _equals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./equals.js */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/equals.js\");\n/* harmony import */ var _from_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./from-string.js */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/from-string.js\");\n/* harmony import */ var _to_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./to-string.js */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/to-string.js\");\n/* harmony import */ var _xor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./xor.js */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/xor.js\");\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUF1QztBQUNGO0FBQ0E7QUFDUztBQUNKO0FBQ1g7QUFRN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMvaW5kZXguanM/YmVhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wYXJlIH0gZnJvbSAnLi9jb21wYXJlLmpzJztcbmltcG9ydCB7IGNvbmNhdCB9IGZyb20gJy4vY29uY2F0LmpzJztcbmltcG9ydCB7IGVxdWFscyB9IGZyb20gJy4vZXF1YWxzLmpzJztcbmltcG9ydCB7IGZyb21TdHJpbmcgfSBmcm9tICcuL2Zyb20tc3RyaW5nLmpzJztcbmltcG9ydCB7IHRvU3RyaW5nIH0gZnJvbSAnLi90by1zdHJpbmcuanMnO1xuaW1wb3J0IHsgeG9yIH0gZnJvbSAnLi94b3IuanMnO1xuZXhwb3J0IHtcbiAgY29tcGFyZSxcbiAgY29uY2F0LFxuICBlcXVhbHMsXG4gIGZyb21TdHJpbmcsXG4gIHRvU3RyaW5nLFxuICB4b3Jcbn07Il0sIm5hbWVzIjpbImNvbXBhcmUiLCJjb25jYXQiLCJlcXVhbHMiLCJmcm9tU3RyaW5nIiwidG9TdHJpbmciLCJ4b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uint8arrays/esm/src/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uint8arrays/esm/src/to-string.js":
/*!*******************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/to-string.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toString: function() { return /* binding */ toString; }\n/* harmony export */ });\n/* harmony import */ var _util_bases_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/bases.js */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/util/bases.js\");\n\nfunction toString(array) {\n    let encoding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n    const base = _util_bases_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][encoding];\n    if (!base) {\n        throw new Error('Unsupported encoding \"'.concat(encoding, '\"'));\n    }\n    if ((encoding === \"utf8\" || encoding === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString(\"utf8\");\n    }\n    return base.encoder.encode(array).substring(1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL3RvLXN0cmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvQztBQUM3QixTQUFTQyxTQUFTQyxLQUFLO1FBQUVDLFdBQUFBLGlFQUFXO0lBQ3pDLE1BQU1DLE9BQU9KLHNEQUFLLENBQUNHLFNBQVM7SUFDNUIsSUFBSSxDQUFDQyxNQUFNO1FBQ1QsTUFBTSxJQUFJQyxNQUFNLHlCQUFvQyxPQUFWRixVQUFVO0lBQ3REO0lBQ0EsSUFBSSxDQUFDQSxhQUFhLFVBQVVBLGFBQWEsT0FBTSxLQUFNRyxXQUFXQyxNQUFNLElBQUksUUFBUUQsV0FBV0MsTUFBTSxDQUFDQyxJQUFJLElBQUksTUFBTTtRQUNoSCxPQUFPRixXQUFXQyxNQUFNLENBQUNDLElBQUksQ0FBQ04sTUFBTU8sTUFBTSxFQUFFUCxNQUFNUSxVQUFVLEVBQUVSLE1BQU1TLFVBQVUsRUFBRVYsUUFBUSxDQUFDO0lBQzNGO0lBQ0EsT0FBT0csS0FBS1EsT0FBTyxDQUFDQyxNQUFNLENBQUNYLE9BQU9ZLFNBQVMsQ0FBQztBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy90by1zdHJpbmcuanM/YjQwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmFzZXMgZnJvbSAnLi91dGlsL2Jhc2VzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiB0b1N0cmluZyhhcnJheSwgZW5jb2RpbmcgPSAndXRmOCcpIHtcbiAgY29uc3QgYmFzZSA9IGJhc2VzW2VuY29kaW5nXTtcbiAgaWYgKCFiYXNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBlbmNvZGluZyBcIiR7IGVuY29kaW5nIH1cImApO1xuICB9XG4gIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi04JykgJiYgZ2xvYmFsVGhpcy5CdWZmZXIgIT0gbnVsbCAmJiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tICE9IG51bGwpIHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShhcnJheS5idWZmZXIsIGFycmF5LmJ5dGVPZmZzZXQsIGFycmF5LmJ5dGVMZW5ndGgpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gIH1cbiAgcmV0dXJuIGJhc2UuZW5jb2Rlci5lbmNvZGUoYXJyYXkpLnN1YnN0cmluZygxKTtcbn0iXSwibmFtZXMiOlsiYmFzZXMiLCJ0b1N0cmluZyIsImFycmF5IiwiZW5jb2RpbmciLCJiYXNlIiwiRXJyb3IiLCJnbG9iYWxUaGlzIiwiQnVmZmVyIiwiZnJvbSIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiZW5jb2RlciIsImVuY29kZSIsInN1YnN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uint8arrays/esm/src/to-string.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uint8arrays/esm/src/util/bases.js":
/*!********************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/util/bases.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var multiformats_basics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/basics */ \"(app-pages-browser)/./node_modules/multiformats/esm/src/basics.js\");\n/* harmony import */ var _alloc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../alloc.js */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/alloc.js\");\n\n\nfunction createCodec(name, prefix, encode, decode) {\n    return {\n        name,\n        prefix,\n        encoder: {\n            name,\n            prefix,\n            encode\n        },\n        decoder: {\n            decode\n        }\n    };\n}\nconst string = createCodec(\"utf8\", \"u\", (buf)=>{\n    const decoder = new TextDecoder(\"utf8\");\n    return \"u\" + decoder.decode(buf);\n}, (str)=>{\n    const encoder = new TextEncoder();\n    return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec(\"ascii\", \"a\", (buf)=>{\n    let string = \"a\";\n    for(let i = 0; i < buf.length; i++){\n        string += String.fromCharCode(buf[i]);\n    }\n    return string;\n}, (str)=>{\n    str = str.substring(1);\n    const buf = (0,_alloc_js__WEBPACK_IMPORTED_MODULE_1__.allocUnsafe)(str.length);\n    for(let i = 0; i < str.length; i++){\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n});\nconst BASES = {\n    utf8: string,\n    \"utf-8\": string,\n    hex: multiformats_basics__WEBPACK_IMPORTED_MODULE_0__.bases.base16,\n    latin1: ascii,\n    ascii: ascii,\n    binary: ascii,\n    ...multiformats_basics__WEBPACK_IMPORTED_MODULE_0__.bases\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (BASES);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL3V0aWwvYmFzZXMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQTRDO0FBQ0Y7QUFDMUMsU0FBU0UsWUFBWUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsTUFBTTtJQUMvQyxPQUFPO1FBQ0xIO1FBQ0FDO1FBQ0FHLFNBQVM7WUFDUEo7WUFDQUM7WUFDQUM7UUFDRjtRQUNBRyxTQUFTO1lBQUVGO1FBQU87SUFDcEI7QUFDRjtBQUNBLE1BQU1HLFNBQVNQLFlBQVksUUFBUSxLQUFLUSxDQUFBQTtJQUN0QyxNQUFNRixVQUFVLElBQUlHLFlBQVk7SUFDaEMsT0FBTyxNQUFNSCxRQUFRRixNQUFNLENBQUNJO0FBQzlCLEdBQUdFLENBQUFBO0lBQ0QsTUFBTUwsVUFBVSxJQUFJTTtJQUNwQixPQUFPTixRQUFRRixNQUFNLENBQUNPLElBQUlFLFNBQVMsQ0FBQztBQUN0QztBQUNBLE1BQU1DLFFBQVFiLFlBQVksU0FBUyxLQUFLUSxDQUFBQTtJQUN0QyxJQUFJRCxTQUFTO0lBQ2IsSUFBSyxJQUFJTyxJQUFJLEdBQUdBLElBQUlOLElBQUlPLE1BQU0sRUFBRUQsSUFBSztRQUNuQ1AsVUFBVVMsT0FBT0MsWUFBWSxDQUFDVCxHQUFHLENBQUNNLEVBQUU7SUFDdEM7SUFDQSxPQUFPUDtBQUNULEdBQUdHLENBQUFBO0lBQ0RBLE1BQU1BLElBQUlFLFNBQVMsQ0FBQztJQUNwQixNQUFNSixNQUFNVCxzREFBV0EsQ0FBQ1csSUFBSUssTUFBTTtJQUNsQyxJQUFLLElBQUlELElBQUksR0FBR0EsSUFBSUosSUFBSUssTUFBTSxFQUFFRCxJQUFLO1FBQ25DTixHQUFHLENBQUNNLEVBQUUsR0FBR0osSUFBSVEsVUFBVSxDQUFDSjtJQUMxQjtJQUNBLE9BQU9OO0FBQ1Q7QUFDQSxNQUFNVyxRQUFRO0lBQ1pDLE1BQU1iO0lBQ04sU0FBU0E7SUFDVGMsS0FBS3ZCLHNEQUFLQSxDQUFDd0IsTUFBTTtJQUNqQkMsUUFBUVY7SUFDUkEsT0FBT0E7SUFDUFcsUUFBUVg7SUFDUixHQUFHZixzREFBSztBQUNWO0FBQ0EsK0RBQWVxQixLQUFLQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL3V0aWwvYmFzZXMuanM/NTRkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYXNlcyB9IGZyb20gJ211bHRpZm9ybWF0cy9iYXNpY3MnO1xuaW1wb3J0IHsgYWxsb2NVbnNhZmUgfSBmcm9tICcuLi9hbGxvYy5qcyc7XG5mdW5jdGlvbiBjcmVhdGVDb2RlYyhuYW1lLCBwcmVmaXgsIGVuY29kZSwgZGVjb2RlKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBwcmVmaXgsXG4gICAgZW5jb2Rlcjoge1xuICAgICAgbmFtZSxcbiAgICAgIHByZWZpeCxcbiAgICAgIGVuY29kZVxuICAgIH0sXG4gICAgZGVjb2RlcjogeyBkZWNvZGUgfVxuICB9O1xufVxuY29uc3Qgc3RyaW5nID0gY3JlYXRlQ29kZWMoJ3V0ZjgnLCAndScsIGJ1ZiA9PiB7XG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0ZjgnKTtcbiAgcmV0dXJuICd1JyArIGRlY29kZXIuZGVjb2RlKGJ1Zik7XG59LCBzdHIgPT4ge1xuICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gIHJldHVybiBlbmNvZGVyLmVuY29kZShzdHIuc3Vic3RyaW5nKDEpKTtcbn0pO1xuY29uc3QgYXNjaWkgPSBjcmVhdGVDb2RlYygnYXNjaWknLCAnYScsIGJ1ZiA9PiB7XG4gIGxldCBzdHJpbmcgPSAnYSc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nO1xufSwgc3RyID0+IHtcbiAgc3RyID0gc3RyLnN1YnN0cmluZygxKTtcbiAgY29uc3QgYnVmID0gYWxsb2NVbnNhZmUoc3RyLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgYnVmW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgcmV0dXJuIGJ1Zjtcbn0pO1xuY29uc3QgQkFTRVMgPSB7XG4gIHV0Zjg6IHN0cmluZyxcbiAgJ3V0Zi04Jzogc3RyaW5nLFxuICBoZXg6IGJhc2VzLmJhc2UxNixcbiAgbGF0aW4xOiBhc2NpaSxcbiAgYXNjaWk6IGFzY2lpLFxuICBiaW5hcnk6IGFzY2lpLFxuICAuLi5iYXNlc1xufTtcbmV4cG9ydCBkZWZhdWx0IEJBU0VTOyJdLCJuYW1lcyI6WyJiYXNlcyIsImFsbG9jVW5zYWZlIiwiY3JlYXRlQ29kZWMiLCJuYW1lIiwicHJlZml4IiwiZW5jb2RlIiwiZGVjb2RlIiwiZW5jb2RlciIsImRlY29kZXIiLCJzdHJpbmciLCJidWYiLCJUZXh0RGVjb2RlciIsInN0ciIsIlRleHRFbmNvZGVyIiwic3Vic3RyaW5nIiwiYXNjaWkiLCJpIiwibGVuZ3RoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2hhckNvZGVBdCIsIkJBU0VTIiwidXRmOCIsImhleCIsImJhc2UxNiIsImxhdGluMSIsImJpbmFyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uint8arrays/esm/src/util/bases.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uint8arrays/esm/src/xor.js":
/*!*************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/xor.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xor: function() { return /* binding */ xor; }\n/* harmony export */ });\n/* harmony import */ var _alloc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alloc.js */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/alloc.js\");\n\nfunction xor(a, b) {\n    if (a.length !== b.length) {\n        throw new Error(\"Inputs should have the same length\");\n    }\n    const result = (0,_alloc_js__WEBPACK_IMPORTED_MODULE_0__.allocUnsafe)(a.length);\n    for(let i = 0; i < a.length; i++){\n        result[i] = a[i] ^ b[i];\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL3hvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUNsQyxTQUFTQyxJQUFJQyxDQUFDLEVBQUVDLENBQUM7SUFDdEIsSUFBSUQsRUFBRUUsTUFBTSxLQUFLRCxFQUFFQyxNQUFNLEVBQUU7UUFDekIsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBQ0EsTUFBTUMsU0FBU04sc0RBQVdBLENBQUNFLEVBQUVFLE1BQU07SUFDbkMsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlMLEVBQUVFLE1BQU0sRUFBRUcsSUFBSztRQUNqQ0QsTUFBTSxDQUFDQyxFQUFFLEdBQUdMLENBQUMsQ0FBQ0ssRUFBRSxHQUFHSixDQUFDLENBQUNJLEVBQUU7SUFDekI7SUFDQSxPQUFPRDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL3hvci5qcz9hMTZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFsbG9jVW5zYWZlIH0gZnJvbSAnLi9hbGxvYy5qcyc7XG5leHBvcnQgZnVuY3Rpb24geG9yKGEsIGIpIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXRzIHNob3VsZCBoYXZlIHRoZSBzYW1lIGxlbmd0aCcpO1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IGFsbG9jVW5zYWZlKGEubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0W2ldID0gYVtpXSBeIGJbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0iXSwibmFtZXMiOlsiYWxsb2NVbnNhZmUiLCJ4b3IiLCJhIiwiYiIsImxlbmd0aCIsIkVycm9yIiwicmVzdWx0IiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uint8arrays/esm/src/xor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/elliptic/package.json":
/*!********************************************!*\
  !*** ./node_modules/elliptic/package.json ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = JSON.parse('{"name":"elliptic","version":"6.6.1","description":"EC cryptography","main":"lib/elliptic.js","files":["lib"],"scripts":{"lint":"eslint lib test","lint:fix":"npm run lint -- --fix","unit":"istanbul test _mocha --reporter=spec test/index.js","test":"npm run lint && npm run unit","version":"grunt dist && git add dist/"},"repository":{"type":"git","url":"git@github.com:indutny/elliptic"},"keywords":["EC","Elliptic","curve","Cryptography"],"author":"Fedor Indutny <fedor@indutny.com>","license":"MIT","bugs":{"url":"https://github.com/indutny/elliptic/issues"},"homepage":"https://github.com/indutny/elliptic","devDependencies":{"brfs":"^2.0.2","coveralls":"^3.1.0","eslint":"^7.6.0","grunt":"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.5","mocha":"^8.0.1"},"dependencies":{"bn.js":"^4.11.9","brorand":"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1","inherits":"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"}}');

/***/ })

}]);